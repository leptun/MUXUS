
USBC_PD-USB_2.0-nucleo_G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c044  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  0801c224  0801c224  0002c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc90  0801cc90  00030348  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc90  0801cc90  0002cc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc98  0801cc98  00030348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc98  0801cc98  0002cc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc9c  0801cc9c  0002cc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  0801cca0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047d8  20000348  0801cfe8  00030348  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  20004b20  0801cfe8  00034b20  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b7dc  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009530  00000000  00000000  0007bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d50  00000000  00000000  00085088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b98  00000000  00000000  00087dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef7d  00000000  00000000  0008a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033e6c  00000000  00000000  000998ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b2e7  00000000  00000000  000cd759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000314d  00000000  00000000  001f8a40  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000274  00000000  00000000  001fbb8d  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001fbe04  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 000003bf  00000000  00000000  001fbe28  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012708  00000000  00000000  001fc1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000348 	.word	0x20000348
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801c20c 	.word	0x0801c20c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000034c 	.word	0x2000034c
 800021c:	0801c20c 	.word	0x0801c20c

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	4605      	mov	r5, r0
 8000226:	2600      	movs	r6, #0
 8000228:	2d01      	cmp	r5, #1
 800022a:	460f      	mov	r7, r1
 800022c:	4614      	mov	r4, r2
 800022e:	4698      	mov	r8, r3
 8000230:	d86e      	bhi.n	8000310 <USBPD_CAD_Init+0xf0>
 8000232:	200c      	movs	r0, #12
 8000234:	f01b fb30 	bl	801b898 <malloc>
 8000238:	4b57      	ldr	r3, [pc, #348]	; (8000398 <.text_6>)
 800023a:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 800023e:	f8cc 0004 	str.w	r0, [ip, #4]
 8000242:	b908      	cbnz	r0, 8000248 <USBPD_CAD_Init+0x28>
 8000244:	2603      	movs	r6, #3
 8000246:	e064      	b.n	8000312 <USBPD_CAD_Init+0xf2>
 8000248:	4642      	mov	r2, r8
 800024a:	4639      	mov	r1, r7
 800024c:	2700      	movs	r7, #0
 800024e:	46b6      	mov	lr, r6
 8000250:	46b0      	mov	r8, r6
 8000252:	e880 4180 	stmia.w	r0, {r7, r8, lr}
 8000256:	7818      	ldrb	r0, [r3, #0]
 8000258:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800039c <.text_7>
 800025c:	4f50      	ldr	r7, [pc, #320]	; (80003a0 <.text_8>)
 800025e:	f8df e144 	ldr.w	lr, [pc, #324]	; 80003a4 <.text_9>
 8000262:	1c40      	adds	r0, r0, #1
 8000264:	7018      	strb	r0, [r3, #0]
 8000266:	f24c 2a40 	movw	sl, #49728	; 0xc240
 800026a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800026e:	4b4e      	ldr	r3, [pc, #312]	; (80003a8 <.text_10>)
 8000270:	6002      	str	r2, [r0, #0]
 8000272:	7206      	strb	r6, [r0, #8]
 8000274:	6041      	str	r1, [r0, #4]
 8000276:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 800027a:	f8d8 9000 	ldr.w	r9, [r8]
 800027e:	ea00 0909 	and.w	r9, r0, r9
 8000282:	45d1      	cmp	r9, sl
 8000284:	bf1f      	itttt	ne
 8000286:	f8d8 8000 	ldrne.w	r8, [r8]
 800028a:	ea00 0008 	andne.w	r0, r0, r8
 800028e:	f24c 2970 	movwne	r9, #49776	; 0xc270
 8000292:	4548      	cmpne	r0, r9
 8000294:	f04f 3cff 	mov.w	ip, #4294967295
 8000298:	d110      	bne.n	80002bc <USBPD_CAD_Init+0x9c>
 800029a:	f8df a110 	ldr.w	sl, [pc, #272]	; 80003ac <.text_11>
 800029e:	f8da 0000 	ldr.w	r0, [sl]
 80002a2:	2800      	cmp	r0, #0
 80002a4:	bf01      	itttt	eq
 80002a6:	f8df 8108 	ldreq.w	r8, [pc, #264]	; 80003b0 <.text_12>
 80002aa:	f8d8 0000 	ldreq.w	r0, [r8]
 80002ae:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 80002b2:	f5b0 6f8a 	cmpeq.w	r0, #1104	; 0x450
 80002b6:	bf08      	it	eq
 80002b8:	483e      	ldreq	r0, [pc, #248]	; (80003b4 <.text_13>)
 80002ba:	d000      	beq.n	80002be <USBPD_CAD_Init+0x9e>
 80002bc:	483e      	ldr	r0, [pc, #248]	; (80003b8 <.text_14>)
 80002be:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80002c2:	f8d0 9000 	ldr.w	r9, [r0]
 80002c6:	f8d0 a014 	ldr.w	sl, [r0, #20]
 80002ca:	f8c0 e014 	str.w	lr, [r0, #20]
 80002ce:	f8c0 c010 	str.w	ip, [r0, #16]
 80002d2:	f04f 0c01 	mov.w	ip, #1
 80002d6:	f8c0 c008 	str.w	ip, [r0, #8]
 80002da:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80002de:	f1bc 0f01 	cmp.w	ip, #1
 80002e2:	d0fa      	beq.n	80002da <USBPD_CAD_Init+0xba>
 80002e4:	6007      	str	r7, [r0, #0]
 80002e6:	6807      	ldr	r7, [r0, #0]
 80002e8:	601f      	str	r7, [r3, #0]
 80002ea:	f8c0 9010 	str.w	r9, [r0, #16]
 80002ee:	f8c0 a014 	str.w	sl, [r0, #20]
 80002f2:	f8c0 8008 	str.w	r8, [r0, #8]
 80002f6:	6883      	ldr	r3, [r0, #8]
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6083      	str	r3, [r0, #8]
 80002fe:	b129      	cbz	r1, 800030c <USBPD_CAD_Init+0xec>
 8000300:	684b      	ldr	r3, [r1, #4]
 8000302:	4621      	mov	r1, r4
 8000304:	4628      	mov	r0, r5
 8000306:	f00d fc2f 	bl	800db68 <CAD_Init>
 800030a:	e002      	b.n	8000312 <USBPD_CAD_Init+0xf2>
 800030c:	2602      	movs	r6, #2
 800030e:	e000      	b.n	8000312 <USBPD_CAD_Init+0xf2>
 8000310:	2601      	movs	r6, #1
 8000312:	4630      	mov	r0, r6
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000318 <USBPD_CAD_PortEnable>:
 8000318:	2802      	cmp	r0, #2
 800031a:	d204      	bcs.n	8000326 <USBPD_CAD_PortEnable+0xe>
 800031c:	4a1e      	ldr	r2, [pc, #120]	; (8000398 <.text_6>)
 800031e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8000322:	6843      	ldr	r3, [r0, #4]
 8000324:	7219      	strb	r1, [r3, #8]
 8000326:	4770      	bx	lr

08000328 <USBPD_CAD_Process>:
 8000328:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800032a:	2100      	movs	r1, #0
 800032c:	f88d 1000 	strb.w	r1, [sp]
 8000330:	9101      	str	r1, [sp, #4]
 8000332:	f04f 35ff 	mov.w	r5, #4294967295
 8000336:	2600      	movs	r6, #0
 8000338:	4c17      	ldr	r4, [pc, #92]	; (8000398 <.text_6>)
 800033a:	7820      	ldrb	r0, [r4, #0]
 800033c:	4286      	cmp	r6, r0
 800033e:	da28      	bge.n	8000392 <USBPD_CAD_Process+0x6a>
 8000340:	1d21      	adds	r1, r4, #4
 8000342:	f851 0026 	ldr.w	r0, [r1, r6, lsl #2]
 8000346:	7a01      	ldrb	r1, [r0, #8]
 8000348:	2901      	cmp	r1, #1
 800034a:	d11f      	bne.n	800038c <USBPD_CAD_Process+0x64>
 800034c:	aa01      	add	r2, sp, #4
 800034e:	4669      	mov	r1, sp
 8000350:	4630      	mov	r0, r6
 8000352:	f00d fd95 	bl	800de80 <CAD_StateMachine>
 8000356:	42a8      	cmp	r0, r5
 8000358:	bf98      	it	ls
 800035a:	4605      	movls	r5, r0
 800035c:	f89d 0000 	ldrb.w	r0, [sp]
 8000360:	b1a0      	cbz	r0, 800038c <USBPD_CAD_Process+0x64>
 8000362:	1d21      	adds	r1, r4, #4
 8000364:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	680a      	ldr	r2, [r1, #0]
 800036c:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8000370:	2800      	cmp	r0, #0
 8000372:	bf14      	ite	ne
 8000374:	f042 0208 	orrne.w	r2, r2, #8
 8000378:	f022 0208 	biceq.w	r2, r2, #8
 800037c:	600a      	str	r2, [r1, #0]
 800037e:	4630      	mov	r0, r6
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	9a01      	ldr	r2, [sp, #4]
 8000384:	f89d 1000 	ldrb.w	r1, [sp]
 8000388:	681f      	ldr	r7, [r3, #0]
 800038a:	47b8      	blx	r7
 800038c:	1c76      	adds	r6, r6, #1
 800038e:	b2f6      	uxtb	r6, r6
 8000390:	e7d3      	b.n	800033a <USBPD_CAD_Process+0x12>
 8000392:	4628      	mov	r0, r5
 8000394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000398 <.text_6>:
 8000398:	20000364 	.word	0x20000364

0800039c <.text_7>:
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <.text_8>:
 80003a0:	f407a5c2 	.word	0xf407a5c2

080003a4 <.text_9>:
 80003a4:	04c11db7 	.word	0x04c11db7

080003a8 <.text_10>:
 80003a8:	20000370 	.word	0x20000370

080003ac <.text_11>:
 80003ac:	e0042000 	.word	0xe0042000

080003b0 <.text_12>:
 80003b0:	5c001000 	.word	0x5c001000

080003b4 <.text_13>:
 80003b4:	58024c00 	.word	0x58024c00

080003b8 <.text_14>:
 80003b8:	40023000 	.word	0x40023000

080003bc <USBPD_CAD_AssertRd>:
 80003bc:	b510      	push	{r4, lr}
 80003be:	4604      	mov	r4, r0
 80003c0:	f00f f8a2 	bl	800f508 <USBPDM1_DeAssertRp>
 80003c4:	4620      	mov	r0, r4
 80003c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003ca:	f00f b8a9 	b.w	800f520 <USBPDM1_AssertRd>

080003ce <USBPD_CAD_AssertRp>:
 80003ce:	b510      	push	{r4, lr}
 80003d0:	4604      	mov	r4, r0
 80003d2:	f00f f92b 	bl	800f62c <USBPDM1_DeAssertRd>
 80003d6:	4620      	mov	r0, r4
 80003d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003dc:	f00e bffe 	b.w	800f3dc <USBPDM1_AssertRp>

080003e0 <USBPD_CAD_EnterErrorRecovery>:
 80003e0:	f00d bca4 	b.w	800dd2c <CAD_Enter_ErrorRecovery>

080003e4 <USBPD_CAD_SRC_SetRpResistor>:
 80003e4:	b580      	push	{r7, lr}
 80003e6:	f00d fcfd 	bl	800dde4 <CAD_Set_ResistorRp>
 80003ea:	b100      	cbz	r0, 80003ee <USBPD_CAD_SRC_SetRpResistor+0xa>
 80003ec:	2004      	movs	r0, #4
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <USBPD_CAD_SetRpResistor>:
 80003f0:	e7f8      	b.n	80003e4 <USBPD_CAD_SRC_SetRpResistor>

080003f2 <USBPD_CAD_GetMemoryConsumption>:
 80003f2:	2018      	movs	r0, #24
 80003f4:	4770      	bx	lr
	...

080003f8 <USBPD_PE_Init>:
 80003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003fc:	460e      	mov	r6, r1
 80003fe:	4605      	mov	r5, r0
 8000400:	6870      	ldr	r0, [r6, #4]
 8000402:	4690      	mov	r8, r2
 8000404:	461f      	mov	r7, r3
 8000406:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800040a:	b108      	cbz	r0, 8000410 <USBPD_PE_Init+0x18>
 800040c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800040e:	b108      	cbz	r0, 8000414 <USBPD_PE_Init+0x1c>
 8000410:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000412:	b908      	cbnz	r0, 8000418 <USBPD_PE_Init+0x20>
 8000414:	201b      	movs	r0, #27
 8000416:	e043      	b.n	80004a0 <USBPD_PE_Init+0xa8>
 8000418:	2d01      	cmp	r5, #1
 800041a:	d82d      	bhi.n	8000478 <USBPD_PE_Init+0x80>
 800041c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000420:	f01b fa3a 	bl	801b898 <malloc>
 8000424:	0004      	movs	r4, r0
 8000426:	f8df 0928 	ldr.w	r0, [pc, #2344]	; 8000d50 <.text_43>
 800042a:	4629      	mov	r1, r5
 800042c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000430:	bf08      	it	eq
 8000432:	2016      	moveq	r0, #22
 8000434:	d034      	beq.n	80004a0 <USBPD_PE_Init+0xa8>
 8000436:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800043a:	4620      	mov	r0, r4
 800043c:	f01b f9fa 	bl	801b834 <__aeabi_memclr>
 8000440:	6026      	str	r6, [r4, #0]
 8000442:	f8c4 8004 	str.w	r8, [r4, #4]
 8000446:	7425      	strb	r5, [r4, #16]
 8000448:	60a7      	str	r7, [r4, #8]
 800044a:	f204 438e 	addw	r3, r4, #1166	; 0x48e
 800044e:	f204 2281 	addw	r2, r4, #641	; 0x281
 8000452:	4631      	mov	r1, r6
 8000454:	4628      	mov	r0, r5
 8000456:	f004 fce6 	bl	8004e26 <USBPD_PRL_Init>
 800045a:	0001      	movs	r1, r0
 800045c:	d120      	bne.n	80004a0 <USBPD_PE_Init+0xa8>
 800045e:	6820      	ldr	r0, [r4, #0]
 8000460:	6841      	ldr	r1, [r0, #4]
 8000462:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000466:	2800      	cmp	r0, #0
 8000468:	6860      	ldr	r0, [r4, #4]
 800046a:	6801      	ldr	r1, [r0, #0]
 800046c:	d006      	beq.n	800047c <USBPD_PE_Init+0x84>
 800046e:	f041 0108 	orr.w	r1, r1, #8
 8000472:	6001      	str	r1, [r0, #0]
 8000474:	2201      	movs	r2, #1
 8000476:	e005      	b.n	8000484 <USBPD_PE_Init+0x8c>
 8000478:	2017      	movs	r0, #23
 800047a:	e011      	b.n	80004a0 <USBPD_PE_Init+0xa8>
 800047c:	f021 0108 	bic.w	r1, r1, #8
 8000480:	6001      	str	r1, [r0, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	7933      	ldrb	r3, [r6, #4]
 8000486:	f003 0303 	and.w	r3, r3, #3
 800048a:	4611      	mov	r1, r2
 800048c:	4628      	mov	r0, r5
 800048e:	f004 fd02 	bl	8004e96 <USBPD_PRL_SetHeader>
 8000492:	7931      	ldrb	r1, [r6, #4]
 8000494:	f001 0103 	and.w	r1, r1, #3
 8000498:	4628      	mov	r0, r5
 800049a:	f004 fd29 	bl	8004ef0 <USBPD_PRL_CBL_SetHeaderSpecification>
 800049e:	2000      	movs	r0, #0
 80004a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004a4 <USBPD_PE_TimerCounter>:
 80004a4:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8000d50 <.text_43>
 80004a8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80004ac:	8bc1      	ldrh	r1, [r0, #30]
 80004ae:	044a      	lsls	r2, r1, #17
 80004b0:	d002      	beq.n	80004b8 <USBPD_PE_TimerCounter+0x14>
 80004b2:	8bc1      	ldrh	r1, [r0, #30]
 80004b4:	1e4a      	subs	r2, r1, #1
 80004b6:	83c2      	strh	r2, [r0, #30]
 80004b8:	8c01      	ldrh	r1, [r0, #32]
 80004ba:	044a      	lsls	r2, r1, #17
 80004bc:	d002      	beq.n	80004c4 <USBPD_PE_TimerCounter+0x20>
 80004be:	8c01      	ldrh	r1, [r0, #32]
 80004c0:	1e4a      	subs	r2, r1, #1
 80004c2:	8402      	strh	r2, [r0, #32]
 80004c4:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 80004c6:	044a      	lsls	r2, r1, #17
 80004c8:	d002      	beq.n	80004d0 <USBPD_PE_TimerCounter+0x2c>
 80004ca:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 80004cc:	1e4a      	subs	r2, r1, #1
 80004ce:	84c2      	strh	r2, [r0, #38]	; 0x26
 80004d0:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80004d2:	044a      	lsls	r2, r1, #17
 80004d4:	d002      	beq.n	80004dc <USBPD_PE_TimerCounter+0x38>
 80004d6:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80004d8:	1e4a      	subs	r2, r1, #1
 80004da:	8442      	strh	r2, [r0, #34]	; 0x22
 80004dc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004de:	044a      	lsls	r2, r1, #17
 80004e0:	d002      	beq.n	80004e8 <USBPD_PE_TimerCounter+0x44>
 80004e2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004e4:	1e4a      	subs	r2, r1, #1
 80004e6:	8482      	strh	r2, [r0, #36]	; 0x24
 80004e8:	4770      	bx	lr

080004ea <USBPD_PE_TimerCounteUpdate>:
 80004ea:	f8df 2864 	ldr.w	r2, [pc, #2148]	; 8000d50 <.text_43>
 80004ee:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80004f2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80004f6:	da1a      	bge.n	800052e <USBPD_PE_TimerCounteUpdate+0x44>
 80004f8:	8bc2      	ldrh	r2, [r0, #30]
 80004fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fe:	0453      	lsls	r3, r2, #17
 8000500:	bf1c      	itt	ne
 8000502:	8bc2      	ldrhne	r2, [r0, #30]
 8000504:	83c1      	strhne	r1, [r0, #30]
 8000506:	8c02      	ldrh	r2, [r0, #32]
 8000508:	0453      	lsls	r3, r2, #17
 800050a:	bf1c      	itt	ne
 800050c:	8c02      	ldrhne	r2, [r0, #32]
 800050e:	8401      	strhne	r1, [r0, #32]
 8000510:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8000512:	0453      	lsls	r3, r2, #17
 8000514:	bf1c      	itt	ne
 8000516:	8cc2      	ldrhne	r2, [r0, #38]	; 0x26
 8000518:	84c1      	strhne	r1, [r0, #38]	; 0x26
 800051a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800051c:	0453      	lsls	r3, r2, #17
 800051e:	bf1c      	itt	ne
 8000520:	8c42      	ldrhne	r2, [r0, #34]	; 0x22
 8000522:	8441      	strhne	r1, [r0, #34]	; 0x22
 8000524:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8000526:	0453      	lsls	r3, r2, #17
 8000528:	bf1c      	itt	ne
 800052a:	8c82      	ldrhne	r2, [r0, #36]	; 0x24
 800052c:	8481      	strhne	r1, [r0, #36]	; 0x24
 800052e:	4770      	bx	lr

08000530 <USBPD_PE_IsCableConnected>:
 8000530:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 8000d50 <.text_43>
 8000534:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000538:	6842      	ldr	r2, [r0, #4]
 800053a:	6813      	ldr	r3, [r2, #0]
 800053c:	f361 330c 	bfi	r3, r1, #12, #1
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	2148      	movs	r1, #72	; 0x48
 8000544:	7441      	strb	r1, [r0, #17]
 8000546:	4770      	bx	lr

08000548 <USBPD_PE_StateMachine_DRP>:
 8000548:	f8df 1804 	ldr.w	r1, [pc, #2052]	; 8000d50 <.text_43>
 800054c:	4602      	mov	r2, r0
 800054e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000552:	6859      	ldr	r1, [r3, #4]
 8000554:	680a      	ldr	r2, [r1, #0]
 8000556:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800055a:	2900      	cmp	r1, #0
 800055c:	bf18      	it	ne
 800055e:	f002 b985 	bne.w	800286c <USBPD_PE_StateMachine_SRC>
 8000562:	f001 bb41 	b.w	8001be8 <USBPD_PE_StateMachine_SNK>

08000566 <USBPD_PE_Notification>:
 8000566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000568:	2802      	cmp	r0, #2
 800056a:	4604      	mov	r4, r0
 800056c:	460d      	mov	r5, r1
 800056e:	d214      	bcs.n	800059a <__iar_annotation$$tailcall+0x2>
 8000570:	2600      	movs	r6, #0
 8000572:	9600      	str	r6, [sp, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	f8df 77dc 	ldr.w	r7, [pc, #2012]	; 8000d54 <.text_44>
 800057a:	683e      	ldr	r6, [r7, #0]
 800057c:	462a      	mov	r2, r5
 800057e:	4621      	mov	r1, r4
 8000580:	2009      	movs	r0, #9
 8000582:	47b0      	blx	r6
 8000584:	f8df 27c8 	ldr.w	r2, [pc, #1992]	; 8000d50 <.text_43>
 8000588:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	68d3      	ldr	r3, [r2, #12]
 8000590:	4629      	mov	r1, r5
 8000592:	4620      	mov	r0, r4
 8000594:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000598 <__iar_annotation$$tailcall>:
 8000598:	4718      	bx	r3
 800059a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800059c <USBPD_PE_InitVDM_Callback>:
 800059c:	f8df 27b0 	ldr.w	r2, [pc, #1968]	; 8000d50 <.text_43>
 80005a0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80005a4:	60c1      	str	r1, [r0, #12]
 80005a6:	4770      	bx	lr

080005a8 <USBPD_PE_Request_HardReset>:
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000d50 <.text_43>
 80005ae:	4602      	mov	r2, r0
 80005b0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005b4:	230f      	movs	r3, #15
 80005b6:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
 80005ba:	6889      	ldr	r1, [r1, #8]
 80005bc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005be:	4790      	blx	r2
 80005c0:	2000      	movs	r0, #0
 80005c2:	bd02      	pop	{r1, pc}

080005c4 <USBPD_PE_Request_CableReset>:
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	f000 fbb3 	bl	8000d30 <.text_41>
 80005ca:	6853      	ldr	r3, [r2, #4]
 80005cc:	681c      	ldr	r4, [r3, #0]
 80005ce:	f248 7108 	movw	r1, #34568	; 0x8708
 80005d2:	400c      	ands	r4, r1
 80005d4:	f248 3508 	movw	r5, #33544	; 0x8308
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d105      	bne.n	80005e8 <USBPD_PE_Request_CableReset+0x24>
 80005dc:	6891      	ldr	r1, [r2, #8]
 80005de:	2399      	movs	r3, #153	; 0x99
 80005e0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 80005e4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005e6:	4790      	blx	r2
 80005e8:	2010      	movs	r0, #16
 80005ea:	bd32      	pop	{r1, r4, r5, pc}

080005ec <USBPD_PE_Request_CtrlMessage>:
 80005ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005f0:	460c      	mov	r4, r1
 80005f2:	4680      	mov	r8, r0
 80005f4:	4617      	mov	r7, r2
 80005f6:	f8df 1758 	ldr.w	r1, [pc, #1880]	; 8000d50 <.text_43>
 80005fa:	b092      	sub	sp, #72	; 0x48
 80005fc:	4642      	mov	r2, r8
 80005fe:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8000602:	f8df 1c60 	ldr.w	r1, [pc, #3168]	; 8001264 <.text_62>
 8000606:	4668      	mov	r0, sp
 8000608:	2248      	movs	r2, #72	; 0x48
 800060a:	f01b f916 	bl	801b83a <__aeabi_memcpy>
 800060e:	f106 0132 	add.w	r1, r6, #50	; 0x32
 8000612:	7808      	ldrb	r0, [r1, #0]
 8000614:	b920      	cbnz	r0, 8000620 <USBPD_PE_Request_CtrlMessage+0x34>
 8000616:	6870      	ldr	r0, [r6, #4]
 8000618:	6803      	ldr	r3, [r0, #0]
 800061a:	f3c3 3000 	ubfx	r0, r3, #12, #1
 800061e:	b908      	cbnz	r0, 8000624 <USBPD_PE_Request_CtrlMessage+0x38>
 8000620:	2003      	movs	r0, #3
 8000622:	e068      	b.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x10a>
 8000624:	6830      	ldr	r0, [r6, #0]
 8000626:	6842      	ldr	r2, [r0, #4]
 8000628:	089d      	lsrs	r5, r3, #2
 800062a:	08d2      	lsrs	r2, r2, #3
 800062c:	f005 0e01 	and.w	lr, r5, #1
 8000630:	f3c3 2502 	ubfx	r5, r3, #8, #3
 8000634:	f002 0201 	and.w	r2, r2, #1
 8000638:	f08e 0c01 	eor.w	ip, lr, #1
 800063c:	2d03      	cmp	r5, #3
 800063e:	bf0c      	ite	eq
 8000640:	2501      	moveq	r5, #1
 8000642:	2500      	movne	r5, #0
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800064c:	2b02      	cmp	r3, #2
 800064e:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
 800065c:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8000660:	f012 0f03 	tst.w	r2, #3
 8000664:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000668:	bf18      	it	ne
 800066a:	f042 0210 	orrne.w	r2, r2, #16
 800066e:	f012 0f05 	tst.w	r2, #5
 8000672:	f81d 5003 	ldrb.w	r5, [sp, r3]
 8000676:	bf18      	it	ne
 8000678:	f042 0220 	orrne.w	r2, r2, #32
 800067c:	402a      	ands	r2, r5
 800067e:	42aa      	cmp	r2, r5
 8000680:	d117      	bne.n	80006b2 <USBPD_PE_Request_CtrlMessage+0xc6>
 8000682:	2200      	movs	r2, #0
 8000684:	704a      	strb	r2, [r1, #1]
 8000686:	2c05      	cmp	r4, #5
 8000688:	f206 225e 	addw	r2, r6, #606	; 0x25e
 800068c:	d027      	beq.n	80006de <USBPD_PE_Request_CtrlMessage+0xf2>
 800068e:	2c0b      	cmp	r4, #11
 8000690:	d00c      	beq.n	80006ac <USBPD_PE_Request_CtrlMessage+0xc0>
 8000692:	2c0d      	cmp	r4, #13
 8000694:	d00f      	beq.n	80006b6 <USBPD_PE_Request_CtrlMessage+0xca>
 8000696:	2c11      	cmp	r4, #17
 8000698:	d00f      	beq.n	80006ba <USBPD_PE_Request_CtrlMessage+0xce>
 800069a:	2c12      	cmp	r4, #18
 800069c:	d00f      	beq.n	80006be <USBPD_PE_Request_CtrlMessage+0xd2>
 800069e:	2c14      	cmp	r4, #20
 80006a0:	d00f      	beq.n	80006c2 <USBPD_PE_Request_CtrlMessage+0xd6>
 80006a2:	2c15      	cmp	r4, #21
 80006a4:	d012      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0xe0>
 80006a6:	2c16      	cmp	r4, #22
 80006a8:	d019      	beq.n	80006de <USBPD_PE_Request_CtrlMessage+0xf2>
 80006aa:	e019      	b.n	80006e0 <USBPD_PE_Request_CtrlMessage+0xf4>
 80006ac:	68b4      	ldr	r4, [r6, #8]
 80006ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80006b0:	b9b0      	cbnz	r0, 80006e0 <USBPD_PE_Request_CtrlMessage+0xf4>
 80006b2:	2002      	movs	r0, #2
 80006b4:	e01f      	b.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x10a>
 80006b6:	704f      	strb	r7, [r1, #1]
 80006b8:	e012      	b.n	80006e0 <USBPD_PE_Request_CtrlMessage+0xf4>
 80006ba:	2011      	movs	r0, #17
 80006bc:	e00d      	b.n	80006da <USBPD_PE_Request_CtrlMessage+0xee>
 80006be:	2012      	movs	r0, #18
 80006c0:	e00b      	b.n	80006da <USBPD_PE_Request_CtrlMessage+0xee>
 80006c2:	8900      	ldrh	r0, [r0, #8]
 80006c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80006c8:	b950      	cbnz	r0, 80006e0 <USBPD_PE_Request_CtrlMessage+0xf4>
 80006ca:	e003      	b.n	80006d4 <USBPD_PE_Request_CtrlMessage+0xe8>
 80006cc:	8900      	ldrh	r0, [r0, #8]
 80006ce:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80006d2:	b908      	cbnz	r0, 80006d8 <USBPD_PE_Request_CtrlMessage+0xec>
 80006d4:	2010      	movs	r0, #16
 80006d6:	e00e      	b.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x10a>
 80006d8:	2015      	movs	r0, #21
 80006da:	7010      	strb	r0, [r2, #0]
 80006dc:	e000      	b.n	80006e0 <USBPD_PE_Request_CtrlMessage+0xf4>
 80006de:	7014      	strb	r4, [r2, #0]
 80006e0:	eb0d 0003 	add.w	r0, sp, r3
 80006e4:	7844      	ldrb	r4, [r0, #1]
 80006e6:	7054      	strb	r4, [r2, #1]
 80006e8:	7882      	ldrb	r2, [r0, #2]
 80006ea:	700a      	strb	r2, [r1, #0]
 80006ec:	4640      	mov	r0, r8
 80006ee:	68b1      	ldr	r1, [r6, #8]
 80006f0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80006f2:	4790      	blx	r2
 80006f4:	2000      	movs	r0, #0
 80006f6:	b012      	add	sp, #72	; 0x48
 80006f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080006fc <USBPD_PE_Request_DataMessage>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	f8df 3b68 	ldr.w	r3, [pc, #2920]	; 8001268 <.text_63>
 8000702:	4604      	mov	r4, r0
 8000704:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8000708:	f105 0632 	add.w	r6, r5, #50	; 0x32
 800070c:	2402      	movs	r4, #2
 800070e:	7833      	ldrb	r3, [r6, #0]
 8000710:	b923      	cbnz	r3, 800071c <USBPD_PE_Request_DataMessage+0x20>
 8000712:	686f      	ldr	r7, [r5, #4]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800071a:	b90b      	cbnz	r3, 8000720 <USBPD_PE_Request_DataMessage+0x24>
 800071c:	2003      	movs	r0, #3
 800071e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000720:	2300      	movs	r3, #0
 8000722:	7073      	strb	r3, [r6, #1]
 8000724:	2901      	cmp	r1, #1
 8000726:	f240 3302 	movw	r3, #770	; 0x302
 800072a:	f240 7c03 	movw	ip, #1795	; 0x703
 800072e:	d004      	beq.n	800073a <USBPD_PE_Request_DataMessage+0x3e>
 8000730:	2906      	cmp	r1, #6
 8000732:	d011      	beq.n	8000758 <USBPD_PE_Request_DataMessage+0x5c>
 8000734:	2907      	cmp	r1, #7
 8000736:	d019      	beq.n	800076c <USBPD_PE_Request_DataMessage+0x70>
 8000738:	e024      	b.n	8000784 <USBPD_PE_Request_DataMessage+0x88>
 800073a:	6839      	ldr	r1, [r7, #0]
 800073c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8000740:	b141      	cbz	r1, 8000754 <USBPD_PE_Request_DataMessage+0x58>
 8000742:	2101      	movs	r1, #1
 8000744:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 8000748:	2207      	movs	r2, #7
 800074a:	7032      	strb	r2, [r6, #0]
 800074c:	2400      	movs	r4, #0
 800074e:	68a9      	ldr	r1, [r5, #8]
 8000750:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000752:	4790      	blx	r2
 8000754:	4620      	mov	r0, r4
 8000756:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000758:	6839      	ldr	r1, [r7, #0]
 800075a:	ea0c 0101 	and.w	r1, ip, r1
 800075e:	4299      	cmp	r1, r3
 8000760:	d1f8      	bne.n	8000754 <USBPD_PE_Request_DataMessage+0x58>
 8000762:	6812      	ldr	r2, [r2, #0]
 8000764:	62aa      	str	r2, [r5, #40]	; 0x28
 8000766:	212b      	movs	r1, #43	; 0x2b
 8000768:	7031      	strb	r1, [r6, #0]
 800076a:	e7ef      	b.n	800074c <USBPD_PE_Request_DataMessage+0x50>
 800076c:	683f      	ldr	r7, [r7, #0]
 800076e:	ea0c 0107 	and.w	r1, ip, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d1ee      	bne.n	8000754 <USBPD_PE_Request_DataMessage+0x58>
 8000776:	6811      	ldr	r1, [r2, #0]
 8000778:	62a9      	str	r1, [r5, #40]	; 0x28
 800077a:	225d      	movs	r2, #93	; 0x5d
 800077c:	f885 225f 	strb.w	r2, [r5, #607]	; 0x25f
 8000780:	2162      	movs	r1, #98	; 0x62
 8000782:	e7f1      	b.n	8000768 <USBPD_PE_Request_DataMessage+0x6c>
 8000784:	2410      	movs	r4, #16
 8000786:	e7e5      	b.n	8000754 <USBPD_PE_Request_DataMessage+0x58>

08000788 <USBPD_PE_Send_Request>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	f8df 3adc 	ldr.w	r3, [pc, #2780]	; 8001268 <.text_63>
 800078e:	4604      	mov	r4, r0
 8000790:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8000794:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8000798:	782b      	ldrb	r3, [r5, #0]
 800079a:	b923      	cbnz	r3, 80007a6 <USBPD_PE_Send_Request+0x1e>
 800079c:	6863      	ldr	r3, [r4, #4]
 800079e:	681e      	ldr	r6, [r3, #0]
 80007a0:	f3c6 3300 	ubfx	r3, r6, #12, #1
 80007a4:	b90b      	cbnz	r3, 80007aa <USBPD_PE_Send_Request+0x22>
 80007a6:	2003      	movs	r0, #3
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f240 7304 	movw	r3, #1796	; 0x704
 80007ae:	401e      	ands	r6, r3
 80007b0:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 80007b4:	d10d      	bne.n	80007d2 <USBPD_PE_Send_Request+0x4a>
 80007b6:	2645      	movs	r6, #69	; 0x45
 80007b8:	702e      	strb	r6, [r5, #0]
 80007ba:	61a1      	str	r1, [r4, #24]
 80007bc:	6961      	ldr	r1, [r4, #20]
 80007be:	f362 0183 	bfi	r1, r2, #2, #2
 80007c2:	6161      	str	r1, [r4, #20]
 80007c4:	2200      	movs	r2, #0
 80007c6:	706a      	strb	r2, [r5, #1]
 80007c8:	68a1      	ldr	r1, [r4, #8]
 80007ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80007cc:	4790      	blx	r2
 80007ce:	2000      	movs	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	2002      	movs	r0, #2
 80007d4:	bd70      	pop	{r4, r5, r6, pc}

080007d6 <USBPD_PE_SendExtendedMessage>:
 80007d6:	e92d 4efc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
 80007da:	4681      	mov	r9, r0
 80007dc:	468a      	mov	sl, r1
 80007de:	f8df 0a88 	ldr.w	r0, [pc, #2696]	; 8001268 <.text_63>
 80007e2:	4649      	mov	r1, r9
 80007e4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80007e8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80007ec:	469b      	mov	fp, r3
 80007ee:	b920      	cbnz	r0, 80007fa <USBPD_PE_SendExtendedMessage+0x24>
 80007f0:	6860      	ldr	r0, [r4, #4]
 80007f2:	6801      	ldr	r1, [r0, #0]
 80007f4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80007f8:	b908      	cbnz	r0, 80007fe <USBPD_PE_SendExtendedMessage+0x28>
 80007fa:	2003      	movs	r0, #3
 80007fc:	e064      	b.n	80008c8 <USBPD_PE_SendExtendedMessage+0xf2>
 80007fe:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8000802:	2803      	cmp	r0, #3
 8000804:	d10a      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0x46>
 8000806:	f001 0103 	and.w	r1, r1, #3
 800080a:	2901      	cmp	r1, #1
 800080c:	bf98      	it	ls
 800080e:	2001      	movls	r0, #1
 8000810:	d95a      	bls.n	80008c8 <USBPD_PE_SendExtendedMessage+0xf2>
 8000812:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000814:	f240 1005 	movw	r0, #261	; 0x105
 8000818:	4285      	cmp	r5, r0
 800081a:	d301      	bcc.n	8000820 <USBPD_PE_SendExtendedMessage+0x4a>
 800081c:	2002      	movs	r0, #2
 800081e:	e053      	b.n	80008c8 <USBPD_PE_SendExtendedMessage+0xf2>
 8000820:	f88d 2000 	strb.w	r2, [sp]
 8000824:	f204 265d 	addw	r6, r4, #605	; 0x25d
 8000828:	6960      	ldr	r0, [r4, #20]
 800082a:	f020 0010 	bic.w	r0, r0, #16
 800082e:	6160      	str	r0, [r4, #20]
 8000830:	f89d 0000 	ldrb.w	r0, [sp]
 8000834:	2803      	cmp	r0, #3
 8000836:	d008      	beq.n	800084a <USBPD_PE_SendExtendedMessage+0x74>
 8000838:	2804      	cmp	r0, #4
 800083a:	d017      	beq.n	800086c <USBPD_PE_SendExtendedMessage+0x96>
 800083c:	2806      	cmp	r0, #6
 800083e:	d01c      	beq.n	800087a <USBPD_PE_SendExtendedMessage+0xa4>
 8000840:	2808      	cmp	r0, #8
 8000842:	d01c      	beq.n	800087e <USBPD_PE_SendExtendedMessage+0xa8>
 8000844:	280a      	cmp	r0, #10
 8000846:	d01d      	beq.n	8000884 <USBPD_PE_SendExtendedMessage+0xae>
 8000848:	e01f      	b.n	800088a <USBPD_PE_SendExtendedMessage+0xb4>
 800084a:	210c      	movs	r1, #12
 800084c:	70b1      	strb	r1, [r6, #2]
 800084e:	6960      	ldr	r0, [r4, #20]
 8000850:	f040 0010 	orr.w	r0, r0, #16
 8000854:	6160      	str	r0, [r4, #20]
 8000856:	0028      	movs	r0, r5
 8000858:	d025      	beq.n	80008a6 <USBPD_PE_SendExtendedMessage+0xd0>
 800085a:	4648      	mov	r0, r9
 800085c:	f000 fa6e 	bl	8000d3c <PE_Get_UnchunkedSupport>
 8000860:	2700      	movs	r7, #0
 8000862:	2801      	cmp	r0, #1
 8000864:	bf08      	it	eq
 8000866:	2704      	moveq	r7, #4
 8000868:	2000      	movs	r0, #0
 800086a:	e017      	b.n	800089c <USBPD_PE_SendExtendedMessage+0xc6>
 800086c:	200d      	movs	r0, #13
 800086e:	70b0      	strb	r0, [r6, #2]
 8000870:	6961      	ldr	r1, [r4, #20]
 8000872:	f041 0110 	orr.w	r1, r1, #16
 8000876:	6161      	str	r1, [r4, #20]
 8000878:	e7ed      	b.n	8000856 <USBPD_PE_SendExtendedMessage+0x80>
 800087a:	200e      	movs	r0, #14
 800087c:	e7f7      	b.n	800086e <USBPD_PE_SendExtendedMessage+0x98>
 800087e:	205b      	movs	r0, #91	; 0x5b
 8000880:	70b0      	strb	r0, [r6, #2]
 8000882:	e7e8      	b.n	8000856 <USBPD_PE_SendExtendedMessage+0x80>
 8000884:	215c      	movs	r1, #92	; 0x5c
 8000886:	70b1      	strb	r1, [r6, #2]
 8000888:	e7e5      	b.n	8000856 <USBPD_PE_SendExtendedMessage+0x80>
 800088a:	2010      	movs	r0, #16
 800088c:	e01c      	b.n	80008c8 <USBPD_PE_SendExtendedMessage+0xf2>
 800088e:	183a      	adds	r2, r7, r0
 8000890:	f81b 1000 	ldrb.w	r1, [fp, r0]
 8000894:	4422      	add	r2, r4
 8000896:	1c40      	adds	r0, r0, #1
 8000898:	f882 1385 	strb.w	r1, [r2, #901]	; 0x385
 800089c:	42a8      	cmp	r0, r5
 800089e:	d3f6      	bcc.n	800088e <USBPD_PE_SendExtendedMessage+0xb8>
 80008a0:	f8a4 5490 	strh.w	r5, [r4, #1168]	; 0x490
 80008a4:	e002      	b.n	80008ac <USBPD_PE_SendExtendedMessage+0xd6>
 80008a6:	2000      	movs	r0, #0
 80008a8:	f8a4 0490 	strh.w	r0, [r4, #1168]	; 0x490
 80008ac:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80008b0:	2231      	movs	r2, #49	; 0x31
 80008b2:	f880 a001 	strb.w	sl, [r0, #1]
 80008b6:	f89d 1000 	ldrb.w	r1, [sp]
 80008ba:	7031      	strb	r1, [r6, #0]
 80008bc:	7002      	strb	r2, [r0, #0]
 80008be:	4648      	mov	r0, r9
 80008c0:	68a3      	ldr	r3, [r4, #8]
 80008c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80008c4:	4788      	blx	r1
 80008c6:	2000      	movs	r0, #0
 80008c8:	e8bd 8ef6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r9, sl, fp, pc}

080008cc <PE_Send_RESET>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	4604      	mov	r4, r0
 80008d0:	460d      	mov	r5, r1
 80008d2:	2d05      	cmp	r5, #5
 80008d4:	7c20      	ldrb	r0, [r4, #16]
 80008d6:	bf0c      	ite	eq
 80008d8:	211f      	moveq	r1, #31
 80008da:	215e      	movne	r1, #94	; 0x5e
 80008dc:	f7ff fe43 	bl	8000566 <USBPD_PE_Notification>
 80008e0:	7c20      	ldrb	r0, [r4, #16]
 80008e2:	4629      	mov	r1, r5
 80008e4:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 80008e8:	f004 bc97 	b.w	800521a <USBPD_PRL_ResetRequestProcess>

080008ec <PE_Get_SpecRevision>:
 80008ec:	f8df 1978 	ldr.w	r1, [pc, #2424]	; 8001268 <.text_63>
 80008f0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80008f4:	6841      	ldr	r1, [r0, #4]
 80008f6:	7808      	ldrb	r0, [r1, #0]
 80008f8:	f000 0003 	and.w	r0, r0, #3
 80008fc:	4770      	bx	lr

080008fe <PE_ChangePowerRole>:
 80008fe:	6842      	ldr	r2, [r0, #4]
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	f361 0382 	bfi	r3, r1, #2, #1
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	7c00      	ldrb	r0, [r0, #16]
 800090a:	f004 bad6 	b.w	8004eba <USBPD_PRL_SetHeaderPowerRole>

0800090e <PE_Get_RxEvent>:
 800090e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000910:	2114      	movs	r1, #20
 8000912:	f3ef 8410 	mrs	r4, PRIMASK
 8000916:	b672      	cpsid	i
 8000918:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800091c:	7b2a      	ldrb	r2, [r5, #12]
 800091e:	b332      	cbz	r2, 800096e <PE_Get_RxEvent+0x60>
 8000920:	f500 7613 	add.w	r6, r0, #588	; 0x24c
 8000924:	5cb3      	ldrb	r3, [r6, r2]
 8000926:	065f      	lsls	r7, r3, #25
 8000928:	d401      	bmi.n	800092e <PE_Get_RxEvent+0x20>
 800092a:	2003      	movs	r0, #3
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000932:	435a      	muls	r2, r3
 8000934:	4410      	add	r0, r2
 8000936:	38cb      	subs	r0, #203	; 0xcb
 8000938:	60a8      	str	r0, [r5, #8]
 800093a:	7802      	ldrb	r2, [r0, #0]
 800093c:	7840      	ldrb	r0, [r0, #1]
 800093e:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000942:	7b28      	ldrb	r0, [r5, #12]
 8000944:	80ab      	strh	r3, [r5, #4]
 8000946:	5c32      	ldrb	r2, [r6, r0]
 8000948:	f002 021f 	and.w	r2, r2, #31
 800094c:	2a01      	cmp	r2, #1
 800094e:	d004      	beq.n	800095a <PE_Get_RxEvent+0x4c>
 8000950:	2a02      	cmp	r2, #2
 8000952:	d005      	beq.n	8000960 <PE_Get_RxEvent+0x52>
 8000954:	2a04      	cmp	r2, #4
 8000956:	d007      	beq.n	8000968 <PE_Get_RxEvent+0x5a>
 8000958:	e009      	b.n	800096e <PE_Get_RxEvent+0x60>
 800095a:	2111      	movs	r1, #17
 800095c:	2000      	movs	r0, #0
 800095e:	e005      	b.n	800096c <PE_Get_RxEvent+0x5e>
 8000960:	2201      	movs	r2, #1
 8000962:	2112      	movs	r1, #18
 8000964:	702a      	strb	r2, [r5, #0]
 8000966:	e002      	b.n	800096e <PE_Get_RxEvent+0x60>
 8000968:	2113      	movs	r1, #19
 800096a:	2002      	movs	r0, #2
 800096c:	7028      	strb	r0, [r5, #0]
 800096e:	f384 8810 	msr	PRIMASK, r4
 8000972:	4608      	mov	r0, r1
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <PE_Clear_RxEvent>:
 8000976:	4601      	mov	r1, r0
 8000978:	f3ef 8210 	mrs	r2, PRIMASK
 800097c:	b672      	cpsid	i
 800097e:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
 8000982:	2800      	cmp	r0, #0
 8000984:	d100      	bne.n	8000988 <PE_Clear_RxEvent+0x12>
 8000986:	4770      	bx	lr
 8000988:	b510      	push	{r4, lr}
 800098a:	1e40      	subs	r0, r0, #1
 800098c:	b2c0      	uxtb	r0, r0
 800098e:	f201 234d 	addw	r3, r1, #589	; 0x24d
 8000992:	2400      	movs	r4, #0
 8000994:	541c      	strb	r4, [r3, r0]
 8000996:	1e40      	subs	r0, r0, #1
 8000998:	4180      	sbcs	r0, r0
 800099a:	0fc0      	lsrs	r0, r0, #31
 800099c:	5c1b      	ldrb	r3, [r3, r0]
 800099e:	065c      	lsls	r4, r3, #25
 80009a0:	d507      	bpl.n	80009b2 <PE_Clear_RxEvent+0x3c>
 80009a2:	1c40      	adds	r0, r0, #1
 80009a4:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009a8:	f382 8810 	msr	PRIMASK, r2
 80009ac:	7c08      	ldrb	r0, [r1, #16]
 80009ae:	6889      	ldr	r1, [r1, #8]
 80009b0:	e1ba      	b.n	8000d28 <.text_40>
 80009b2:	2000      	movs	r0, #0
 80009b4:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009b8:	f382 8810 	msr	PRIMASK, r2
 80009bc:	bd10      	pop	{r4, pc}

080009be <PE_PRL_Control_RxEvent>:
 80009be:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8001268 <.text_63>
 80009c2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009c6:	2000      	movs	r0, #0
 80009c8:	f3ef 8210 	mrs	r2, PRIMASK
 80009cc:	b672      	cpsid	i
 80009ce:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 80009d2:	b101      	cbz	r1, 80009d6 <PE_PRL_Control_RxEvent+0x18>
 80009d4:	2001      	movs	r0, #1
 80009d6:	f382 8810 	msr	PRIMASK, r2
 80009da:	4770      	bx	lr

080009dc <PE_Convert_SOPRxEvent>:
 80009dc:	b118      	cbz	r0, 80009e6 <PE_Convert_SOPRxEvent+0xa>
 80009de:	2802      	cmp	r0, #2
 80009e0:	d005      	beq.n	80009ee <PE_Convert_SOPRxEvent+0x12>
 80009e2:	d302      	bcc.n	80009ea <PE_Convert_SOPRxEvent+0xe>
 80009e4:	e005      	b.n	80009f2 <PE_Convert_SOPRxEvent+0x16>
 80009e6:	2011      	movs	r0, #17
 80009e8:	4770      	bx	lr
 80009ea:	2012      	movs	r0, #18
 80009ec:	4770      	bx	lr
 80009ee:	2013      	movs	r0, #19
 80009f0:	4770      	bx	lr
 80009f2:	2014      	movs	r0, #20
 80009f4:	4770      	bx	lr

080009f6 <PE_Check_AMSConflict>:
 80009f6:	b538      	push	{r3, r4, r5, lr}
 80009f8:	4604      	mov	r4, r0
 80009fa:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80009fe:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8000a00:	2500      	movs	r5, #0
 8000a02:	4001      	ands	r1, r0
 8000a04:	290d      	cmp	r1, #13
 8000a06:	d103      	bne.n	8000a10 <PE_Check_AMSConflict+0x1a>
 8000a08:	2110      	movs	r1, #16
 8000a0a:	7461      	strb	r1, [r4, #17]
 8000a0c:	2015      	movs	r0, #21
 8000a0e:	bd32      	pop	{r1, r4, r5, pc}
 8000a10:	7f20      	ldrb	r0, [r4, #28]
 8000a12:	b1f8      	cbz	r0, 8000a54 <PE_Check_AMSConflict+0x5e>
 8000a14:	1e40      	subs	r0, r0, #1
 8000a16:	2801      	cmp	r0, #1
 8000a18:	d90e      	bls.n	8000a38 <PE_Check_AMSConflict+0x42>
 8000a1a:	1e80      	subs	r0, r0, #2
 8000a1c:	d01d      	beq.n	8000a5a <PE_Check_AMSConflict+0x64>
 8000a1e:	1e40      	subs	r0, r0, #1
 8000a20:	d01d      	beq.n	8000a5e <PE_Check_AMSConflict+0x68>
 8000a22:	1e40      	subs	r0, r0, #1
 8000a24:	280b      	cmp	r0, #11
 8000a26:	d907      	bls.n	8000a38 <PE_Check_AMSConflict+0x42>
 8000a28:	380c      	subs	r0, #12
 8000a2a:	d002      	beq.n	8000a32 <PE_Check_AMSConflict+0x3c>
 8000a2c:	384e      	subs	r0, #78	; 0x4e
 8000a2e:	d003      	beq.n	8000a38 <PE_Check_AMSConflict+0x42>
 8000a30:	e004      	b.n	8000a3c <PE_Check_AMSConflict+0x46>
 8000a32:	220f      	movs	r2, #15
 8000a34:	7462      	strb	r2, [r4, #17]
 8000a36:	e013      	b.n	8000a60 <PE_Check_AMSConflict+0x6a>
 8000a38:	2011      	movs	r0, #17
 8000a3a:	e00f      	b.n	8000a5c <PE_Check_AMSConflict+0x66>
 8000a3c:	7c20      	ldrb	r0, [r4, #16]
 8000a3e:	215c      	movs	r1, #92	; 0x5c
 8000a40:	f7ff fd91 	bl	8000566 <USBPD_PE_Notification>
 8000a44:	6861      	ldr	r1, [r4, #4]
 8000a46:	680a      	ldr	r2, [r1, #0]
 8000a48:	f240 7004 	movw	r0, #1796	; 0x704
 8000a4c:	4002      	ands	r2, r0
 8000a4e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000a52:	d102      	bne.n	8000a5a <PE_Check_AMSConflict+0x64>
 8000a54:	2103      	movs	r1, #3
 8000a56:	7461      	strb	r1, [r4, #17]
 8000a58:	e002      	b.n	8000a60 <PE_Check_AMSConflict+0x6a>
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	7460      	strb	r0, [r4, #17]
 8000a5e:	2515      	movs	r5, #21
 8000a60:	4628      	mov	r0, r5
 8000a62:	bd32      	pop	{r1, r4, r5, pc}

08000a64 <PE_PRL_ResetReceived>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4604      	mov	r4, r0
 8000a68:	f8df 07fc 	ldr.w	r0, [pc, #2044]	; 8001268 <.text_63>
 8000a6c:	4622      	mov	r2, r4
 8000a6e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000a72:	2905      	cmp	r1, #5
 8000a74:	d110      	bne.n	8000a98 <PE_PRL_ResetReceived+0x34>
 8000a76:	6868      	ldr	r0, [r5, #4]
 8000a78:	6801      	ldr	r1, [r0, #0]
 8000a7a:	f021 0110 	bic.w	r1, r1, #16
 8000a7e:	6001      	str	r1, [r0, #0]
 8000a80:	2001      	movs	r0, #1
 8000a82:	6969      	ldr	r1, [r5, #20]
 8000a84:	f360 2109 	bfi	r1, r0, #8, #2
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
 8000a8e:	6169      	str	r1, [r5, #20]
 8000a90:	211e      	movs	r1, #30
 8000a92:	f000 fb5e 	bl	8001152 <.text_49>
 8000a96:	e003      	b.n	8000aa0 <PE_PRL_ResetReceived+0x3c>
 8000a98:	6968      	ldr	r0, [r5, #20]
 8000a9a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000a9e:	6168      	str	r0, [r5, #20]
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	68a9      	ldr	r1, [r5, #8]
 8000aa4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000aa6:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000aaa <__iar_annotation$$tailcall>:
 8000aaa:	4710      	bx	r2

08000aac <PE_PRL_BistCompleted>:
 8000aac:	4770      	bx	lr

08000aae <PE_Reset_HardReset>:
 8000aae:	b510      	push	{r4, lr}
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000ab6:	b118      	cbz	r0, 8000ac0 <PE_Reset_HardReset+0x12>
 8000ab8:	7c20      	ldrb	r0, [r4, #16]
 8000aba:	215b      	movs	r1, #91	; 0x5b
 8000abc:	f7ff fd53 	bl	8000566 <USBPD_PE_Notification>
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f000 f830 	bl	8000b26 <PE_Reset_ZI>
 8000ac6:	f000 f828 	bl	8000b1a <.text_29>
 8000aca:	6820      	ldr	r0, [r4, #0]
 8000acc:	7903      	ldrb	r3, [r0, #4]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	d009      	beq.n	8000ae8 <PE_Reset_HardReset+0x3a>
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2101      	movs	r1, #1
 8000ada:	f004 f9dc 	bl	8004e96 <USBPD_PRL_SetHeader>
 8000ade:	6860      	ldr	r0, [r4, #4]
 8000ae0:	6801      	ldr	r1, [r0, #0]
 8000ae2:	f041 0108 	orr.w	r1, r1, #8
 8000ae6:	e008      	b.n	8000afa <PE_Reset_HardReset+0x4c>
 8000ae8:	7c20      	ldrb	r0, [r4, #16]
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	f004 f9d2 	bl	8004e96 <USBPD_PRL_SetHeader>
 8000af2:	6860      	ldr	r0, [r4, #4]
 8000af4:	6801      	ldr	r1, [r0, #0]
 8000af6:	f021 0108 	bic.w	r1, r1, #8
 8000afa:	6001      	str	r1, [r0, #0]
 8000afc:	f000 f846 	bl	8000b8c <.text_31>
 8000b00:	0892      	lsrs	r2, r2, #2
 8000b02:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b06:	6008      	str	r0, [r1, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	7c20      	ldrb	r0, [r4, #16]
 8000b0c:	f004 fa10 	bl	8004f30 <USBPD_PRL_SOPCapability>
 8000b10:	7c20      	ldrb	r0, [r4, #16]
 8000b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b16:	f004 bbbf 	b.w	8005298 <USBPD_PRL_Reset>

08000b1a <.text_29>:
 8000b1a:	6860      	ldr	r0, [r4, #4]
 8000b1c:	6801      	ldr	r1, [r0, #0]
 8000b1e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000b22:	2800      	cmp	r0, #0
 8000b24:	4770      	bx	lr

08000b26 <PE_Reset_ZI>:
 8000b26:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b28:	4604      	mov	r4, r0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	9001      	str	r0, [sp, #4]
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6860      	ldr	r0, [r4, #4]
 8000b32:	6802      	ldr	r2, [r0, #0]
 8000b34:	f022 0210 	bic.w	r2, r2, #16
 8000b38:	6002      	str	r2, [r0, #0]
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f000 fb7a 	bl	8001234 <PE_SetPowerNegotiation>
 8000b40:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000b44:	f104 0014 	add.w	r0, r4, #20
 8000b48:	f01a fe74 	bl	801b834 <__aeabi_memclr>
 8000b4c:	68a5      	ldr	r5, [r4, #8]
 8000b4e:	7c20      	ldrb	r0, [r4, #16]
 8000b50:	69ae      	ldr	r6, [r5, #24]
 8000b52:	2304      	movs	r3, #4
 8000b54:	aa01      	add	r2, sp, #4
 8000b56:	2102      	movs	r1, #2
 8000b58:	47b0      	blx	r6
 8000b5a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000b5e:	9000      	str	r0, [sp, #0]
 8000b60:	2304      	movs	r3, #4
 8000b62:	68a5      	ldr	r5, [r4, #8]
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	69ae      	ldr	r6, [r5, #24]
 8000b68:	466a      	mov	r2, sp
 8000b6a:	2106      	movs	r1, #6
 8000b6c:	47b0      	blx	r6
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	7901      	ldrb	r1, [r0, #4]
 8000b72:	7c20      	ldrb	r0, [r4, #16]
 8000b74:	f001 0103 	and.w	r1, r1, #3
 8000b78:	f004 f9ba 	bl	8004ef0 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7c:	f000 f806 	bl	8000b8c <.text_31>
 8000b80:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000b84:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000b88:	600a      	str	r2, [r1, #0]
 8000b8a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000b8c <.text_31>:
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	6861      	ldr	r1, [r4, #4]
 8000b90:	7900      	ldrb	r0, [r0, #4]
 8000b92:	680a      	ldr	r2, [r1, #0]
 8000b94:	f000 0003 	and.w	r0, r0, #3
 8000b98:	4770      	bx	lr

08000b9a <PE_Reset_Counter>:
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8000ba0:	f01a be48 	b.w	801b834 <__aeabi_memclr>

08000ba4 <PE_Reset_StateMachine>:
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000bac:	b118      	cbz	r0, 8000bb6 <PE_Reset_StateMachine+0x12>
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	215b      	movs	r1, #91	; 0x5b
 8000bb2:	f7ff fcd8 	bl	8000566 <USBPD_PE_Notification>
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff ffb5 	bl	8000b26 <PE_Reset_ZI>
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 fb38 	bl	8001234 <PE_SetPowerNegotiation>
 8000bc4:	7c20      	ldrb	r0, [r4, #16]
 8000bc6:	f004 fb67 	bl	8005298 <USBPD_PRL_Reset>
 8000bca:	f7ff ffa6 	bl	8000b1a <.text_29>
 8000bce:	f001 0303 	and.w	r3, r1, #3
 8000bd2:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000bd6:	d005      	beq.n	8000be4 <PE_Reset_StateMachine+0x40>
 8000bd8:	7c20      	ldrb	r0, [r4, #16]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	f004 f95b 	bl	8004e96 <USBPD_PRL_SetHeader>
 8000be0:	2002      	movs	r0, #2
 8000be2:	e004      	b.n	8000bee <PE_Reset_StateMachine+0x4a>
 8000be4:	7c20      	ldrb	r0, [r4, #16]
 8000be6:	2100      	movs	r1, #0
 8000be8:	f004 f955 	bl	8004e96 <USBPD_PRL_SetHeader>
 8000bec:	203e      	movs	r0, #62	; 0x3e
 8000bee:	7460      	strb	r0, [r4, #17]
 8000bf0:	bd10      	pop	{r4, pc}

08000bf2 <PE_ExtRevisionInteroperability>:
 8000bf2:	b510      	push	{r4, lr}
 8000bf4:	f8df 2670 	ldr.w	r2, [pc, #1648]	; 8001268 <.text_63>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bfe:	6853      	ldr	r3, [r2, #4]
 8000c00:	781c      	ldrb	r4, [r3, #0]
 8000c02:	f004 0403 	and.w	r4, r4, #3
 8000c06:	42a1      	cmp	r1, r4
 8000c08:	bfa8      	it	ge
 8000c0a:	4621      	movge	r1, r4
 8000c0c:	681c      	ldr	r4, [r3, #0]
 8000c0e:	f361 0401 	bfi	r4, r1, #0, #2
 8000c12:	601c      	str	r4, [r3, #0]
 8000c14:	6851      	ldr	r1, [r2, #4]
 8000c16:	680b      	ldr	r3, [r1, #0]
 8000c18:	f003 0403 	and.w	r4, r3, #3
 8000c1c:	2c01      	cmp	r4, #1
 8000c1e:	bf0c      	ite	eq
 8000c20:	2400      	moveq	r4, #0
 8000c22:	2401      	movne	r4, #1
 8000c24:	f023 0320 	bic.w	r3, r3, #32
 8000c28:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8000c2c:	600b      	str	r3, [r1, #0]
 8000c2e:	6852      	ldr	r2, [r2, #4]
 8000c30:	7811      	ldrb	r1, [r2, #0]
 8000c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c36:	f001 0103 	and.w	r1, r1, #3
 8000c3a:	f004 b950 	b.w	8004ede <USBPD_PRL_SetHeaderSpecification>

08000c3e <PE_PRL_FastRoleSwapReception>:
 8000c3e:	f8df 1628 	ldr.w	r1, [pc, #1576]	; 8001268 <.text_63>
 8000c42:	4602      	mov	r2, r0
 8000c44:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c48:	7f0a      	ldrb	r2, [r1, #28]
 8000c4a:	2a09      	cmp	r2, #9
 8000c4c:	d000      	beq.n	8000c50 <PE_PRL_FastRoleSwapReception+0x12>
 8000c4e:	e302      	b.n	8001256 <.text_61>
 8000c50:	4770      	bx	lr

08000c52 <PE_PRL_PostReceiveEvent>:
 8000c52:	b510      	push	{r4, lr}
 8000c54:	f8df 2610 	ldr.w	r2, [pc, #1552]	; 8001268 <.text_63>
 8000c58:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	18d4      	adds	r4, r2, r3
 8000c60:	f894 024d 	ldrb.w	r0, [r4, #589]	; 0x24d
 8000c64:	b128      	cbz	r0, 8000c72 <PE_PRL_PostReceiveEvent+0x20>
 8000c66:	1c5b      	adds	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d9f7      	bls.n	8000c5e <PE_PRL_PostReceiveEvent+0xc>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	2020      	movs	r0, #32
 8000c74:	f884 024d 	strb.w	r0, [r4, #589]	; 0x24d
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f894 224d 	ldrb.w	r2, [r4, #589]	; 0x24d
 8000c7e:	fa00 f101 	lsl.w	r1, r0, r1
 8000c82:	4311      	orrs	r1, r2
 8000c84:	f884 124d 	strb.w	r1, [r4, #589]	; 0x24d
 8000c88:	bd10      	pop	{r4, pc}

08000c8a <PE_PRL_PostReceiveEventError>:
 8000c8a:	f8df 15dc 	ldr.w	r1, [pc, #1500]	; 8001268 <.text_63>
 8000c8e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000c92:	2100      	movs	r1, #0
 8000c94:	b2ca      	uxtb	r2, r1
 8000c96:	4402      	add	r2, r0
 8000c98:	f892 324d 	ldrb.w	r3, [r2, #589]	; 0x24d
 8000c9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000ca0:	2b20      	cmp	r3, #32
 8000ca2:	d004      	beq.n	8000cae <PE_PRL_PostReceiveEventError+0x24>
 8000ca4:	1c49      	adds	r1, r1, #1
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	2a02      	cmp	r2, #2
 8000caa:	d3f3      	bcc.n	8000c94 <PE_PRL_PostReceiveEventError+0xa>
 8000cac:	4770      	bx	lr
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000cb4:	4770      	bx	lr

08000cb6 <PE_PRL_PostReceiveEventCopy>:
 8000cb6:	b510      	push	{r4, lr}
 8000cb8:	f8df 25ac 	ldr.w	r2, [pc, #1452]	; 8001268 <.text_63>
 8000cbc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	b2d3      	uxtb	r3, r2
 8000cc4:	18c4      	adds	r4, r0, r3
 8000cc6:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000cca:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8000cce:	2c20      	cmp	r4, #32
 8000cd0:	d004      	beq.n	8000cdc <PE_PRL_PostReceiveEventCopy+0x26>
 8000cd2:	1c52      	adds	r2, r2, #1
 8000cd4:	b2d3      	uxtb	r3, r2
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d3f3      	bcc.n	8000cc2 <PE_PRL_PostReceiveEventCopy+0xc>
 8000cda:	bd10      	pop	{r4, pc}
 8000cdc:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000ce0:	4353      	muls	r3, r2
 8000ce2:	18c4      	adds	r4, r0, r3
 8000ce4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8000ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cec:	f01a bda5 	b.w	801b83a <__aeabi_memcpy>

08000cf0 <PE_PRL_PostReceiveEventComplete>:
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	f000 f81d 	bl	8000d30 <.text_41>
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	1c4b      	adds	r3, r1, #1
 8000cfa:	4411      	add	r1, r2
 8000cfc:	f891 424d 	ldrb.w	r4, [r1, #589]	; 0x24d
 8000d00:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8000d04:	2c20      	cmp	r4, #32
 8000d06:	d003      	beq.n	8000d10 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	2902      	cmp	r1, #2
 8000d0c:	d3f4      	bcc.n	8000cf8 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d0e:	bd10      	pop	{r4, pc}
 8000d10:	f891 424d 	ldrb.w	r4, [r1, #589]	; 0x24d
 8000d14:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8000d18:	f881 424d 	strb.w	r4, [r1, #589]	; 0x24d
 8000d1c:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8000d20:	b909      	cbnz	r1, 8000d26 <PE_PRL_PostReceiveEventComplete+0x36>
 8000d22:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 8000d26:	6891      	ldr	r1, [r2, #8]

08000d28 <.text_40>:
 8000d28:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

08000d2e <__iar_annotation$$tailcall>:
 8000d2e:	4710      	bx	r2

08000d30 <.text_41>:
 8000d30:	f8df 1534 	ldr.w	r1, [pc, #1332]	; 8001268 <.text_63>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d3a:	4770      	bx	lr

08000d3c <PE_Get_UnchunkedSupport>:
 8000d3c:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 8001268 <.text_63>
 8000d40:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d44:	6841      	ldr	r1, [r0, #4]
 8000d46:	6808      	ldr	r0, [r1, #0]
 8000d48:	0e40      	lsrs	r0, r0, #25
 8000d4a:	f000 0001 	and.w	r0, r0, #1
 8000d4e:	4770      	bx	lr

08000d50 <.text_43>:
 8000d50:	20000374 	.word	0x20000374

08000d54 <.text_44>:
 8000d54:	20000000 	.word	0x20000000

08000d58 <PE_SubStateMachine_Generic>:
 8000d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d5c:	b08b      	sub	sp, #44	; 0x2c
 8000d5e:	2402      	movs	r4, #2
 8000d60:	4605      	mov	r5, r0
 8000d62:	460e      	mov	r6, r1
 8000d64:	7c6b      	ldrb	r3, [r5, #17]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	f205 2863 	addw	r8, r5, #611	; 0x263
 8000d6c:	f205 2765 	addw	r7, r5, #613	; 0x265
 8000d70:	f205 2267 	addw	r2, r5, #615	; 0x267
 8000d74:	f248 091b 	movw	r9, #32795	; 0x801b
 8000d78:	f000 811c 	beq.w	8000fb4 <PE_SubStateMachine_Generic+0x25c>
 8000d7c:	2b18      	cmp	r3, #24
 8000d7e:	d035      	beq.n	8000dec <PE_SubStateMachine_Generic+0x94>
 8000d80:	2b19      	cmp	r3, #25
 8000d82:	d04b      	beq.n	8000e1c <PE_SubStateMachine_Generic+0xc4>
 8000d84:	2b1d      	cmp	r3, #29
 8000d86:	f000 8085 	beq.w	8000e94 <PE_SubStateMachine_Generic+0x13c>
 8000d8a:	2b27      	cmp	r3, #39	; 0x27
 8000d8c:	f000 80a0 	beq.w	8000ed0 <PE_SubStateMachine_Generic+0x178>
 8000d90:	2b28      	cmp	r3, #40	; 0x28
 8000d92:	f000 80aa 	beq.w	8000eea <PE_SubStateMachine_Generic+0x192>
 8000d96:	2b29      	cmp	r3, #41	; 0x29
 8000d98:	f000 80b2 	beq.w	8000f00 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2b2c      	cmp	r3, #44	; 0x2c
 8000d9e:	f000 81bc 	beq.w	800111a <PE_SubStateMachine_Generic+0x3c2>
 8000da2:	2b30      	cmp	r3, #48	; 0x30
 8000da4:	f000 8133 	beq.w	800100e <PE_SubStateMachine_Generic+0x2b6>
 8000da8:	2b3a      	cmp	r3, #58	; 0x3a
 8000daa:	f000 81a5 	beq.w	80010f8 <PE_SubStateMachine_Generic+0x3a0>
 8000dae:	2b3b      	cmp	r3, #59	; 0x3b
 8000db0:	f000 8187 	beq.w	80010c2 <PE_SubStateMachine_Generic+0x36a>
 8000db4:	2b3c      	cmp	r3, #60	; 0x3c
 8000db6:	f000 8176 	beq.w	80010a6 <PE_SubStateMachine_Generic+0x34e>
 8000dba:	2b63      	cmp	r3, #99	; 0x63
 8000dbc:	f000 8101 	beq.w	8000fc2 <PE_SubStateMachine_Generic+0x26a>
 8000dc0:	2b64      	cmp	r3, #100	; 0x64
 8000dc2:	f000 8111 	beq.w	8000fe8 <PE_SubStateMachine_Generic+0x290>
 8000dc6:	2b74      	cmp	r3, #116	; 0x74
 8000dc8:	f000 8136 	beq.w	8001038 <PE_SubStateMachine_Generic+0x2e0>
 8000dcc:	2b93      	cmp	r3, #147	; 0x93
 8000dce:	f000 809d 	beq.w	8000f0c <PE_SubStateMachine_Generic+0x1b4>
 8000dd2:	2b94      	cmp	r3, #148	; 0x94
 8000dd4:	f000 809d 	beq.w	8000f12 <PE_SubStateMachine_Generic+0x1ba>
 8000dd8:	2b95      	cmp	r3, #149	; 0x95
 8000dda:	f000 80b3 	beq.w	8000f44 <PE_SubStateMachine_Generic+0x1ec>
 8000dde:	2b99      	cmp	r3, #153	; 0x99
 8000de0:	f040 81a0 	bne.w	8001124 <PE_SubStateMachine_Generic+0x3cc>
 8000de4:	2106      	movs	r1, #6
 8000de6:	f7ff fd71 	bl	80008cc <PE_Send_RESET>
 8000dea:	e158      	b.n	800109e <PE_SubStateMachine_Generic+0x346>
 8000dec:	6868      	ldr	r0, [r5, #4]
 8000dee:	f7ff fe95 	bl	8000b1c <.text_29+0x2>
 8000df2:	bf1d      	ittte	ne
 8000df4:	6968      	ldrne	r0, [r5, #20]
 8000df6:	0840      	lsrne	r0, r0, #1
 8000df8:	f000 0001 	andne.w	r0, r0, #1
 8000dfc:	2002      	moveq	r0, #2
 8000dfe:	9000      	str	r0, [sp, #0]
 8000e00:	2319      	movs	r3, #25
 8000e02:	2208      	movs	r2, #8
 8000e04:	2100      	movs	r1, #0
 8000e06:	4628      	mov	r0, r5
 8000e08:	f000 faa8 	bl	800135c <PE_Send_CtrlMessage>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d104      	bne.n	8000e1a <PE_SubStateMachine_Generic+0xc2>
 8000e10:	2007      	movs	r0, #7
 8000e12:	7728      	strb	r0, [r5, #28]
 8000e14:	f8a5 901e 	strh.w	r9, [r5, #30]
 8000e18:	241b      	movs	r4, #27
 8000e1a:	e185      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 8000e1c:	7830      	ldrb	r0, [r6, #0]
 8000e1e:	2811      	cmp	r0, #17
 8000e20:	d137      	bne.n	8000e92 <PE_SubStateMachine_Generic+0x13a>
 8000e22:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8000e24:	0bc8      	lsrs	r0, r1, #15
 8000e26:	d11d      	bne.n	8000e64 <PE_SubStateMachine_Generic+0x10c>
 8000e28:	f3c1 3302 	ubfx	r3, r1, #12, #3
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	d019      	beq.n	8000e64 <PE_SubStateMachine_Generic+0x10c>
 8000e30:	f001 011f 	and.w	r1, r1, #31
 8000e34:	2904      	cmp	r1, #4
 8000e36:	d115      	bne.n	8000e64 <PE_SubStateMachine_Generic+0x10c>
 8000e38:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000e3a:	68ac      	ldr	r4, [r5, #8]
 8000e3c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8000e40:	1c82      	adds	r2, r0, #2
 8000e42:	7c28      	ldrb	r0, [r5, #16]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	2105      	movs	r1, #5
 8000e48:	47c0      	blx	r8
 8000e4a:	7830      	ldrb	r0, [r6, #0]
 8000e4c:	2814      	cmp	r0, #20
 8000e4e:	d003      	beq.n	8000e58 <PE_SubStateMachine_Generic+0x100>
 8000e50:	2114      	movs	r1, #20
 8000e52:	7031      	strb	r1, [r6, #0]
 8000e54:	f000 f995 	bl	8001182 <.text_53+0x4>
 8000e58:	2003      	movs	r0, #3
 8000e5a:	7468      	strb	r0, [r5, #17]
 8000e5c:	2107      	movs	r1, #7
 8000e5e:	f000 f978 	bl	8001152 <.text_49>
 8000e62:	2400      	movs	r4, #0
 8000e64:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8000e66:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000e6a:	d112      	bne.n	8000e92 <PE_SubStateMachine_Generic+0x13a>
 8000e6c:	f000 001f 	and.w	r0, r0, #31
 8000e70:	2804      	cmp	r0, #4
 8000e72:	bf18      	it	ne
 8000e74:	2810      	cmpne	r0, #16
 8000e76:	d10c      	bne.n	8000e92 <PE_SubStateMachine_Generic+0x13a>
 8000e78:	7830      	ldrb	r0, [r6, #0]
 8000e7a:	2814      	cmp	r0, #20
 8000e7c:	d003      	beq.n	8000e86 <PE_SubStateMachine_Generic+0x12e>
 8000e7e:	2114      	movs	r1, #20
 8000e80:	7031      	strb	r1, [r6, #0]
 8000e82:	f000 f97e 	bl	8001182 <.text_53+0x4>
 8000e86:	2003      	movs	r0, #3
 8000e88:	7468      	strb	r0, [r5, #17]
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	f000 f961 	bl	8001152 <.text_49>
 8000e90:	2400      	movs	r4, #0
 8000e92:	e08a      	b.n	8000faa <PE_SubStateMachine_Generic+0x252>
 8000e94:	2100      	movs	r1, #0
 8000e96:	9103      	str	r1, [sp, #12]
 8000e98:	ab03      	add	r3, sp, #12
 8000e9a:	68ae      	ldr	r6, [r5, #8]
 8000e9c:	7c28      	ldrb	r0, [r5, #16]
 8000e9e:	6977      	ldr	r7, [r6, #20]
 8000ea0:	aa04      	add	r2, sp, #16
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	47b8      	blx	r7
 8000ea6:	f000 f943 	bl	8001130 <.text_46>
 8000eaa:	b108      	cbz	r0, 8000eb0 <PE_SubStateMachine_Generic+0x158>
 8000eac:	2003      	movs	r0, #3
 8000eae:	e13a      	b.n	8001126 <PE_SubStateMachine_Generic+0x3ce>
 8000eb0:	9a03      	ldr	r2, [sp, #12]
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	0892      	lsrs	r2, r2, #2
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	9001      	str	r0, [sp, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	9102      	str	r1, [sp, #8]
 8000ebe:	ab04      	add	r3, sp, #16
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	f000 fa75 	bl	80013b2 <PE_Send_DataMessage>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d10d      	bne.n	8000ee8 <PE_SubStateMachine_Generic+0x190>
 8000ecc:	210a      	movs	r1, #10
 8000ece:	e0b0      	b.n	8001032 <PE_SubStateMachine_Generic+0x2da>
 8000ed0:	2011      	movs	r0, #17
 8000ed2:	7728      	strb	r0, [r5, #28]
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	7c28      	ldrb	r0, [r5, #16]
 8000ed8:	f004 f9d1 	bl	800527e <USBDPD_PRL_BistCarrierEyeMode>
 8000edc:	2028      	movs	r0, #40	; 0x28
 8000ede:	7468      	strb	r0, [r5, #17]
 8000ee0:	f248 013a 	movw	r1, #32826	; 0x803a
 8000ee4:	83e9      	strh	r1, [r5, #30]
 8000ee6:	243a      	movs	r4, #58	; 0x3a
 8000ee8:	e11e      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 8000eea:	8be8      	ldrh	r0, [r5, #30]
 8000eec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000ef0:	d1fa      	bne.n	8000ee8 <PE_SubStateMachine_Generic+0x190>
 8000ef2:	7c28      	ldrb	r0, [r5, #16]
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	f004 f9c8 	bl	800528a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000efa:	2000      	movs	r0, #0
 8000efc:	83e8      	strh	r0, [r5, #30]
 8000efe:	e0ce      	b.n	800109e <PE_SubStateMachine_Generic+0x346>
 8000f00:	7831      	ldrb	r1, [r6, #0]
 8000f02:	2914      	cmp	r1, #20
 8000f04:	d001      	beq.n	8000f0a <PE_SubStateMachine_Generic+0x1b2>
 8000f06:	f000 f93a 	bl	800117e <.text_53>
 8000f0a:	e10d      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 8000f0c:	f000 f95a 	bl	80011c4 <PE_SubStateMachine_ReceiveDRS>
 8000f10:	e10a      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 8000f12:	6868      	ldr	r0, [r5, #4]
 8000f14:	f7ff fe02 	bl	8000b1c <.text_29+0x2>
 8000f18:	bf1d      	ittte	ne
 8000f1a:	6968      	ldrne	r0, [r5, #20]
 8000f1c:	0840      	lsrne	r0, r0, #1
 8000f1e:	f000 0001 	andne.w	r0, r0, #1
 8000f22:	2002      	moveq	r0, #2
 8000f24:	9000      	str	r0, [sp, #0]
 8000f26:	2395      	movs	r3, #149	; 0x95
 8000f28:	2209      	movs	r2, #9
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	f000 fa15 	bl	800135c <PE_Send_CtrlMessage>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d1ec      	bne.n	8000f10 <PE_SubStateMachine_Generic+0x1b8>
 8000f36:	200f      	movs	r0, #15
 8000f38:	7728      	strb	r0, [r5, #28]
 8000f3a:	f8a5 901e 	strh.w	r9, [r5, #30]
 8000f3e:	241b      	movs	r4, #27
 8000f40:	2122      	movs	r1, #34	; 0x22
 8000f42:	e076      	b.n	8001032 <PE_SubStateMachine_Generic+0x2da>
 8000f44:	7830      	ldrb	r0, [r6, #0]
 8000f46:	2814      	cmp	r0, #20
 8000f48:	d02f      	beq.n	8000faa <PE_SubStateMachine_Generic+0x252>
 8000f4a:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8000f4c:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000f50:	d12b      	bne.n	8000faa <PE_SubStateMachine_Generic+0x252>
 8000f52:	f000 011f 	and.w	r1, r0, #31
 8000f56:	2903      	cmp	r1, #3
 8000f58:	d006      	beq.n	8000f68 <PE_SubStateMachine_Generic+0x210>
 8000f5a:	2904      	cmp	r1, #4
 8000f5c:	bf18      	it	ne
 8000f5e:	290c      	cmpne	r1, #12
 8000f60:	d00d      	beq.n	8000f7e <PE_SubStateMachine_Generic+0x226>
 8000f62:	2910      	cmp	r1, #16
 8000f64:	d018      	beq.n	8000f98 <PE_SubStateMachine_Generic+0x240>
 8000f66:	e020      	b.n	8000faa <PE_SubStateMachine_Generic+0x252>
 8000f68:	4628      	mov	r0, r5
 8000f6a:	f000 f9b9 	bl	80012e0 <PE_SwitchDataRole>
 8000f6e:	6868      	ldr	r0, [r5, #4]
 8000f70:	6801      	ldr	r1, [r0, #0]
 8000f72:	7c28      	ldrb	r0, [r5, #16]
 8000f74:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8000f78:	f003 ffa8 	bl	8004ecc <USBPD_PRL_SetHeaderDataRole>
 8000f7c:	e008      	b.n	8000f90 <PE_SubStateMachine_Generic+0x238>
 8000f7e:	f000 001f 	and.w	r0, r0, #31
 8000f82:	280c      	cmp	r0, #12
 8000f84:	7c28      	ldrb	r0, [r5, #16]
 8000f86:	bf0c      	ite	eq
 8000f88:	2126      	moveq	r1, #38	; 0x26
 8000f8a:	2127      	movne	r1, #39	; 0x27
 8000f8c:	f7ff faeb 	bl	8000566 <USBPD_PE_Notification>
 8000f90:	f000 f8e2 	bl	8001158 <.text_50>
 8000f94:	d107      	bne.n	8000fa6 <PE_SubStateMachine_Generic+0x24e>
 8000f96:	e008      	b.n	8000faa <PE_SubStateMachine_Generic+0x252>
 8000f98:	7c28      	ldrb	r0, [r5, #16]
 8000f9a:	2128      	movs	r1, #40	; 0x28
 8000f9c:	f7ff fae3 	bl	8000566 <USBPD_PE_Notification>
 8000fa0:	f000 f8da 	bl	8001158 <.text_50>
 8000fa4:	d001      	beq.n	8000faa <PE_SubStateMachine_Generic+0x252>
 8000fa6:	f000 f8ea 	bl	800117e <.text_53>
 8000faa:	8be8      	ldrh	r0, [r5, #30]
 8000fac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000fb0:	d106      	bne.n	8000fc0 <PE_SubStateMachine_Generic+0x268>
 8000fb2:	e074      	b.n	800109e <PE_SubStateMachine_Generic+0x346>
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	9100      	str	r1, [sp, #0]
 8000fb8:	2303      	movs	r3, #3
 8000fba:	2210      	movs	r2, #16
 8000fbc:	f000 f9ce 	bl	800135c <PE_Send_CtrlMessage>
 8000fc0:	e0b2      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 8000fc2:	f000 f8cf 	bl	8001164 <.text_51>
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	47b0      	blx	r6
 8000fca:	9803      	ldr	r0, [sp, #12]
 8000fcc:	2118      	movs	r1, #24
 8000fce:	f000 f975 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d16e      	bne.n	80010b4 <PE_SubStateMachine_Generic+0x35c>
 8000fd6:	f000 f8b7 	bl	8001148 <.text_48>
 8000fda:	f000 f8e4 	bl	80011a6 <.text_55>
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f000 f8c9 	bl	8001176 <.text_52>
 8000fe4:	2148      	movs	r1, #72	; 0x48
 8000fe6:	e024      	b.n	8001032 <PE_SubStateMachine_Generic+0x2da>
 8000fe8:	f000 f8a5 	bl	8001136 <.text_47>
 8000fec:	2113      	movs	r1, #19
 8000fee:	47b0      	blx	r6
 8000ff0:	9803      	ldr	r0, [sp, #12]
 8000ff2:	2118      	movs	r1, #24
 8000ff4:	f000 f962 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d15b      	bne.n	80010b4 <PE_SubStateMachine_Generic+0x35c>
 8000ffc:	f000 f8a4 	bl	8001148 <.text_48>
 8001000:	f000 f8d1 	bl	80011a6 <.text_55>
 8001004:	220f      	movs	r2, #15
 8001006:	f000 f8b6 	bl	8001176 <.text_52>
 800100a:	2161      	movs	r1, #97	; 0x61
 800100c:	e011      	b.n	8001032 <PE_SubStateMachine_Generic+0x2da>
 800100e:	f000 f892 	bl	8001136 <.text_47>
 8001012:	2109      	movs	r1, #9
 8001014:	47b0      	blx	r6
 8001016:	9803      	ldr	r0, [sp, #12]
 8001018:	2106      	movs	r1, #6
 800101a:	f000 f94f 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 800101e:	2800      	cmp	r0, #0
 8001020:	d148      	bne.n	80010b4 <PE_SubStateMachine_Generic+0x35c>
 8001022:	f000 f891 	bl	8001148 <.text_48>
 8001026:	f000 f8be 	bl	80011a6 <.text_55>
 800102a:	2202      	movs	r2, #2
 800102c:	f000 f8a3 	bl	8001176 <.text_52>
 8001030:	214f      	movs	r1, #79	; 0x4f
 8001032:	f000 f88e 	bl	8001152 <.text_49>
 8001036:	e077      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 8001038:	7831      	ldrb	r1, [r6, #0]
 800103a:	2914      	cmp	r1, #20
 800103c:	d02b      	beq.n	8001096 <PE_SubStateMachine_Generic+0x33e>
 800103e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8001040:	0bc8      	lsrs	r0, r1, #15
 8001042:	d114      	bne.n	800106e <PE_SubStateMachine_Generic+0x316>
 8001044:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001048:	b188      	cbz	r0, 800106e <PE_SubStateMachine_Generic+0x316>
 800104a:	f001 011f 	and.w	r1, r1, #31
 800104e:	2905      	cmp	r1, #5
 8001050:	d10d      	bne.n	800106e <PE_SubStateMachine_Generic+0x316>
 8001052:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001054:	68ac      	ldr	r4, [r5, #8]
 8001056:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800105a:	1d02      	adds	r2, r0, #4
 800105c:	7c28      	ldrb	r0, [r5, #16]
 800105e:	2304      	movs	r3, #4
 8001060:	210f      	movs	r1, #15
 8001062:	47c0      	blx	r8
 8001064:	f000 f878 	bl	8001158 <.text_50>
 8001068:	d001      	beq.n	800106e <PE_SubStateMachine_Generic+0x316>
 800106a:	f000 f888 	bl	800117e <.text_53>
 800106e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8001072:	f000 001f 	and.w	r0, r0, #31
 8001076:	2810      	cmp	r0, #16
 8001078:	d10d      	bne.n	8001096 <PE_SubStateMachine_Generic+0x33e>
 800107a:	7c28      	ldrb	r0, [r5, #16]
 800107c:	2159      	movs	r1, #89	; 0x59
 800107e:	f7ff fa72 	bl	8000566 <USBPD_PE_Notification>
 8001082:	2000      	movs	r0, #0
 8001084:	83e8      	strh	r0, [r5, #30]
 8001086:	7831      	ldrb	r1, [r6, #0]
 8001088:	2914      	cmp	r1, #20
 800108a:	d001      	beq.n	8001090 <PE_SubStateMachine_Generic+0x338>
 800108c:	f000 f877 	bl	800117e <.text_53>
 8001090:	2103      	movs	r1, #3
 8001092:	7469      	strb	r1, [r5, #17]
 8001094:	2400      	movs	r4, #0
 8001096:	8be8      	ldrh	r0, [r5, #30]
 8001098:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800109c:	d144      	bne.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 800109e:	2103      	movs	r1, #3
 80010a0:	7469      	strb	r1, [r5, #17]
 80010a2:	2400      	movs	r4, #0
 80010a4:	e040      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 80010a6:	f000 f85d 	bl	8001164 <.text_51>
 80010aa:	210d      	movs	r1, #13
 80010ac:	47b0      	blx	r6
 80010ae:	f000 f83f 	bl	8001130 <.text_46>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d136      	bne.n	8001124 <PE_SubStateMachine_Generic+0x3cc>
 80010b6:	f000 f847 	bl	8001148 <.text_48>
 80010ba:	f000 f865 	bl	8001188 <.text_54>
 80010be:	2207      	movs	r2, #7
 80010c0:	e028      	b.n	8001114 <PE_SubStateMachine_Generic+0x3bc>
 80010c2:	2100      	movs	r1, #0
 80010c4:	9104      	str	r1, [sp, #16]
 80010c6:	9103      	str	r1, [sp, #12]
 80010c8:	ab04      	add	r3, sp, #16
 80010ca:	68ae      	ldr	r6, [r5, #8]
 80010cc:	7c28      	ldrb	r0, [r5, #16]
 80010ce:	6977      	ldr	r7, [r6, #20]
 80010d0:	aa03      	add	r2, sp, #12
 80010d2:	210f      	movs	r1, #15
 80010d4:	47b8      	blx	r7
 80010d6:	9804      	ldr	r0, [sp, #16]
 80010d8:	f000 f82b 	bl	8001132 <.text_46+0x2>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d121      	bne.n	8001124 <PE_SubStateMachine_Generic+0x3cc>
 80010e0:	2103      	movs	r1, #3
 80010e2:	2201      	movs	r2, #1
 80010e4:	9002      	str	r0, [sp, #8]
 80010e6:	9101      	str	r1, [sp, #4]
 80010e8:	9200      	str	r2, [sp, #0]
 80010ea:	ab03      	add	r3, sp, #12
 80010ec:	2205      	movs	r2, #5
 80010ee:	2100      	movs	r1, #0
 80010f0:	4628      	mov	r0, r5
 80010f2:	f000 f95e 	bl	80013b2 <PE_Send_DataMessage>
 80010f6:	e017      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 80010f8:	f000 f81d 	bl	8001136 <.text_47>
 80010fc:	2111      	movs	r1, #17
 80010fe:	47b0      	blx	r6
 8001100:	9803      	ldr	r0, [sp, #12]
 8001102:	2109      	movs	r1, #9
 8001104:	f000 f8da 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 8001108:	b960      	cbnz	r0, 8001124 <PE_SubStateMachine_Generic+0x3cc>
 800110a:	f000 f81d 	bl	8001148 <.text_48>
 800110e:	f000 f83b 	bl	8001188 <.text_54>
 8001112:	2205      	movs	r2, #5
 8001114:	f000 f82f 	bl	8001176 <.text_52>
 8001118:	e006      	b.n	8001128 <PE_SubStateMachine_Generic+0x3d0>
 800111a:	7c28      	ldrb	r0, [r5, #16]
 800111c:	2150      	movs	r1, #80	; 0x50
 800111e:	f7ff fa22 	bl	8000566 <USBPD_PE_Notification>
 8001122:	e7bc      	b.n	800109e <PE_SubStateMachine_Generic+0x346>
 8001124:	2001      	movs	r0, #1
 8001126:	7468      	strb	r0, [r5, #17]
 8001128:	4620      	mov	r0, r4
 800112a:	b00b      	add	sp, #44	; 0x2c
 800112c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001130 <.text_46>:
 8001130:	9803      	ldr	r0, [sp, #12]
 8001132:	2104      	movs	r1, #4
 8001134:	e0c2      	b.n	80012bc <PE_CheckDataSizeFromGetDataInfo>

08001136 <.text_47>:
 8001136:	2100      	movs	r1, #0
 8001138:	9103      	str	r1, [sp, #12]
 800113a:	ab03      	add	r3, sp, #12
 800113c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8001140:	7c28      	ldrb	r0, [r5, #16]
 8001142:	f8dc 6014 	ldr.w	r6, [ip, #20]
 8001146:	4770      	bx	lr

08001148 <.text_48>:
 8001148:	7038      	strb	r0, [r7, #0]
 800114a:	2100      	movs	r1, #0
 800114c:	7079      	strb	r1, [r7, #1]
 800114e:	7c28      	ldrb	r0, [r5, #16]
 8001150:	e5f4      	b.n	8000d3c <PE_Get_UnchunkedSupport>

08001152 <.text_49>:
 8001152:	7c28      	ldrb	r0, [r5, #16]
 8001154:	f7ff ba07 	b.w	8000566 <USBPD_PE_Notification>

08001158 <.text_50>:
 8001158:	2003      	movs	r0, #3
 800115a:	7468      	strb	r0, [r5, #17]
 800115c:	2400      	movs	r4, #0
 800115e:	7831      	ldrb	r1, [r6, #0]
 8001160:	2914      	cmp	r1, #20
 8001162:	4770      	bx	lr

08001164 <.text_51>:
 8001164:	2000      	movs	r0, #0
 8001166:	9003      	str	r0, [sp, #12]
 8001168:	ab03      	add	r3, sp, #12
 800116a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800116e:	7c28      	ldrb	r0, [r5, #16]
 8001170:	f8dc 6014 	ldr.w	r6, [ip, #20]
 8001174:	4770      	bx	lr

08001176 <.text_52>:
 8001176:	2100      	movs	r1, #0
 8001178:	4628      	mov	r0, r5
 800117a:	f000 bbdd 	b.w	8001938 <PE_Send_ExtendedMessage>

0800117e <.text_53>:
 800117e:	2014      	movs	r0, #20
 8001180:	7030      	strb	r0, [r6, #0]
 8001182:	4628      	mov	r0, r5
 8001184:	f7ff bbf7 	b.w	8000976 <PE_Clear_RxEvent>

08001188 <.text_54>:
 8001188:	b918      	cbnz	r0, 8001192 <.text_54+0xa>
 800118a:	7878      	ldrb	r0, [r7, #1]
 800118c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001190:	7078      	strb	r0, [r7, #1]
 8001192:	2000      	movs	r0, #0
 8001194:	9a03      	ldr	r2, [sp, #12]
 8001196:	9002      	str	r0, [sp, #8]
 8001198:	1d12      	adds	r2, r2, #4
 800119a:	b292      	uxth	r2, r2
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	2103      	movs	r1, #3
 80011a0:	9101      	str	r1, [sp, #4]
 80011a2:	4643      	mov	r3, r8
 80011a4:	4770      	bx	lr

080011a6 <.text_55>:
 80011a6:	b918      	cbnz	r0, 80011b0 <.text_55+0xa>
 80011a8:	7878      	ldrb	r0, [r7, #1]
 80011aa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80011ae:	7078      	strb	r0, [r7, #1]
 80011b0:	2000      	movs	r0, #0
 80011b2:	9a03      	ldr	r2, [sp, #12]
 80011b4:	9002      	str	r0, [sp, #8]
 80011b6:	1d12      	adds	r2, r2, #4
 80011b8:	2103      	movs	r1, #3
 80011ba:	b292      	uxth	r2, r2
 80011bc:	9101      	str	r1, [sp, #4]
 80011be:	9200      	str	r2, [sp, #0]
 80011c0:	4643      	mov	r3, r8
 80011c2:	4770      	bx	lr

080011c4 <PE_SubStateMachine_ReceiveDRS>:
 80011c4:	b51c      	push	{r2, r3, r4, lr}
 80011c6:	4604      	mov	r4, r0
 80011c8:	68a1      	ldr	r1, [r4, #8]
 80011ca:	7c20      	ldrb	r0, [r4, #16]
 80011cc:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80011ce:	4790      	blx	r2
 80011d0:	280a      	cmp	r0, #10
 80011d2:	d002      	beq.n	80011da <PE_SubStateMachine_ReceiveDRS+0x16>
 80011d4:	280c      	cmp	r0, #12
 80011d6:	d015      	beq.n	8001204 <PE_SubStateMachine_ReceiveDRS+0x40>
 80011d8:	e016      	b.n	8001208 <PE_SubStateMachine_ReceiveDRS+0x44>
 80011da:	2000      	movs	r0, #0
 80011dc:	9000      	str	r0, [sp, #0]
 80011de:	2303      	movs	r3, #3
 80011e0:	2203      	movs	r2, #3
 80011e2:	2100      	movs	r1, #0
 80011e4:	4620      	mov	r0, r4
 80011e6:	f000 f8b9 	bl	800135c <PE_Send_CtrlMessage>
 80011ea:	b9c0      	cbnz	r0, 800121e <PE_SubStateMachine_ReceiveDRS+0x5a>
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f877 	bl	80012e0 <PE_SwitchDataRole>
 80011f2:	6860      	ldr	r0, [r4, #4]
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	7c20      	ldrb	r0, [r4, #16]
 80011f8:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
 80011fc:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8001200:	f003 be64 	b.w	8004ecc <USBPD_PRL_SetHeaderDataRole>
 8001204:	202a      	movs	r0, #42	; 0x2a
 8001206:	e006      	b.n	8001216 <PE_SubStateMachine_ReceiveDRS+0x52>
 8001208:	6860      	ldr	r0, [r4, #4]
 800120a:	7801      	ldrb	r1, [r0, #0]
 800120c:	f001 0103 	and.w	r1, r1, #3
 8001210:	2902      	cmp	r1, #2
 8001212:	d102      	bne.n	800121a <PE_SubStateMachine_ReceiveDRS+0x56>
 8001214:	2001      	movs	r0, #1
 8001216:	7460      	strb	r0, [r4, #17]
 8001218:	bd13      	pop	{r0, r1, r4, pc}
 800121a:	212a      	movs	r1, #42	; 0x2a
 800121c:	7461      	strb	r1, [r4, #17]
 800121e:	bd13      	pop	{r0, r1, r4, pc}

08001220 <PE_UpdateTimer>:
 8001220:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001224:	4770      	bx	lr

08001226 <PE_CallHardResetCallback>:
 8001226:	6883      	ldr	r3, [r0, #8]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf1c      	itt	ne
 800122e:	7c00      	ldrbne	r0, [r0, #16]

08001230 <__iar_annotation$$tailcall>:
 8001230:	4718      	bxne	r3
 8001232:	4770      	bx	lr

08001234 <PE_SetPowerNegotiation>:
 8001234:	6842      	ldr	r2, [r0, #4]
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800123c:	4299      	cmp	r1, r3
 800123e:	d005      	beq.n	800124c <PE_SetPowerNegotiation+0x18>
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f361 230a 	bfi	r3, r1, #8, #3
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	215a      	movs	r1, #90	; 0x5a
 800124a:	e057      	b.n	80012fc <.text_69>
 800124c:	4770      	bx	lr

0800124e <USBPD_PE_ExecFastRoleSwapSignalling>:
 800124e:	4906      	ldr	r1, [pc, #24]	; (8001268 <.text_63>)
 8001250:	4602      	mov	r2, r0
 8001252:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

08001256 <.text_61>:
 8001256:	694a      	ldr	r2, [r1, #20]
 8001258:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800125c:	614a      	str	r2, [r1, #20]
 800125e:	6889      	ldr	r1, [r1, #8]
 8001260:	6a8a      	ldr	r2, [r1, #40]	; 0x28

08001262 <__iar_annotation$$tailcall>:
 8001262:	4710      	bx	r2

08001264 <.text_62>:
 8001264:	0801cab8 	.word	0x0801cab8

08001268 <.text_63>:
 8001268:	20000374 	.word	0x20000374

0800126c <PE_CalculateMinTiming>:
 800126c:	4601      	mov	r1, r0
 800126e:	f04f 30ff 	mov.w	r0, #4294967295
 8001272:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
 8001274:	0453      	lsls	r3, r2, #17
 8001276:	bf1c      	itt	ne
 8001278:	8c88      	ldrhne	r0, [r1, #36]	; 0x24
 800127a:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 800127e:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8001280:	0453      	lsls	r3, r2, #17
 8001282:	d007      	beq.n	8001294 <PE_CalculateMinTiming+0x28>
 8001284:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8001286:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800128a:	4290      	cmp	r0, r2
 800128c:	bf24      	itt	cs
 800128e:	8c48      	ldrhcs	r0, [r1, #34]	; 0x22
 8001290:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001294:	4770      	bx	lr

08001296 <PE_SetPowerNegociation>:
 8001296:	b538      	push	{r3, r4, r5, lr}
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	6860      	ldr	r0, [r4, #4]
 800129e:	6802      	ldr	r2, [r0, #0]
 80012a0:	f3c2 2002 	ubfx	r0, r2, #8, #3
 80012a4:	4285      	cmp	r5, r0
 80012a6:	d003      	beq.n	80012b0 <PE_SetPowerNegociation+0x1a>
 80012a8:	7c20      	ldrb	r0, [r4, #16]
 80012aa:	215a      	movs	r1, #90	; 0x5a
 80012ac:	f7ff f95b 	bl	8000566 <USBPD_PE_Notification>
 80012b0:	6860      	ldr	r0, [r4, #4]
 80012b2:	6801      	ldr	r1, [r0, #0]
 80012b4:	f365 210a 	bfi	r1, r5, #8, #3
 80012b8:	6001      	str	r1, [r0, #0]
 80012ba:	bd31      	pop	{r0, r4, r5, pc}

080012bc <PE_CheckDataSizeFromGetDataInfo>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	2200      	movs	r2, #0
 80012c0:	4288      	cmp	r0, r1
 80012c2:	d208      	bcs.n	80012d6 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80012c4:	2018      	movs	r0, #24
 80012c6:	4c05      	ldr	r4, [pc, #20]	; (80012dc <.text_67>)
 80012c8:	a30e      	add	r3, pc, #56	; (adr r3, 8001304 <.text_70>)
 80012ca:	6825      	ldr	r5, [r4, #0]
 80012cc:	9000      	str	r0, [sp, #0]
 80012ce:	2100      	movs	r1, #0
 80012d0:	2006      	movs	r0, #6
 80012d2:	47a8      	blx	r5
 80012d4:	2202      	movs	r2, #2
 80012d6:	4610      	mov	r0, r2
 80012d8:	bd32      	pop	{r1, r4, r5, pc}
	...

080012dc <.text_67>:
 80012dc:	20000000 	.word	0x20000000

080012e0 <PE_SwitchDataRole>:
 80012e0:	6842      	ldr	r2, [r0, #4]
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 80012e8:	b921      	cbnz	r1, 80012f4 <PE_SwitchDataRole+0x14>
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	2125      	movs	r1, #37	; 0x25
 80012f2:	e003      	b.n	80012fc <.text_69>
 80012f4:	f023 0308 	bic.w	r3, r3, #8
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	2124      	movs	r1, #36	; 0x24

080012fc <.text_69>:
 80012fc:	7c00      	ldrb	r0, [r0, #16]
 80012fe:	f7ff b932 	b.w	8000566 <USBPD_PE_Notification>
	...

08001304 <.text_70>:
 8001304:	61746144 	.word	0x61746144
 8001308:	7a695320 	.word	0x7a695320
 800130c:	73692065 	.word	0x73692065
 8001310:	746f6e20 	.word	0x746f6e20
 8001314:	726f6320 	.word	0x726f6320
 8001318:	74636572 	.word	0x74636572
 800131c:	00000000 	.word	0x00000000

08001320 <USBPD_PE_SetTrace>:
 8001320:	0001      	movs	r1, r0
 8001322:	4906      	ldr	r1, [pc, #24]	; (800133c <.text_5>)
 8001324:	bf08      	it	eq
 8001326:	f20f 0031 	addweq	r0, pc, #49	; 0x31
 800132a:	6008      	str	r0, [r1, #0]
 800132c:	4770      	bx	lr

0800132e <USBPD_PE_CheckLIB>:
 800132e:	4904      	ldr	r1, [pc, #16]	; (8001340 <.text_6>)
 8001330:	4288      	cmp	r0, r1
 8001332:	d101      	bne.n	8001338 <USBPD_PE_CheckLIB+0xa>
 8001334:	2001      	movs	r0, #1
 8001336:	4770      	bx	lr
 8001338:	2000      	movs	r0, #0
 800133a:	4770      	bx	lr

0800133c <.text_5>:
 800133c:	20000000 	.word	0x20000000

08001340 <.text_6>:
 8001340:	30330000 	.word	0x30330000

08001344 <USBPD_PE_GetMemoryConsumption>:
 8001344:	b510      	push	{r4, lr}
 8001346:	f003 fda3 	bl	8004e90 <USBPD_PRL_GetMemoryConsumption>
 800134a:	4604      	mov	r4, r0
 800134c:	f7ff f851 	bl	80003f2 <USBPD_CAD_GetMemoryConsumption>
 8001350:	1904      	adds	r4, r0, r4
 8001352:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 8001356:	bd10      	pop	{r4, pc}

08001358 <PE_Trace_Empty>:
 8001358:	4770      	bx	lr
	...

0800135c <PE_Send_CtrlMessage>:
 800135c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8001360:	9c08      	ldr	r4, [sp, #32]
 8001362:	4606      	mov	r6, r0
 8001364:	4688      	mov	r8, r1
 8001366:	4617      	mov	r7, r2
 8001368:	461d      	mov	r5, r3
 800136a:	f000 f81d 	bl	80013a8 <.text_3>
 800136e:	b180      	cbz	r0, 8001392 <PE_Send_CtrlMessage+0x36>
 8001370:	9401      	str	r4, [sp, #4]
 8001372:	2002      	movs	r0, #2
 8001374:	9000      	str	r0, [sp, #0]
 8001376:	f206 2363 	addw	r3, r6, #611	; 0x263
 800137a:	7c30      	ldrb	r0, [r6, #16]
 800137c:	463a      	mov	r2, r7
 800137e:	4641      	mov	r1, r8
 8001380:	f003 fdd8 	bl	8004f34 <USBPD_PRL_SendMessage>
 8001384:	2803      	cmp	r0, #3
 8001386:	d0f0      	beq.n	800136a <PE_Send_CtrlMessage+0xe>
 8001388:	2f0d      	cmp	r7, #13
 800138a:	bf0c      	ite	eq
 800138c:	2201      	moveq	r2, #1
 800138e:	2200      	movne	r2, #0
 8001390:	e002      	b.n	8001398 <PE_Send_CtrlMessage+0x3c>
 8001392:	7470      	strb	r0, [r6, #17]
 8001394:	2010      	movs	r0, #16
 8001396:	e005      	b.n	80013a4 <PE_Send_CtrlMessage+0x48>
 8001398:	4603      	mov	r3, r0
 800139a:	9500      	str	r5, [sp, #0]
 800139c:	4641      	mov	r1, r8
 800139e:	4630      	mov	r0, r6
 80013a0:	f000 faee 	bl	8001980 <PE_CheckSendMessageStatus>
 80013a4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080013a8 <.text_3>:
 80013a8:	6870      	ldr	r0, [r6, #4]
 80013aa:	6801      	ldr	r1, [r0, #0]
 80013ac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80013b0:	4770      	bx	lr

080013b2 <PE_Send_DataMessage>:
 80013b2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80013b6:	4605      	mov	r5, r0
 80013b8:	9f08      	ldr	r7, [sp, #32]
 80013ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80013bc:	460e      	mov	r6, r1
 80013be:	4690      	mov	r8, r2
 80013c0:	2000      	movs	r0, #0
 80013c2:	e010      	b.n	80013e6 <PE_Send_DataMessage+0x34>
 80013c4:	2100      	movs	r1, #0
 80013c6:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 80013ca:	f8d3 c000 	ldr.w	ip, [r3]
 80013ce:	440a      	add	r2, r1
 80013d0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80013d4:	1c49      	adds	r1, r1, #1
 80013d6:	fa2c fc0e 	lsr.w	ip, ip, lr
 80013da:	2904      	cmp	r1, #4
 80013dc:	f882 c265 	strb.w	ip, [r2, #613]	; 0x265
 80013e0:	d3f1      	bcc.n	80013c6 <PE_Send_DataMessage+0x14>
 80013e2:	1d1b      	adds	r3, r3, #4
 80013e4:	1c40      	adds	r0, r0, #1
 80013e6:	42b8      	cmp	r0, r7
 80013e8:	d3ec      	bcc.n	80013c4 <PE_Send_DataMessage+0x12>
 80013ea:	6868      	ldr	r0, [r5, #4]
 80013ec:	f7ff ffdd 	bl	80013aa <.text_3+0x2>
 80013f0:	b1b8      	cbz	r0, 8001422 <PE_Send_DataMessage+0x70>
 80013f2:	00b8      	lsls	r0, r7, #2
 80013f4:	1c80      	adds	r0, r0, #2
 80013f6:	b280      	uxth	r0, r0
 80013f8:	9000      	str	r0, [sp, #0]
 80013fa:	9401      	str	r4, [sp, #4]
 80013fc:	f205 2363 	addw	r3, r5, #611	; 0x263
 8001400:	7c28      	ldrb	r0, [r5, #16]
 8001402:	4642      	mov	r2, r8
 8001404:	4631      	mov	r1, r6
 8001406:	f003 fd95 	bl	8004f34 <USBPD_PRL_SendMessage>
 800140a:	2803      	cmp	r0, #3
 800140c:	d0ed      	beq.n	80013ea <PE_Send_DataMessage+0x38>
 800140e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001410:	9100      	str	r1, [sp, #0]
 8001412:	4603      	mov	r3, r0
 8001414:	2200      	movs	r2, #0
 8001416:	4631      	mov	r1, r6
 8001418:	4628      	mov	r0, r5
 800141a:	f000 fab1 	bl	8001980 <PE_CheckSendMessageStatus>
 800141e:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}
 8001422:	2010      	movs	r0, #16
 8001424:	e7fb      	b.n	800141e <PE_Send_DataMessage+0x6c>

08001426 <PE_Receive_BIST>:
 8001426:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001428:	4604      	mov	r4, r0
 800142a:	2100      	movs	r1, #0
 800142c:	9101      	str	r1, [sp, #4]
 800142e:	9100      	str	r1, [sp, #0]
 8001430:	466b      	mov	r3, sp
 8001432:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001434:	7881      	ldrb	r1, [r0, #2]
 8001436:	78c2      	ldrb	r2, [r0, #3]
 8001438:	68a6      	ldr	r6, [r4, #8]
 800143a:	6977      	ldr	r7, [r6, #20]
 800143c:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001440:	7901      	ldrb	r1, [r0, #4]
 8001442:	7940      	ldrb	r0, [r0, #5]
 8001444:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001448:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 800144c:	7c20      	ldrb	r0, [r4, #16]
 800144e:	aa01      	add	r2, sp, #4
 8001450:	2103      	movs	r1, #3
 8001452:	47b8      	blx	r7
 8001454:	9800      	ldr	r0, [sp, #0]
 8001456:	2104      	movs	r1, #4
 8001458:	f7ff ff30 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 800145c:	2800      	cmp	r0, #0
 800145e:	bf01      	itttt	eq
 8001460:	6860      	ldreq	r0, [r4, #4]
 8001462:	6801      	ldreq	r1, [r0, #0]
 8001464:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001468:	2803      	cmpeq	r0, #3
 800146a:	d104      	bne.n	8001476 <PE_Receive_BIST+0x50>
 800146c:	9801      	ldr	r0, [sp, #4]
 800146e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001472:	4288      	cmp	r0, r1
 8001474:	d002      	beq.n	800147c <PE_Receive_BIST+0x56>
 8001476:	2203      	movs	r2, #3
 8001478:	7462      	strb	r2, [r4, #17]
 800147a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800147c:	0f2d      	lsrs	r5, r5, #28
 800147e:	2d05      	cmp	r5, #5
 8001480:	d006      	beq.n	8001490 <PE_Receive_BIST+0x6a>
 8001482:	2d08      	cmp	r5, #8
 8001484:	d006      	beq.n	8001494 <PE_Receive_BIST+0x6e>
 8001486:	2d09      	cmp	r5, #9
 8001488:	d006      	beq.n	8001498 <PE_Receive_BIST+0x72>
 800148a:	2d0a      	cmp	r5, #10
 800148c:	d006      	beq.n	800149c <PE_Receive_BIST+0x76>
 800148e:	e00a      	b.n	80014a6 <PE_Receive_BIST+0x80>
 8001490:	2027      	movs	r0, #39	; 0x27
 8001492:	e009      	b.n	80014a8 <PE_Receive_BIST+0x82>
 8001494:	2029      	movs	r0, #41	; 0x29
 8001496:	e007      	b.n	80014a8 <PE_Receive_BIST+0x82>
 8001498:	2165      	movs	r1, #101	; 0x65
 800149a:	e000      	b.n	800149e <PE_Receive_BIST+0x78>
 800149c:	2166      	movs	r1, #102	; 0x66
 800149e:	f000 f8ea 	bl	8001676 <.text_7>
 80014a2:	2003      	movs	r0, #3
 80014a4:	e000      	b.n	80014a8 <PE_Receive_BIST+0x82>
 80014a6:	202a      	movs	r0, #42	; 0x2a
 80014a8:	7460      	strb	r0, [r4, #17]
 80014aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080014ac <PE_Check_ControlMessage>:
 80014ac:	b510      	push	{r4, lr}
 80014ae:	4604      	mov	r4, r0
 80014b0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80014b4:	f000 001f 	and.w	r0, r0, #31
 80014b8:	1e40      	subs	r0, r0, #1
 80014ba:	2815      	cmp	r0, #21
 80014bc:	f200 80d2 	bhi.w	8001664 <PE_Check_ControlMessage+0x1b8>
 80014c0:	e8df f000 	tbb	[pc, r0]
 80014c4:	cece0bd8 	.word	0xcece0bd8
 80014c8:	5c1dced8 	.word	0x5c1dced8
 80014cc:	ce3e2f48 	.word	0xce3e2f48
 80014d0:	c8d0d016 	.word	0xc8d0d016
 80014d4:	a8c39b76 	.word	0xa8c39b76
 80014d8:	8abc      	.short	0x8abc
 80014da:	f000 f93c 	bl	8001756 <.text_10>
 80014de:	f040 80c9 	bne.w	8001674 <PE_Check_ControlMessage+0x1c8>
 80014e2:	2002      	movs	r0, #2
 80014e4:	7720      	strb	r0, [r4, #28]
 80014e6:	212b      	movs	r1, #43	; 0x2b
 80014e8:	f000 f8c5 	bl	8001676 <.text_7>
 80014ec:	2198      	movs	r1, #152	; 0x98
 80014ee:	e0af      	b.n	8001650 <PE_Check_ControlMessage+0x1a4>
 80014f0:	2003      	movs	r0, #3
 80014f2:	7720      	strb	r0, [r4, #28]
 80014f4:	2132      	movs	r1, #50	; 0x32
 80014f6:	f000 f8be 	bl	8001676 <.text_7>
 80014fa:	2010      	movs	r0, #16
 80014fc:	e0b9      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 80014fe:	2106      	movs	r1, #6
 8001500:	6860      	ldr	r0, [r4, #4]
 8001502:	7721      	strb	r1, [r4, #28]
 8001504:	f000 f928 	bl	8001758 <.text_10+0x2>
 8001508:	bf01      	itttt	eq
 800150a:	6820      	ldreq	r0, [r4, #0]
 800150c:	6842      	ldreq	r2, [r0, #4]
 800150e:	f3c2 00c0 	ubfxeq	r0, r2, #3, #1
 8001512:	2800      	cmpeq	r0, #0
 8001514:	d046      	beq.n	80015a4 <PE_Check_ControlMessage+0xf8>
 8001516:	7c20      	ldrb	r0, [r4, #16]
 8001518:	210c      	movs	r1, #12
 800151a:	f7ff f824 	bl	8000566 <USBPD_PE_Notification>
 800151e:	204c      	movs	r0, #76	; 0x4c
 8001520:	e0a7      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 8001522:	6820      	ldr	r0, [r4, #0]
 8001524:	6841      	ldr	r1, [r0, #4]
 8001526:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 800152a:	b130      	cbz	r0, 800153a <PE_Check_ControlMessage+0x8e>
 800152c:	2008      	movs	r0, #8
 800152e:	7720      	strb	r0, [r4, #28]
 8001530:	213c      	movs	r1, #60	; 0x3c
 8001532:	f000 f8a0 	bl	8001676 <.text_7>
 8001536:	2022      	movs	r0, #34	; 0x22
 8001538:	e09b      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 800153a:	6860      	ldr	r0, [r4, #4]
 800153c:	7801      	ldrb	r1, [r0, #0]
 800153e:	e031      	b.n	80015a4 <PE_Check_ControlMessage+0xf8>
 8001540:	68a1      	ldr	r1, [r4, #8]
 8001542:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001544:	b118      	cbz	r0, 800154e <PE_Check_ControlMessage+0xa2>
 8001546:	2110      	movs	r1, #16
 8001548:	7721      	strb	r1, [r4, #28]
 800154a:	209d      	movs	r0, #157	; 0x9d
 800154c:	e091      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 800154e:	6860      	ldr	r0, [r4, #4]
 8001550:	7801      	ldrb	r1, [r0, #0]
 8001552:	e027      	b.n	80015a4 <PE_Check_ControlMessage+0xf8>
 8001554:	7c20      	ldrb	r0, [r4, #16]
 8001556:	2123      	movs	r1, #35	; 0x23
 8001558:	f7ff f805 	bl	8000566 <USBPD_PE_Notification>
 800155c:	6960      	ldr	r0, [r4, #20]
 800155e:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8001562:	b108      	cbz	r0, 8001568 <PE_Check_ControlMessage+0xbc>
 8001564:	200f      	movs	r0, #15
 8001566:	e084      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 8001568:	68a1      	ldr	r1, [r4, #8]
 800156a:	6b88      	ldr	r0, [r1, #56]	; 0x38
 800156c:	b910      	cbnz	r0, 8001574 <PE_Check_ControlMessage+0xc8>
 800156e:	6860      	ldr	r0, [r4, #4]
 8001570:	7801      	ldrb	r1, [r0, #0]
 8001572:	e017      	b.n	80015a4 <PE_Check_ControlMessage+0xf8>
 8001574:	200f      	movs	r0, #15
 8001576:	7720      	strb	r0, [r4, #28]
 8001578:	2193      	movs	r1, #147	; 0x93
 800157a:	e069      	b.n	8001650 <PE_Check_ControlMessage+0x1a4>
 800157c:	6860      	ldr	r0, [r4, #4]
 800157e:	6801      	ldr	r1, [r0, #0]
 8001580:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001584:	2803      	cmp	r0, #3
 8001586:	d10d      	bne.n	80015a4 <PE_Check_ControlMessage+0xf8>
 8001588:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800158c:	b120      	cbz	r0, 8001598 <PE_Check_ControlMessage+0xec>
 800158e:	6820      	ldr	r0, [r4, #0]
 8001590:	6842      	ldr	r2, [r0, #4]
 8001592:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8001596:	b128      	cbz	r0, 80015a4 <PE_Check_ControlMessage+0xf8>
 8001598:	211d      	movs	r1, #29
 800159a:	7461      	strb	r1, [r4, #17]
 800159c:	2007      	movs	r0, #7
 800159e:	7720      	strb	r0, [r4, #28]
 80015a0:	2106      	movs	r1, #6
 80015a2:	e058      	b.n	8001656 <PE_Check_ControlMessage+0x1aa>
 80015a4:	f001 0103 	and.w	r1, r1, #3
 80015a8:	2902      	cmp	r1, #2
 80015aa:	d061      	beq.n	8001670 <PE_Check_ControlMessage+0x1c4>
 80015ac:	212a      	movs	r1, #42	; 0x2a
 80015ae:	e04f      	b.n	8001650 <PE_Check_ControlMessage+0x1a4>
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	8908      	ldrh	r0, [r1, #8]
 80015b4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d059      	beq.n	8001670 <PE_Check_ControlMessage+0x1c4>
 80015bc:	f000 f8c5 	bl	800174a <.text_9>
 80015c0:	bf02      	ittt	eq
 80015c2:	6848      	ldreq	r0, [r1, #4]
 80015c4:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
 80015c8:	2800      	cmpeq	r0, #0
 80015ca:	d051      	beq.n	8001670 <PE_Check_ControlMessage+0x1c4>
 80015cc:	2163      	movs	r1, #99	; 0x63
 80015ce:	7461      	strb	r1, [r4, #17]
 80015d0:	200a      	movs	r0, #10
 80015d2:	7720      	strb	r0, [r4, #28]
 80015d4:	2146      	movs	r1, #70	; 0x46
 80015d6:	e03e      	b.n	8001656 <PE_Check_ControlMessage+0x1aa>
 80015d8:	6860      	ldr	r0, [r4, #4]
 80015da:	6801      	ldr	r1, [r0, #0]
 80015dc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80015e0:	b128      	cbz	r0, 80015ee <PE_Check_ControlMessage+0x142>
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	6841      	ldr	r1, [r0, #4]
 80015e6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d040      	beq.n	8001670 <PE_Check_ControlMessage+0x1c4>
 80015ee:	2164      	movs	r1, #100	; 0x64
 80015f0:	7461      	strb	r1, [r4, #17]
 80015f2:	205f      	movs	r0, #95	; 0x5f
 80015f4:	7720      	strb	r0, [r4, #28]
 80015f6:	2160      	movs	r1, #96	; 0x60
 80015f8:	e02d      	b.n	8001656 <PE_Check_ControlMessage+0x1aa>
 80015fa:	6820      	ldr	r0, [r4, #0]
 80015fc:	8901      	ldrh	r1, [r0, #8]
 80015fe:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001602:	2800      	cmp	r0, #0
 8001604:	d023      	beq.n	800164e <PE_Check_ControlMessage+0x1a2>
 8001606:	200b      	movs	r0, #11
 8001608:	7720      	strb	r0, [r4, #28]
 800160a:	214d      	movs	r1, #77	; 0x4d
 800160c:	f000 f833 	bl	8001676 <.text_7>
 8001610:	2030      	movs	r0, #48	; 0x30
 8001612:	e02e      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	8901      	ldrh	r1, [r0, #8]
 8001618:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800161c:	2800      	cmp	r0, #0
 800161e:	d027      	beq.n	8001670 <PE_Check_ControlMessage+0x1c4>
 8001620:	200b      	movs	r0, #11
 8001622:	7720      	strb	r0, [r4, #28]
 8001624:	2149      	movs	r1, #73	; 0x49
 8001626:	f000 f826 	bl	8001676 <.text_7>
 800162a:	6860      	ldr	r0, [r4, #4]
 800162c:	6801      	ldr	r1, [r0, #0]
 800162e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001632:	b108      	cbz	r0, 8001638 <PE_Check_ControlMessage+0x18c>
 8001634:	202d      	movs	r0, #45	; 0x2d
 8001636:	e01c      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 8001638:	2111      	movs	r1, #17
 800163a:	e009      	b.n	8001650 <PE_Check_ControlMessage+0x1a4>
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	8901      	ldrh	r1, [r0, #8]
 8001640:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001644:	b118      	cbz	r0, 800164e <PE_Check_ControlMessage+0x1a2>
 8001646:	202f      	movs	r0, #47	; 0x2f
 8001648:	e013      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 800164a:	2009      	movs	r0, #9
 800164c:	7720      	strb	r0, [r4, #28]
 800164e:	2101      	movs	r1, #1
 8001650:	7461      	strb	r1, [r4, #17]
 8001652:	bd10      	pop	{r4, pc}
 8001654:	2159      	movs	r1, #89	; 0x59
 8001656:	7c20      	ldrb	r0, [r4, #16]
 8001658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800165c:	f7fe bf83 	b.w	8000566 <USBPD_PE_Notification>
 8001660:	2011      	movs	r0, #17
 8001662:	e006      	b.n	8001672 <PE_Check_ControlMessage+0x1c6>
 8001664:	6860      	ldr	r0, [r4, #4]
 8001666:	7801      	ldrb	r1, [r0, #0]
 8001668:	f001 0103 	and.w	r1, r1, #3
 800166c:	2902      	cmp	r1, #2
 800166e:	d101      	bne.n	8001674 <PE_Check_ControlMessage+0x1c8>
 8001670:	2001      	movs	r0, #1
 8001672:	7460      	strb	r0, [r4, #17]
 8001674:	bd10      	pop	{r4, pc}

08001676 <.text_7>:
 8001676:	7c20      	ldrb	r0, [r4, #16]
 8001678:	f7fe bf75 	b.w	8000566 <USBPD_PE_Notification>

0800167c <PE_Check_DataMessage>:
 800167c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800167e:	4604      	mov	r4, r0
 8001680:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8001682:	f001 001f 	and.w	r0, r1, #31
 8001686:	2801      	cmp	r0, #1
 8001688:	d026      	beq.n	80016d8 <PE_Check_DataMessage+0x5c>
 800168a:	2802      	cmp	r0, #2
 800168c:	d008      	beq.n	80016a0 <PE_Check_DataMessage+0x24>
 800168e:	2803      	cmp	r0, #3
 8001690:	d037      	beq.n	8001702 <PE_Check_DataMessage+0x86>
 8001692:	2806      	cmp	r0, #6
 8001694:	d03d      	beq.n	8001712 <PE_Check_DataMessage+0x96>
 8001696:	2807      	cmp	r0, #7
 8001698:	d04a      	beq.n	8001730 <PE_Check_DataMessage+0xb4>
 800169a:	280f      	cmp	r0, #15
 800169c:	d035      	beq.n	800170a <PE_Check_DataMessage+0x8e>
 800169e:	e051      	b.n	8001744 <PE_Check_DataMessage+0xc8>
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	7881      	ldrb	r1, [r0, #2]
 80016a4:	78c2      	ldrb	r2, [r0, #3]
 80016a6:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 80016aa:	7901      	ldrb	r1, [r0, #4]
 80016ac:	7940      	ldrb	r0, [r0, #5]
 80016ae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80016b2:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	f000 f84d 	bl	8001756 <.text_10>
 80016bc:	d044      	beq.n	8001748 <PE_Check_DataMessage+0xcc>
 80016be:	68a5      	ldr	r5, [r4, #8]
 80016c0:	7c20      	ldrb	r0, [r4, #16]
 80016c2:	69ae      	ldr	r6, [r5, #24]
 80016c4:	2304      	movs	r3, #4
 80016c6:	466a      	mov	r2, sp
 80016c8:	2106      	movs	r1, #6
 80016ca:	47b0      	blx	r6
 80016cc:	2001      	movs	r0, #1
 80016ce:	7720      	strb	r0, [r4, #28]
 80016d0:	2100      	movs	r1, #0
 80016d2:	84a1      	strh	r1, [r4, #36]	; 0x24
 80016d4:	2009      	movs	r0, #9
 80016d6:	e036      	b.n	8001746 <PE_Check_DataMessage+0xca>
 80016d8:	f000 f837 	bl	800174a <.text_9>
 80016dc:	d134      	bne.n	8001748 <PE_Check_DataMessage+0xcc>
 80016de:	7c20      	ldrb	r0, [r4, #16]
 80016e0:	f3c1 1181 	ubfx	r1, r1, #6, #2
 80016e4:	f7ff fa85 	bl	8000bf2 <PE_ExtRevisionInteroperability>
 80016e8:	68a5      	ldr	r5, [r4, #8]
 80016ea:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80016ec:	69ae      	ldr	r6, [r5, #24]
 80016ee:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80016f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016f4:	1c82      	adds	r2, r0, #2
 80016f6:	7c20      	ldrb	r0, [r4, #16]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	2104      	movs	r1, #4
 80016fc:	47b0      	blx	r6
 80016fe:	2044      	movs	r0, #68	; 0x44
 8001700:	e021      	b.n	8001746 <PE_Check_DataMessage+0xca>
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fe8f 	bl	8001426 <PE_Receive_BIST>
 8001708:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800170a:	4620      	mov	r0, r4
 800170c:	f003 fa31 	bl	8004b72 <PE_Check_DataMessageVDM>
 8001710:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001712:	6820      	ldr	r0, [r4, #0]
 8001714:	8901      	ldrh	r1, [r0, #8]
 8001716:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800171a:	b180      	cbz	r0, 800173e <PE_Check_DataMessage+0xc2>
 800171c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800171e:	68a5      	ldr	r5, [r4, #8]
 8001720:	69ae      	ldr	r6, [r5, #24]
 8001722:	1c82      	adds	r2, r0, #2
 8001724:	7c20      	ldrb	r0, [r4, #16]
 8001726:	2304      	movs	r3, #4
 8001728:	210b      	movs	r1, #11
 800172a:	47b0      	blx	r6
 800172c:	202c      	movs	r0, #44	; 0x2c
 800172e:	e00a      	b.n	8001746 <PE_Check_DataMessage+0xca>
 8001730:	6820      	ldr	r0, [r4, #0]
 8001732:	8901      	ldrh	r1, [r0, #8]
 8001734:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001738:	b108      	cbz	r0, 800173e <PE_Check_DataMessage+0xc2>
 800173a:	203d      	movs	r0, #61	; 0x3d
 800173c:	e003      	b.n	8001746 <PE_Check_DataMessage+0xca>
 800173e:	2101      	movs	r1, #1
 8001740:	7461      	strb	r1, [r4, #17]
 8001742:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001744:	2011      	movs	r0, #17
 8001746:	7460      	strb	r0, [r4, #17]
 8001748:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

0800174a <.text_9>:
 800174a:	6860      	ldr	r0, [r4, #4]
 800174c:	6802      	ldr	r2, [r0, #0]
 800174e:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8001752:	2800      	cmp	r0, #0
 8001754:	4770      	bx	lr

08001756 <.text_10>:
 8001756:	6860      	ldr	r0, [r4, #4]
 8001758:	6801      	ldr	r1, [r0, #0]
 800175a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800175e:	2800      	cmp	r0, #0
 8001760:	4770      	bx	lr
	...

08001764 <PE_Check_ExtendedMessage>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	4604      	mov	r4, r0
 8001768:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800176a:	7881      	ldrb	r1, [r0, #2]
 800176c:	78c0      	ldrb	r0, [r0, #3]
 800176e:	eb01 2300 	add.w	r3, r1, r0, lsl #8
 8001772:	f204 215a 	addw	r1, r4, #602	; 0x25a
 8001776:	800b      	strh	r3, [r1, #0]
 8001778:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800177c:	f000 001f 	and.w	r0, r0, #31
 8001780:	7088      	strb	r0, [r1, #2]
 8001782:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8001786:	2800      	cmp	r0, #0
 8001788:	bf1e      	ittt	ne
 800178a:	f3c3 2080 	ubfxne	r0, r3, #10, #1
 800178e:	2800      	cmpne	r0, #0
 8001790:	2034      	movne	r0, #52	; 0x34
 8001792:	d129      	bne.n	80017e8 <PE_Check_ExtendedMessage+0x84>
 8001794:	0418      	lsls	r0, r3, #16
 8001796:	0fc0      	lsrs	r0, r0, #31
 8001798:	f204 2281 	addw	r2, r4, #641	; 0x281
 800179c:	f3c3 0508 	ubfx	r5, r3, #0, #9
 80017a0:	d10b      	bne.n	80017ba <PE_Check_ExtendedMessage+0x56>
 80017a2:	f8a4 548e 	strh.w	r5, [r4, #1166]	; 0x48e
 80017a6:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 80017aa:	4298      	cmp	r0, r3
 80017ac:	d218      	bcs.n	80017e0 <PE_Check_ExtendedMessage+0x7c>
 80017ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80017b0:	1d2b      	adds	r3, r5, #4
 80017b2:	5c1e      	ldrb	r6, [r3, r0]
 80017b4:	5416      	strb	r6, [r2, r0]
 80017b6:	1c40      	adds	r0, r0, #1
 80017b8:	e7f5      	b.n	80017a6 <PE_Check_ExtendedMessage+0x42>
 80017ba:	f413 4ff8 	tst.w	r3, #31744	; 0x7c00
 80017be:	d107      	bne.n	80017d0 <PE_Check_ExtendedMessage+0x6c>
 80017c0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80017c2:	f3c0 3002 	ubfx	r0, r0, #12, #3
 80017c6:	2806      	cmp	r0, #6
 80017c8:	bf88      	it	hi
 80017ca:	2d1a      	cmphi	r5, #26
 80017cc:	f240 807e 	bls.w	80018cc <PE_Check_ExtendedMessage+0x168>
 80017d0:	f3c3 2080 	ubfx	r0, r3, #10, #1
 80017d4:	2800      	cmp	r0, #0
 80017d6:	f040 8079 	bne.w	80018cc <PE_Check_ExtendedMessage+0x168>
 80017da:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	; 0x48e
 80017de:	42a8      	cmp	r0, r5
 80017e0:	d274      	bcs.n	80018cc <PE_Check_ExtendedMessage+0x168>
 80017e2:	2100      	movs	r1, #0
 80017e4:	83e1      	strh	r1, [r4, #30]
 80017e6:	2037      	movs	r0, #55	; 0x37
 80017e8:	e06b      	b.n	80018c2 <PE_Check_ExtendedMessage+0x15e>
 80017ea:	f000 f89e 	bl	800192a <.text_15>
 80017ee:	2113      	movs	r1, #19
 80017f0:	47b0      	blx	r6
 80017f2:	2003      	movs	r0, #3
 80017f4:	7460      	strb	r0, [r4, #17]
 80017f6:	2162      	movs	r1, #98	; 0x62
 80017f8:	e07f      	b.n	80018fa <PE_Check_ExtendedMessage+0x196>
 80017fa:	f000 f889 	bl	8001910 <.text_13>
 80017fe:	2306      	movs	r3, #6
 8001800:	2109      	movs	r1, #9
 8001802:	47b0      	blx	r6
 8001804:	2003      	movs	r0, #3
 8001806:	7460      	strb	r0, [r4, #17]
 8001808:	214e      	movs	r1, #78	; 0x4e
 800180a:	e076      	b.n	80018fa <PE_Check_ExtendedMessage+0x196>
 800180c:	f000 f880 	bl	8001910 <.text_13>
 8001810:	231a      	movs	r3, #26
 8001812:	210d      	movs	r1, #13
 8001814:	e003      	b.n	800181e <PE_Check_ExtendedMessage+0xba>
 8001816:	f000 f87b 	bl	8001910 <.text_13>
 800181a:	2309      	movs	r3, #9
 800181c:	2111      	movs	r1, #17
 800181e:	47b0      	blx	r6
 8001820:	e04e      	b.n	80018c0 <PE_Check_ExtendedMessage+0x15c>
 8001822:	1ecb      	subs	r3, r1, #3
 8001824:	2b08      	cmp	r3, #8
 8001826:	d84e      	bhi.n	80018c6 <PE_Check_ExtendedMessage+0x162>
 8001828:	e8df f003 	tbb	[pc, r3]
 800182c:	174d0e05 	.word	0x174d0e05
 8001830:	243a314d 	.word	0x243a314d
 8001834:	0029      	.short	0x0029
 8001836:	f000 f865 	bl	8001904 <.text_12>
 800183a:	d044      	beq.n	80018c6 <PE_Check_ExtendedMessage+0x162>
 800183c:	f000 f86e 	bl	800191c <.text_14>
 8001840:	2110      	movs	r1, #16
 8001842:	47b0      	blx	r6
 8001844:	203a      	movs	r0, #58	; 0x3a
 8001846:	e03c      	b.n	80018c2 <PE_Check_ExtendedMessage+0x15e>
 8001848:	f000 f85c 	bl	8001904 <.text_12>
 800184c:	d03b      	beq.n	80018c6 <PE_Check_ExtendedMessage+0x162>
 800184e:	f000 f865 	bl	800191c <.text_14>
 8001852:	210e      	movs	r1, #14
 8001854:	47b0      	blx	r6
 8001856:	203b      	movs	r0, #59	; 0x3b
 8001858:	e033      	b.n	80018c2 <PE_Check_ExtendedMessage+0x15e>
 800185a:	6820      	ldr	r0, [r4, #0]
 800185c:	8901      	ldrh	r1, [r0, #8]
 800185e:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8001862:	2800      	cmp	r0, #0
 8001864:	d02f      	beq.n	80018c6 <PE_Check_ExtendedMessage+0x162>
 8001866:	f000 f853 	bl	8001910 <.text_13>
 800186a:	2302      	movs	r3, #2
 800186c:	210c      	movs	r1, #12
 800186e:	47b0      	blx	r6
 8001870:	203c      	movs	r0, #60	; 0x3c
 8001872:	e026      	b.n	80018c2 <PE_Check_ExtendedMessage+0x15e>
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	8903      	ldrh	r3, [r0, #8]
 8001878:	f3c3 2080 	ubfx	r0, r3, #10, #1
 800187c:	e00b      	b.n	8001896 <PE_Check_ExtendedMessage+0x132>
 800187e:	68a0      	ldr	r0, [r4, #8]
 8001880:	6905      	ldr	r5, [r0, #16]
 8001882:	b315      	cbz	r5, 80018ca <PE_Check_ExtendedMessage+0x166>
 8001884:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 8001888:	7c20      	ldrb	r0, [r4, #16]
 800188a:	47a8      	blx	r5
 800188c:	bd70      	pop	{r4, r5, r6, pc}
 800188e:	6820      	ldr	r0, [r4, #0]
 8001890:	8903      	ldrh	r3, [r0, #8]
 8001892:	f3c3 2040 	ubfx	r0, r3, #9, #1
 8001896:	b1b0      	cbz	r0, 80018c6 <PE_Check_ExtendedMessage+0x162>
 8001898:	68a3      	ldr	r3, [r4, #8]
 800189a:	6918      	ldr	r0, [r3, #16]
 800189c:	b950      	cbnz	r0, 80018b4 <PE_Check_ExtendedMessage+0x150>
 800189e:	e012      	b.n	80018c6 <PE_Check_ExtendedMessage+0x162>
 80018a0:	6820      	ldr	r0, [r4, #0]
 80018a2:	8903      	ldrh	r3, [r0, #8]
 80018a4:	f3c3 2040 	ubfx	r0, r3, #9, #1
 80018a8:	2800      	cmp	r0, #0
 80018aa:	bf1e      	ittt	ne
 80018ac:	68a3      	ldrne	r3, [r4, #8]
 80018ae:	6918      	ldrne	r0, [r3, #16]
 80018b0:	2800      	cmpne	r0, #0
 80018b2:	d00a      	beq.n	80018ca <PE_Check_ExtendedMessage+0x166>
 80018b4:	68a5      	ldr	r5, [r4, #8]
 80018b6:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 80018ba:	7c20      	ldrb	r0, [r4, #16]
 80018bc:	692e      	ldr	r6, [r5, #16]
 80018be:	47b0      	blx	r6
 80018c0:	2003      	movs	r0, #3
 80018c2:	7460      	strb	r0, [r4, #17]
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	2101      	movs	r1, #1
 80018c8:	7461      	strb	r1, [r4, #17]
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	7f20      	ldrb	r0, [r4, #28]
 80018ce:	7889      	ldrb	r1, [r1, #2]
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d0a6      	beq.n	8001822 <PE_Check_ExtendedMessage+0xbe>
 80018d4:	2901      	cmp	r1, #1
 80018d6:	d009      	beq.n	80018ec <PE_Check_ExtendedMessage+0x188>
 80018d8:	2902      	cmp	r1, #2
 80018da:	d08e      	beq.n	80017fa <PE_Check_ExtendedMessage+0x96>
 80018dc:	2905      	cmp	r1, #5
 80018de:	d09a      	beq.n	8001816 <PE_Check_ExtendedMessage+0xb2>
 80018e0:	2907      	cmp	r1, #7
 80018e2:	d093      	beq.n	800180c <PE_Check_ExtendedMessage+0xa8>
 80018e4:	290f      	cmp	r1, #15
 80018e6:	f43f af80 	beq.w	80017ea <PE_Check_ExtendedMessage+0x86>
 80018ea:	e7ec      	b.n	80018c6 <PE_Check_ExtendedMessage+0x162>
 80018ec:	f000 f81d 	bl	800192a <.text_15>
 80018f0:	2108      	movs	r1, #8
 80018f2:	47b0      	blx	r6
 80018f4:	2003      	movs	r0, #3
 80018f6:	7460      	strb	r0, [r4, #17]
 80018f8:	2147      	movs	r1, #71	; 0x47
 80018fa:	7c20      	ldrb	r0, [r4, #16]
 80018fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001900:	f7fe be31 	b.w	8000566 <USBPD_PE_Notification>

08001904 <.text_12>:
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	8901      	ldrh	r1, [r0, #8]
 8001908:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800190c:	2800      	cmp	r0, #0
 800190e:	4770      	bx	lr

08001910 <.text_13>:
 8001910:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001912:	68a5      	ldr	r5, [r4, #8]
 8001914:	69ae      	ldr	r6, [r5, #24]
 8001916:	1d02      	adds	r2, r0, #4
 8001918:	7c20      	ldrb	r0, [r4, #16]
 800191a:	4770      	bx	lr

0800191c <.text_14>:
 800191c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800191e:	68a5      	ldr	r5, [r4, #8]
 8001920:	69ae      	ldr	r6, [r5, #24]
 8001922:	1d02      	adds	r2, r0, #4
 8001924:	7c20      	ldrb	r0, [r4, #16]
 8001926:	2301      	movs	r3, #1
 8001928:	4770      	bx	lr

0800192a <.text_15>:
 800192a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800192c:	68a5      	ldr	r5, [r4, #8]
 800192e:	69ae      	ldr	r6, [r5, #24]
 8001930:	1d02      	adds	r2, r0, #4
 8001932:	7c20      	ldrb	r0, [r4, #16]
 8001934:	2318      	movs	r3, #24
 8001936:	4770      	bx	lr

08001938 <PE_Send_ExtendedMessage>:
 8001938:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 800193c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800193e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001940:	4606      	mov	r6, r0
 8001942:	460f      	mov	r7, r1
 8001944:	4690      	mov	r8, r2
 8001946:	4699      	mov	r9, r3
 8001948:	f7ff fd2e 	bl	80013a8 <.text_3>
 800194c:	b1a0      	cbz	r0, 8001978 <PE_Send_ExtendedMessage+0x40>
 800194e:	9501      	str	r5, [sp, #4]
 8001950:	9400      	str	r4, [sp, #0]
 8001952:	464b      	mov	r3, r9
 8001954:	7c30      	ldrb	r0, [r6, #16]
 8001956:	f048 0280 	orr.w	r2, r8, #128	; 0x80
 800195a:	4639      	mov	r1, r7
 800195c:	f003 faea 	bl	8004f34 <USBPD_PRL_SendMessage>
 8001960:	2803      	cmp	r0, #3
 8001962:	d0f1      	beq.n	8001948 <PE_Send_ExtendedMessage+0x10>
 8001964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001966:	9100      	str	r1, [sp, #0]
 8001968:	4603      	mov	r3, r0
 800196a:	2200      	movs	r2, #0
 800196c:	4639      	mov	r1, r7
 800196e:	4630      	mov	r0, r6
 8001970:	f000 f806 	bl	8001980 <PE_CheckSendMessageStatus>
 8001974:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8001978:	2011      	movs	r0, #17
 800197a:	7470      	strb	r0, [r6, #17]
 800197c:	2010      	movs	r0, #16
 800197e:	e7f9      	b.n	8001974 <PE_Send_ExtendedMessage+0x3c>

08001980 <PE_CheckSendMessageStatus>:
 8001980:	b510      	push	{r4, lr}
 8001982:	2410      	movs	r4, #16
 8001984:	2b05      	cmp	r3, #5
 8001986:	d007      	beq.n	8001998 <PE_CheckSendMessageStatus+0x18>
 8001988:	2b06      	cmp	r3, #6
 800198a:	d00c      	beq.n	80019a6 <PE_CheckSendMessageStatus+0x26>
 800198c:	2b07      	cmp	r3, #7
 800198e:	d00f      	beq.n	80019b0 <PE_CheckSendMessageStatus+0x30>
 8001990:	2b09      	cmp	r3, #9
 8001992:	bf08      	it	eq
 8001994:	2409      	moveq	r4, #9
 8001996:	e01f      	b.n	80019d8 <PE_CheckSendMessageStatus+0x58>
 8001998:	9902      	ldr	r1, [sp, #8]
 800199a:	7441      	strb	r1, [r0, #17]
 800199c:	2400      	movs	r4, #0
 800199e:	6941      	ldr	r1, [r0, #20]
 80019a0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80019a4:	e002      	b.n	80019ac <PE_CheckSendMessageStatus+0x2c>
 80019a6:	6941      	ldr	r1, [r0, #20]
 80019a8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80019ac:	6141      	str	r1, [r0, #20]
 80019ae:	e013      	b.n	80019d8 <PE_CheckSendMessageStatus+0x58>
 80019b0:	b129      	cbz	r1, 80019be <PE_CheckSendMessageStatus+0x3e>
 80019b2:	2a01      	cmp	r2, #1
 80019b4:	bf08      	it	eq
 80019b6:	2199      	moveq	r1, #153	; 0x99
 80019b8:	d00a      	beq.n	80019d0 <PE_CheckSendMessageStatus+0x50>
 80019ba:	2407      	movs	r4, #7
 80019bc:	e00c      	b.n	80019d8 <PE_CheckSendMessageStatus+0x58>
 80019be:	6841      	ldr	r1, [r0, #4]
 80019c0:	680b      	ldr	r3, [r1, #0]
 80019c2:	f3c3 2102 	ubfx	r1, r3, #8, #3
 80019c6:	2904      	cmp	r1, #4
 80019c8:	bf18      	it	ne
 80019ca:	2a01      	cmpne	r2, #1
 80019cc:	d102      	bne.n	80019d4 <PE_CheckSendMessageStatus+0x54>
 80019ce:	210f      	movs	r1, #15
 80019d0:	7441      	strb	r1, [r0, #17]
 80019d2:	e001      	b.n	80019d8 <PE_CheckSendMessageStatus+0x58>
 80019d4:	2211      	movs	r2, #17
 80019d6:	7442      	strb	r2, [r0, #17]
 80019d8:	4620      	mov	r0, r4
 80019da:	bd10      	pop	{r4, pc}

080019dc <PE_SubStateMachine_ExtendedMessages>:
 80019dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	4604      	mov	r4, r0
 80019e4:	f04f 0802 	mov.w	r8, #2
 80019e8:	7c61      	ldrb	r1, [r4, #17]
 80019ea:	2931      	cmp	r1, #49	; 0x31
 80019ec:	f204 2a67 	addw	sl, r4, #615	; 0x267
 80019f0:	f204 3b85 	addw	fp, r4, #901	; 0x385
 80019f4:	f204 265a 	addw	r6, r4, #602	; 0x25a
 80019f8:	f104 0930 	add.w	r9, r4, #48	; 0x30
 80019fc:	f204 2563 	addw	r5, r4, #611	; 0x263
 8001a00:	f204 478e 	addw	r7, r4, #1166	; 0x48e
 8001a04:	f248 001b 	movw	r0, #32795	; 0x801b
 8001a08:	d015      	beq.n	8001a36 <PE_SubStateMachine_ExtendedMessages+0x5a>
 8001a0a:	2933      	cmp	r1, #51	; 0x33
 8001a0c:	d058      	beq.n	8001ac0 <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001a0e:	2934      	cmp	r1, #52	; 0x34
 8001a10:	d05f      	beq.n	8001ad2 <PE_SubStateMachine_ExtendedMessages+0xf6>
 8001a12:	2935      	cmp	r1, #53	; 0x35
 8001a14:	f000 8088 	beq.w	8001b28 <PE_SubStateMachine_ExtendedMessages+0x14c>
 8001a18:	2936      	cmp	r1, #54	; 0x36
 8001a1a:	f000 809b 	beq.w	8001b54 <PE_SubStateMachine_ExtendedMessages+0x178>
 8001a1e:	2937      	cmp	r1, #55	; 0x37
 8001a20:	f000 809d 	beq.w	8001b5e <PE_SubStateMachine_ExtendedMessages+0x182>
 8001a24:	2938      	cmp	r1, #56	; 0x38
 8001a26:	bf01      	itttt	eq
 8001a28:	2003      	moveq	r0, #3
 8001a2a:	7460      	strbeq	r0, [r4, #17]
 8001a2c:	f04f 0800 	moveq.w	r8, #0
 8001a30:	f8a7 8000 	strheq.w	r8, [r7]
 8001a34:	e0bf      	b.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001a36:	9503      	str	r5, [sp, #12]
 8001a38:	2500      	movs	r5, #0
 8001a3a:	803d      	strh	r5, [r7, #0]
 8001a3c:	7c20      	ldrb	r0, [r4, #16]
 8001a3e:	f7ff f97d 	bl	8000d3c <PE_Get_UnchunkedSupport>
 8001a42:	2801      	cmp	r0, #1
 8001a44:	d106      	bne.n	8001a54 <PE_SubStateMachine_ExtendedMessages+0x78>
 8001a46:	f204 3087 	addw	r0, r4, #903	; 0x387
 8001a4a:	7005      	strb	r5, [r0, #0]
 8001a4c:	7045      	strb	r5, [r0, #1]
 8001a4e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001a52:	e017      	b.n	8001a84 <PE_SubStateMachine_ExtendedMessages+0xa8>
 8001a54:	72f5      	strb	r5, [r6, #11]
 8001a56:	7335      	strb	r5, [r6, #12]
 8001a58:	7c20      	ldrb	r0, [r4, #16]
 8001a5a:	f7ff f96f 	bl	8000d3c <PE_Get_UnchunkedSupport>
 8001a5e:	b918      	cbnz	r0, 8001a68 <PE_SubStateMachine_ExtendedMessages+0x8c>
 8001a60:	7b30      	ldrb	r0, [r6, #12]
 8001a62:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001a66:	7330      	strb	r0, [r6, #12]
 8001a68:	8878      	ldrh	r0, [r7, #2]
 8001a6a:	281b      	cmp	r0, #27
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	d306      	bcc.n	8001a7e <PE_SubStateMachine_ExtendedMessages+0xa2>
 8001a70:	f000 f8a5 	bl	8001bbe <.text_19>
 8001a74:	281a      	cmp	r0, #26
 8001a76:	d3fb      	bcc.n	8001a70 <PE_SubStateMachine_ExtendedMessages+0x94>
 8001a78:	e004      	b.n	8001a84 <PE_SubStateMachine_ExtendedMessages+0xa8>
 8001a7a:	f000 f8a0 	bl	8001bbe <.text_19>
 8001a7e:	8879      	ldrh	r1, [r7, #2]
 8001a80:	4288      	cmp	r0, r1
 8001a82:	d3fa      	bcc.n	8001a7a <PE_SubStateMachine_ExtendedMessages+0x9e>
 8001a84:	6960      	ldr	r0, [r4, #20]
 8001a86:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001a8a:	b130      	cbz	r0, 8001a9a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001a8c:	f7ff fe63 	bl	8001756 <.text_10>
 8001a90:	bf14      	ite	ne
 8001a92:	2501      	movne	r5, #1
 8001a94:	2502      	moveq	r5, #2
 8001a96:	2033      	movs	r0, #51	; 0x33
 8001a98:	e000      	b.n	8001a9c <PE_SubStateMachine_ExtendedMessages+0xc0>
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	9502      	str	r5, [sp, #8]
 8001a9e:	9001      	str	r0, [sp, #4]
 8001aa0:	8878      	ldrh	r0, [r7, #2]
 8001aa2:	9b03      	ldr	r3, [sp, #12]
 8001aa4:	1d00      	adds	r0, r0, #4
 8001aa6:	b280      	uxth	r0, r0
 8001aa8:	9000      	str	r0, [sp, #0]
 8001aaa:	78f2      	ldrb	r2, [r6, #3]
 8001aac:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff ff41 	bl	8001938 <PE_Send_ExtendedMessage>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d17d      	bne.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001aba:	7970      	ldrb	r0, [r6, #5]
 8001abc:	7720      	strb	r0, [r4, #28]
 8001abe:	e07a      	b.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001ac0:	83e0      	strh	r0, [r4, #30]
 8001ac2:	f04f 081b 	mov.w	r8, #27
 8001ac6:	78f0      	ldrb	r0, [r6, #3]
 8001ac8:	2804      	cmp	r0, #4
 8001aca:	d146      	bne.n	8001b5a <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001acc:	2174      	movs	r1, #116	; 0x74
 8001ace:	7461      	strb	r1, [r4, #17]
 8001ad0:	e071      	b.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001ad2:	8831      	ldrh	r1, [r6, #0]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	f3c1 22c3 	ubfx	r2, r1, #11, #4
 8001ada:	4611      	mov	r1, r2
 8001adc:	201a      	movs	r0, #26
 8001ade:	4341      	muls	r1, r0
 8001ae0:	4299      	cmp	r1, r3
 8001ae2:	da01      	bge.n	8001ae8 <PE_SubStateMachine_ExtendedMessages+0x10c>
 8001ae4:	2a0a      	cmp	r2, #10
 8001ae6:	d301      	bcc.n	8001aec <PE_SubStateMachine_ExtendedMessages+0x110>
 8001ae8:	2003      	movs	r0, #3
 8001aea:	e019      	b.n	8001b20 <PE_SubStateMachine_ExtendedMessages+0x144>
 8001aec:	1a58      	subs	r0, r3, r1
 8001aee:	281a      	cmp	r0, #26
 8001af0:	bf3a      	itte	cc
 8001af2:	1a5b      	subcc	r3, r3, r1
 8001af4:	b2db      	uxtbcc	r3, r3
 8001af6:	231a      	movcs	r3, #26
 8001af8:	2000      	movs	r0, #0
 8001afa:	e005      	b.n	8001b08 <PE_SubStateMachine_ExtendedMessages+0x12c>
 8001afc:	1842      	adds	r2, r0, r1
 8001afe:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8001b02:	f80a 2000 	strb.w	r2, [sl, r0]
 8001b06:	1c40      	adds	r0, r0, #1
 8001b08:	4298      	cmp	r0, r3
 8001b0a:	d3f7      	bcc.n	8001afc <PE_SubStateMachine_ExtendedMessages+0x120>
 8001b0c:	8831      	ldrh	r1, [r6, #0]
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	7c20      	ldrb	r0, [r4, #16]
 8001b12:	0ac9      	lsrs	r1, r1, #11
 8001b14:	462b      	mov	r3, r5
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 feac 	bl	8005876 <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001b1e:	2035      	movs	r0, #53	; 0x35
 8001b20:	7460      	strb	r0, [r4, #17]
 8001b22:	f04f 0800 	mov.w	r8, #0
 8001b26:	e046      	b.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001b28:	6960      	ldr	r0, [r4, #20]
 8001b2a:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2036      	movne	r0, #54	; 0x36
 8001b34:	2003      	moveq	r0, #3
 8001b36:	2100      	movs	r1, #0
 8001b38:	9001      	str	r0, [sp, #4]
 8001b3a:	9102      	str	r1, [sp, #8]
 8001b3c:	462b      	mov	r3, r5
 8001b3e:	8878      	ldrh	r0, [r7, #2]
 8001b40:	9000      	str	r0, [sp, #0]
 8001b42:	78f2      	ldrb	r2, [r6, #3]
 8001b44:	f899 1000 	ldrb.w	r1, [r9]
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff fef5 	bl	8001938 <PE_Send_ExtendedMessage>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	8038      	strh	r0, [r7, #0]
 8001b52:	e030      	b.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001b54:	83e0      	strh	r0, [r4, #30]
 8001b56:	f04f 081b 	mov.w	r8, #27
 8001b5a:	2039      	movs	r0, #57	; 0x39
 8001b5c:	e02a      	b.n	8001bb4 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001b5e:	8be1      	ldrh	r1, [r4, #30]
 8001b60:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b64:	d101      	bne.n	8001b6a <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001b66:	200f      	movs	r0, #15
 8001b68:	e024      	b.n	8001bb4 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001b6a:	83e0      	strh	r0, [r4, #30]
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	7c20      	ldrb	r0, [r4, #16]
 8001b70:	f003 fea6 	bl	80058c0 <USBPD_PRL_PrepareChunkRequest>
 8001b74:	f04f 081b 	mov.w	r8, #27
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	f7ff fc16 	bl	80013aa <.text_3+0x2>
 8001b7e:	b1c0      	cbz	r0, 8001bb2 <PE_SubStateMachine_ExtendedMessages+0x1d6>
 8001b80:	2000      	movs	r0, #0
 8001b82:	2106      	movs	r1, #6
 8001b84:	9001      	str	r0, [sp, #4]
 8001b86:	9100      	str	r1, [sp, #0]
 8001b88:	462b      	mov	r3, r5
 8001b8a:	78b2      	ldrb	r2, [r6, #2]
 8001b8c:	f899 1000 	ldrb.w	r1, [r9]
 8001b90:	7c20      	ldrb	r0, [r4, #16]
 8001b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b96:	f003 f9cd 	bl	8004f34 <USBPD_PRL_SendMessage>
 8001b9a:	2803      	cmp	r0, #3
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	d0eb      	beq.n	8001b78 <PE_SubStateMachine_ExtendedMessages+0x19c>
 8001ba0:	2039      	movs	r0, #57	; 0x39
 8001ba2:	9000      	str	r0, [sp, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f899 1000 	ldrb.w	r1, [r9]
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff fee8 	bl	8001980 <PE_CheckSendMessageStatus>
 8001bb0:	e001      	b.n	8001bb6 <PE_SubStateMachine_ExtendedMessages+0x1da>
 8001bb2:	2011      	movs	r0, #17
 8001bb4:	7460      	strb	r0, [r4, #17]
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	b005      	add	sp, #20
 8001bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bbe <.text_19>:
 8001bbe:	f81b 1000 	ldrb.w	r1, [fp, r0]
 8001bc2:	f80a 1000 	strb.w	r1, [sl, r0]
 8001bc6:	1c40      	adds	r0, r0, #1
 8001bc8:	4770      	bx	lr

08001bca <PE_ManageRXEvent>:
 8001bca:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001bce:	780a      	ldrb	r2, [r1, #0]
 8001bd0:	704a      	strb	r2, [r1, #1]
 8001bd2:	888a      	ldrh	r2, [r1, #4]
 8001bd4:	0bd1      	lsrs	r1, r2, #15
 8001bd6:	bf18      	it	ne
 8001bd8:	f7ff bdc4 	bne.w	8001764 <PE_Check_ExtendedMessage>
 8001bdc:	f412 4f70 	tst.w	r2, #61440	; 0xf000
 8001be0:	bf08      	it	eq
 8001be2:	f7ff bc63 	beq.w	80014ac <PE_Check_ControlMessage>
 8001be6:	e549      	b.n	800167c <PE_Check_DataMessage>

08001be8 <USBPD_PE_StateMachine_SNK>:
 8001be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bec:	4607      	mov	r7, r0
 8001bee:	f8df 0c60 	ldr.w	r0, [pc, #3168]	; 8002850 <.text_21>
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	4639      	mov	r1, r7
 8001bf6:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001bfa:	8bec      	ldrh	r4, [r5, #30]
 8001bfc:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8001bfe:	f3c1 2042 	ubfx	r0, r1, #9, #3
 8001c02:	2600      	movs	r6, #0
 8001c04:	1904      	adds	r4, r0, r4
 8001c06:	7c68      	ldrb	r0, [r5, #17]
 8001c08:	f001 011f 	and.w	r1, r1, #31
 8001c0c:	190c      	adds	r4, r1, r4
 8001c0e:	2848      	cmp	r0, #72	; 0x48
 8001c10:	b2a4      	uxth	r4, r4
 8001c12:	d131      	bne.n	8001c78 <USBPD_PE_StateMachine_SNK+0x90>
 8001c14:	4628      	mov	r0, r5
 8001c16:	f7fe ff86 	bl	8000b26 <PE_Reset_ZI>
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f7fe ffbd 	bl	8000b9a <PE_Reset_Counter>
 8001c20:	6828      	ldr	r0, [r5, #0]
 8001c22:	7903      	ldrb	r3, [r0, #4]
 8001c24:	7c28      	ldrb	r0, [r5, #16]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f003 f932 	bl	8004e96 <USBPD_PRL_SetHeader>
 8001c32:	6868      	ldr	r0, [r5, #4]
 8001c34:	6801      	ldr	r1, [r0, #0]
 8001c36:	f021 0108 	bic.w	r1, r1, #8
 8001c3a:	6001      	str	r1, [r0, #0]
 8001c3c:	6868      	ldr	r0, [r5, #4]
 8001c3e:	6829      	ldr	r1, [r5, #0]
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	684a      	ldr	r2, [r1, #4]
 8001c44:	f362 0301 	bfi	r3, r2, #0, #2
 8001c48:	6003      	str	r3, [r0, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	7c28      	ldrb	r0, [r5, #16]
 8001c4e:	f003 f96f 	bl	8004f30 <USBPD_PRL_SOPCapability>
 8001c52:	7c28      	ldrb	r0, [r5, #16]
 8001c54:	f003 fb20 	bl	8005298 <USBPD_PRL_Reset>
 8001c58:	7ca9      	ldrb	r1, [r5, #18]
 8001c5a:	203e      	movs	r0, #62	; 0x3e
 8001c5c:	293e      	cmp	r1, #62	; 0x3e
 8001c5e:	7468      	strb	r0, [r5, #17]
 8001c60:	d00a      	beq.n	8001c78 <USBPD_PE_StateMachine_SNK+0x90>
 8001c62:	74a8      	strb	r0, [r5, #18]
 8001c64:	9600      	str	r6, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8df cbe8 	ldr.w	ip, [pc, #3048]	; 8002854 <.text_22>
 8001c6c:	7c29      	ldrb	r1, [r5, #16]
 8001c6e:	f8dc 8000 	ldr.w	r8, [ip]
 8001c72:	223e      	movs	r2, #62	; 0x3e
 8001c74:	2004      	movs	r0, #4
 8001c76:	47c0      	blx	r8
 8001c78:	6969      	ldr	r1, [r5, #20]
 8001c7a:	f3c1 4040 	ubfx	r0, r1, #17, #1
 8001c7e:	b128      	cbz	r0, 8001c8c <USBPD_PE_StateMachine_SNK+0xa4>
 8001c80:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8001c84:	6169      	str	r1, [r5, #20]
 8001c86:	2164      	movs	r1, #100	; 0x64
 8001c88:	f000 fce9 	bl	800265e <.text_16>
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	f7fe fe3e 	bl	800090e <PE_Get_RxEvent>
 8001c92:	2803      	cmp	r0, #3
 8001c94:	f88d 000c 	strb.w	r0, [sp, #12]
 8001c98:	f040 8378 	bne.w	800238c <USBPD_PE_StateMachine_SNK+0x7a4>
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	e001      	b.n	8001ca4 <USBPD_PE_StateMachine_SNK+0xbc>
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f000 bc98 	b.w	80025d8 <USBPD_PE_StateMachine_SNK+0x9f0>
 8001ca8:	20a7      	movs	r0, #167	; 0xa7
 8001caa:	f000 fdd9 	bl	8002860 <.text_25>
 8001cae:	f8df 4ba4 	ldr.w	r4, [pc, #2980]	; 8002854 <.text_22>
 8001cb2:	7c29      	ldrb	r1, [r5, #16]
 8001cb4:	6827      	ldr	r7, [r4, #0]
 8001cb6:	22a7      	movs	r2, #167	; 0xa7
 8001cb8:	2004      	movs	r0, #4
 8001cba:	47b8      	blx	r7
 8001cbc:	78b2      	ldrb	r2, [r6, #2]
 8001cbe:	2402      	movs	r4, #2
 8001cc0:	2a0f      	cmp	r2, #15
 8001cc2:	bf18      	it	ne
 8001cc4:	2a14      	cmpne	r2, #20
 8001cc6:	d10c      	bne.n	8001ce2 <USBPD_PE_StateMachine_SNK+0xfa>
 8001cc8:	746a      	strb	r2, [r5, #17]
 8001cca:	2000      	movs	r0, #0
 8001ccc:	70b0      	strb	r0, [r6, #2]
 8001cce:	7ca9      	ldrb	r1, [r5, #18]
 8001cd0:	4291      	cmp	r1, r2
 8001cd2:	d006      	beq.n	8001ce2 <USBPD_PE_StateMachine_SNK+0xfa>
 8001cd4:	74aa      	strb	r2, [r5, #18]
 8001cd6:	9000      	str	r0, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f000 fc96 	bl	800260a <.text_8>
 8001cde:	2004      	movs	r0, #4
 8001ce0:	47e0      	blx	ip
 8001ce2:	e378      	b.n	80023d6 <USBPD_PE_StateMachine_SNK+0x7ee>
 8001ce4:	f000 fcb1 	bl	800264a <.text_14>
 8001ce8:	215f      	movs	r1, #95	; 0x5f
 8001cea:	f000 fcb8 	bl	800265e <.text_16>
 8001cee:	e006      	b.n	8001cfe <USBPD_PE_StateMachine_SNK+0x116>
 8001cf0:	f000 fcab 	bl	800264a <.text_14>
 8001cf4:	68a8      	ldr	r0, [r5, #8]
 8001cf6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001cf8:	b109      	cbz	r1, 8001cfe <USBPD_PE_StateMachine_SNK+0x116>
 8001cfa:	7c28      	ldrb	r0, [r5, #16]
 8001cfc:	4788      	blx	r1
 8001cfe:	f04f 34ff 	mov.w	r4, #4294967295
 8001d02:	e0ca      	b.n	8001e9a <USBPD_PE_StateMachine_SNK+0x2b2>
 8001d04:	6869      	ldr	r1, [r5, #4]
 8001d06:	680a      	ldr	r2, [r1, #0]
 8001d08:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	f000 841d 	beq.w	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8001d12:	f002 0003 	and.w	r0, r2, #3
 8001d16:	2801      	cmp	r0, #1
 8001d18:	bf0c      	ite	eq
 8001d1a:	2000      	moveq	r0, #0
 8001d1c:	2001      	movne	r0, #1
 8001d1e:	f022 0220 	bic.w	r2, r2, #32
 8001d22:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
 8001d26:	600a      	str	r2, [r1, #0]
 8001d28:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8001d2c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8001d30:	2043      	movs	r0, #67	; 0x43
 8001d32:	e25c      	b.n	80021ee <USBPD_PE_StateMachine_SNK+0x606>
 8001d34:	f000 fc6e 	bl	8002614 <.text_9>
 8001d38:	d12d      	bne.n	8001d96 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001d3a:	88b1      	ldrh	r1, [r6, #4]
 8001d3c:	0bc8      	lsrs	r0, r1, #15
 8001d3e:	d125      	bne.n	8001d8c <USBPD_PE_StateMachine_SNK+0x1a4>
 8001d40:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001d44:	b310      	cbz	r0, 8001d8c <USBPD_PE_StateMachine_SNK+0x1a4>
 8001d46:	f001 001f 	and.w	r0, r1, #31
 8001d4a:	2801      	cmp	r0, #1
 8001d4c:	d11e      	bne.n	8001d8c <USBPD_PE_StateMachine_SNK+0x1a4>
 8001d4e:	2200      	movs	r2, #0
 8001d50:	70ba      	strb	r2, [r7, #2]
 8001d52:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8001d56:	6968      	ldr	r0, [r5, #20]
 8001d58:	f040 0002 	orr.w	r0, r0, #2
 8001d5c:	6168      	str	r0, [r5, #20]
 8001d5e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001d62:	f7fe ff46 	bl	8000bf2 <PE_ExtRevisionInteroperability>
 8001d66:	88b0      	ldrh	r0, [r6, #4]
 8001d68:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001d6c:	68b0      	ldr	r0, [r6, #8]
 8001d6e:	68ae      	ldr	r6, [r5, #8]
 8001d70:	69b7      	ldr	r7, [r6, #24]
 8001d72:	1c82      	adds	r2, r0, #2
 8001d74:	7c28      	ldrb	r0, [r5, #16]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	2104      	movs	r1, #4
 8001d7a:	47b8      	blx	r7
 8001d7c:	f000 fc65 	bl	800264a <.text_14>
 8001d80:	2044      	movs	r0, #68	; 0x44
 8001d82:	7468      	strb	r0, [r5, #17]
 8001d84:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001d88:	2914      	cmp	r1, #20
 8001d8a:	d004      	beq.n	8001d96 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001d8c:	2014      	movs	r0, #20
 8001d8e:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d92:	f000 fc6e 	bl	8002672 <.text_18+0x6>
 8001d96:	f000 fc34 	bl	8002602 <.text_7>
 8001d9a:	f040 83d7 	bne.w	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8001d9e:	210f      	movs	r1, #15
 8001da0:	e2a7      	b.n	80022f2 <USBPD_PE_StateMachine_SNK+0x70a>
 8001da2:	2001      	movs	r0, #1
 8001da4:	68ab      	ldr	r3, [r5, #8]
 8001da6:	7728      	strb	r0, [r5, #28]
 8001da8:	466a      	mov	r2, sp
 8001daa:	7c28      	ldrb	r0, [r5, #16]
 8001dac:	6a1c      	ldr	r4, [r3, #32]
 8001dae:	f105 0118 	add.w	r1, r5, #24
 8001db2:	47a0      	blx	r4
 8001db4:	9800      	ldr	r0, [sp, #0]
 8001db6:	6969      	ldr	r1, [r5, #20]
 8001db8:	f360 0183 	bfi	r1, r0, #2, #2
 8001dbc:	2045      	movs	r0, #69	; 0x45
 8001dbe:	6169      	str	r1, [r5, #20]
 8001dc0:	e15c      	b.n	800207c <USBPD_PE_StateMachine_SNK+0x494>
 8001dc2:	6968      	ldr	r0, [r5, #20]
 8001dc4:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001dc8:	b100      	cbz	r0, 8001dcc <USBPD_PE_StateMachine_SNK+0x1e4>
 8001dca:	2002      	movs	r0, #2
 8001dcc:	9002      	str	r0, [sp, #8]
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2046      	movs	r0, #70	; 0x46
 8001dd2:	9001      	str	r0, [sp, #4]
 8001dd4:	9100      	str	r1, [sp, #0]
 8001dd6:	f105 0318 	add.w	r3, r5, #24
 8001dda:	2202      	movs	r2, #2
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4628      	mov	r0, r5
 8001de0:	f7ff fae7 	bl	80013b2 <PE_Send_DataMessage>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d158      	bne.n	8001e9a <USBPD_PE_StateMachine_SNK+0x2b2>
 8001de8:	6968      	ldr	r0, [r5, #20]
 8001dea:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8001dee:	6168      	str	r0, [r5, #20]
 8001df0:	e2ab      	b.n	800234a <USBPD_PE_StateMachine_SNK+0x762>
 8001df2:	a903      	add	r1, sp, #12
 8001df4:	4628      	mov	r0, r5
 8001df6:	f000 fc3f 	bl	8002678 <PE_StateMachine_SNK_SelectCapa>
 8001dfa:	e3a6      	b.n	800254a <USBPD_PE_StateMachine_SNK+0x962>
 8001dfc:	f000 fc0a 	bl	8002614 <.text_9>
 8001e00:	bf02      	ittt	eq
 8001e02:	88b0      	ldrheq	r0, [r6, #4]
 8001e04:	ea09 0000 	andeq.w	r0, r9, r0
 8001e08:	2806      	cmpeq	r0, #6
 8001e0a:	d11f      	bne.n	8001e4c <USBPD_PE_StateMachine_SNK+0x264>
 8001e0c:	f000 fc2e 	bl	800266c <.text_18>
 8001e10:	2103      	movs	r1, #3
 8001e12:	f000 fbe5 	bl	80025e0 <.text_3+0x2>
 8001e16:	7c28      	ldrb	r0, [r5, #16]
 8001e18:	2110      	movs	r1, #16
 8001e1a:	f7fe fba4 	bl	8000566 <USBPD_PE_Notification>
 8001e1e:	f000 fc0e 	bl	800263e <.text_13>
 8001e22:	bf1a      	itte	ne
 8001e24:	6828      	ldrne	r0, [r5, #0]
 8001e26:	6801      	ldrne	r1, [r0, #0]
 8001e28:	2101      	moveq	r1, #1
 8001e2a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001e2e:	f003 f87f 	bl	8004f30 <USBPD_PRL_SOPCapability>
 8001e32:	2000      	movs	r0, #0
 8001e34:	84a8      	strh	r0, [r5, #36]	; 0x24
 8001e36:	6968      	ldr	r0, [r5, #20]
 8001e38:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8001e3c:	2803      	cmp	r0, #3
 8001e3e:	bf04      	itt	eq
 8001e40:	f24a 3028 	movweq	r0, #41768	; 0xa328
 8001e44:	84a8      	strheq	r0, [r5, #36]	; 0x24
 8001e46:	2103      	movs	r1, #3
 8001e48:	7469      	strb	r1, [r5, #17]
 8001e4a:	2400      	movs	r4, #0
 8001e4c:	f000 fbd9 	bl	8002602 <.text_7>
 8001e50:	d123      	bne.n	8001e9a <USBPD_PE_StateMachine_SNK+0x2b2>
 8001e52:	e7a4      	b.n	8001d9e <USBPD_PE_StateMachine_SNK+0x1b6>
 8001e54:	a903      	add	r1, sp, #12
 8001e56:	4628      	mov	r0, r5
 8001e58:	f001 fc86 	bl	8003768 <PE_StateMachine_VDMCable>
 8001e5c:	e375      	b.n	800254a <USBPD_PE_StateMachine_SNK+0x962>
 8001e5e:	f000 fbee 	bl	800263e <.text_13>
 8001e62:	bf1e      	ittt	ne
 8001e64:	68a8      	ldrne	r0, [r5, #8]
 8001e66:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 8001e68:	2a00      	cmpne	r2, #0
 8001e6a:	d002      	beq.n	8001e72 <USBPD_PE_StateMachine_SNK+0x28a>
 8001e6c:	7c28      	ldrb	r0, [r5, #16]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4790      	blx	r2
 8001e72:	f000 fbea 	bl	800264a <.text_14>
 8001e76:	4628      	mov	r0, r5
 8001e78:	2101      	movs	r1, #1
 8001e7a:	f7ff f9db 	bl	8001234 <PE_SetPowerNegotiation>
 8001e7e:	78b8      	ldrb	r0, [r7, #2]
 8001e80:	2803      	cmp	r0, #3
 8001e82:	d30b      	bcc.n	8001e9c <USBPD_PE_StateMachine_SNK+0x2b4>
 8001e84:	6968      	ldr	r0, [r5, #20]
 8001e86:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	bf1e      	ittt	ne
 8001e8e:	68a9      	ldrne	r1, [r5, #8]
 8001e90:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 8001e92:	2800      	cmpne	r0, #0
 8001e94:	d15d      	bne.n	8001f52 <USBPD_PE_StateMachine_SNK+0x36a>
 8001e96:	2100      	movs	r1, #0
 8001e98:	7469      	strb	r1, [r5, #17]
 8001e9a:	e357      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8001e9c:	1c40      	adds	r0, r0, #1
 8001e9e:	70b8      	strb	r0, [r7, #2]
 8001ea0:	2105      	movs	r1, #5
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	f7fe fd12 	bl	80008cc <PE_Send_RESET>
 8001ea8:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8001eac:	83e8      	strh	r0, [r5, #30]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f000 fbd1 	bl	8002656 <.text_15>
 8001eb4:	209b      	movs	r0, #155	; 0x9b
 8001eb6:	e0e1      	b.n	800207c <USBPD_PE_StateMachine_SNK+0x494>
 8001eb8:	f000 fbc1 	bl	800263e <.text_13>
 8001ebc:	bf1e      	ittt	ne
 8001ebe:	68a8      	ldrne	r0, [r5, #8]
 8001ec0:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 8001ec2:	2a00      	cmpne	r2, #0
 8001ec4:	d002      	beq.n	8001ecc <USBPD_PE_StateMachine_SNK+0x2e4>
 8001ec6:	7c28      	ldrb	r0, [r5, #16]
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4790      	blx	r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f000 fbc2 	bl	8002656 <.text_15>
 8001ed2:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8001ed6:	83e8      	strh	r0, [r5, #30]
 8001ed8:	219b      	movs	r1, #155	; 0x9b
 8001eda:	e20a      	b.n	80022f2 <USBPD_PE_StateMachine_SNK+0x70a>
 8001edc:	68aa      	ldr	r2, [r5, #8]
 8001ede:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001ee2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001ee4:	4798      	blx	r3
 8001ee6:	2801      	cmp	r0, #1
 8001ee8:	d10b      	bne.n	8001f02 <USBPD_PE_StateMachine_SNK+0x31a>
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7fe fddf 	bl	8000aae <PE_Reset_HardReset>
 8001ef0:	f648 00e3 	movw	r0, #35043	; 0x88e3
 8001ef4:	83e8      	strh	r0, [r5, #30]
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	7469      	strb	r1, [r5, #17]
 8001efa:	2113      	movs	r1, #19
 8001efc:	f000 fbaf 	bl	800265e <.text_16>
 8001f00:	2400      	movs	r4, #0
 8001f02:	f000 fb7e 	bl	8002602 <.text_7>
 8001f06:	d1c8      	bne.n	8001e9a <USBPD_PE_StateMachine_SNK+0x2b2>
 8001f08:	e014      	b.n	8001f34 <USBPD_PE_StateMachine_SNK+0x34c>
 8001f0a:	68aa      	ldr	r2, [r5, #8]
 8001f0c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001f10:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001f12:	2101      	movs	r1, #1
 8001f14:	4798      	blx	r3
 8001f16:	2801      	cmp	r0, #1
 8001f18:	d109      	bne.n	8001f2e <USBPD_PE_StateMachine_SNK+0x346>
 8001f1a:	2205      	movs	r2, #5
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f000 fb9b 	bl	8002658 <.text_15+0x2>
 8001f22:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8001f26:	2043      	movs	r0, #67	; 0x43
 8001f28:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8001f2c:	7468      	strb	r0, [r5, #17]
 8001f2e:	f000 fb68 	bl	8002602 <.text_7>
 8001f32:	d1b2      	bne.n	8001e9a <USBPD_PE_StateMachine_SNK+0x2b2>
 8001f34:	2206      	movs	r2, #6
 8001f36:	2100      	movs	r1, #0
 8001f38:	f000 fb8e 	bl	8002658 <.text_15+0x2>
 8001f3c:	78b8      	ldrb	r0, [r7, #2]
 8001f3e:	2803      	cmp	r0, #3
 8001f40:	d387      	bcc.n	8001e52 <USBPD_PE_StateMachine_SNK+0x26a>
 8001f42:	6968      	ldr	r0, [r5, #20]
 8001f44:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	bf1e      	ittt	ne
 8001f4c:	68a9      	ldrne	r1, [r5, #8]
 8001f4e:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 8001f50:	2800      	cmpne	r0, #0
 8001f52:	f040 80ba 	bne.w	80020ca <USBPD_PE_StateMachine_SNK+0x4e2>
 8001f56:	2100      	movs	r1, #0
 8001f58:	7469      	strb	r1, [r5, #17]
 8001f5a:	e1cb      	b.n	80022f4 <USBPD_PE_StateMachine_SNK+0x70c>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	9000      	str	r0, [sp, #0]
 8001f60:	2303      	movs	r3, #3
 8001f62:	2203      	movs	r2, #3
 8001f64:	e086      	b.n	8002074 <USBPD_PE_StateMachine_SNK+0x48c>
 8001f66:	6868      	ldr	r0, [r5, #4]
 8001f68:	6801      	ldr	r1, [r0, #0]
 8001f6a:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001f6e:	2804      	cmp	r0, #4
 8001f70:	f43f af15 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0x1b6>
 8001f74:	2000      	movs	r0, #0
 8001f76:	9000      	str	r0, [sp, #0]
 8001f78:	2350      	movs	r3, #80	; 0x50
 8001f7a:	7871      	ldrb	r1, [r6, #1]
 8001f7c:	220d      	movs	r2, #13
 8001f7e:	f000 fb72 	bl	8002666 <.text_17+0x2>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d136      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x40c>
 8001f86:	2003      	movs	r0, #3
 8001f88:	f000 fb36 	bl	80025f8 <.text_6>
 8001f8c:	2130      	movs	r1, #48	; 0x30
 8001f8e:	e14d      	b.n	800222c <USBPD_PE_StateMachine_SNK+0x644>
 8001f90:	f000 fb45 	bl	800261e <.text_10+0x2>
 8001f94:	f43f af5a 	beq.w	8001e4c <USBPD_PE_StateMachine_SNK+0x264>
 8001f98:	7831      	ldrb	r1, [r6, #0]
 8001f9a:	7870      	ldrb	r0, [r6, #1]
 8001f9c:	4281      	cmp	r1, r0
 8001f9e:	bf02      	ittt	eq
 8001fa0:	88b1      	ldrheq	r1, [r6, #4]
 8001fa2:	ea09 0001 	andeq.w	r0, r9, r1
 8001fa6:	2803      	cmpeq	r0, #3
 8001fa8:	f47f af50 	bne.w	8001e4c <USBPD_PE_StateMachine_SNK+0x264>
 8001fac:	2003      	movs	r0, #3
 8001fae:	7468      	strb	r0, [r5, #17]
 8001fb0:	f000 fb5c 	bl	800266c <.text_18>
 8001fb4:	e749      	b.n	8001e4a <USBPD_PE_StateMachine_SNK+0x262>
 8001fb6:	9400      	str	r4, [sp, #0]
 8001fb8:	2343      	movs	r3, #67	; 0x43
 8001fba:	2207      	movs	r2, #7
 8001fbc:	f000 fb52 	bl	8002664 <.text_17>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d117      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x40c>
 8001fc4:	2006      	movs	r0, #6
 8001fc6:	f000 fb17 	bl	80025f8 <.text_6>
 8001fca:	210b      	movs	r1, #11
 8001fcc:	e12e      	b.n	800222c <USBPD_PE_StateMachine_SNK+0x644>
 8001fce:	f000 fb21 	bl	8002614 <.text_9>
 8001fd2:	bf02      	ittt	eq
 8001fd4:	88b0      	ldrheq	r0, [r6, #4]
 8001fd6:	ea09 0000 	andeq.w	r0, r9, r0
 8001fda:	2806      	cmpeq	r0, #6
 8001fdc:	d10a      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x40c>
 8001fde:	7c28      	ldrb	r0, [r5, #16]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	f7fe fac0 	bl	8000566 <USBPD_PE_Notification>
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	7468      	strb	r0, [r5, #17]
 8001fea:	f000 fb17 	bl	800261c <.text_10>
 8001fee:	d001      	beq.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x40c>
 8001ff0:	f000 fb3c 	bl	800266c <.text_18>
 8001ff4:	e2aa      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	9000      	str	r0, [sp, #0]
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	e039      	b.n	8002074 <USBPD_PE_StateMachine_SNK+0x48c>
 8002000:	2804      	cmp	r0, #4
 8002002:	d006      	beq.n	8002012 <USBPD_PE_StateMachine_SNK+0x42a>
 8002004:	2000      	movs	r0, #0
 8002006:	7728      	strb	r0, [r5, #28]
 8002008:	2104      	movs	r1, #4
 800200a:	7469      	strb	r1, [r5, #17]
 800200c:	2120      	movs	r1, #32
 800200e:	f000 fb26 	bl	800265e <.text_16>
 8002012:	a903      	add	r1, sp, #12
 8002014:	4628      	mov	r0, r5
 8002016:	f000 fb90 	bl	800273a <PE_StateMachine_SNK_ReadyWait>
 800201a:	e296      	b.n	800254a <USBPD_PE_StateMachine_SNK+0x962>
 800201c:	68a8      	ldr	r0, [r5, #8]
 800201e:	6881      	ldr	r1, [r0, #8]
 8002020:	b359      	cbz	r1, 800207a <USBPD_PE_StateMachine_SNK+0x492>
 8002022:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002026:	4788      	blx	r1
 8002028:	280a      	cmp	r0, #10
 800202a:	d002      	beq.n	8002032 <USBPD_PE_StateMachine_SNK+0x44a>
 800202c:	280d      	cmp	r0, #13
 800202e:	d01c      	beq.n	800206a <USBPD_PE_StateMachine_SNK+0x482>
 8002030:	e023      	b.n	800207a <USBPD_PE_StateMachine_SNK+0x492>
 8002032:	f000 fad8 	bl	80025e6 <.text_4>
 8002036:	2201      	movs	r2, #1
 8002038:	2100      	movs	r1, #0
 800203a:	47b0      	blx	r6
 800203c:	2000      	movs	r0, #0
 800203e:	9000      	str	r0, [sp, #0]
 8002040:	2359      	movs	r3, #89	; 0x59
 8002042:	2203      	movs	r2, #3
 8002044:	f000 fb0e 	bl	8002664 <.text_17>
 8002048:	2800      	cmp	r0, #0
 800204a:	d10d      	bne.n	8002068 <USBPD_PE_StateMachine_SNK+0x480>
 800204c:	2008      	movs	r0, #8
 800204e:	7728      	strb	r0, [r5, #28]
 8002050:	2206      	movs	r2, #6
 8002052:	f000 fae8 	bl	8002626 <.text_11>
 8002056:	2100      	movs	r1, #0
 8002058:	68ab      	ldr	r3, [r5, #8]
 800205a:	7c28      	ldrb	r0, [r5, #16]
 800205c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800205e:	47a0      	blx	r4
 8002060:	f8a5 801e 	strh.w	r8, [r5, #30]
 8002064:	f240 348e 	movw	r4, #910	; 0x38e
 8002068:	e270      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 800206a:	2000      	movs	r0, #0
 800206c:	9000      	str	r0, [sp, #0]
 800206e:	2303      	movs	r3, #3
 8002070:	220c      	movs	r2, #12
 8002072:	2100      	movs	r1, #0
 8002074:	f000 faf7 	bl	8002666 <.text_17+0x2>
 8002078:	e268      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 800207a:	202a      	movs	r0, #42	; 0x2a
 800207c:	7468      	strb	r0, [r5, #17]
 800207e:	e139      	b.n	80022f4 <USBPD_PE_StateMachine_SNK+0x70c>
 8002080:	f000 fac8 	bl	8002614 <.text_9>
 8002084:	bf02      	ittt	eq
 8002086:	88b0      	ldrheq	r0, [r6, #4]
 8002088:	ea09 0000 	andeq.w	r0, r9, r0
 800208c:	2806      	cmpeq	r0, #6
 800208e:	d10e      	bne.n	80020ae <USBPD_PE_StateMachine_SNK+0x4c6>
 8002090:	f000 faa9 	bl	80025e6 <.text_4>
 8002094:	2209      	movs	r2, #9
 8002096:	47b0      	blx	r6
 8002098:	2053      	movs	r0, #83	; 0x53
 800209a:	7468      	strb	r0, [r5, #17]
 800209c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80020a0:	2914      	cmp	r1, #20
 80020a2:	d004      	beq.n	80020ae <USBPD_PE_StateMachine_SNK+0x4c6>
 80020a4:	2014      	movs	r0, #20
 80020a6:	f88d 000c 	strb.w	r0, [sp, #12]
 80020aa:	f000 fae2 	bl	8002672 <.text_18+0x6>
 80020ae:	f000 faa8 	bl	8002602 <.text_7>
 80020b2:	d1e1      	bne.n	8002078 <USBPD_PE_StateMachine_SNK+0x490>
 80020b4:	68ab      	ldr	r3, [r5, #8]
 80020b6:	7c28      	ldrb	r0, [r5, #16]
 80020b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020ba:	220f      	movs	r2, #15
 80020bc:	2100      	movs	r1, #0
 80020be:	47a0      	blx	r4
 80020c0:	68a9      	ldr	r1, [r5, #8]
 80020c2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80020c4:	2800      	cmp	r0, #0
 80020c6:	f43f ae6a 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0x1b6>
 80020ca:	2192      	movs	r1, #146	; 0x92
 80020cc:	e111      	b.n	80022f2 <USBPD_PE_StateMachine_SNK+0x70a>
 80020ce:	f000 fa86 	bl	80025de <.text_3>
 80020d2:	f000 fa88 	bl	80025e6 <.text_4>
 80020d6:	220a      	movs	r2, #10
 80020d8:	2100      	movs	r1, #0
 80020da:	47b0      	blx	r6
 80020dc:	6868      	ldr	r0, [r5, #4]
 80020de:	7801      	ldrb	r1, [r0, #0]
 80020e0:	f001 0103 	and.w	r1, r1, #3
 80020e4:	2902      	cmp	r1, #2
 80020e6:	bf04      	itt	eq
 80020e8:	7c28      	ldrbeq	r0, [r5, #16]
 80020ea:	f002 ff0e 	bleq	8004f0a <USBPD_PRL_SRCSetSinkNG>
 80020ee:	2101      	movs	r1, #1
 80020f0:	4628      	mov	r0, r5
 80020f2:	f7fe fc04 	bl	80008fe <PE_ChangePowerRole>
 80020f6:	f000 fa76 	bl	80025e6 <.text_4>
 80020fa:	220b      	movs	r2, #11
 80020fc:	2101      	movs	r1, #1
 80020fe:	47b0      	blx	r6
 8002100:	2000      	movs	r0, #0
 8002102:	9000      	str	r0, [sp, #0]
 8002104:	235b      	movs	r3, #91	; 0x5b
 8002106:	2206      	movs	r2, #6
 8002108:	f000 faac 	bl	8002664 <.text_17>
 800210c:	b948      	cbnz	r0, 8002122 <USBPD_PE_StateMachine_SNK+0x53a>
 800210e:	68ab      	ldr	r3, [r5, #8]
 8002110:	7c28      	ldrb	r0, [r5, #16]
 8002112:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002114:	220c      	movs	r2, #12
 8002116:	2100      	movs	r1, #0
 8002118:	47a0      	blx	r4
 800211a:	f248 0014 	movw	r0, #32788	; 0x8014
 800211e:	83e8      	strh	r0, [r5, #30]
 8002120:	2414      	movs	r4, #20
 8002122:	7c68      	ldrb	r0, [r5, #17]
 8002124:	285b      	cmp	r0, #91	; 0x5b
 8002126:	d018      	beq.n	800215a <USBPD_PE_StateMachine_SNK+0x572>
 8002128:	2100      	movs	r1, #0
 800212a:	4628      	mov	r0, r5
 800212c:	f7fe fbe7 	bl	80008fe <PE_ChangePowerRole>
 8002130:	f000 fa59 	bl	80025e6 <.text_4>
 8002134:	2206      	movs	r2, #6
 8002136:	2101      	movs	r1, #1
 8002138:	47b0      	blx	r6
 800213a:	2207      	movs	r2, #7
 800213c:	e00b      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x56e>
 800213e:	9400      	str	r4, [sp, #0]
 8002140:	2358      	movs	r3, #88	; 0x58
 8002142:	220a      	movs	r2, #10
 8002144:	f000 fa8f 	bl	8002666 <.text_17+0x2>
 8002148:	b920      	cbnz	r0, 8002154 <USBPD_PE_StateMachine_SNK+0x56c>
 800214a:	2008      	movs	r0, #8
 800214c:	f000 fa54 	bl	80025f8 <.text_6>
 8002150:	2202      	movs	r2, #2
 8002152:	e000      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x56e>
 8002154:	220f      	movs	r2, #15
 8002156:	f000 fa4a 	bl	80025ee <.text_5>
 800215a:	e1f7      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 800215c:	f000 fa5a 	bl	8002614 <.text_9>
 8002160:	bf04      	itt	eq
 8002162:	88b0      	ldrheq	r0, [r6, #4]
 8002164:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8002168:	d109      	bne.n	800217e <USBPD_PE_StateMachine_SNK+0x596>
 800216a:	f000 001f 	and.w	r0, r0, #31
 800216e:	2803      	cmp	r0, #3
 8002170:	d006      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0x598>
 8002172:	2804      	cmp	r0, #4
 8002174:	d01d      	beq.n	80021b2 <USBPD_PE_StateMachine_SNK+0x5ca>
 8002176:	280c      	cmp	r0, #12
 8002178:	d019      	beq.n	80021ae <USBPD_PE_StateMachine_SNK+0x5c6>
 800217a:	2810      	cmp	r0, #16
 800217c:	d020      	beq.n	80021c0 <USBPD_PE_StateMachine_SNK+0x5d8>
 800217e:	e086      	b.n	800228e <USBPD_PE_StateMachine_SNK+0x6a6>
 8002180:	f000 fa51 	bl	8002626 <.text_11>
 8002184:	f8a5 801e 	strh.w	r8, [r5, #30]
 8002188:	2206      	movs	r2, #6
 800218a:	f000 fa30 	bl	80025ee <.text_5>
 800218e:	f000 fa26 	bl	80025de <.text_3>
 8002192:	7c28      	ldrb	r0, [r5, #16]
 8002194:	213a      	movs	r1, #58	; 0x3a
 8002196:	f7fe f9e6 	bl	8000566 <USBPD_PE_Notification>
 800219a:	f000 fa40 	bl	800261e <.text_10+0x2>
 800219e:	f240 348e 	movw	r4, #910	; 0x38e
 80021a2:	d001      	beq.n	80021a8 <USBPD_PE_StateMachine_SNK+0x5c0>
 80021a4:	f000 fa62 	bl	800266c <.text_18>
 80021a8:	2059      	movs	r0, #89	; 0x59
 80021aa:	7468      	strb	r0, [r5, #17]
 80021ac:	e06f      	b.n	800228e <USBPD_PE_StateMachine_SNK+0x6a6>
 80021ae:	213b      	movs	r1, #59	; 0x3b
 80021b0:	e000      	b.n	80021b4 <USBPD_PE_StateMachine_SNK+0x5cc>
 80021b2:	2116      	movs	r1, #22
 80021b4:	f000 fa53 	bl	800265e <.text_16>
 80021b8:	f000 fa31 	bl	800261e <.text_10+0x2>
 80021bc:	d107      	bne.n	80021ce <USBPD_PE_StateMachine_SNK+0x5e6>
 80021be:	e063      	b.n	8002288 <USBPD_PE_StateMachine_SNK+0x6a0>
 80021c0:	7c28      	ldrb	r0, [r5, #16]
 80021c2:	2117      	movs	r1, #23
 80021c4:	f7fe f9cf 	bl	8000566 <USBPD_PE_Notification>
 80021c8:	f000 fa29 	bl	800261e <.text_10+0x2>
 80021cc:	d05c      	beq.n	8002288 <USBPD_PE_StateMachine_SNK+0x6a0>
 80021ce:	f000 fa4d 	bl	800266c <.text_18>
 80021d2:	e059      	b.n	8002288 <USBPD_PE_StateMachine_SNK+0x6a0>
 80021d4:	9104      	str	r1, [sp, #16]
 80021d6:	ab04      	add	r3, sp, #16
 80021d8:	68ae      	ldr	r6, [r5, #8]
 80021da:	7c28      	ldrb	r0, [r5, #16]
 80021dc:	6977      	ldr	r7, [r6, #20]
 80021de:	aa07      	add	r2, sp, #28
 80021e0:	47b8      	blx	r7
 80021e2:	9804      	ldr	r0, [sp, #16]
 80021e4:	2104      	movs	r1, #4
 80021e6:	f7ff f869 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 80021ea:	b110      	cbz	r0, 80021f2 <USBPD_PE_StateMachine_SNK+0x60a>
 80021ec:	2003      	movs	r0, #3
 80021ee:	7468      	strb	r0, [r5, #17]
 80021f0:	e1ac      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 80021f2:	9a04      	ldr	r2, [sp, #16]
 80021f4:	2003      	movs	r0, #3
 80021f6:	0892      	lsrs	r2, r2, #2
 80021f8:	2100      	movs	r1, #0
 80021fa:	9001      	str	r0, [sp, #4]
 80021fc:	9200      	str	r2, [sp, #0]
 80021fe:	9102      	str	r1, [sp, #8]
 8002200:	ab07      	add	r3, sp, #28
 8002202:	2201      	movs	r2, #1
 8002204:	4628      	mov	r0, r5
 8002206:	f7ff f8d4 	bl	80013b2 <PE_Send_DataMessage>
 800220a:	e19f      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 800220c:	2000      	movs	r0, #0
 800220e:	2103      	movs	r1, #3
 8002210:	2201      	movs	r2, #1
 8002212:	9002      	str	r0, [sp, #8]
 8002214:	9101      	str	r1, [sp, #4]
 8002216:	9200      	str	r2, [sp, #0]
 8002218:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 800221c:	2206      	movs	r2, #6
 800221e:	2100      	movs	r1, #0
 8002220:	4628      	mov	r0, r5
 8002222:	f7ff f8c6 	bl	80013b2 <PE_Send_DataMessage>
 8002226:	2800      	cmp	r0, #0
 8002228:	d102      	bne.n	8002230 <USBPD_PE_StateMachine_SNK+0x648>
 800222a:	215d      	movs	r1, #93	; 0x5d
 800222c:	f000 fa17 	bl	800265e <.text_16>
 8002230:	e18c      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8002232:	9400      	str	r4, [sp, #0]
 8002234:	2366      	movs	r3, #102	; 0x66
 8002236:	2214      	movs	r2, #20
 8002238:	f000 fa15 	bl	8002666 <.text_17+0x2>
 800223c:	2800      	cmp	r0, #0
 800223e:	d1f7      	bne.n	8002230 <USBPD_PE_StateMachine_SNK+0x648>
 8002240:	f8a5 a01e 	strh.w	sl, [r5, #30]
 8002244:	214a      	movs	r1, #74	; 0x4a
 8002246:	f000 fa0a 	bl	800265e <.text_16>
 800224a:	200b      	movs	r0, #11
 800224c:	241b      	movs	r4, #27
 800224e:	7728      	strb	r0, [r5, #28]
 8002250:	e17c      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8002252:	f000 f9df 	bl	8002614 <.text_9>
 8002256:	d11a      	bne.n	800228e <USBPD_PE_StateMachine_SNK+0x6a6>
 8002258:	88b1      	ldrh	r1, [r6, #4]
 800225a:	0bc8      	lsrs	r0, r1, #15
 800225c:	d017      	beq.n	800228e <USBPD_PE_StateMachine_SNK+0x6a6>
 800225e:	f001 011f 	and.w	r1, r1, #31
 8002262:	290c      	cmp	r1, #12
 8002264:	d113      	bne.n	800228e <USBPD_PE_StateMachine_SNK+0x6a6>
 8002266:	68b0      	ldr	r0, [r6, #8]
 8002268:	68ac      	ldr	r4, [r5, #8]
 800226a:	69a6      	ldr	r6, [r4, #24]
 800226c:	1d02      	adds	r2, r0, #4
 800226e:	7c28      	ldrb	r0, [r5, #16]
 8002270:	2304      	movs	r3, #4
 8002272:	210a      	movs	r1, #10
 8002274:	47b0      	blx	r6
 8002276:	f000 f9d2 	bl	800261e <.text_10+0x2>
 800227a:	d001      	beq.n	8002280 <USBPD_PE_StateMachine_SNK+0x698>
 800227c:	f000 f9f6 	bl	800266c <.text_18>
 8002280:	7c28      	ldrb	r0, [r5, #16]
 8002282:	214b      	movs	r1, #75	; 0x4b
 8002284:	f7fe f96f 	bl	8000566 <USBPD_PE_Notification>
 8002288:	2003      	movs	r0, #3
 800228a:	7468      	strb	r0, [r5, #17]
 800228c:	2400      	movs	r4, #0
 800228e:	f000 f9b8 	bl	8002602 <.text_7>
 8002292:	d1dd      	bne.n	8002250 <USBPD_PE_StateMachine_SNK+0x668>
 8002294:	e02c      	b.n	80022f0 <USBPD_PE_StateMachine_SNK+0x708>
 8002296:	9400      	str	r4, [sp, #0]
 8002298:	2339      	movs	r3, #57	; 0x39
 800229a:	783a      	ldrb	r2, [r7, #0]
 800229c:	f000 f9e2 	bl	8002664 <.text_17>
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d1d5      	bne.n	8002250 <USBPD_PE_StateMachine_SNK+0x668>
 80022a4:	7878      	ldrb	r0, [r7, #1]
 80022a6:	7728      	strb	r0, [r5, #28]
 80022a8:	2144      	movs	r1, #68	; 0x44
 80022aa:	f000 f9d8 	bl	800265e <.text_16>
 80022ae:	e04c      	b.n	800234a <USBPD_PE_StateMachine_SNK+0x762>
 80022b0:	f000 f9b5 	bl	800261e <.text_10+0x2>
 80022b4:	d019      	beq.n	80022ea <USBPD_PE_StateMachine_SNK+0x702>
 80022b6:	88b0      	ldrh	r0, [r6, #4]
 80022b8:	0bc0      	lsrs	r0, r0, #15
 80022ba:	d009      	beq.n	80022d0 <USBPD_PE_StateMachine_SNK+0x6e8>
 80022bc:	4628      	mov	r0, r5
 80022be:	f7ff fa51 	bl	8001764 <PE_Check_ExtendedMessage>
 80022c2:	f000 f9ac 	bl	800261e <.text_10+0x2>
 80022c6:	d001      	beq.n	80022cc <USBPD_PE_StateMachine_SNK+0x6e4>
 80022c8:	f000 f9d0 	bl	800266c <.text_18>
 80022cc:	2000      	movs	r0, #0
 80022ce:	83e8      	strh	r0, [r5, #30]
 80022d0:	88b0      	ldrh	r0, [r6, #4]
 80022d2:	ea09 0000 	and.w	r0, r9, r0
 80022d6:	2810      	cmp	r0, #16
 80022d8:	d107      	bne.n	80022ea <USBPD_PE_StateMachine_SNK+0x702>
 80022da:	2103      	movs	r1, #3
 80022dc:	7469      	strb	r1, [r5, #17]
 80022de:	f000 f99d 	bl	800261c <.text_10>
 80022e2:	d001      	beq.n	80022e8 <USBPD_PE_StateMachine_SNK+0x700>
 80022e4:	f000 f9c2 	bl	800266c <.text_18>
 80022e8:	83ec      	strh	r4, [r5, #30]
 80022ea:	f000 f98a 	bl	8002602 <.text_7>
 80022ee:	d102      	bne.n	80022f6 <USBPD_PE_StateMachine_SNK+0x70e>
 80022f0:	2103      	movs	r1, #3
 80022f2:	7469      	strb	r1, [r5, #17]
 80022f4:	2400      	movs	r4, #0
 80022f6:	e129      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 80022f8:	4628      	mov	r0, r5
 80022fa:	f7ff fb6f 	bl	80019dc <PE_SubStateMachine_ExtendedMessages>
 80022fe:	e124      	b.n	800254a <USBPD_PE_StateMachine_SNK+0x962>
 8002300:	a903      	add	r1, sp, #12
 8002302:	4628      	mov	r0, r5
 8002304:	f7fe fd28 	bl	8000d58 <PE_SubStateMachine_Generic>
 8002308:	e11f      	b.n	800254a <USBPD_PE_StateMachine_SNK+0x962>
 800230a:	a903      	add	r1, sp, #12
 800230c:	4628      	mov	r0, r5
 800230e:	f001 fb4f 	bl	80039b0 <PE_SubStateMachine_VconnSwap>
 8002312:	4604      	mov	r4, r0
 8002314:	f000 f993 	bl	800263e <.text_13>
 8002318:	bf1a      	itte	ne
 800231a:	6828      	ldrne	r0, [r5, #0]
 800231c:	6801      	ldrne	r1, [r0, #0]
 800231e:	2101      	moveq	r1, #1
 8002320:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002324:	f002 fe04 	bl	8004f30 <USBPD_PRL_SOPCapability>
 8002328:	e110      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 800232a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800232e:	4628      	mov	r0, r5
 8002330:	f002 fbdc 	bl	8004aec <PE_StateMachine_UVDM>
 8002334:	e10a      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8002336:	2000      	movs	r0, #0
 8002338:	9000      	str	r0, [sp, #0]
 800233a:	2358      	movs	r3, #88	; 0x58
 800233c:	2213      	movs	r2, #19
 800233e:	f000 f992 	bl	8002666 <.text_17+0x2>
 8002342:	2800      	cmp	r0, #0
 8002344:	d104      	bne.n	8002350 <USBPD_PE_StateMachine_SNK+0x768>
 8002346:	2009      	movs	r0, #9
 8002348:	7728      	strb	r0, [r5, #28]
 800234a:	f8a5 a01e 	strh.w	sl, [r5, #30]
 800234e:	241b      	movs	r4, #27
 8002350:	e0fc      	b.n	800254c <USBPD_PE_StateMachine_SNK+0x964>
 8002352:	6969      	ldr	r1, [r5, #20]
 8002354:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002358:	2800      	cmp	r0, #0
 800235a:	d016      	beq.n	800238a <USBPD_PE_StateMachine_SNK+0x7a2>
 800235c:	f3c1 3040 	ubfx	r0, r1, #13, #1
 8002360:	b138      	cbz	r0, 8002372 <USBPD_PE_StateMachine_SNK+0x78a>
 8002362:	7c28      	ldrb	r0, [r5, #16]
 8002364:	215b      	movs	r1, #91	; 0x5b
 8002366:	f7fe f8fe 	bl	8000566 <USBPD_PE_Notification>
 800236a:	6968      	ldr	r0, [r5, #20]
 800236c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8002370:	6168      	str	r0, [r5, #20]
 8002372:	2003      	movs	r0, #3
 8002374:	7ca9      	ldrb	r1, [r5, #18]
 8002376:	7468      	strb	r0, [r5, #17]
 8002378:	2903      	cmp	r1, #3
 800237a:	d005      	beq.n	8002388 <USBPD_PE_StateMachine_SNK+0x7a0>
 800237c:	74a8      	strb	r0, [r5, #18]
 800237e:	f000 f958 	bl	8002632 <.text_12>
 8002382:	2203      	movs	r2, #3
 8002384:	2004      	movs	r0, #4
 8002386:	47a0      	blx	r4
 8002388:	2401      	movs	r4, #1
 800238a:	e103      	b.n	8002594 <USBPD_PE_StateMachine_SNK+0x9ac>
 800238c:	f88d 700d 	strb.w	r7, [sp, #13]
 8002390:	9605      	str	r6, [sp, #20]
 8002392:	9406      	str	r4, [sp, #24]
 8002394:	f248 388e 	movw	r8, #33678	; 0x838e
 8002398:	f248 0a1b 	movw	sl, #32795	; 0x801b
 800239c:	f248 1bf4 	movw	fp, #33268	; 0x81f4
 80023a0:	6868      	ldr	r0, [r5, #4]
 80023a2:	6801      	ldr	r1, [r0, #0]
 80023a4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80023a8:	2800      	cmp	r0, #0
 80023aa:	f43f ac79 	beq.w	8001ca0 <USBPD_PE_StateMachine_SNK+0xb8>
 80023ae:	6969      	ldr	r1, [r5, #20]
 80023b0:	f3c1 4000 	ubfx	r0, r1, #16, #1
 80023b4:	2800      	cmp	r0, #0
 80023b6:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80023ba:	f43f ac7f 	beq.w	8001cbc <USBPD_PE_StateMachine_SNK+0xd4>
 80023be:	20a7      	movs	r0, #167	; 0xa7
 80023c0:	7468      	strb	r0, [r5, #17]
 80023c2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80023c6:	6169      	str	r1, [r5, #20]
 80023c8:	2000      	movs	r0, #0
 80023ca:	70b0      	strb	r0, [r6, #2]
 80023cc:	7ca9      	ldrb	r1, [r5, #18]
 80023ce:	29a7      	cmp	r1, #167	; 0xa7
 80023d0:	f47f ac6a 	bne.w	8001ca8 <USBPD_PE_StateMachine_SNK+0xc0>
 80023d4:	2402      	movs	r4, #2
 80023d6:	f000 f91d 	bl	8002614 <.text_9>
 80023da:	d119      	bne.n	8002410 <USBPD_PE_StateMachine_SNK+0x828>
 80023dc:	6868      	ldr	r0, [r5, #4]
 80023de:	6801      	ldr	r1, [r0, #0]
 80023e0:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80023e4:	88b1      	ldrh	r1, [r6, #4]
 80023e6:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80023ea:	4288      	cmp	r0, r1
 80023ec:	d110      	bne.n	8002410 <USBPD_PE_StateMachine_SNK+0x828>
 80023ee:	2014      	movs	r0, #20
 80023f0:	f88d 000c 	strb.w	r0, [sp, #12]
 80023f4:	f000 f93d 	bl	8002672 <.text_18+0x6>
 80023f8:	7ca9      	ldrb	r1, [r5, #18]
 80023fa:	2092      	movs	r0, #146	; 0x92
 80023fc:	2992      	cmp	r1, #146	; 0x92
 80023fe:	7468      	strb	r0, [r5, #17]
 8002400:	d006      	beq.n	8002410 <USBPD_PE_StateMachine_SNK+0x828>
 8002402:	f000 fa2d 	bl	8002860 <.text_25>
 8002406:	f000 f900 	bl	800260a <.text_8>
 800240a:	2292      	movs	r2, #146	; 0x92
 800240c:	2004      	movs	r0, #4
 800240e:	47e0      	blx	ip
 8002410:	9806      	ldr	r0, [sp, #24]
 8002412:	b108      	cbz	r0, 8002418 <USBPD_PE_StateMachine_SNK+0x830>
 8002414:	2101      	movs	r1, #1
 8002416:	9105      	str	r1, [sp, #20]
 8002418:	f205 275e 	addw	r7, r5, #606	; 0x25e
 800241c:	7c68      	ldrb	r0, [r5, #17]
 800241e:	0001      	movs	r1, r0
 8002420:	f24f 091f 	movw	r9, #61471	; 0xf01f
 8002424:	f43f ac5e 	beq.w	8001ce4 <USBPD_PE_StateMachine_SNK+0xfc>
 8002428:	1e41      	subs	r1, r0, #1
 800242a:	d065      	beq.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 800242c:	1e89      	subs	r1, r1, #2
 800242e:	2901      	cmp	r1, #1
 8002430:	f67f ade6 	bls.w	8002000 <USBPD_PE_StateMachine_SNK+0x418>
 8002434:	1e89      	subs	r1, r1, #2
 8002436:	f43f ad0d 	beq.w	8001e54 <USBPD_PE_StateMachine_SNK+0x26c>
 800243a:	390a      	subs	r1, #10
 800243c:	f43f ad0f 	beq.w	8001e5e <USBPD_PE_StateMachine_SNK+0x276>
 8002440:	1e49      	subs	r1, r1, #1
 8002442:	f43f ad8b 	beq.w	8001f5c <USBPD_PE_StateMachine_SNK+0x374>
 8002446:	1e49      	subs	r1, r1, #1
 8002448:	f43f ad8d 	beq.w	8001f66 <USBPD_PE_StateMachine_SNK+0x37e>
 800244c:	1ec9      	subs	r1, r1, #3
 800244e:	f43f ad33 	beq.w	8001eb8 <USBPD_PE_StateMachine_SNK+0x2d0>
 8002452:	1f09      	subs	r1, r1, #4
 8002454:	2901      	cmp	r1, #1
 8002456:	d94f      	bls.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 8002458:	1e89      	subs	r1, r1, #2
 800245a:	f43f adac 	beq.w	8001fb6 <USBPD_PE_StateMachine_SNK+0x3ce>
 800245e:	1ec9      	subs	r1, r1, #3
 8002460:	d04a      	beq.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 8002462:	1e49      	subs	r1, r1, #1
 8002464:	f43f ae6b 	beq.w	800213e <USBPD_PE_StateMachine_SNK+0x556>
 8002468:	1f09      	subs	r1, r1, #4
 800246a:	f43f add7 	beq.w	800201c <USBPD_PE_StateMachine_SNK+0x434>
 800246e:	1f49      	subs	r1, r1, #5
 8002470:	2902      	cmp	r1, #2
 8002472:	d941      	bls.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 8002474:	1ec9      	subs	r1, r1, #3
 8002476:	f43f adbe 	beq.w	8001ff6 <USBPD_PE_StateMachine_SNK+0x40e>
 800247a:	1e49      	subs	r1, r1, #1
 800247c:	f43f aec6 	beq.w	800220c <USBPD_PE_StateMachine_SNK+0x624>
 8002480:	1e49      	subs	r1, r1, #1
 8002482:	d039      	beq.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 8002484:	1e89      	subs	r1, r1, #2
 8002486:	f43f af06 	beq.w	8002296 <USBPD_PE_StateMachine_SNK+0x6ae>
 800248a:	1e49      	subs	r1, r1, #1
 800248c:	2901      	cmp	r1, #1
 800248e:	d933      	bls.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 8002490:	1e89      	subs	r1, r1, #2
 8002492:	d001      	beq.n	8002498 <USBPD_PE_StateMachine_SNK+0x8b0>
 8002494:	1e89      	subs	r1, r1, #2
 8002496:	2905      	cmp	r1, #5
 8002498:	f67f af2e 	bls.w	80022f8 <USBPD_PE_StateMachine_SNK+0x710>
 800249c:	1f89      	subs	r1, r1, #6
 800249e:	f43f af07 	beq.w	80022b0 <USBPD_PE_StateMachine_SNK+0x6c8>
 80024a2:	1e49      	subs	r1, r1, #1
 80024a4:	2903      	cmp	r1, #3
 80024a6:	d927      	bls.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 80024a8:	1f09      	subs	r1, r1, #4
 80024aa:	f43f ac2b 	beq.w	8001d04 <USBPD_PE_StateMachine_SNK+0x11c>
 80024ae:	1e89      	subs	r1, r1, #2
 80024b0:	f43f ad2b 	beq.w	8001f0a <USBPD_PE_StateMachine_SNK+0x322>
 80024b4:	1ec9      	subs	r1, r1, #3
 80024b6:	f43f ac3d 	beq.w	8001d34 <USBPD_PE_StateMachine_SNK+0x14c>
 80024ba:	1e49      	subs	r1, r1, #1
 80024bc:	f43f ac71 	beq.w	8001da2 <USBPD_PE_StateMachine_SNK+0x1ba>
 80024c0:	1e49      	subs	r1, r1, #1
 80024c2:	f43f ac7e 	beq.w	8001dc2 <USBPD_PE_StateMachine_SNK+0x1da>
 80024c6:	1e49      	subs	r1, r1, #1
 80024c8:	f43f ac93 	beq.w	8001df2 <USBPD_PE_StateMachine_SNK+0x20a>
 80024cc:	1e49      	subs	r1, r1, #1
 80024ce:	f43f ac95 	beq.w	8001dfc <USBPD_PE_StateMachine_SNK+0x214>
 80024d2:	1e89      	subs	r1, r1, #2
 80024d4:	d0ac      	beq.n	8002430 <USBPD_PE_StateMachine_SNK+0x848>
 80024d6:	1ec9      	subs	r1, r1, #3
 80024d8:	f43f ae7c 	beq.w	80021d4 <USBPD_PE_StateMachine_SNK+0x5ec>
 80024dc:	1f09      	subs	r1, r1, #4
 80024de:	f43f ad57 	beq.w	8001f90 <USBPD_PE_StateMachine_SNK+0x3a8>
 80024e2:	1ec9      	subs	r1, r1, #3
 80024e4:	f43f adf3 	beq.w	80020ce <USBPD_PE_StateMachine_SNK+0x4e6>
 80024e8:	1f49      	subs	r1, r1, #5
 80024ea:	f43f ae37 	beq.w	800215c <USBPD_PE_StateMachine_SNK+0x574>
 80024ee:	1e49      	subs	r1, r1, #1
 80024f0:	f43f adc6 	beq.w	8002080 <USBPD_PE_StateMachine_SNK+0x498>
 80024f4:	3909      	subs	r1, #9
 80024f6:	2902      	cmp	r1, #2
 80024f8:	f67f af02 	bls.w	8002300 <USBPD_PE_StateMachine_SNK+0x718>
 80024fc:	1ec9      	subs	r1, r1, #3
 80024fe:	f43f ae98 	beq.w	8002232 <USBPD_PE_StateMachine_SNK+0x64a>
 8002502:	1e49      	subs	r1, r1, #1
 8002504:	f43f aea5 	beq.w	8002252 <USBPD_PE_StateMachine_SNK+0x66a>
 8002508:	390e      	subs	r1, #14
 800250a:	d0f5      	beq.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 800250c:	3912      	subs	r1, #18
 800250e:	f43f af0c 	beq.w	800232a <USBPD_PE_StateMachine_SNK+0x742>
 8002512:	390c      	subs	r1, #12
 8002514:	f43f abec 	beq.w	8001cf0 <USBPD_PE_StateMachine_SNK+0x108>
 8002518:	1e49      	subs	r1, r1, #1
 800251a:	2902      	cmp	r1, #2
 800251c:	d9ec      	bls.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 800251e:	1f49      	subs	r1, r1, #5
 8002520:	f43f ad55 	beq.w	8001fce <USBPD_PE_StateMachine_SNK+0x3e6>
 8002524:	1e49      	subs	r1, r1, #1
 8002526:	d0e7      	beq.n	80024f8 <USBPD_PE_StateMachine_SNK+0x910>
 8002528:	1e49      	subs	r1, r1, #1
 800252a:	f43f ac93 	beq.w	8001e54 <USBPD_PE_StateMachine_SNK+0x26c>
 800252e:	1e49      	subs	r1, r1, #1
 8002530:	f43f acd4 	beq.w	8001edc <USBPD_PE_StateMachine_SNK+0x2f4>
 8002534:	1e49      	subs	r1, r1, #1
 8002536:	2908      	cmp	r1, #8
 8002538:	f67f aee7 	bls.w	800230a <USBPD_PE_StateMachine_SNK+0x722>
 800253c:	390b      	subs	r1, #11
 800253e:	f43f aefa 	beq.w	8002336 <USBPD_PE_StateMachine_SNK+0x74e>
 8002542:	a903      	add	r1, sp, #12
 8002544:	4628      	mov	r0, r5
 8002546:	f001 fd36 	bl	8003fb6 <PE_StateMachine_VDM>
 800254a:	4604      	mov	r4, r0
 800254c:	7c6a      	ldrb	r2, [r5, #17]
 800254e:	7ca8      	ldrb	r0, [r5, #18]
 8002550:	4ec0      	ldr	r6, [pc, #768]	; (8002854 <.text_22>)
 8002552:	4290      	cmp	r0, r2
 8002554:	d006      	beq.n	8002564 <USBPD_PE_StateMachine_SNK+0x97c>
 8002556:	74aa      	strb	r2, [r5, #18]
 8002558:	f000 f983 	bl	8002862 <.text_25+0x2>
 800255c:	7c29      	ldrb	r1, [r5, #16]
 800255e:	6837      	ldr	r7, [r6, #0]
 8002560:	2004      	movs	r0, #4
 8002562:	47b8      	blx	r7
 8002564:	f000 f85b 	bl	800261e <.text_10+0x2>
 8002568:	f43f aef3 	beq.w	8002352 <USBPD_PE_StateMachine_SNK+0x76a>
 800256c:	4628      	mov	r0, r5
 800256e:	f7fe fa42 	bl	80009f6 <PE_Check_AMSConflict>
 8002572:	2815      	cmp	r0, #21
 8002574:	d104      	bne.n	8002580 <USBPD_PE_StateMachine_SNK+0x998>
 8002576:	f000 f852 	bl	800261e <.text_10+0x2>
 800257a:	d001      	beq.n	8002580 <USBPD_PE_StateMachine_SNK+0x998>
 800257c:	f000 f876 	bl	800266c <.text_18>
 8002580:	7c6a      	ldrb	r2, [r5, #17]
 8002582:	7ca8      	ldrb	r0, [r5, #18]
 8002584:	4290      	cmp	r0, r2
 8002586:	d004      	beq.n	8002592 <USBPD_PE_StateMachine_SNK+0x9aa>
 8002588:	74aa      	strb	r2, [r5, #18]
 800258a:	f000 f852 	bl	8002632 <.text_12>
 800258e:	2004      	movs	r0, #4
 8002590:	47a0      	blx	r4
 8002592:	2400      	movs	r4, #0
 8002594:	6968      	ldr	r0, [r5, #20]
 8002596:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800259a:	6168      	str	r0, [r5, #20]
 800259c:	9805      	ldr	r0, [sp, #20]
 800259e:	2800      	cmp	r0, #0
 80025a0:	bf1f      	itttt	ne
 80025a2:	49ad      	ldrne	r1, [pc, #692]	; (8002858 <.text_23>)
 80025a4:	6808      	ldrne	r0, [r1, #0]
 80025a6:	4aad      	ldrne	r2, [pc, #692]	; (800285c <.text_24>)
 80025a8:	4290      	cmpne	r0, r2
 80025aa:	d011      	beq.n	80025d0 <USBPD_PE_StateMachine_SNK+0x9e8>
 80025ac:	49a8      	ldr	r1, [pc, #672]	; (8002850 <.text_21>)
 80025ae:	7c28      	ldrb	r0, [r5, #16]
 80025b0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80025b4:	6942      	ldr	r2, [r0, #20]
 80025b6:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 80025ba:	6142      	str	r2, [r0, #20]
 80025bc:	7c28      	ldrb	r0, [r5, #16]
 80025be:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80025c2:	6941      	ldr	r1, [r0, #20]
 80025c4:	0c8a      	lsrs	r2, r1, #18
 80025c6:	2a08      	cmp	r2, #8
 80025c8:	bf24      	itt	cs
 80025ca:	f3c1 0111 	ubfxcs	r1, r1, #0, #18
 80025ce:	6141      	strcs	r1, [r0, #20]
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	f43f aee5 	beq.w	80023a0 <USBPD_PE_StateMachine_SNK+0x7b8>
 80025d6:	4620      	mov	r0, r4
 80025d8:	b00f      	add	sp, #60	; 0x3c
 80025da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080025de <.text_3>:
 80025de:	2104      	movs	r1, #4
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7fe be27 	b.w	8001234 <PE_SetPowerNegotiation>

080025e6 <.text_4>:
 80025e6:	68ab      	ldr	r3, [r5, #8]
 80025e8:	7c28      	ldrb	r0, [r5, #16]
 80025ea:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80025ec:	4770      	bx	lr

080025ee <.text_5>:
 80025ee:	68ab      	ldr	r3, [r5, #8]
 80025f0:	7c28      	ldrb	r0, [r5, #16]
 80025f2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80025f4:	2100      	movs	r1, #0

080025f6 <__iar_annotation$$tailcall>:
 80025f6:	4730      	bx	r6

080025f8 <.text_6>:
 80025f8:	7728      	strb	r0, [r5, #28]
 80025fa:	f8a5 a01e 	strh.w	sl, [r5, #30]
 80025fe:	241b      	movs	r4, #27
 8002600:	4770      	bx	lr

08002602 <.text_7>:
 8002602:	8be8      	ldrh	r0, [r5, #30]
 8002604:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002608:	4770      	bx	lr

0800260a <.text_8>:
 800260a:	4f92      	ldr	r7, [pc, #584]	; (8002854 <.text_22>)
 800260c:	7c29      	ldrb	r1, [r5, #16]
 800260e:	f8d7 c000 	ldr.w	ip, [r7]
 8002612:	4770      	bx	lr

08002614 <.text_9>:
 8002614:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002618:	2811      	cmp	r0, #17
 800261a:	4770      	bx	lr

0800261c <.text_10>:
 800261c:	2400      	movs	r4, #0
 800261e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002622:	2814      	cmp	r0, #20
 8002624:	4770      	bx	lr

08002626 <.text_11>:
 8002626:	6868      	ldr	r0, [r5, #4]
 8002628:	6801      	ldr	r1, [r0, #0]
 800262a:	f041 0110 	orr.w	r1, r1, #16
 800262e:	6001      	str	r1, [r0, #0]
 8002630:	4770      	bx	lr

08002632 <.text_12>:
 8002632:	2100      	movs	r1, #0
 8002634:	9100      	str	r1, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	7c29      	ldrb	r1, [r5, #16]
 800263a:	6834      	ldr	r4, [r6, #0]
 800263c:	4770      	bx	lr

0800263e <.text_13>:
 800263e:	6868      	ldr	r0, [r5, #4]
 8002640:	6801      	ldr	r1, [r0, #0]
 8002642:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002646:	2800      	cmp	r0, #0
 8002648:	4770      	bx	lr

0800264a <.text_14>:
 800264a:	6868      	ldr	r0, [r5, #4]
 800264c:	6801      	ldr	r1, [r0, #0]
 800264e:	f021 0110 	bic.w	r1, r1, #16
 8002652:	6001      	str	r1, [r0, #0]
 8002654:	4770      	bx	lr

08002656 <.text_15>:
 8002656:	2101      	movs	r1, #1
 8002658:	4628      	mov	r0, r5
 800265a:	f7fe bde4 	b.w	8001226 <PE_CallHardResetCallback>

0800265e <.text_16>:
 800265e:	7c28      	ldrb	r0, [r5, #16]
 8002660:	f7fd bf81 	b.w	8000566 <USBPD_PE_Notification>

08002664 <.text_17>:
 8002664:	2100      	movs	r1, #0
 8002666:	4628      	mov	r0, r5
 8002668:	f7fe be78 	b.w	800135c <PE_Send_CtrlMessage>

0800266c <.text_18>:
 800266c:	2114      	movs	r1, #20
 800266e:	f88d 100c 	strb.w	r1, [sp, #12]
 8002672:	4628      	mov	r0, r5
 8002674:	f7fe b97f 	b.w	8000976 <PE_Clear_RxEvent>

08002678 <PE_StateMachine_SNK_SelectCapa>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	460d      	mov	r5, r1
 800267c:	4604      	mov	r4, r0
 800267e:	7828      	ldrb	r0, [r5, #0]
 8002680:	2602      	movs	r6, #2
 8002682:	2811      	cmp	r0, #17
 8002684:	bf04      	itt	eq
 8002686:	8ea0      	ldrheq	r0, [r4, #52]	; 0x34
 8002688:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 800268c:	d14c      	bne.n	8002728 <PE_StateMachine_SNK_SelectCapa+0xb0>
 800268e:	f000 031f 	and.w	r3, r0, #31
 8002692:	2b02      	cmp	r3, #2
 8002694:	bf18      	it	ne
 8002696:	2b03      	cmpne	r3, #3
 8002698:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800269c:	f248 12f4 	movw	r2, #33268	; 0x81f4
 80026a0:	d004      	beq.n	80026ac <PE_StateMachine_SNK_SelectCapa+0x34>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf18      	it	ne
 80026a6:	2b0c      	cmpne	r3, #12
 80026a8:	d00c      	beq.n	80026c4 <PE_StateMachine_SNK_SelectCapa+0x4c>
 80026aa:	e026      	b.n	80026fa <PE_StateMachine_SNK_SelectCapa+0x82>
 80026ac:	83e2      	strh	r2, [r4, #30]
 80026ae:	460e      	mov	r6, r1
 80026b0:	2104      	movs	r1, #4
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7fe fdbe 	bl	8001234 <PE_SetPowerNegotiation>
 80026b8:	2247      	movs	r2, #71	; 0x47
 80026ba:	7462      	strb	r2, [r4, #17]
 80026bc:	7828      	ldrb	r0, [r5, #0]
 80026be:	2814      	cmp	r0, #20
 80026c0:	d116      	bne.n	80026f0 <PE_StateMachine_SNK_SelectCapa+0x78>
 80026c2:	e01a      	b.n	80026fa <PE_StateMachine_SNK_SelectCapa+0x82>
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	681e      	ldr	r6, [r3, #0]
 80026c8:	f3c6 2302 	ubfx	r3, r6, #8, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d004      	beq.n	80026da <PE_StateMachine_SNK_SelectCapa+0x62>
 80026d0:	2043      	movs	r0, #67	; 0x43
 80026d2:	7460      	strb	r0, [r4, #17]
 80026d4:	83e2      	strh	r2, [r4, #30]
 80026d6:	460e      	mov	r6, r1
 80026d8:	e007      	b.n	80026ea <PE_StateMachine_SNK_SelectCapa+0x72>
 80026da:	f000 001f 	and.w	r0, r0, #31
 80026de:	280c      	cmp	r0, #12
 80026e0:	bf0c      	ite	eq
 80026e2:	2049      	moveq	r0, #73	; 0x49
 80026e4:	2003      	movne	r0, #3
 80026e6:	7460      	strb	r0, [r4, #17]
 80026e8:	2600      	movs	r6, #0
 80026ea:	7828      	ldrb	r0, [r5, #0]
 80026ec:	2814      	cmp	r0, #20
 80026ee:	d004      	beq.n	80026fa <PE_StateMachine_SNK_SelectCapa+0x82>
 80026f0:	2114      	movs	r1, #20
 80026f2:	7029      	strb	r1, [r5, #0]
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7fe f93e 	bl	8000976 <PE_Clear_RxEvent>
 80026fa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80026fe:	f000 001f 	and.w	r0, r0, #31
 8002702:	2802      	cmp	r0, #2
 8002704:	d008      	beq.n	8002718 <PE_StateMachine_SNK_SelectCapa+0xa0>
 8002706:	2803      	cmp	r0, #3
 8002708:	d004      	beq.n	8002714 <PE_StateMachine_SNK_SelectCapa+0x9c>
 800270a:	2804      	cmp	r0, #4
 800270c:	d006      	beq.n	800271c <PE_StateMachine_SNK_SelectCapa+0xa4>
 800270e:	280c      	cmp	r0, #12
 8002710:	d006      	beq.n	8002720 <PE_StateMachine_SNK_SelectCapa+0xa8>
 8002712:	e009      	b.n	8002728 <PE_StateMachine_SNK_SelectCapa+0xb0>
 8002714:	2101      	movs	r1, #1
 8002716:	e004      	b.n	8002722 <PE_StateMachine_SNK_SelectCapa+0xaa>
 8002718:	2104      	movs	r1, #4
 800271a:	e002      	b.n	8002722 <PE_StateMachine_SNK_SelectCapa+0xaa>
 800271c:	2102      	movs	r1, #2
 800271e:	e000      	b.n	8002722 <PE_StateMachine_SNK_SelectCapa+0xaa>
 8002720:	2103      	movs	r1, #3
 8002722:	7c20      	ldrb	r0, [r4, #16]
 8002724:	f7fd ff1f 	bl	8000566 <USBPD_PE_Notification>
 8002728:	8be0      	ldrh	r0, [r4, #30]
 800272a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800272e:	d102      	bne.n	8002736 <PE_StateMachine_SNK_SelectCapa+0xbe>
 8002730:	210f      	movs	r1, #15
 8002732:	7461      	strb	r1, [r4, #17]
 8002734:	2600      	movs	r6, #0
 8002736:	4630      	mov	r0, r6
 8002738:	bd70      	pop	{r4, r5, r6, pc}

0800273a <PE_StateMachine_SNK_ReadyWait>:
 800273a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800273c:	460e      	mov	r6, r1
 800273e:	4604      	mov	r4, r0
 8002740:	7830      	ldrb	r0, [r6, #0]
 8002742:	2502      	movs	r5, #2
 8002744:	2814      	cmp	r0, #20
 8002746:	d00b      	beq.n	8002760 <PE_StateMachine_SNK_ReadyWait+0x26>
 8002748:	4620      	mov	r0, r4
 800274a:	f7ff fa3e 	bl	8001bca <PE_ManageRXEvent>
 800274e:	7830      	ldrb	r0, [r6, #0]
 8002750:	2814      	cmp	r0, #20
 8002752:	d07a      	beq.n	800284a <PE_StateMachine_SNK_ReadyWait+0x110>
 8002754:	2114      	movs	r1, #20
 8002756:	7031      	strb	r1, [r6, #0]
 8002758:	4620      	mov	r0, r4
 800275a:	f7fe f90c 	bl	8000976 <PE_Clear_RxEvent>
 800275e:	e074      	b.n	800284a <PE_StateMachine_SNK_ReadyWait+0x110>
 8002760:	6961      	ldr	r1, [r4, #20]
 8002762:	0c88      	lsrs	r0, r1, #18
 8002764:	f504 7518 	add.w	r5, r4, #608	; 0x260
 8002768:	d022      	beq.n	80027b0 <PE_StateMachine_SNK_ReadyWait+0x76>
 800276a:	8c21      	ldrh	r1, [r4, #32]
 800276c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002770:	d10e      	bne.n	8002790 <PE_StateMachine_SNK_ReadyWait+0x56>
 8002772:	200f      	movs	r0, #15
 8002774:	7460      	strb	r0, [r4, #17]
 8002776:	f000 f874 	bl	8002862 <.text_25+0x2>
 800277a:	7c21      	ldrb	r1, [r4, #16]
 800277c:	4c35      	ldr	r4, [pc, #212]	; (8002854 <.text_22>)
 800277e:	6826      	ldr	r6, [r4, #0]
 8002780:	226a      	movs	r2, #106	; 0x6a
 8002782:	2009      	movs	r0, #9
 8002784:	47b0      	blx	r6
 8002786:	7828      	ldrb	r0, [r5, #0]
 8002788:	1c40      	adds	r0, r0, #1
 800278a:	7028      	strb	r0, [r5, #0]
 800278c:	2500      	movs	r5, #0
 800278e:	e05c      	b.n	800284a <PE_StateMachine_SNK_ReadyWait+0x110>
 8002790:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002792:	f3c1 2342 	ubfx	r3, r1, #9, #3
 8002796:	2233      	movs	r2, #51	; 0x33
 8002798:	18c3      	adds	r3, r0, r3
 800279a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800279e:	fb13 f302 	smulbb	r3, r3, r2
 80027a2:	1845      	adds	r5, r0, r1
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a8:	4355      	muls	r5, r2
 80027aa:	8423      	strh	r3, [r4, #32]
 80027ac:	b2ad      	uxth	r5, r5
 80027ae:	e04c      	b.n	800284a <PE_StateMachine_SNK_ReadyWait+0x110>
 80027b0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80027b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027b6:	d106      	bne.n	80027c6 <PE_StateMachine_SNK_ReadyWait+0x8c>
 80027b8:	2245      	movs	r2, #69	; 0x45
 80027ba:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80027be:	7462      	strb	r2, [r4, #17]
 80027c0:	2500      	movs	r5, #0
 80027c2:	6161      	str	r1, [r4, #20]
 80027c4:	e041      	b.n	800284a <PE_StateMachine_SNK_ReadyWait+0x110>
 80027c6:	7c20      	ldrb	r0, [r4, #16]
 80027c8:	f7fe f8f9 	bl	80009be <PE_PRL_Control_RxEvent>
 80027cc:	f104 0631 	add.w	r6, r4, #49	; 0x31
 80027d0:	bb28      	cbnz	r0, 800281e <PE_StateMachine_SNK_ReadyWait+0xe4>
 80027d2:	7870      	ldrb	r0, [r6, #1]
 80027d4:	b318      	cbz	r0, 800281e <PE_StateMachine_SNK_ReadyWait+0xe4>
 80027d6:	6860      	ldr	r0, [r4, #4]
 80027d8:	7801      	ldrb	r1, [r0, #0]
 80027da:	f001 0103 	and.w	r1, r1, #3
 80027de:	2902      	cmp	r1, #2
 80027e0:	d104      	bne.n	80027ec <PE_StateMachine_SNK_ReadyWait+0xb2>
 80027e2:	7c20      	ldrb	r0, [r4, #16]
 80027e4:	f002 fb9e 	bl	8004f24 <USBPD_PRL_IsResistor_SinkTxOK>
 80027e8:	2801      	cmp	r0, #1
 80027ea:	d005      	beq.n	80027f8 <PE_StateMachine_SNK_ReadyWait+0xbe>
 80027ec:	6860      	ldr	r0, [r4, #4]
 80027ee:	7801      	ldrb	r1, [r0, #0]
 80027f0:	f001 0103 	and.w	r1, r1, #3
 80027f4:	2901      	cmp	r1, #1
 80027f6:	d112      	bne.n	800281e <PE_StateMachine_SNK_ReadyWait+0xe4>
 80027f8:	78b0      	ldrb	r0, [r6, #2]
 80027fa:	7030      	strb	r0, [r6, #0]
 80027fc:	7870      	ldrb	r0, [r6, #1]
 80027fe:	7460      	strb	r0, [r4, #17]
 8002800:	2845      	cmp	r0, #69	; 0x45
 8002802:	d103      	bne.n	800280c <PE_StateMachine_SNK_ReadyWait+0xd2>
 8002804:	6960      	ldr	r0, [r4, #20]
 8002806:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800280a:	6160      	str	r0, [r4, #20]
 800280c:	2000      	movs	r0, #0
 800280e:	7070      	strb	r0, [r6, #1]
 8002810:	6960      	ldr	r0, [r4, #20]
 8002812:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002814:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002816:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800281a:	6160      	str	r0, [r4, #20]
 800281c:	e00a      	b.n	8002834 <PE_StateMachine_SNK_ReadyWait+0xfa>
 800281e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002820:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002824:	d108      	bne.n	8002838 <PE_StateMachine_SNK_ReadyWait+0xfe>
 8002826:	2100      	movs	r1, #0
 8002828:	8461      	strh	r1, [r4, #34]	; 0x22
 800282a:	2105      	movs	r1, #5
 800282c:	78a8      	ldrb	r0, [r5, #2]
 800282e:	1c40      	adds	r0, r0, #1
 8002830:	70a8      	strb	r0, [r5, #2]
 8002832:	7461      	strb	r1, [r4, #17]
 8002834:	2000      	movs	r0, #0
 8002836:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002838:	4620      	mov	r0, r4
 800283a:	f7fe fd17 	bl	800126c <PE_CalculateMinTiming>
 800283e:	4605      	mov	r5, r0
 8002840:	7870      	ldrb	r0, [r6, #1]
 8002842:	b110      	cbz	r0, 800284a <PE_StateMachine_SNK_ReadyWait+0x110>
 8002844:	2d0f      	cmp	r5, #15
 8002846:	bf28      	it	cs
 8002848:	250f      	movcs	r5, #15
 800284a:	4628      	mov	r0, r5
 800284c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002850 <.text_21>:
 8002850:	20000374 	.word	0x20000374

08002854 <.text_22>:
 8002854:	20000000 	.word	0x20000000

08002858 <.text_23>:
 8002858:	20000370 	.word	0x20000370

0800285c <.text_24>:
 800285c:	b5e8b5cd 	.word	0xb5e8b5cd

08002860 <.text_25>:
 8002860:	74a8      	strb	r0, [r5, #18]
 8002862:	2100      	movs	r1, #0
 8002864:	9100      	str	r1, [sp, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	4770      	bx	lr
	...

0800286c <USBPD_PE_StateMachine_SRC>:
 800286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002870:	4682      	mov	sl, r0
 8002872:	f8df 0b84 	ldr.w	r0, [pc, #2948]	; 80033f8 <.text_3>
 8002876:	b087      	sub	sp, #28
 8002878:	4651      	mov	r1, sl
 800287a:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 800287e:	f8df 8b7c 	ldr.w	r8, [pc, #2940]	; 80033fc <.text_4>
 8002882:	8bfd      	ldrh	r5, [r7, #30]
 8002884:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8002886:	f3c1 2042 	ubfx	r0, r1, #9, #3
 800288a:	1945      	adds	r5, r0, r5
 800288c:	7c78      	ldrb	r0, [r7, #17]
 800288e:	f001 011f 	and.w	r1, r1, #31
 8002892:	194d      	adds	r5, r1, r5
 8002894:	2848      	cmp	r0, #72	; 0x48
 8002896:	f04f 0900 	mov.w	r9, #0
 800289a:	b2ad      	uxth	r5, r5
 800289c:	d130      	bne.n	8002900 <USBPD_PE_StateMachine_SRC+0x94>
 800289e:	4638      	mov	r0, r7
 80028a0:	f7fe f941 	bl	8000b26 <PE_Reset_ZI>
 80028a4:	4638      	mov	r0, r7
 80028a6:	f7fe f978 	bl	8000b9a <PE_Reset_Counter>
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	7903      	ldrb	r3, [r0, #4]
 80028ae:	7c38      	ldrb	r0, [r7, #16]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2201      	movs	r2, #1
 80028b6:	2101      	movs	r1, #1
 80028b8:	f002 faed 	bl	8004e96 <USBPD_PRL_SetHeader>
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	6801      	ldr	r1, [r0, #0]
 80028c0:	f041 0108 	orr.w	r1, r1, #8
 80028c4:	6001      	str	r1, [r0, #0]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	6803      	ldr	r3, [r0, #0]
 80028cc:	684a      	ldr	r2, [r1, #4]
 80028ce:	f362 0301 	bfi	r3, r2, #0, #2
 80028d2:	6003      	str	r3, [r0, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	7c38      	ldrb	r0, [r7, #16]
 80028d8:	f002 fb2a 	bl	8004f30 <USBPD_PRL_SOPCapability>
 80028dc:	7c38      	ldrb	r0, [r7, #16]
 80028de:	f002 fcdb 	bl	8005298 <USBPD_PRL_Reset>
 80028e2:	7cb9      	ldrb	r1, [r7, #18]
 80028e4:	2002      	movs	r0, #2
 80028e6:	2902      	cmp	r1, #2
 80028e8:	7478      	strb	r0, [r7, #17]
 80028ea:	d009      	beq.n	8002900 <USBPD_PE_StateMachine_SRC+0x94>
 80028ec:	74b8      	strb	r0, [r7, #18]
 80028ee:	f8cd 9000 	str.w	r9, [sp]
 80028f2:	7c39      	ldrb	r1, [r7, #16]
 80028f4:	f8d8 c000 	ldr.w	ip, [r8]
 80028f8:	2300      	movs	r3, #0
 80028fa:	2202      	movs	r2, #2
 80028fc:	2004      	movs	r0, #4
 80028fe:	47e0      	blx	ip
 8002900:	6979      	ldr	r1, [r7, #20]
 8002902:	f3c1 4040 	ubfx	r0, r1, #17, #1
 8002906:	b128      	cbz	r0, 8002914 <USBPD_PE_StateMachine_SRC+0xa8>
 8002908:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 800290c:	6179      	str	r1, [r7, #20]
 800290e:	2164      	movs	r1, #100	; 0x64
 8002910:	f000 fdaf 	bl	8003472 <.text_15>
 8002914:	4638      	mov	r0, r7
 8002916:	f7fd fffa 	bl	800090e <PE_Get_RxEvent>
 800291a:	2803      	cmp	r0, #3
 800291c:	f88d 000c 	strb.w	r0, [sp, #12]
 8002920:	f040 8420 	bne.w	8003164 <USBPD_PE_StateMachine_SRC+0x8f8>
 8002924:	2001      	movs	r0, #1
 8002926:	e001      	b.n	800292c <USBPD_PE_StateMachine_SRC+0xc0>
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	f000 bd60 	b.w	80033f0 <USBPD_PE_StateMachine_SRC+0xb84>
 8002930:	20a6      	movs	r0, #166	; 0xa6
 8002932:	f000 fd84 	bl	800343e <.text_11>
 8002936:	22a6      	movs	r2, #166	; 0xa6
 8002938:	2004      	movs	r0, #4
 800293a:	47a8      	blx	r5
 800293c:	78a2      	ldrb	r2, [r4, #2]
 800293e:	2502      	movs	r5, #2
 8002940:	2a0f      	cmp	r2, #15
 8002942:	bf18      	it	ne
 8002944:	2a14      	cmpne	r2, #20
 8002946:	d10a      	bne.n	800295e <USBPD_PE_StateMachine_SRC+0xf2>
 8002948:	747a      	strb	r2, [r7, #17]
 800294a:	2000      	movs	r0, #0
 800294c:	70a0      	strb	r0, [r4, #2]
 800294e:	2100      	movs	r1, #0
 8002950:	7cb8      	ldrb	r0, [r7, #18]
 8002952:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002954:	4290      	cmp	r0, r2
 8002956:	d002      	beq.n	800295e <USBPD_PE_StateMachine_SRC+0xf2>
 8002958:	74ba      	strb	r2, [r7, #18]
 800295a:	f000 fd69 	bl	8003430 <.text_10>
 800295e:	f000 bc2a 	b.w	80031b6 <USBPD_PE_StateMachine_SRC+0x94a>
 8002962:	f000 fd7a 	bl	800345a <.text_13>
 8002966:	215f      	movs	r1, #95	; 0x5f
 8002968:	f000 fd83 	bl	8003472 <.text_15>
 800296c:	f04f 35ff 	mov.w	r5, #4294967295
 8002970:	e184      	b.n	8002c7c <USBPD_PE_StateMachine_SRC+0x410>
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	6801      	ldr	r1, [r0, #0]
 8002976:	f021 0110 	bic.w	r1, r1, #16
 800297a:	6001      	str	r1, [r0, #0]
 800297c:	68b8      	ldr	r0, [r7, #8]
 800297e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002980:	2900      	cmp	r1, #0
 8002982:	d0f3      	beq.n	800296c <USBPD_PE_StateMachine_SRC+0x100>
 8002984:	7c38      	ldrb	r0, [r7, #16]
 8002986:	4788      	blx	r1
 8002988:	e7f0      	b.n	800296c <USBPD_PE_StateMachine_SRC+0x100>
 800298a:	f000 fd60 	bl	800344e <.text_12>
 800298e:	bf1a      	itte	ne
 8002990:	6838      	ldrne	r0, [r7, #0]
 8002992:	6801      	ldrne	r1, [r0, #0]
 8002994:	2101      	moveq	r1, #1
 8002996:	4650      	mov	r0, sl
 8002998:	f002 faca 	bl	8004f30 <USBPD_PRL_SOPCapability>
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	680a      	ldr	r2, [r1, #0]
 80029a0:	f3c2 3000 	ubfx	r0, r2, #12, #1
 80029a4:	b350      	cbz	r0, 80029fc <USBPD_PE_StateMachine_SRC+0x190>
 80029a6:	f002 0003 	and.w	r0, r2, #3
 80029aa:	2801      	cmp	r0, #1
 80029ac:	bf0c      	ite	eq
 80029ae:	2000      	moveq	r0, #0
 80029b0:	2001      	movne	r0, #1
 80029b2:	f022 0220 	bic.w	r2, r2, #32
 80029b6:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
 80029ba:	600a      	str	r2, [r1, #0]
 80029bc:	2000      	movs	r0, #0
 80029be:	70f0      	strb	r0, [r6, #3]
 80029c0:	2101      	movs	r1, #1
 80029c2:	f000 fd6d 	bl	80034a0 <.text_18+0x2>
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	6801      	ldr	r1, [r0, #0]
 80029ca:	f3c1 1000 	ubfx	r0, r1, #4, #1
 80029ce:	b128      	cbz	r0, 80029dc <USBPD_PE_StateMachine_SRC+0x170>
 80029d0:	f248 0014 	movw	r0, #32788	; 0x8014
 80029d4:	83f8      	strh	r0, [r7, #30]
 80029d6:	2514      	movs	r5, #20
 80029d8:	2106      	movs	r1, #6
 80029da:	e16f      	b.n	8002cbc <USBPD_PE_StateMachine_SRC+0x450>
 80029dc:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d047      	beq.n	8002a74 <USBPD_PE_StateMachine_SRC+0x208>
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	7801      	ldrb	r1, [r0, #0]
 80029e8:	078a      	lsls	r2, r1, #30
 80029ea:	d543      	bpl.n	8002a74 <USBPD_PE_StateMachine_SRC+0x208>
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d040      	beq.n	8002a74 <USBPD_PE_StateMachine_SRC+0x208>
 80029f2:	7930      	ldrb	r0, [r6, #4]
 80029f4:	1c40      	adds	r0, r0, #1
 80029f6:	7130      	strb	r0, [r6, #4]
 80029f8:	2105      	movs	r1, #5
 80029fa:	e15f      	b.n	8002cbc <USBPD_PE_StateMachine_SRC+0x450>
 80029fc:	7c38      	ldrb	r0, [r7, #16]
 80029fe:	2121      	movs	r1, #33	; 0x21
 8002a00:	f7fd fdb1 	bl	8000566 <USBPD_PE_Notification>
 8002a04:	e159      	b.n	8002cba <USBPD_PE_StateMachine_SRC+0x44e>
 8002a06:	a903      	add	r1, sp, #12
 8002a08:	4638      	mov	r0, r7
 8002a0a:	f000 fead 	bl	8003768 <PE_StateMachine_VDMCable>
 8002a0e:	e2d3      	b.n	8002fb8 <USBPD_PE_StateMachine_SRC+0x74c>
 8002a10:	8bf8      	ldrh	r0, [r7, #30]
 8002a12:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a16:	d165      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002a18:	2107      	movs	r1, #7
 8002a1a:	e37e      	b.n	800311a <USBPD_PE_StateMachine_SRC+0x8ae>
 8002a1c:	4638      	mov	r0, r7
 8002a1e:	f000 fdd5 	bl	80035cc <PE_StateMachine_SRC_SendCapa>
 8002a22:	e2c9      	b.n	8002fb8 <USBPD_PE_StateMachine_SRC+0x74c>
 8002a24:	4638      	mov	r0, r7
 8002a26:	f000 fe73 	bl	8003710 <PE_Send_SRCCapabilities>
 8002a2a:	2805      	cmp	r0, #5
 8002a2c:	d108      	bne.n	8002a40 <USBPD_PE_StateMachine_SRC+0x1d4>
 8002a2e:	f000 fd36 	bl	800349e <.text_18>
 8002a32:	2001      	movs	r0, #1
 8002a34:	f000 fcf1 	bl	800341a <.text_8>
 8002a38:	2116      	movs	r1, #22
 8002a3a:	7479      	strb	r1, [r7, #17]
 8002a3c:	210f      	movs	r1, #15
 8002a3e:	e338      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002a40:	2000      	movs	r0, #0
 8002a42:	7738      	strb	r0, [r7, #28]
 8002a44:	2111      	movs	r1, #17
 8002a46:	e139      	b.n	8002cbc <USBPD_PE_StateMachine_SRC+0x450>
 8002a48:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8002a4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a4e:	d105      	bne.n	8002a5c <USBPD_PE_StateMachine_SRC+0x1f0>
 8002a50:	8479      	strh	r1, [r7, #34]	; 0x22
 8002a52:	2105      	movs	r1, #5
 8002a54:	7930      	ldrb	r0, [r6, #4]
 8002a56:	1c40      	adds	r0, r0, #1
 8002a58:	7130      	strb	r0, [r6, #4]
 8002a5a:	7479      	strb	r1, [r7, #17]
 8002a5c:	8bf8      	ldrh	r0, [r7, #30]
 8002a5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a62:	d13f      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002a64:	6838      	ldr	r0, [r7, #0]
 8002a66:	6841      	ldr	r1, [r0, #4]
 8002a68:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002a6c:	b110      	cbz	r0, 8002a74 <USBPD_PE_StateMachine_SRC+0x208>
 8002a6e:	78f0      	ldrb	r0, [r6, #3]
 8002a70:	1c40      	adds	r0, r0, #1
 8002a72:	70f0      	strb	r0, [r6, #3]
 8002a74:	2007      	movs	r0, #7
 8002a76:	e2e2      	b.n	800303e <USBPD_PE_StateMachine_SRC+0x7d2>
 8002a78:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a7c:	2811      	cmp	r0, #17
 8002a7e:	d10a      	bne.n	8002a96 <USBPD_PE_StateMachine_SRC+0x22a>
 8002a80:	88a1      	ldrh	r1, [r4, #4]
 8002a82:	0bc8      	lsrs	r0, r1, #15
 8002a84:	d107      	bne.n	8002a96 <USBPD_PE_StateMachine_SRC+0x22a>
 8002a86:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f000 80a8 	beq.w	8002be0 <USBPD_PE_StateMachine_SRC+0x374>
 8002a90:	f001 011f 	and.w	r1, r1, #31
 8002a94:	2902      	cmp	r1, #2
 8002a96:	f040 80a3 	bne.w	8002be0 <USBPD_PE_StateMachine_SRC+0x374>
 8002a9a:	68a0      	ldr	r0, [r4, #8]
 8002a9c:	7881      	ldrb	r1, [r0, #2]
 8002a9e:	78c2      	ldrb	r2, [r0, #3]
 8002aa0:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002aa4:	7901      	ldrb	r1, [r0, #4]
 8002aa6:	7940      	ldrb	r0, [r0, #5]
 8002aa8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002aac:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	88a0      	ldrh	r0, [r4, #4]
 8002ab4:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002ab8:	7c38      	ldrb	r0, [r7, #16]
 8002aba:	f7fe f89a 	bl	8000bf2 <PE_ExtRevisionInteroperability>
 8002abe:	68bd      	ldr	r5, [r7, #8]
 8002ac0:	7c38      	ldrb	r0, [r7, #16]
 8002ac2:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	466a      	mov	r2, sp
 8002aca:	2106      	movs	r1, #6
 8002acc:	47e0      	blx	ip
 8002ace:	2009      	movs	r0, #9
 8002ad0:	7478      	strb	r0, [r7, #17]
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	e07e      	b.n	8002bd4 <USBPD_PE_StateMachine_SRC+0x368>
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	f000 fdc5 	bl	8003666 <PE_StateMachine_SRC_NegocCapa>
 8002adc:	e26c      	b.n	8002fb8 <USBPD_PE_StateMachine_SRC+0x74c>
 8002ade:	8bf8      	ldrh	r0, [r7, #30]
 8002ae0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ae4:	f040 843c 	bne.w	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002ae8:	f000 fcd9 	bl	800349e <.text_18>
 8002aec:	68b8      	ldr	r0, [r7, #8]
 8002aee:	6801      	ldr	r1, [r0, #0]
 8002af0:	2900      	cmp	r1, #0
 8002af2:	f000 8435 	beq.w	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002af6:	7c38      	ldrb	r0, [r7, #16]
 8002af8:	4788      	blx	r1
 8002afa:	2800      	cmp	r0, #0
 8002afc:	f040 823f 	bne.w	8002f7e <USBPD_PE_StateMachine_SRC+0x712>
 8002b00:	200d      	movs	r0, #13
 8002b02:	e29c      	b.n	800303e <USBPD_PE_StateMachine_SRC+0x7d2>
 8002b04:	9100      	str	r1, [sp, #0]
 8002b06:	2303      	movs	r3, #3
 8002b08:	2206      	movs	r2, #6
 8002b0a:	f000 fcd9 	bl	80034c0 <.text_21+0x4>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d1e8      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002b12:	2103      	movs	r1, #3
 8002b14:	f000 fcc4 	bl	80034a0 <.text_18+0x2>
 8002b18:	7c38      	ldrb	r0, [r7, #16]
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	f7fd fd23 	bl	8000566 <USBPD_PE_Notification>
 8002b20:	2000      	movs	r0, #0
 8002b22:	84b8      	strh	r0, [r7, #36]	; 0x24
 8002b24:	6978      	ldr	r0, [r7, #20]
 8002b26:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8002b2a:	2803      	cmp	r0, #3
 8002b2c:	d1da      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002b2e:	f24b 60b0 	movw	r0, #46768	; 0xb6b0
 8002b32:	84b8      	strh	r0, [r7, #36]	; 0x24
 8002b34:	e0a2      	b.n	8002c7c <USBPD_PE_StateMachine_SRC+0x410>
 8002b36:	2101      	movs	r1, #1
 8002b38:	9100      	str	r1, [sp, #0]
 8002b3a:	2397      	movs	r3, #151	; 0x97
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f000 fcbe 	bl	80034be <.text_21+0x2>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d1ce      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002b46:	7c38      	ldrb	r0, [r7, #16]
 8002b48:	773d      	strb	r5, [r7, #28]
 8002b4a:	2129      	movs	r1, #41	; 0x29
 8002b4c:	f7fd fd0b 	bl	8000566 <USBPD_PE_Notification>
 8002b50:	f248 2026 	movw	r0, #33318	; 0x8226
 8002b54:	83f8      	strh	r0, [r7, #30]
 8002b56:	f240 2526 	movw	r5, #550	; 0x226
 8002b5a:	e08f      	b.n	8002c7c <USBPD_PE_StateMachine_SRC+0x410>
 8002b5c:	8bf8      	ldrh	r0, [r7, #30]
 8002b5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b62:	d1bf      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002b64:	7c38      	ldrb	r0, [r7, #16]
 8002b66:	212a      	movs	r1, #42	; 0x2a
 8002b68:	f7fd fcfd 	bl	8000566 <USBPD_PE_Notification>
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	9000      	str	r0, [sp, #0]
 8002b70:	2303      	movs	r3, #3
 8002b72:	f000 fca3 	bl	80034bc <.text_21>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d1b4      	bne.n	8002ae4 <USBPD_PE_StateMachine_SRC+0x278>
 8002b7a:	212e      	movs	r1, #46	; 0x2e
 8002b7c:	e299      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	9000      	str	r0, [sp, #0]
 8002b82:	2307      	movs	r3, #7
 8002b84:	2203      	movs	r2, #3
 8002b86:	e125      	b.n	8002dd4 <USBPD_PE_StateMachine_SRC+0x568>
 8002b88:	2000      	movs	r0, #0
 8002b8a:	9000      	str	r0, [sp, #0]
 8002b8c:	2312      	movs	r3, #18
 8002b8e:	7861      	ldrb	r1, [r4, #1]
 8002b90:	220d      	movs	r2, #13
 8002b92:	f000 fc95 	bl	80034c0 <.text_21+0x4>
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d170      	bne.n	8002c7c <USBPD_PE_StateMachine_SRC+0x410>
 8002b9a:	f8a7 b01e 	strh.w	fp, [r7, #30]
 8002b9e:	251b      	movs	r5, #27
 8002ba0:	2130      	movs	r1, #48	; 0x30
 8002ba2:	e286      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002ba4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002ba8:	2914      	cmp	r1, #20
 8002baa:	d019      	beq.n	8002be0 <USBPD_PE_StateMachine_SRC+0x374>
 8002bac:	7822      	ldrb	r2, [r4, #0]
 8002bae:	7861      	ldrb	r1, [r4, #1]
 8002bb0:	428a      	cmp	r2, r1
 8002bb2:	bf02      	ittt	eq
 8002bb4:	88a2      	ldrheq	r2, [r4, #4]
 8002bb6:	4010      	andeq	r0, r2
 8002bb8:	2803      	cmpeq	r0, #3
 8002bba:	d111      	bne.n	8002be0 <USBPD_PE_StateMachine_SRC+0x374>
 8002bbc:	7c38      	ldrb	r0, [r7, #16]
 8002bbe:	2131      	movs	r1, #49	; 0x31
 8002bc0:	f7fd fcd1 	bl	8000566 <USBPD_PE_Notification>
 8002bc4:	7820      	ldrb	r0, [r4, #0]
 8002bc6:	b910      	cbnz	r0, 8002bce <USBPD_PE_StateMachine_SRC+0x362>
 8002bc8:	2107      	movs	r1, #7
 8002bca:	7479      	strb	r1, [r7, #17]
 8002bcc:	e002      	b.n	8002bd4 <USBPD_PE_StateMachine_SRC+0x368>
 8002bce:	2003      	movs	r0, #3
 8002bd0:	7478      	strb	r0, [r7, #17]
 8002bd2:	2500      	movs	r5, #0
 8002bd4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bd8:	2814      	cmp	r0, #20
 8002bda:	d001      	beq.n	8002be0 <USBPD_PE_StateMachine_SRC+0x374>
 8002bdc:	f000 fc68 	bl	80034b0 <.text_20>
 8002be0:	8bf8      	ldrh	r0, [r7, #30]
 8002be2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002be6:	d149      	bne.n	8002c7c <USBPD_PE_StateMachine_SRC+0x410>
 8002be8:	e1c9      	b.n	8002f7e <USBPD_PE_StateMachine_SRC+0x712>
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	7801      	ldrb	r1, [r0, #0]
 8002bee:	f001 0103 	and.w	r1, r1, #3
 8002bf2:	2902      	cmp	r1, #2
 8002bf4:	bf04      	itt	eq
 8002bf6:	7c38      	ldrbeq	r0, [r7, #16]
 8002bf8:	f002 f989 	bleq	8004f0e <USBPD_PRL_SRCReleaseSinkNG>
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f7fd fe64 	bl	80008cc <PE_Send_RESET>
 8002c04:	f000 fc29 	bl	800345a <.text_13>
 8002c08:	2100      	movs	r1, #0
 8002c0a:	78b0      	ldrb	r0, [r6, #2]
 8002c0c:	1c40      	adds	r0, r0, #1
 8002c0e:	70b0      	strb	r0, [r6, #2]
 8002c10:	2202      	movs	r2, #2
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002c18:	6178      	str	r0, [r7, #20]
 8002c1a:	70a1      	strb	r1, [r4, #2]
 8002c1c:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
 8002c20:	6178      	str	r0, [r7, #20]
 8002c22:	f000 fc41 	bl	80034a8 <.text_19+0x2>
 8002c26:	e008      	b.n	8002c3a <USBPD_PE_StateMachine_SRC+0x3ce>
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	7801      	ldrb	r1, [r0, #0]
 8002c2c:	f001 0103 	and.w	r1, r1, #3
 8002c30:	2902      	cmp	r1, #2
 8002c32:	bf04      	itt	eq
 8002c34:	7c38      	ldrbeq	r0, [r7, #16]
 8002c36:	f002 f96a 	bleq	8004f0e <USBPD_PRL_SRCReleaseSinkNG>
 8002c3a:	f8a7 b01e 	strh.w	fp, [r7, #30]
 8002c3e:	251b      	movs	r5, #27
 8002c40:	2015      	movs	r0, #21
 8002c42:	e1fc      	b.n	800303e <USBPD_PE_StateMachine_SRC+0x7d2>
 8002c44:	8bf8      	ldrh	r0, [r7, #30]
 8002c46:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002c4a:	d117      	bne.n	8002c7c <USBPD_PE_StateMachine_SRC+0x410>
 8002c4c:	78b1      	ldrb	r1, [r6, #2]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	2903      	cmp	r1, #3
 8002c52:	d303      	bcc.n	8002c5c <USBPD_PE_StateMachine_SRC+0x3f0>
 8002c54:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002c58:	bb58      	cbnz	r0, 8002cb2 <USBPD_PE_StateMachine_SRC+0x446>
 8002c5a:	e02e      	b.n	8002cba <USBPD_PE_StateMachine_SRC+0x44e>
 8002c5c:	f248 218a 	movw	r1, #33418	; 0x828a
 8002c60:	83f9      	strh	r1, [r7, #30]
 8002c62:	2217      	movs	r2, #23
 8002c64:	747a      	strb	r2, [r7, #17]
 8002c66:	2500      	movs	r5, #0
 8002c68:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8002c6c:	1e42      	subs	r2, r0, #1
 8002c6e:	4192      	sbcs	r2, r2
 8002c70:	0fd2      	lsrs	r2, r2, #31
 8002c72:	f000 fc19 	bl	80034a8 <.text_19+0x2>
 8002c76:	2203      	movs	r2, #3
 8002c78:	f000 fc16 	bl	80034a8 <.text_19+0x2>
 8002c7c:	e370      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002c82:	4650      	mov	r0, sl
 8002c84:	4798      	blx	r3
 8002c86:	2801      	cmp	r0, #1
 8002c88:	d109      	bne.n	8002c9e <USBPD_PE_StateMachine_SRC+0x432>
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	f7fd ff0f 	bl	8000aae <PE_Reset_HardReset>
 8002c90:	f248 3020 	movw	r0, #33568	; 0x8320
 8002c94:	83f8      	strh	r0, [r7, #30]
 8002c96:	2113      	movs	r1, #19
 8002c98:	f44f 7548 	mov.w	r5, #800	; 0x320
 8002c9c:	7479      	strb	r1, [r7, #17]
 8002c9e:	8bf8      	ldrh	r0, [r7, #30]
 8002ca0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ca4:	d10b      	bne.n	8002cbe <USBPD_PE_StateMachine_SRC+0x452>
 8002ca6:	f000 fbfe 	bl	80034a6 <.text_19>
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002cb0:	b118      	cbz	r0, 8002cba <USBPD_PE_StateMachine_SRC+0x44e>
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d119      	bne.n	8002cee <USBPD_PE_StateMachine_SRC+0x482>
 8002cba:	2100      	movs	r1, #0
 8002cbc:	7479      	strb	r1, [r7, #17]
 8002cbe:	e34f      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002cc0:	8bf8      	ldrh	r0, [r7, #30]
 8002cc2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cc6:	d1fa      	bne.n	8002cbe <USBPD_PE_StateMachine_SRC+0x452>
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f000 fbed 	bl	80034a8 <.text_19+0x2>
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4650      	mov	r0, sl
 8002cd6:	4798      	blx	r3
 8002cd8:	2801      	cmp	r0, #1
 8002cda:	d103      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x478>
 8002cdc:	2205      	movs	r2, #5
 8002cde:	f000 fbe3 	bl	80034a8 <.text_19+0x2>
 8002ce2:	e6c7      	b.n	8002a74 <USBPD_PE_StateMachine_SRC+0x208>
 8002ce4:	f000 fbdf 	bl	80034a6 <.text_19>
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002cec:	2800      	cmp	r0, #0
 8002cee:	f040 8213 	bne.w	8003118 <USBPD_PE_StateMachine_SRC+0x8ac>
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	7479      	strb	r1, [r7, #17]
 8002cf6:	e211      	b.n	800311c <USBPD_PE_StateMachine_SRC+0x8b0>
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	9000      	str	r0, [sp, #0]
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2207      	movs	r2, #7
 8002d00:	f000 fbde 	bl	80034c0 <.text_21+0x4>
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1da      	bne.n	8002cbe <USBPD_PE_StateMachine_SRC+0x452>
 8002d08:	2006      	movs	r0, #6
 8002d0a:	f000 fb86 	bl	800341a <.text_8>
 8002d0e:	251b      	movs	r5, #27
 8002d10:	210b      	movs	r1, #11
 8002d12:	e1ce      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002d14:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002d18:	2811      	cmp	r0, #17
 8002d1a:	d12f      	bne.n	8002d7c <USBPD_PE_StateMachine_SRC+0x510>
 8002d1c:	88a1      	ldrh	r1, [r4, #4]
 8002d1e:	0bc8      	lsrs	r0, r1, #15
 8002d20:	d119      	bne.n	8002d56 <USBPD_PE_StateMachine_SRC+0x4ea>
 8002d22:	f3c1 3302 	ubfx	r3, r1, #12, #3
 8002d26:	0018      	movs	r0, r3
 8002d28:	d015      	beq.n	8002d56 <USBPD_PE_StateMachine_SRC+0x4ea>
 8002d2a:	f001 011f 	and.w	r1, r1, #31
 8002d2e:	2901      	cmp	r1, #1
 8002d30:	d111      	bne.n	8002d56 <USBPD_PE_StateMachine_SRC+0x4ea>
 8002d32:	68a0      	ldr	r0, [r4, #8]
 8002d34:	68bd      	ldr	r5, [r7, #8]
 8002d36:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8002d3a:	1c82      	adds	r2, r0, #2
 8002d3c:	7c38      	ldrb	r0, [r7, #16]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	2104      	movs	r1, #4
 8002d42:	47e0      	blx	ip
 8002d44:	f000 fb6d 	bl	8003422 <.text_9>
 8002d48:	d001      	beq.n	8002d4e <USBPD_PE_StateMachine_SRC+0x4e2>
 8002d4a:	f000 fbb1 	bl	80034b0 <.text_20>
 8002d4e:	7c38      	ldrb	r0, [r7, #16]
 8002d50:	210d      	movs	r1, #13
 8002d52:	f7fd fc08 	bl	8000566 <USBPD_PE_Notification>
 8002d56:	88a0      	ldrh	r0, [r4, #4]
 8002d58:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8002d5c:	d10e      	bne.n	8002d7c <USBPD_PE_StateMachine_SRC+0x510>
 8002d5e:	f000 001f 	and.w	r0, r0, #31
 8002d62:	2804      	cmp	r0, #4
 8002d64:	bf18      	it	ne
 8002d66:	2810      	cmpne	r0, #16
 8002d68:	d108      	bne.n	8002d7c <USBPD_PE_StateMachine_SRC+0x510>
 8002d6a:	f000 fb5a 	bl	8003422 <.text_9>
 8002d6e:	d001      	beq.n	8002d74 <USBPD_PE_StateMachine_SRC+0x508>
 8002d70:	f000 fb9e 	bl	80034b0 <.text_20>
 8002d74:	7c38      	ldrb	r0, [r7, #16]
 8002d76:	210e      	movs	r1, #14
 8002d78:	f7fd fbf5 	bl	8000566 <USBPD_PE_Notification>
 8002d7c:	8bf8      	ldrh	r0, [r7, #30]
 8002d7e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d82:	d11c      	bne.n	8002dbe <USBPD_PE_StateMachine_SRC+0x552>
 8002d84:	2103      	movs	r1, #3
 8002d86:	e1c8      	b.n	800311a <USBPD_PE_StateMachine_SRC+0x8ae>
 8002d88:	68b8      	ldr	r0, [r7, #8]
 8002d8a:	6881      	ldr	r1, [r0, #8]
 8002d8c:	b1e9      	cbz	r1, 8002dca <USBPD_PE_StateMachine_SRC+0x55e>
 8002d8e:	7c38      	ldrb	r0, [r7, #16]
 8002d90:	4788      	blx	r1
 8002d92:	280a      	cmp	r0, #10
 8002d94:	d002      	beq.n	8002d9c <USBPD_PE_StateMachine_SRC+0x530>
 8002d96:	280d      	cmp	r0, #13
 8002d98:	d012      	beq.n	8002dc0 <USBPD_PE_StateMachine_SRC+0x554>
 8002d9a:	e016      	b.n	8002dca <USBPD_PE_StateMachine_SRC+0x55e>
 8002d9c:	f248 001e 	movw	r0, #32798	; 0x801e
 8002da0:	83f8      	strh	r0, [r7, #30]
 8002da2:	2100      	movs	r1, #0
 8002da4:	9100      	str	r1, [sp, #0]
 8002da6:	2324      	movs	r3, #36	; 0x24
 8002da8:	2203      	movs	r2, #3
 8002daa:	f000 fb89 	bl	80034c0 <.text_21+0x4>
 8002dae:	251e      	movs	r5, #30
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d104      	bne.n	8002dbe <USBPD_PE_StateMachine_SRC+0x552>
 8002db4:	f000 fb2c 	bl	8003410 <.text_7>
 8002db8:	2201      	movs	r2, #1
 8002dba:	2101      	movs	r1, #1
 8002dbc:	47e0      	blx	ip
 8002dbe:	e2cf      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	9000      	str	r0, [sp, #0]
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	e003      	b.n	8002dd2 <USBPD_PE_StateMachine_SRC+0x566>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	9000      	str	r0, [sp, #0]
 8002dce:	2303      	movs	r3, #3
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f000 fb74 	bl	80034c0 <.text_21+0x4>
 8002dd8:	e2c2      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002dda:	8bf8      	ldrh	r0, [r7, #30]
 8002ddc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002de0:	d1fa      	bne.n	8002dd8 <USBPD_PE_StateMachine_SRC+0x56c>
 8002de2:	f000 fb5c 	bl	800349e <.text_18>
 8002de6:	f000 fb4e 	bl	8003486 <.text_17>
 8002dea:	f000 fb45 	bl	8003478 <.text_16>
 8002dee:	7c38      	ldrb	r0, [r7, #16]
 8002df0:	2100      	movs	r1, #0
 8002df2:	f002 f862 	bl	8004eba <USBPD_PRL_SetHeaderPowerRole>
 8002df6:	2000      	movs	r0, #0
 8002df8:	9000      	str	r0, [sp, #0]
 8002dfa:	2325      	movs	r3, #37	; 0x25
 8002dfc:	f000 fb5e 	bl	80034bc <.text_21>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d1e9      	bne.n	8002dd8 <USBPD_PE_StateMachine_SRC+0x56c>
 8002e04:	e09d      	b.n	8002f42 <USBPD_PE_StateMachine_SRC+0x6d6>
 8002e06:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002e0a:	2911      	cmp	r1, #17
 8002e0c:	bf02      	ittt	eq
 8002e0e:	88a1      	ldrheq	r1, [r4, #4]
 8002e10:	4008      	andeq	r0, r1
 8002e12:	2806      	cmpeq	r0, #6
 8002e14:	d105      	bne.n	8002e22 <USBPD_PE_StateMachine_SRC+0x5b6>
 8002e16:	f000 faf3 	bl	8003400 <.text_5>
 8002e1a:	f000 fb4c 	bl	80034b6 <.text_20+0x6>
 8002e1e:	2026      	movs	r0, #38	; 0x26
 8002e20:	7478      	strb	r0, [r7, #17]
 8002e22:	8bf8      	ldrh	r0, [r7, #30]
 8002e24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e28:	d1d6      	bne.n	8002dd8 <USBPD_PE_StateMachine_SRC+0x56c>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	f040 8172 	bne.w	8003118 <USBPD_PE_StateMachine_SRC+0x8ac>
 8002e34:	7c38      	ldrb	r0, [r7, #16]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	220a      	movs	r2, #10
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4798      	blx	r3
 8002e3e:	e09e      	b.n	8002f7e <USBPD_PE_StateMachine_SRC+0x712>
 8002e40:	4638      	mov	r0, r7
 8002e42:	f7fd fd5c 	bl	80008fe <PE_ChangePowerRole>
 8002e46:	f000 fadf 	bl	8003408 <.text_6>
 8002e4a:	220d      	movs	r2, #13
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	47a8      	blx	r5
 8002e50:	7c38      	ldrb	r0, [r7, #16]
 8002e52:	2114      	movs	r1, #20
 8002e54:	f7fd fb87 	bl	8000566 <USBPD_PE_Notification>
 8002e58:	f000 fad6 	bl	8003408 <.text_6>
 8002e5c:	220e      	movs	r2, #14
 8002e5e:	2100      	movs	r1, #0
 8002e60:	47a8      	blx	r5
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	7801      	ldrb	r1, [r0, #0]
 8002e66:	f001 0103 	and.w	r1, r1, #3
 8002e6a:	2901      	cmp	r1, #1
 8002e6c:	bf04      	itt	eq
 8002e6e:	4650      	moveq	r0, sl
 8002e70:	f002 f85e 	bleq	8004f30 <USBPD_PRL_SOPCapability>
 8002e74:	4638      	mov	r0, r7
 8002e76:	f7fd fe95 	bl	8000ba4 <PE_Reset_StateMachine>
 8002e7a:	e14f      	b.n	800311c <USBPD_PE_StateMachine_SRC+0x8b0>
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	9000      	str	r0, [sp, #0]
 8002e80:	231f      	movs	r3, #31
 8002e82:	220a      	movs	r2, #10
 8002e84:	f000 fb1c 	bl	80034c0 <.text_21+0x4>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d1a5      	bne.n	8002dd8 <USBPD_PE_StateMachine_SRC+0x56c>
 8002e8c:	2008      	movs	r0, #8
 8002e8e:	f000 fac4 	bl	800341a <.text_8>
 8002e92:	2202      	movs	r2, #2
 8002e94:	f000 fabc 	bl	8003410 <.text_7>
 8002e98:	2101      	movs	r1, #1
 8002e9a:	47e0      	blx	ip
 8002e9c:	251b      	movs	r5, #27
 8002e9e:	2139      	movs	r1, #57	; 0x39
 8002ea0:	e107      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002ea2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ea6:	2811      	cmp	r0, #17
 8002ea8:	bf04      	itt	eq
 8002eaa:	88a0      	ldrheq	r0, [r4, #4]
 8002eac:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8002eb0:	d133      	bne.n	8002f1a <USBPD_PE_StateMachine_SRC+0x6ae>
 8002eb2:	f000 001f 	and.w	r0, r0, #31
 8002eb6:	2803      	cmp	r0, #3
 8002eb8:	d006      	beq.n	8002ec8 <USBPD_PE_StateMachine_SRC+0x65c>
 8002eba:	2804      	cmp	r0, #4
 8002ebc:	d011      	beq.n	8002ee2 <USBPD_PE_StateMachine_SRC+0x676>
 8002ebe:	280c      	cmp	r0, #12
 8002ec0:	d008      	beq.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x668>
 8002ec2:	2810      	cmp	r0, #16
 8002ec4:	d01a      	beq.n	8002efc <USBPD_PE_StateMachine_SRC+0x690>
 8002ec6:	e028      	b.n	8002f1a <USBPD_PE_StateMachine_SRC+0x6ae>
 8002ec8:	7c38      	ldrb	r0, [r7, #16]
 8002eca:	213a      	movs	r1, #58	; 0x3a
 8002ecc:	f7fd fb4b 	bl	8000566 <USBPD_PE_Notification>
 8002ed0:	2020      	movs	r0, #32
 8002ed2:	e00c      	b.n	8002eee <USBPD_PE_StateMachine_SRC+0x682>
 8002ed4:	f000 fa98 	bl	8003408 <.text_6>
 8002ed8:	2205      	movs	r2, #5
 8002eda:	2101      	movs	r1, #1
 8002edc:	47a8      	blx	r5
 8002ede:	213b      	movs	r1, #59	; 0x3b
 8002ee0:	e002      	b.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x67c>
 8002ee2:	f000 fac0 	bl	8003466 <.text_14>
 8002ee6:	2116      	movs	r1, #22
 8002ee8:	f000 fac3 	bl	8003472 <.text_15>
 8002eec:	2003      	movs	r0, #3
 8002eee:	7478      	strb	r0, [r7, #17]
 8002ef0:	2500      	movs	r5, #0
 8002ef2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ef6:	2814      	cmp	r0, #20
 8002ef8:	d10d      	bne.n	8002f16 <USBPD_PE_StateMachine_SRC+0x6aa>
 8002efa:	e00e      	b.n	8002f1a <USBPD_PE_StateMachine_SRC+0x6ae>
 8002efc:	f000 fab3 	bl	8003466 <.text_14>
 8002f00:	7c38      	ldrb	r0, [r7, #16]
 8002f02:	2117      	movs	r1, #23
 8002f04:	f7fd fb2f 	bl	8000566 <USBPD_PE_Notification>
 8002f08:	2003      	movs	r0, #3
 8002f0a:	7478      	strb	r0, [r7, #17]
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002f12:	2814      	cmp	r0, #20
 8002f14:	d001      	beq.n	8002f1a <USBPD_PE_StateMachine_SRC+0x6ae>
 8002f16:	f000 facb 	bl	80034b0 <.text_20>
 8002f1a:	8bf8      	ldrh	r0, [r7, #30]
 8002f1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f20:	d119      	bne.n	8002f56 <USBPD_PE_StateMachine_SRC+0x6ea>
 8002f22:	e72f      	b.n	8002d84 <USBPD_PE_StateMachine_SRC+0x518>
 8002f24:	f000 faaf 	bl	8003486 <.text_17>
 8002f28:	f000 faa6 	bl	8003478 <.text_16>
 8002f2c:	7c38      	ldrb	r0, [r7, #16]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f001 ffc3 	bl	8004eba <USBPD_PRL_SetHeaderPowerRole>
 8002f34:	2000      	movs	r0, #0
 8002f36:	9000      	str	r0, [sp, #0]
 8002f38:	2321      	movs	r3, #33	; 0x21
 8002f3a:	f000 fabf 	bl	80034bc <.text_21>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d109      	bne.n	8002f56 <USBPD_PE_StateMachine_SRC+0x6ea>
 8002f42:	f000 fa61 	bl	8003408 <.text_6>
 8002f46:	2208      	movs	r2, #8
 8002f48:	2101      	movs	r1, #1
 8002f4a:	47a8      	blx	r5
 8002f4c:	f248 10d6 	movw	r0, #33238	; 0x81d6
 8002f50:	83f8      	strh	r0, [r7, #30]
 8002f52:	f44f 75eb 	mov.w	r5, #470	; 0x1d6
 8002f56:	e203      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8002f58:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002f5c:	2811      	cmp	r0, #17
 8002f5e:	d105      	bne.n	8002f6c <USBPD_PE_StateMachine_SRC+0x700>
 8002f60:	2126      	movs	r1, #38	; 0x26
 8002f62:	7479      	strb	r1, [r7, #17]
 8002f64:	f000 fa4c 	bl	8003400 <.text_5>
 8002f68:	f000 faa5 	bl	80034b6 <.text_20+0x6>
 8002f6c:	8bf8      	ldrh	r0, [r7, #30]
 8002f6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f72:	d1f0      	bne.n	8002f56 <USBPD_PE_StateMachine_SRC+0x6ea>
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	f040 80cd 	bne.w	8003118 <USBPD_PE_StateMachine_SRC+0x8ac>
 8002f7e:	210f      	movs	r1, #15
 8002f80:	e0cb      	b.n	800311a <USBPD_PE_StateMachine_SRC+0x8ae>
 8002f82:	8bf8      	ldrh	r0, [r7, #30]
 8002f84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f88:	d1e5      	bne.n	8002f56 <USBPD_PE_StateMachine_SRC+0x6ea>
 8002f8a:	f000 fa41 	bl	8003410 <.text_7>
 8002f8e:	220e      	movs	r2, #14
 8002f90:	2101      	movs	r1, #1
 8002f92:	47e0      	blx	ip
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	7801      	ldrb	r1, [r0, #0]
 8002f98:	f001 0103 	and.w	r1, r1, #3
 8002f9c:	2902      	cmp	r1, #2
 8002f9e:	bf04      	itt	eq
 8002fa0:	7c38      	ldrbeq	r0, [r7, #16]
 8002fa2:	f001 ffb4 	bleq	8004f0e <USBPD_PRL_SRCReleaseSinkNG>
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	f7fd fdfc 	bl	8000ba4 <PE_Reset_StateMachine>
 8002fac:	2115      	movs	r1, #21
 8002fae:	e080      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002fb0:	a903      	add	r1, sp, #12
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f000 fa87 	bl	80034c6 <PE_StateMachine_SRC_ReadyWait>
 8002fb8:	e1d1      	b.n	800335e <USBPD_PE_StateMachine_SRC+0xaf2>
 8002fba:	2000      	movs	r0, #0
 8002fbc:	2103      	movs	r1, #3
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	9002      	str	r0, [sp, #8]
 8002fc2:	9101      	str	r1, [sp, #4]
 8002fc4:	9200      	str	r2, [sp, #0]
 8002fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fca:	2206      	movs	r2, #6
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4638      	mov	r0, r7
 8002fd0:	f7fe f9ef 	bl	80013b2 <PE_Send_DataMessage>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d133      	bne.n	8003040 <USBPD_PE_StateMachine_SRC+0x7d4>
 8002fd8:	215d      	movs	r1, #93	; 0x5d
 8002fda:	e06a      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8002fdc:	2000      	movs	r0, #0
 8002fde:	9004      	str	r0, [sp, #16]
 8002fe0:	ab04      	add	r3, sp, #16
 8002fe2:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002fe6:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8002fea:	aa05      	add	r2, sp, #20
 8002fec:	210a      	movs	r1, #10
 8002fee:	4650      	mov	r0, sl
 8002ff0:	47a0      	blx	r4
 8002ff2:	9804      	ldr	r0, [sp, #16]
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	f7fe f961 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 8002ffa:	b9f8      	cbnz	r0, 800303c <USBPD_PE_StateMachine_SRC+0x7d0>
 8002ffc:	71f0      	strb	r0, [r6, #7]
 8002ffe:	2100      	movs	r1, #0
 8003000:	7231      	strb	r1, [r6, #8]
 8003002:	7c38      	ldrb	r0, [r7, #16]
 8003004:	f7fd fe9a 	bl	8000d3c <PE_Get_UnchunkedSupport>
 8003008:	b918      	cbnz	r0, 8003012 <USBPD_PE_StateMachine_SRC+0x7a6>
 800300a:	7a30      	ldrb	r0, [r6, #8]
 800300c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003010:	7230      	strb	r0, [r6, #8]
 8003012:	a905      	add	r1, sp, #20
 8003014:	9a04      	ldr	r2, [sp, #16]
 8003016:	f207 2067 	addw	r0, r7, #615	; 0x267
 800301a:	f018 fc0e 	bl	801b83a <__aeabi_memcpy>
 800301e:	2000      	movs	r0, #0
 8003020:	2103      	movs	r1, #3
 8003022:	2208      	movs	r2, #8
 8003024:	9002      	str	r0, [sp, #8]
 8003026:	9101      	str	r1, [sp, #4]
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	f207 2363 	addw	r3, r7, #611	; 0x263
 800302e:	220c      	movs	r2, #12
 8003030:	2100      	movs	r1, #0
 8003032:	4638      	mov	r0, r7
 8003034:	f7fe fc80 	bl	8001938 <PE_Send_ExtendedMessage>
 8003038:	214c      	movs	r1, #76	; 0x4c
 800303a:	e03a      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 800303c:	2001      	movs	r0, #1
 800303e:	7478      	strb	r0, [r7, #17]
 8003040:	e18e      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8003042:	2101      	movs	r1, #1
 8003044:	9100      	str	r1, [sp, #0]
 8003046:	2339      	movs	r3, #57	; 0x39
 8003048:	7832      	ldrb	r2, [r6, #0]
 800304a:	78e1      	ldrb	r1, [r4, #3]
 800304c:	f000 fa38 	bl	80034c0 <.text_21+0x4>
 8003050:	2800      	cmp	r0, #0
 8003052:	d1f5      	bne.n	8003040 <USBPD_PE_StateMachine_SRC+0x7d4>
 8003054:	7870      	ldrb	r0, [r6, #1]
 8003056:	f000 f9e0 	bl	800341a <.text_8>
 800305a:	251b      	movs	r5, #27
 800305c:	2144      	movs	r1, #68	; 0x44
 800305e:	e028      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x846>
 8003060:	8bf8      	ldrh	r0, [r7, #30]
 8003062:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003066:	bf04      	itt	eq
 8003068:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800306c:	2814      	cmpeq	r0, #20
 800306e:	f43f ae89 	beq.w	8002d84 <USBPD_PE_StateMachine_SRC+0x518>
 8003072:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003076:	2814      	cmp	r0, #20
 8003078:	d00b      	beq.n	8003092 <USBPD_PE_StateMachine_SRC+0x826>
 800307a:	88a1      	ldrh	r1, [r4, #4]
 800307c:	0bc8      	lsrs	r0, r1, #15
 800307e:	d009      	beq.n	8003094 <USBPD_PE_StateMachine_SRC+0x828>
 8003080:	4638      	mov	r0, r7
 8003082:	f7fe fb6f 	bl	8001764 <PE_Check_ExtendedMessage>
 8003086:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800308a:	2814      	cmp	r0, #20
 800308c:	d001      	beq.n	8003092 <USBPD_PE_StateMachine_SRC+0x826>
 800308e:	f000 fa0f 	bl	80034b0 <.text_20>
 8003092:	e165      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8003094:	f001 011f 	and.w	r1, r1, #31
 8003098:	2910      	cmp	r1, #16
 800309a:	f47f ae73 	bne.w	8002d84 <USBPD_PE_StateMachine_SRC+0x518>
 800309e:	f000 f9af 	bl	8003400 <.text_5>
 80030a2:	2500      	movs	r5, #0
 80030a4:	f000 fa07 	bl	80034b6 <.text_20+0x6>
 80030a8:	2000      	movs	r0, #0
 80030aa:	83f8      	strh	r0, [r7, #30]
 80030ac:	2103      	movs	r1, #3
 80030ae:	7479      	strb	r1, [r7, #17]
 80030b0:	2159      	movs	r1, #89	; 0x59
 80030b2:	f000 f9de 	bl	8003472 <.text_15>
 80030b6:	e153      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 80030b8:	4638      	mov	r0, r7
 80030ba:	f7fe fc8f 	bl	80019dc <PE_SubStateMachine_ExtendedMessages>
 80030be:	e14e      	b.n	800335e <USBPD_PE_StateMachine_SRC+0xaf2>
 80030c0:	a903      	add	r1, sp, #12
 80030c2:	4638      	mov	r0, r7
 80030c4:	f7fd fe48 	bl	8000d58 <PE_SubStateMachine_Generic>
 80030c8:	e149      	b.n	800335e <USBPD_PE_StateMachine_SRC+0xaf2>
 80030ca:	a903      	add	r1, sp, #12
 80030cc:	4638      	mov	r0, r7
 80030ce:	f000 fc6f 	bl	80039b0 <PE_SubStateMachine_VconnSwap>
 80030d2:	4605      	mov	r5, r0
 80030d4:	f000 f9bb 	bl	800344e <.text_12>
 80030d8:	bf1a      	itte	ne
 80030da:	6838      	ldrne	r0, [r7, #0]
 80030dc:	6801      	ldrne	r1, [r0, #0]
 80030de:	2101      	moveq	r1, #1
 80030e0:	4650      	mov	r0, sl
 80030e2:	f001 ff25 	bl	8004f30 <USBPD_PRL_SOPCapability>
 80030e6:	e13b      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 80030e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80030ec:	2911      	cmp	r1, #17
 80030ee:	bf02      	ittt	eq
 80030f0:	88a1      	ldrheq	r1, [r4, #4]
 80030f2:	4008      	andeq	r0, r1
 80030f4:	2813      	cmpeq	r0, #19
 80030f6:	d10b      	bne.n	8003110 <USBPD_PE_StateMachine_SRC+0x8a4>
 80030f8:	2000      	movs	r0, #0
 80030fa:	9000      	str	r0, [sp, #0]
 80030fc:	2320      	movs	r3, #32
 80030fe:	2203      	movs	r2, #3
 8003100:	f000 f9dd 	bl	80034be <.text_21+0x2>
 8003104:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003108:	2814      	cmp	r0, #20
 800310a:	d001      	beq.n	8003110 <USBPD_PE_StateMachine_SRC+0x8a4>
 800310c:	f000 f9d0 	bl	80034b0 <.text_20>
 8003110:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003112:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003116:	d102      	bne.n	800311e <USBPD_PE_StateMachine_SRC+0x8b2>
 8003118:	2192      	movs	r1, #146	; 0x92
 800311a:	7479      	strb	r1, [r7, #17]
 800311c:	2500      	movs	r5, #0
 800311e:	e11f      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 8003120:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003124:	4638      	mov	r0, r7
 8003126:	f001 fce1 	bl	8004aec <PE_StateMachine_UVDM>
 800312a:	e119      	b.n	8003360 <USBPD_PE_StateMachine_SRC+0xaf4>
 800312c:	6979      	ldr	r1, [r7, #20]
 800312e:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8003132:	2800      	cmp	r0, #0
 8003134:	d015      	beq.n	8003162 <USBPD_PE_StateMachine_SRC+0x8f6>
 8003136:	f3c1 3040 	ubfx	r0, r1, #13, #1
 800313a:	b138      	cbz	r0, 800314c <USBPD_PE_StateMachine_SRC+0x8e0>
 800313c:	7c38      	ldrb	r0, [r7, #16]
 800313e:	215b      	movs	r1, #91	; 0x5b
 8003140:	f7fd fa11 	bl	8000566 <USBPD_PE_Notification>
 8003144:	6978      	ldr	r0, [r7, #20]
 8003146:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800314a:	6178      	str	r0, [r7, #20]
 800314c:	2003      	movs	r0, #3
 800314e:	7cb9      	ldrb	r1, [r7, #18]
 8003150:	7478      	strb	r0, [r7, #17]
 8003152:	2903      	cmp	r1, #3
 8003154:	d004      	beq.n	8003160 <USBPD_PE_StateMachine_SRC+0x8f4>
 8003156:	f000 f972 	bl	800343e <.text_11>
 800315a:	2203      	movs	r2, #3
 800315c:	2004      	movs	r0, #4
 800315e:	47a8      	blx	r5
 8003160:	2501      	movs	r5, #1
 8003162:	e123      	b.n	80033ac <USBPD_PE_StateMachine_SRC+0xb40>
 8003164:	9506      	str	r5, [sp, #24]
 8003166:	f207 265e 	addw	r6, r7, #606	; 0x25e
 800316a:	f248 0b1b 	movw	fp, #32795	; 0x801b
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	6801      	ldr	r1, [r0, #0]
 8003172:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8003176:	2800      	cmp	r0, #0
 8003178:	f43f abd6 	beq.w	8002928 <USBPD_PE_StateMachine_SRC+0xbc>
 800317c:	6978      	ldr	r0, [r7, #20]
 800317e:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8003182:	2800      	cmp	r0, #0
 8003184:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003188:	f43f abd8 	beq.w	800293c <USBPD_PE_StateMachine_SRC+0xd0>
 800318c:	4650      	mov	r0, sl
 800318e:	f001 fecb 	bl	8004f28 <USBPD_PRL_FastRoleSwapSignalling>
 8003192:	20a6      	movs	r0, #166	; 0xa6
 8003194:	7478      	strb	r0, [r7, #17]
 8003196:	2109      	movs	r1, #9
 8003198:	7739      	strb	r1, [r7, #28]
 800319a:	2000      	movs	r0, #0
 800319c:	70a0      	strb	r0, [r4, #2]
 800319e:	f248 0011 	movw	r0, #32785	; 0x8011
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80031a8:	6179      	str	r1, [r7, #20]
 80031aa:	84f8      	strh	r0, [r7, #38]	; 0x26
 80031ac:	7cb9      	ldrb	r1, [r7, #18]
 80031ae:	29a6      	cmp	r1, #166	; 0xa6
 80031b0:	f47f abbe 	bne.w	8002930 <USBPD_PE_StateMachine_SRC+0xc4>
 80031b4:	2502      	movs	r5, #2
 80031b6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80031ba:	2811      	cmp	r0, #17
 80031bc:	d11b      	bne.n	80031f6 <USBPD_PE_StateMachine_SRC+0x98a>
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	6801      	ldr	r1, [r0, #0]
 80031c2:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80031c6:	88a1      	ldrh	r1, [r4, #4]
 80031c8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80031cc:	4288      	cmp	r0, r1
 80031ce:	d112      	bne.n	80031f6 <USBPD_PE_StateMachine_SRC+0x98a>
 80031d0:	f000 f916 	bl	8003400 <.text_5>
 80031d4:	f000 f96f 	bl	80034b6 <.text_20+0x6>
 80031d8:	7cb9      	ldrb	r1, [r7, #18]
 80031da:	2092      	movs	r0, #146	; 0x92
 80031dc:	2992      	cmp	r1, #146	; 0x92
 80031de:	7478      	strb	r0, [r7, #17]
 80031e0:	d009      	beq.n	80031f6 <USBPD_PE_StateMachine_SRC+0x98a>
 80031e2:	74b8      	strb	r0, [r7, #18]
 80031e4:	2100      	movs	r1, #0
 80031e6:	9100      	str	r1, [sp, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	7c39      	ldrb	r1, [r7, #16]
 80031ec:	f8d8 c000 	ldr.w	ip, [r8]
 80031f0:	2292      	movs	r2, #146	; 0x92
 80031f2:	2004      	movs	r0, #4
 80031f4:	47e0      	blx	ip
 80031f6:	9806      	ldr	r0, [sp, #24]
 80031f8:	b108      	cbz	r0, 80031fe <USBPD_PE_StateMachine_SRC+0x992>
 80031fa:	f04f 0901 	mov.w	r9, #1
 80031fe:	7c79      	ldrb	r1, [r7, #17]
 8003200:	2900      	cmp	r1, #0
 8003202:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8003206:	f43f abac 	beq.w	8002962 <USBPD_PE_StateMachine_SRC+0xf6>
 800320a:	1e49      	subs	r1, r1, #1
 800320c:	d06f      	beq.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 800320e:	1e49      	subs	r1, r1, #1
 8003210:	f43f abbb 	beq.w	800298a <USBPD_PE_StateMachine_SRC+0x11e>
 8003214:	1e49      	subs	r1, r1, #1
 8003216:	2901      	cmp	r1, #1
 8003218:	f67f aeca 	bls.w	8002fb0 <USBPD_PE_StateMachine_SRC+0x744>
 800321c:	1e89      	subs	r1, r1, #2
 800321e:	f43f abf2 	beq.w	8002a06 <USBPD_PE_StateMachine_SRC+0x19a>
 8003222:	1e49      	subs	r1, r1, #1
 8003224:	f43f abf4 	beq.w	8002a10 <USBPD_PE_StateMachine_SRC+0x1a4>
 8003228:	1e49      	subs	r1, r1, #1
 800322a:	f43f abf7 	beq.w	8002a1c <USBPD_PE_StateMachine_SRC+0x1b0>
 800322e:	1e49      	subs	r1, r1, #1
 8003230:	f43f ac0a 	beq.w	8002a48 <USBPD_PE_StateMachine_SRC+0x1dc>
 8003234:	1e49      	subs	r1, r1, #1
 8003236:	f43f ac4e 	beq.w	8002ad6 <USBPD_PE_StateMachine_SRC+0x26a>
 800323a:	1ec9      	subs	r1, r1, #3
 800323c:	f43f ac4f 	beq.w	8002ade <USBPD_PE_StateMachine_SRC+0x272>
 8003240:	1e49      	subs	r1, r1, #1
 8003242:	f43f ac5f 	beq.w	8002b04 <USBPD_PE_StateMachine_SRC+0x298>
 8003246:	1e49      	subs	r1, r1, #1
 8003248:	f43f ab90 	beq.w	800296c <USBPD_PE_StateMachine_SRC+0x100>
 800324c:	1e49      	subs	r1, r1, #1
 800324e:	f43f accc 	beq.w	8002bea <USBPD_PE_StateMachine_SRC+0x37e>
 8003252:	1e49      	subs	r1, r1, #1
 8003254:	f43f ac93 	beq.w	8002b7e <USBPD_PE_StateMachine_SRC+0x312>
 8003258:	1e49      	subs	r1, r1, #1
 800325a:	f43f ac95 	beq.w	8002b88 <USBPD_PE_StateMachine_SRC+0x31c>
 800325e:	1e49      	subs	r1, r1, #1
 8003260:	f43f aca0 	beq.w	8002ba4 <USBPD_PE_StateMachine_SRC+0x338>
 8003264:	1e49      	subs	r1, r1, #1
 8003266:	f43f ad2b 	beq.w	8002cc0 <USBPD_PE_StateMachine_SRC+0x454>
 800326a:	1e49      	subs	r1, r1, #1
 800326c:	f43f acdc 	beq.w	8002c28 <USBPD_PE_StateMachine_SRC+0x3bc>
 8003270:	1e49      	subs	r1, r1, #1
 8003272:	f43f ace7 	beq.w	8002c44 <USBPD_PE_StateMachine_SRC+0x3d8>
 8003276:	1e49      	subs	r1, r1, #1
 8003278:	f43f abfe 	beq.w	8002a78 <USBPD_PE_StateMachine_SRC+0x20c>
 800327c:	1e49      	subs	r1, r1, #1
 800327e:	f43f acfe 	beq.w	8002c7e <USBPD_PE_StateMachine_SRC+0x412>
 8003282:	1e49      	subs	r1, r1, #1
 8003284:	2901      	cmp	r1, #1
 8003286:	d932      	bls.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 8003288:	1e89      	subs	r1, r1, #2
 800328a:	f43f ad35 	beq.w	8002cf8 <USBPD_PE_StateMachine_SRC+0x48c>
 800328e:	1e49      	subs	r1, r1, #1
 8003290:	f43f ad40 	beq.w	8002d14 <USBPD_PE_StateMachine_SRC+0x4a8>
 8003294:	1e89      	subs	r1, r1, #2
 8003296:	d02a      	beq.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 8003298:	1e49      	subs	r1, r1, #1
 800329a:	f43f adef 	beq.w	8002e7c <USBPD_PE_StateMachine_SRC+0x610>
 800329e:	1e49      	subs	r1, r1, #1
 80032a0:	f43f adff 	beq.w	8002ea2 <USBPD_PE_StateMachine_SRC+0x636>
 80032a4:	1e49      	subs	r1, r1, #1
 80032a6:	f43f ae3d 	beq.w	8002f24 <USBPD_PE_StateMachine_SRC+0x6b8>
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	f43f ae54 	beq.w	8002f58 <USBPD_PE_StateMachine_SRC+0x6ec>
 80032b0:	1e49      	subs	r1, r1, #1
 80032b2:	f43f ad69 	beq.w	8002d88 <USBPD_PE_StateMachine_SRC+0x51c>
 80032b6:	1e89      	subs	r1, r1, #2
 80032b8:	f43f ad8f 	beq.w	8002dda <USBPD_PE_StateMachine_SRC+0x56e>
 80032bc:	1e49      	subs	r1, r1, #1
 80032be:	f43f ada2 	beq.w	8002e06 <USBPD_PE_StateMachine_SRC+0x59a>
 80032c2:	1e49      	subs	r1, r1, #1
 80032c4:	f43f adbc 	beq.w	8002e40 <USBPD_PE_StateMachine_SRC+0x5d4>
 80032c8:	1e49      	subs	r1, r1, #1
 80032ca:	2902      	cmp	r1, #2
 80032cc:	d90f      	bls.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 80032ce:	1ec9      	subs	r1, r1, #3
 80032d0:	f43f ad7b 	beq.w	8002dca <USBPD_PE_StateMachine_SRC+0x55e>
 80032d4:	1e49      	subs	r1, r1, #1
 80032d6:	f43f ae70 	beq.w	8002fba <USBPD_PE_StateMachine_SRC+0x74e>
 80032da:	1e49      	subs	r1, r1, #1
 80032dc:	d007      	beq.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 80032de:	1e49      	subs	r1, r1, #1
 80032e0:	f43f ae7c 	beq.w	8002fdc <USBPD_PE_StateMachine_SRC+0x770>
 80032e4:	1e49      	subs	r1, r1, #1
 80032e6:	f43f aeac 	beq.w	8003042 <USBPD_PE_StateMachine_SRC+0x7d6>
 80032ea:	1e49      	subs	r1, r1, #1
 80032ec:	2901      	cmp	r1, #1
 80032ee:	f67f aee7 	bls.w	80030c0 <USBPD_PE_StateMachine_SRC+0x854>
 80032f2:	1e89      	subs	r1, r1, #2
 80032f4:	d001      	beq.n	80032fa <USBPD_PE_StateMachine_SRC+0xa8e>
 80032f6:	1e89      	subs	r1, r1, #2
 80032f8:	2905      	cmp	r1, #5
 80032fa:	f67f aedd 	bls.w	80030b8 <USBPD_PE_StateMachine_SRC+0x84c>
 80032fe:	1f89      	subs	r1, r1, #6
 8003300:	f43f aeae 	beq.w	8003060 <USBPD_PE_StateMachine_SRC+0x7f4>
 8003304:	1e49      	subs	r1, r1, #1
 8003306:	2903      	cmp	r1, #3
 8003308:	d9f1      	bls.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 800330a:	3912      	subs	r1, #18
 800330c:	f43f ab8a 	beq.w	8002a24 <USBPD_PE_StateMachine_SRC+0x1b8>
 8003310:	390f      	subs	r1, #15
 8003312:	f43f ae36 	beq.w	8002f82 <USBPD_PE_StateMachine_SRC+0x716>
 8003316:	1fc9      	subs	r1, r1, #7
 8003318:	2901      	cmp	r1, #1
 800331a:	d9e8      	bls.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 800331c:	3912      	subs	r1, #18
 800331e:	d0e6      	beq.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 8003320:	3912      	subs	r1, #18
 8003322:	f43f aefd 	beq.w	8003120 <USBPD_PE_StateMachine_SRC+0x8b4>
 8003326:	390c      	subs	r1, #12
 8003328:	f43f ab23 	beq.w	8002972 <USBPD_PE_StateMachine_SRC+0x106>
 800332c:	1e49      	subs	r1, r1, #1
 800332e:	2902      	cmp	r1, #2
 8003330:	d9dd      	bls.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 8003332:	1ec9      	subs	r1, r1, #3
 8003334:	f43f abff 	beq.w	8002b36 <USBPD_PE_StateMachine_SRC+0x2ca>
 8003338:	1e49      	subs	r1, r1, #1
 800333a:	f43f ac0f 	beq.w	8002b5c <USBPD_PE_StateMachine_SRC+0x2f0>
 800333e:	1e89      	subs	r1, r1, #2
 8003340:	d0d5      	beq.n	80032ee <USBPD_PE_StateMachine_SRC+0xa82>
 8003342:	1e49      	subs	r1, r1, #1
 8003344:	f43f ab5f 	beq.w	8002a06 <USBPD_PE_StateMachine_SRC+0x19a>
 8003348:	1e89      	subs	r1, r1, #2
 800334a:	2908      	cmp	r1, #8
 800334c:	f67f aebd 	bls.w	80030ca <USBPD_PE_StateMachine_SRC+0x85e>
 8003350:	390a      	subs	r1, #10
 8003352:	f43f aec9 	beq.w	80030e8 <USBPD_PE_StateMachine_SRC+0x87c>
 8003356:	a903      	add	r1, sp, #12
 8003358:	4638      	mov	r0, r7
 800335a:	f000 fe2c 	bl	8003fb6 <PE_StateMachine_VDM>
 800335e:	4605      	mov	r5, r0
 8003360:	7c7a      	ldrb	r2, [r7, #17]
 8003362:	7cb8      	ldrb	r0, [r7, #18]
 8003364:	4290      	cmp	r0, r2
 8003366:	d003      	beq.n	8003370 <USBPD_PE_StateMachine_SRC+0xb04>
 8003368:	74ba      	strb	r2, [r7, #18]
 800336a:	2100      	movs	r1, #0
 800336c:	f000 f860 	bl	8003430 <.text_10>
 8003370:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003374:	2814      	cmp	r0, #20
 8003376:	f43f aed9 	beq.w	800312c <USBPD_PE_StateMachine_SRC+0x8c0>
 800337a:	4638      	mov	r0, r7
 800337c:	f7fd fb3b 	bl	80009f6 <PE_Check_AMSConflict>
 8003380:	2815      	cmp	r0, #21
 8003382:	d105      	bne.n	8003390 <USBPD_PE_StateMachine_SRC+0xb24>
 8003384:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003388:	2814      	cmp	r0, #20
 800338a:	d001      	beq.n	8003390 <USBPD_PE_StateMachine_SRC+0xb24>
 800338c:	f000 f890 	bl	80034b0 <.text_20>
 8003390:	7c7a      	ldrb	r2, [r7, #17]
 8003392:	7cb8      	ldrb	r0, [r7, #18]
 8003394:	4290      	cmp	r0, r2
 8003396:	d008      	beq.n	80033aa <USBPD_PE_StateMachine_SRC+0xb3e>
 8003398:	74ba      	strb	r2, [r7, #18]
 800339a:	2100      	movs	r1, #0
 800339c:	9100      	str	r1, [sp, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	7c39      	ldrb	r1, [r7, #16]
 80033a2:	f8d8 5000 	ldr.w	r5, [r8]
 80033a6:	2004      	movs	r0, #4
 80033a8:	47a8      	blx	r5
 80033aa:	2500      	movs	r5, #0
 80033ac:	6978      	ldr	r0, [r7, #20]
 80033ae:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80033b2:	6178      	str	r0, [r7, #20]
 80033b4:	f1b9 0f00 	cmp.w	r9, #0
 80033b8:	bf1f      	itttt	ne
 80033ba:	4881      	ldrne	r0, [pc, #516]	; (80035c0 <.text_23>)
 80033bc:	6801      	ldrne	r1, [r0, #0]
 80033be:	4a81      	ldrne	r2, [pc, #516]	; (80035c4 <.text_24>)
 80033c0:	4291      	cmpne	r1, r2
 80033c2:	d011      	beq.n	80033e8 <USBPD_PE_StateMachine_SRC+0xb7c>
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <.text_3>)
 80033c6:	7c38      	ldrb	r0, [r7, #16]
 80033c8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80033cc:	6942      	ldr	r2, [r0, #20]
 80033ce:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 80033d2:	6142      	str	r2, [r0, #20]
 80033d4:	7c38      	ldrb	r0, [r7, #16]
 80033d6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80033da:	6941      	ldr	r1, [r0, #20]
 80033dc:	0c8a      	lsrs	r2, r1, #18
 80033de:	2a08      	cmp	r2, #8
 80033e0:	bf24      	itt	cs
 80033e2:	f3c1 0111 	ubfxcs	r1, r1, #0, #18
 80033e6:	6141      	strcs	r1, [r0, #20]
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	f43f aec0 	beq.w	800316e <USBPD_PE_StateMachine_SRC+0x902>
 80033ee:	4628      	mov	r0, r5
 80033f0:	b007      	add	sp, #28
 80033f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080033f8 <.text_3>:
 80033f8:	20000374 	.word	0x20000374

080033fc <.text_4>:
 80033fc:	20000000 	.word	0x20000000

08003400 <.text_5>:
 8003400:	2014      	movs	r0, #20
 8003402:	f88d 000c 	strb.w	r0, [sp, #12]
 8003406:	4770      	bx	lr

08003408 <.text_6>:
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	7c38      	ldrb	r0, [r7, #16]
 800340c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800340e:	4770      	bx	lr

08003410 <.text_7>:
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	7c38      	ldrb	r0, [r7, #16]
 8003414:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003418:	4770      	bx	lr

0800341a <.text_8>:
 800341a:	7738      	strb	r0, [r7, #28]
 800341c:	f8a7 b01e 	strh.w	fp, [r7, #30]
 8003420:	4770      	bx	lr

08003422 <.text_9>:
 8003422:	2003      	movs	r0, #3
 8003424:	7478      	strb	r0, [r7, #17]
 8003426:	2500      	movs	r5, #0
 8003428:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800342c:	2814      	cmp	r0, #20
 800342e:	4770      	bx	lr

08003430 <.text_10>:
 8003430:	9100      	str	r1, [sp, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	7c39      	ldrb	r1, [r7, #16]
 8003436:	f8d8 c000 	ldr.w	ip, [r8]
 800343a:	2004      	movs	r0, #4

0800343c <__iar_annotation$$tailcall>:
 800343c:	4760      	bx	ip

0800343e <.text_11>:
 800343e:	74b8      	strb	r0, [r7, #18]
 8003440:	2100      	movs	r1, #0
 8003442:	9100      	str	r1, [sp, #0]
 8003444:	2300      	movs	r3, #0
 8003446:	7c39      	ldrb	r1, [r7, #16]
 8003448:	f8d8 5000 	ldr.w	r5, [r8]
 800344c:	4770      	bx	lr

0800344e <.text_12>:
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	6801      	ldr	r1, [r0, #0]
 8003452:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003456:	2800      	cmp	r0, #0
 8003458:	4770      	bx	lr

0800345a <.text_13>:
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	6801      	ldr	r1, [r0, #0]
 800345e:	f021 0110 	bic.w	r1, r1, #16
 8003462:	6001      	str	r1, [r0, #0]
 8003464:	4770      	bx	lr

08003466 <.text_14>:
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	7c38      	ldrb	r0, [r7, #16]
 800346a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800346c:	2204      	movs	r2, #4
 800346e:	2101      	movs	r1, #1

08003470 <__iar_annotation$$tailcall>:
 8003470:	4728      	bx	r5

08003472 <.text_15>:
 8003472:	7c38      	ldrb	r0, [r7, #16]
 8003474:	f7fd b877 	b.w	8000566 <USBPD_PE_Notification>

08003478 <.text_16>:
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	7c38      	ldrb	r0, [r7, #16]
 800347c:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003480:	2207      	movs	r2, #7
 8003482:	2101      	movs	r1, #1

08003484 <__iar_annotation$$tailcall>:
 8003484:	4760      	bx	ip

08003486 <.text_17>:
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	6801      	ldr	r1, [r0, #0]
 800348a:	f041 0110 	orr.w	r1, r1, #16
 800348e:	6001      	str	r1, [r0, #0]
 8003490:	2206      	movs	r2, #6
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	7c38      	ldrb	r0, [r7, #16]
 8003496:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 800349a:	2101      	movs	r1, #1

0800349c <__iar_annotation$$tailcall>:
 800349c:	4760      	bx	ip

0800349e <.text_18>:
 800349e:	2104      	movs	r1, #4
 80034a0:	4638      	mov	r0, r7
 80034a2:	f7fd bec7 	b.w	8001234 <PE_SetPowerNegotiation>

080034a6 <.text_19>:
 80034a6:	2206      	movs	r2, #6
 80034a8:	2101      	movs	r1, #1
 80034aa:	4638      	mov	r0, r7
 80034ac:	f7fd bebb 	b.w	8001226 <PE_CallHardResetCallback>

080034b0 <.text_20>:
 80034b0:	2114      	movs	r1, #20
 80034b2:	f88d 100c 	strb.w	r1, [sp, #12]
 80034b6:	4638      	mov	r0, r7
 80034b8:	f7fd ba5d 	b.w	8000976 <PE_Clear_RxEvent>

080034bc <.text_21>:
 80034bc:	2206      	movs	r2, #6
 80034be:	2100      	movs	r1, #0
 80034c0:	4638      	mov	r0, r7
 80034c2:	f7fd bf4b 	b.w	800135c <PE_Send_CtrlMessage>

080034c6 <PE_StateMachine_SRC_ReadyWait>:
 80034c6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80034c8:	4604      	mov	r4, r0
 80034ca:	2502      	movs	r5, #2
 80034cc:	7c60      	ldrb	r0, [r4, #17]
 80034ce:	2803      	cmp	r0, #3
 80034d0:	460e      	mov	r6, r1
 80034d2:	d110      	bne.n	80034f6 <PE_StateMachine_SRC_ReadyWait+0x30>
 80034d4:	2100      	movs	r1, #0
 80034d6:	6860      	ldr	r0, [r4, #4]
 80034d8:	7721      	strb	r1, [r4, #28]
 80034da:	7801      	ldrb	r1, [r0, #0]
 80034dc:	f001 0103 	and.w	r1, r1, #3
 80034e0:	2902      	cmp	r1, #2
 80034e2:	bf04      	itt	eq
 80034e4:	7c20      	ldrbeq	r0, [r4, #16]
 80034e6:	f001 fd12 	bleq	8004f0e <USBPD_PRL_SRCReleaseSinkNG>
 80034ea:	2104      	movs	r1, #4
 80034ec:	7461      	strb	r1, [r4, #17]
 80034ee:	2167      	movs	r1, #103	; 0x67
 80034f0:	7c20      	ldrb	r0, [r4, #16]
 80034f2:	f7fd f838 	bl	8000566 <USBPD_PE_Notification>
 80034f6:	7830      	ldrb	r0, [r6, #0]
 80034f8:	2814      	cmp	r0, #20
 80034fa:	d00b      	beq.n	8003514 <PE_StateMachine_SRC_ReadyWait+0x4e>
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7fe fb64 	bl	8001bca <PE_ManageRXEvent>
 8003502:	7830      	ldrb	r0, [r6, #0]
 8003504:	2814      	cmp	r0, #20
 8003506:	d058      	beq.n	80035ba <PE_StateMachine_SRC_ReadyWait+0xf4>
 8003508:	2114      	movs	r1, #20
 800350a:	7031      	strb	r1, [r6, #0]
 800350c:	4620      	mov	r0, r4
 800350e:	f7fd fa32 	bl	8000976 <PE_Clear_RxEvent>
 8003512:	e052      	b.n	80035ba <PE_StateMachine_SRC_ReadyWait+0xf4>
 8003514:	6960      	ldr	r0, [r4, #20]
 8003516:	0c80      	lsrs	r0, r0, #18
 8003518:	f504 7518 	add.w	r5, r4, #608	; 0x260
 800351c:	d022      	beq.n	8003564 <PE_StateMachine_SRC_ReadyWait+0x9e>
 800351e:	8c21      	ldrh	r1, [r4, #32]
 8003520:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003524:	d10e      	bne.n	8003544 <PE_StateMachine_SRC_ReadyWait+0x7e>
 8003526:	200f      	movs	r0, #15
 8003528:	7460      	strb	r0, [r4, #17]
 800352a:	2100      	movs	r1, #0
 800352c:	9100      	str	r1, [sp, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	7c21      	ldrb	r1, [r4, #16]
 8003532:	4c25      	ldr	r4, [pc, #148]	; (80035c8 <.text_25>)
 8003534:	6826      	ldr	r6, [r4, #0]
 8003536:	226a      	movs	r2, #106	; 0x6a
 8003538:	2009      	movs	r0, #9
 800353a:	47b0      	blx	r6
 800353c:	7828      	ldrb	r0, [r5, #0]
 800353e:	1c40      	adds	r0, r0, #1
 8003540:	7028      	strb	r0, [r5, #0]
 8003542:	e034      	b.n	80035ae <PE_StateMachine_SRC_ReadyWait+0xe8>
 8003544:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003546:	f3c1 2342 	ubfx	r3, r1, #9, #3
 800354a:	2233      	movs	r2, #51	; 0x33
 800354c:	18c3      	adds	r3, r0, r3
 800354e:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003552:	fb13 f302 	smulbb	r3, r3, r2
 8003556:	1845      	adds	r5, r0, r1
 8003558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355c:	4355      	muls	r5, r2
 800355e:	8423      	strh	r3, [r4, #32]
 8003560:	b2ad      	uxth	r5, r5
 8003562:	e02a      	b.n	80035ba <PE_StateMachine_SRC_ReadyWait+0xf4>
 8003564:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8003566:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800356a:	bf08      	it	eq
 800356c:	210f      	moveq	r1, #15
 800356e:	d01d      	beq.n	80035ac <PE_StateMachine_SRC_ReadyWait+0xe6>
 8003570:	7c20      	ldrb	r0, [r4, #16]
 8003572:	f7fd fa24 	bl	80009be <PE_PRL_Control_RxEvent>
 8003576:	b978      	cbnz	r0, 8003598 <PE_StateMachine_SRC_ReadyWait+0xd2>
 8003578:	f104 0131 	add.w	r1, r4, #49	; 0x31
 800357c:	7848      	ldrb	r0, [r1, #1]
 800357e:	b158      	cbz	r0, 8003598 <PE_StateMachine_SRC_ReadyWait+0xd2>
 8003580:	788a      	ldrb	r2, [r1, #2]
 8003582:	700a      	strb	r2, [r1, #0]
 8003584:	7460      	strb	r0, [r4, #17]
 8003586:	2000      	movs	r0, #0
 8003588:	7048      	strb	r0, [r1, #1]
 800358a:	6960      	ldr	r0, [r4, #20]
 800358c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800358e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003590:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8003594:	6160      	str	r0, [r4, #20]
 8003596:	e00a      	b.n	80035ae <PE_StateMachine_SRC_ReadyWait+0xe8>
 8003598:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800359a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800359e:	d108      	bne.n	80035b2 <PE_StateMachine_SRC_ReadyWait+0xec>
 80035a0:	2100      	movs	r1, #0
 80035a2:	8461      	strh	r1, [r4, #34]	; 0x22
 80035a4:	2105      	movs	r1, #5
 80035a6:	78a8      	ldrb	r0, [r5, #2]
 80035a8:	1c40      	adds	r0, r0, #1
 80035aa:	70a8      	strb	r0, [r5, #2]
 80035ac:	7461      	strb	r1, [r4, #17]
 80035ae:	2500      	movs	r5, #0
 80035b0:	e003      	b.n	80035ba <PE_StateMachine_SRC_ReadyWait+0xf4>
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7fd fe5a 	bl	800126c <PE_CalculateMinTiming>
 80035b8:	4605      	mov	r5, r0
 80035ba:	4628      	mov	r0, r5
 80035bc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

080035c0 <.text_23>:
 80035c0:	20000370 	.word	0x20000370

080035c4 <.text_24>:
 80035c4:	b5e8b5cd 	.word	0xb5e8b5cd

080035c8 <.text_25>:
 80035c8:	20000000 	.word	0x20000000

080035cc <PE_StateMachine_SRC_SendCapa>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	2602      	movs	r6, #2
 80035d0:	4604      	mov	r4, r0
 80035d2:	f504 7518 	add.w	r5, r4, #608	; 0x260
 80035d6:	6961      	ldr	r1, [r4, #20]
 80035d8:	0849      	lsrs	r1, r1, #1
 80035da:	f001 0101 	and.w	r1, r1, #1
 80035de:	f000 f897 	bl	8003710 <PE_Send_SRCCapabilities>
 80035e2:	2805      	cmp	r0, #5
 80035e4:	d002      	beq.n	80035ec <PE_StateMachine_SRC_SendCapa+0x20>
 80035e6:	2809      	cmp	r0, #9
 80035e8:	d03b      	beq.n	8003662 <PE_StateMachine_SRC_SendCapa+0x96>
 80035ea:	e013      	b.n	8003614 <PE_StateMachine_SRC_SendCapa+0x48>
 80035ec:	6960      	ldr	r0, [r4, #20]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f040 0002 	orr.w	r0, r0, #2
 80035f4:	7722      	strb	r2, [r4, #28]
 80035f6:	6160      	str	r0, [r4, #20]
 80035f8:	2100      	movs	r1, #0
 80035fa:	7069      	strb	r1, [r5, #1]
 80035fc:	7029      	strb	r1, [r5, #0]
 80035fe:	f248 021b 	movw	r2, #32795	; 0x801b
 8003602:	83e2      	strh	r2, [r4, #30]
 8003604:	2016      	movs	r0, #22
 8003606:	7460      	strb	r0, [r4, #17]
 8003608:	210f      	movs	r1, #15
 800360a:	7c20      	ldrb	r0, [r4, #16]
 800360c:	f7fc ffab 	bl	8000566 <USBPD_PE_Notification>
 8003610:	261b      	movs	r6, #27
 8003612:	e026      	b.n	8003662 <PE_StateMachine_SRC_SendCapa+0x96>
 8003614:	6960      	ldr	r0, [r4, #20]
 8003616:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800361a:	b978      	cbnz	r0, 800363c <PE_StateMachine_SRC_SendCapa+0x70>
 800361c:	7868      	ldrb	r0, [r5, #1]
 800361e:	2833      	cmp	r0, #51	; 0x33
 8003620:	d219      	bcs.n	8003656 <PE_StateMachine_SRC_SendCapa+0x8a>
 8003622:	f248 0196 	movw	r1, #32918	; 0x8096
 8003626:	83e1      	strh	r1, [r4, #30]
 8003628:	2008      	movs	r0, #8
 800362a:	7460      	strb	r0, [r4, #17]
 800362c:	2696      	movs	r6, #150	; 0x96
 800362e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003630:	0448      	lsls	r0, r1, #17
 8003632:	d016      	beq.n	8003662 <PE_StateMachine_SRC_SendCapa+0x96>
 8003634:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 8003636:	f3c6 060e 	ubfx	r6, r6, #0, #15
 800363a:	e012      	b.n	8003662 <PE_StateMachine_SRC_SendCapa+0x96>
 800363c:	6860      	ldr	r0, [r4, #4]
 800363e:	7801      	ldrb	r1, [r0, #0]
 8003640:	f001 0103 	and.w	r1, r1, #3
 8003644:	2902      	cmp	r1, #2
 8003646:	bf04      	itt	eq
 8003648:	7c20      	ldrbeq	r0, [r4, #16]
 800364a:	f001 fc60 	bleq	8004f0e <USBPD_PRL_SRCReleaseSinkNG>
 800364e:	2011      	movs	r0, #17
 8003650:	7460      	strb	r0, [r4, #17]
 8003652:	2600      	movs	r6, #0
 8003654:	e005      	b.n	8003662 <PE_StateMachine_SRC_SendCapa+0x96>
 8003656:	7c20      	ldrb	r0, [r4, #16]
 8003658:	2121      	movs	r1, #33	; 0x21
 800365a:	f7fc ff84 	bl	8000566 <USBPD_PE_Notification>
 800365e:	2000      	movs	r0, #0
 8003660:	7460      	strb	r0, [r4, #17]
 8003662:	4630      	mov	r0, r6
 8003664:	bd70      	pop	{r4, r5, r6, pc}

08003666 <PE_StateMachine_SRC_NegocCapa>:
 8003666:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8003668:	4604      	mov	r4, r0
 800366a:	a901      	add	r1, sp, #4
 800366c:	68a2      	ldr	r2, [r4, #8]
 800366e:	7c20      	ldrb	r0, [r4, #16]
 8003670:	69d3      	ldr	r3, [r2, #28]
 8003672:	4798      	blx	r3
 8003674:	2502      	movs	r5, #2
 8003676:	280a      	cmp	r0, #10
 8003678:	d009      	beq.n	800368e <PE_StateMachine_SRC_NegocCapa+0x28>
 800367a:	280b      	cmp	r0, #11
 800367c:	d002      	beq.n	8003684 <PE_StateMachine_SRC_NegocCapa+0x1e>
 800367e:	280d      	cmp	r0, #13
 8003680:	d029      	beq.n	80036d6 <PE_StateMachine_SRC_NegocCapa+0x70>
 8003682:	e031      	b.n	80036e8 <PE_StateMachine_SRC_NegocCapa+0x82>
 8003684:	2000      	movs	r0, #0
 8003686:	9000      	str	r0, [sp, #0]
 8003688:	230c      	movs	r3, #12
 800368a:	2202      	movs	r2, #2
 800368c:	e034      	b.n	80036f8 <PE_StateMachine_SRC_NegocCapa+0x92>
 800368e:	f248 001e 	movw	r0, #32798	; 0x801e
 8003692:	83e0      	strh	r0, [r4, #30]
 8003694:	251e      	movs	r5, #30
 8003696:	6860      	ldr	r0, [r4, #4]
 8003698:	6801      	ldr	r1, [r0, #0]
 800369a:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800369e:	2801      	cmp	r0, #1
 80036a0:	d00b      	beq.n	80036ba <PE_StateMachine_SRC_NegocCapa+0x54>
 80036a2:	9801      	ldr	r0, [sp, #4]
 80036a4:	2803      	cmp	r0, #3
 80036a6:	bf02      	ittt	eq
 80036a8:	6960      	ldreq	r0, [r4, #20]
 80036aa:	f3c0 0081 	ubfxeq	r0, r0, #2, #2
 80036ae:	2803      	cmpeq	r0, #3
 80036b0:	d103      	bne.n	80036ba <PE_StateMachine_SRC_NegocCapa+0x54>
 80036b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036b6:	83e0      	strh	r0, [r4, #30]
 80036b8:	2500      	movs	r5, #0
 80036ba:	2000      	movs	r0, #0
 80036bc:	9000      	str	r0, [sp, #0]
 80036be:	230c      	movs	r3, #12
 80036c0:	2203      	movs	r2, #3
 80036c2:	2100      	movs	r1, #0
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7fd fe49 	bl	800135c <PE_Send_CtrlMessage>
 80036ca:	9801      	ldr	r0, [sp, #4]
 80036cc:	6961      	ldr	r1, [r4, #20]
 80036ce:	f360 0183 	bfi	r1, r0, #2, #2
 80036d2:	6161      	str	r1, [r4, #20]
 80036d4:	e014      	b.n	8003700 <PE_StateMachine_SRC_NegocCapa+0x9a>
 80036d6:	f000 f815 	bl	8003704 <.text_28>
 80036da:	bf0c      	ite	eq
 80036dc:	2303      	moveq	r3, #3
 80036de:	230e      	movne	r3, #14
 80036e0:	2000      	movs	r0, #0
 80036e2:	9000      	str	r0, [sp, #0]
 80036e4:	220c      	movs	r2, #12
 80036e6:	e007      	b.n	80036f8 <PE_StateMachine_SRC_NegocCapa+0x92>
 80036e8:	f000 f80c 	bl	8003704 <.text_28>
 80036ec:	bf0c      	ite	eq
 80036ee:	2303      	moveq	r3, #3
 80036f0:	230e      	movne	r3, #14
 80036f2:	2000      	movs	r0, #0
 80036f4:	9000      	str	r0, [sp, #0]
 80036f6:	2204      	movs	r2, #4
 80036f8:	2100      	movs	r1, #0
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7fd fe2e 	bl	800135c <PE_Send_CtrlMessage>
 8003700:	4628      	mov	r0, r5
 8003702:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003704 <.text_28>:
 8003704:	6860      	ldr	r0, [r4, #4]
 8003706:	6801      	ldr	r1, [r0, #0]
 8003708:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800370c:	2803      	cmp	r0, #3
 800370e:	4770      	bx	lr

08003710 <PE_Send_SRCCapabilities>:
 8003710:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8003712:	4604      	mov	r4, r0
 8003714:	2000      	movs	r0, #0
 8003716:	9002      	str	r0, [sp, #8]
 8003718:	460d      	mov	r5, r1
 800371a:	68a6      	ldr	r6, [r4, #8]
 800371c:	7c20      	ldrb	r0, [r4, #16]
 800371e:	6977      	ldr	r7, [r6, #20]
 8003720:	ab02      	add	r3, sp, #8
 8003722:	f204 2265 	addw	r2, r4, #613	; 0x265
 8003726:	2100      	movs	r1, #0
 8003728:	47b8      	blx	r7
 800372a:	9802      	ldr	r0, [sp, #8]
 800372c:	1c80      	adds	r0, r0, #2
 800372e:	9002      	str	r0, [sp, #8]
 8003730:	9802      	ldr	r0, [sp, #8]
 8003732:	2104      	movs	r1, #4
 8003734:	f7fd fdc2 	bl	80012bc <PE_CheckDataSizeFromGetDataInfo>
 8003738:	b998      	cbnz	r0, 8003762 <PE_Send_SRCCapabilities+0x52>
 800373a:	6860      	ldr	r0, [r4, #4]
 800373c:	6801      	ldr	r1, [r0, #0]
 800373e:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8003742:	2800      	cmp	r0, #0
 8003744:	d00d      	beq.n	8003762 <PE_Send_SRCCapabilities+0x52>
 8003746:	9802      	ldr	r0, [sp, #8]
 8003748:	9501      	str	r5, [sp, #4]
 800374a:	b280      	uxth	r0, r0
 800374c:	9000      	str	r0, [sp, #0]
 800374e:	f204 2363 	addw	r3, r4, #611	; 0x263
 8003752:	7c20      	ldrb	r0, [r4, #16]
 8003754:	2201      	movs	r2, #1
 8003756:	2100      	movs	r1, #0
 8003758:	f001 fbec 	bl	8004f34 <USBPD_PRL_SendMessage>
 800375c:	2803      	cmp	r0, #3
 800375e:	d0e7      	beq.n	8003730 <PE_Send_SRCCapabilities+0x20>
 8003760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003762:	2010      	movs	r0, #16
 8003764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08003768 <PE_StateMachine_VDMCable>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	b08c      	sub	sp, #48	; 0x30
 800376e:	7c68      	ldrb	r0, [r5, #17]
 8003770:	2602      	movs	r6, #2
 8003772:	2805      	cmp	r0, #5
 8003774:	460f      	mov	r7, r1
 8003776:	f248 042d 	movw	r4, #32813	; 0x802d
 800377a:	d002      	beq.n	8003782 <PE_StateMachine_VDMCable+0x1a>
 800377c:	289a      	cmp	r0, #154	; 0x9a
 800377e:	d064      	beq.n	800384a <PE_StateMachine_VDMCable+0xe2>
 8003780:	e0e4      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 8003782:	686a      	ldr	r2, [r5, #4]
 8003784:	7811      	ldrb	r1, [r2, #0]
 8003786:	7c28      	ldrb	r0, [r5, #16]
 8003788:	f001 0103 	and.w	r1, r1, #3
 800378c:	f000 f8f6 	bl	800397c <PE_ExtRevisionInteroperability_Cable>
 8003790:	f505 7714 	add.w	r7, r5, #592	; 0x250
 8003794:	f649 003f 	movw	r0, #38975	; 0x983f
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	0949      	lsrs	r1, r1, #5
 800379c:	0149      	lsls	r1, r1, #5
 800379e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80037a2:	f041 0101 	orr.w	r1, r1, #1
 80037a6:	6039      	str	r1, [r7, #0]
 80037a8:	4001      	ands	r1, r0
 80037aa:	686a      	ldr	r2, [r5, #4]
 80037ac:	6813      	ldr	r3, [r2, #0]
 80037ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037b2:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 80037b6:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 80037ba:	6039      	str	r1, [r7, #0]
 80037bc:	463b      	mov	r3, r7
 80037be:	6810      	ldr	r0, [r2, #0]
 80037c0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80037c4:	2800      	cmp	r0, #0
 80037c6:	bf1d      	ittte	ne
 80037c8:	6968      	ldrne	r0, [r5, #20]
 80037ca:	0840      	lsrne	r0, r0, #1
 80037cc:	f000 0001 	andne.w	r0, r0, #1
 80037d0:	2002      	moveq	r0, #2
 80037d2:	9002      	str	r0, [sp, #8]
 80037d4:	2101      	movs	r1, #1
 80037d6:	209a      	movs	r0, #154	; 0x9a
 80037d8:	9001      	str	r0, [sp, #4]
 80037da:	9100      	str	r1, [sp, #0]
 80037dc:	220f      	movs	r2, #15
 80037de:	4628      	mov	r0, r5
 80037e0:	f7fd fde7 	bl	80013b2 <PE_Send_DataMessage>
 80037e4:	b950      	cbnz	r0, 80037fc <PE_StateMachine_VDMCable+0x94>
 80037e6:	6968      	ldr	r0, [r5, #20]
 80037e8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80037ec:	6168      	str	r0, [r5, #20]
 80037ee:	2151      	movs	r1, #81	; 0x51
 80037f0:	7729      	strb	r1, [r5, #28]
 80037f2:	f248 001e 	movw	r0, #32798	; 0x801e
 80037f6:	8468      	strh	r0, [r5, #34]	; 0x22
 80037f8:	261e      	movs	r6, #30
 80037fa:	e0a7      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 80037fc:	2809      	cmp	r0, #9
 80037fe:	d0fc      	beq.n	80037fa <PE_StateMachine_VDMCable+0x92>
 8003800:	7cb8      	ldrb	r0, [r7, #18]
 8003802:	2815      	cmp	r0, #21
 8003804:	bf38      	it	cc
 8003806:	846c      	strhcc	r4, [r5, #34]	; 0x22
 8003808:	d307      	bcc.n	800381a <PE_StateMachine_VDMCable+0xb2>
 800380a:	68e8      	ldr	r0, [r5, #12]
 800380c:	6944      	ldr	r4, [r0, #20]
 800380e:	b124      	cbz	r4, 800381a <PE_StateMachine_VDMCable+0xb2>
 8003810:	7c28      	ldrb	r0, [r5, #16]
 8003812:	2300      	movs	r3, #0
 8003814:	2205      	movs	r2, #5
 8003816:	2101      	movs	r1, #1
 8003818:	47a0      	blx	r4
 800381a:	6868      	ldr	r0, [r5, #4]
 800381c:	6801      	ldr	r1, [r0, #0]
 800381e:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8003822:	2803      	cmp	r0, #3
 8003824:	d073      	beq.n	800390e <PE_StateMachine_VDMCable+0x1a6>
 8003826:	8be8      	ldrh	r0, [r5, #30]
 8003828:	0441      	lsls	r1, r0, #17
 800382a:	d00b      	beq.n	8003844 <PE_StateMachine_VDMCable+0xdc>
 800382c:	2008      	movs	r0, #8
 800382e:	7468      	strb	r0, [r5, #17]
 8003830:	8be9      	ldrh	r1, [r5, #30]
 8003832:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003836:	292d      	cmp	r1, #45	; 0x2d
 8003838:	bf2e      	itee	cs
 800383a:	262d      	movcs	r6, #45	; 0x2d
 800383c:	8bee      	ldrhcc	r6, [r5, #30]
 800383e:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 8003842:	e083      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 8003844:	2007      	movs	r0, #7
 8003846:	7468      	strb	r0, [r5, #17]
 8003848:	e080      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 800384a:	2001      	movs	r0, #1
 800384c:	f7fd f8c6 	bl	80009dc <PE_Convert_SOPRxEvent>
 8003850:	783a      	ldrb	r2, [r7, #0]
 8003852:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8003854:	4282      	cmp	r2, r0
 8003856:	d136      	bne.n	80038c6 <PE_StateMachine_VDMCable+0x15e>
 8003858:	0bc8      	lsrs	r0, r1, #15
 800385a:	d134      	bne.n	80038c6 <PE_StateMachine_VDMCable+0x15e>
 800385c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8003860:	2800      	cmp	r0, #0
 8003862:	d030      	beq.n	80038c6 <PE_StateMachine_VDMCable+0x15e>
 8003864:	f001 001f 	and.w	r0, r1, #31
 8003868:	280f      	cmp	r0, #15
 800386a:	d12c      	bne.n	80038c6 <PE_StateMachine_VDMCable+0x15e>
 800386c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800386e:	7880      	ldrb	r0, [r0, #2]
 8003870:	f000 021f 	and.w	r2, r0, #31
 8003874:	2a01      	cmp	r2, #1
 8003876:	d122      	bne.n	80038be <PE_StateMachine_VDMCable+0x156>
 8003878:	f3c0 1481 	ubfx	r4, r0, #6, #2
 800387c:	b1fc      	cbz	r4, 80038be <PE_StateMachine_VDMCable+0x156>
 800387e:	7c28      	ldrb	r0, [r5, #16]
 8003880:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8003884:	f000 f87a 	bl	800397c <PE_ExtRevisionInteroperability_Cable>
 8003888:	68e9      	ldr	r1, [r5, #12]
 800388a:	6948      	ldr	r0, [r1, #20]
 800388c:	b1a8      	cbz	r0, 80038ba <PE_StateMachine_VDMCable+0x152>
 800388e:	2c01      	cmp	r4, #1
 8003890:	d113      	bne.n	80038ba <PE_StateMachine_VDMCable+0x152>
 8003892:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003894:	1d81      	adds	r1, r0, #6
 8003896:	7c28      	ldrb	r0, [r5, #16]
 8003898:	aa03      	add	r2, sp, #12
 800389a:	f001 f9cd 	bl	8004c38 <PE_SVDM_CheckIdentity>
 800389e:	b940      	cbnz	r0, 80038b2 <PE_StateMachine_VDMCable+0x14a>
 80038a0:	68ec      	ldr	r4, [r5, #12]
 80038a2:	7c28      	ldrb	r0, [r5, #16]
 80038a4:	6966      	ldr	r6, [r4, #20]
 80038a6:	ab03      	add	r3, sp, #12
 80038a8:	2201      	movs	r2, #1
 80038aa:	2101      	movs	r1, #1
 80038ac:	47b0      	blx	r6
 80038ae:	2152      	movs	r1, #82	; 0x52
 80038b0:	e000      	b.n	80038b4 <PE_StateMachine_VDMCable+0x14c>
 80038b2:	211b      	movs	r1, #27
 80038b4:	7c28      	ldrb	r0, [r5, #16]
 80038b6:	f7fc fe56 	bl	8000566 <USBPD_PE_Notification>
 80038ba:	f000 f84f 	bl	800395c <.text_4>
 80038be:	7838      	ldrb	r0, [r7, #0]
 80038c0:	2814      	cmp	r0, #20
 80038c2:	d10d      	bne.n	80038e0 <PE_StateMachine_VDMCable+0x178>
 80038c4:	e042      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 80038c6:	f001 011f 	and.w	r1, r1, #31
 80038ca:	2910      	cmp	r1, #16
 80038cc:	d10e      	bne.n	80038ec <PE_StateMachine_VDMCable+0x184>
 80038ce:	f000 f845 	bl	800395c <.text_4>
 80038d2:	2159      	movs	r1, #89	; 0x59
 80038d4:	7c28      	ldrb	r0, [r5, #16]
 80038d6:	f7fc fe46 	bl	8000566 <USBPD_PE_Notification>
 80038da:	7838      	ldrb	r0, [r7, #0]
 80038dc:	2814      	cmp	r0, #20
 80038de:	d035      	beq.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 80038e0:	2114      	movs	r1, #20
 80038e2:	7039      	strb	r1, [r7, #0]
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7fd f846 	bl	8000976 <PE_Clear_RxEvent>
 80038ea:	e02f      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 80038ec:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80038ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80038f2:	d12b      	bne.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 80038f4:	2100      	movs	r1, #0
 80038f6:	8469      	strh	r1, [r5, #34]	; 0x22
 80038f8:	6868      	ldr	r0, [r5, #4]
 80038fa:	6801      	ldr	r1, [r0, #0]
 80038fc:	f3c1 2202 	ubfx	r2, r1, #8, #3
 8003900:	2a03      	cmp	r2, #3
 8003902:	d108      	bne.n	8003916 <PE_StateMachine_VDMCable+0x1ae>
 8003904:	68e8      	ldr	r0, [r5, #12]
 8003906:	6944      	ldr	r4, [r0, #20]
 8003908:	b10c      	cbz	r4, 800390e <PE_StateMachine_VDMCable+0x1a6>
 800390a:	f000 f822 	bl	8003952 <.text_3>
 800390e:	2003      	movs	r0, #3
 8003910:	7468      	strb	r0, [r5, #17]
 8003912:	2600      	movs	r6, #0
 8003914:	e01a      	b.n	800394c <PE_StateMachine_VDMCable+0x1e4>
 8003916:	f3c1 6181 	ubfx	r1, r1, #26, #2
 800391a:	2902      	cmp	r1, #2
 800391c:	d10c      	bne.n	8003938 <PE_StateMachine_VDMCable+0x1d0>
 800391e:	6802      	ldr	r2, [r0, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	f361 629b 	bfi	r2, r1, #26, #2
 8003926:	6002      	str	r2, [r0, #0]
 8003928:	262d      	movs	r6, #45	; 0x2d
 800392a:	7c28      	ldrb	r0, [r5, #16]
 800392c:	f001 fae0 	bl	8004ef0 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003930:	846c      	strh	r4, [r5, #34]	; 0x22
 8003932:	2008      	movs	r0, #8
 8003934:	7468      	strb	r0, [r5, #17]
 8003936:	e007      	b.n	8003948 <PE_StateMachine_VDMCable+0x1e0>
 8003938:	68e8      	ldr	r0, [r5, #12]
 800393a:	6944      	ldr	r4, [r0, #20]
 800393c:	b10c      	cbz	r4, 8003942 <PE_StateMachine_VDMCable+0x1da>
 800393e:	f000 f808 	bl	8003952 <.text_3>
 8003942:	2007      	movs	r0, #7
 8003944:	7468      	strb	r0, [r5, #17]
 8003946:	2600      	movs	r6, #0
 8003948:	2000      	movs	r0, #0
 800394a:	7728      	strb	r0, [r5, #28]
 800394c:	4630      	mov	r0, r6
 800394e:	b00d      	add	sp, #52	; 0x34
 8003950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003952 <.text_3>:
 8003952:	7c28      	ldrb	r0, [r5, #16]
 8003954:	2300      	movs	r3, #0
 8003956:	2204      	movs	r2, #4
 8003958:	2101      	movs	r1, #1

0800395a <__iar_annotation$$tailcall>:
 800395a:	4720      	bx	r4

0800395c <.text_4>:
 800395c:	2000      	movs	r0, #0
 800395e:	8468      	strh	r0, [r5, #34]	; 0x22
 8003960:	6868      	ldr	r0, [r5, #4]
 8003962:	6801      	ldr	r1, [r0, #0]
 8003964:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8003968:	2803      	cmp	r0, #3
 800396a:	d102      	bne.n	8003972 <.text_4+0x16>
 800396c:	7468      	strb	r0, [r5, #17]
 800396e:	2600      	movs	r6, #0
 8003970:	4770      	bx	lr
 8003972:	2007      	movs	r0, #7
 8003974:	2600      	movs	r6, #0
 8003976:	7468      	strb	r0, [r5, #17]
 8003978:	772e      	strb	r6, [r5, #28]
 800397a:	4770      	bx	lr

0800397c <PE_ExtRevisionInteroperability_Cable>:
 800397c:	b510      	push	{r4, lr}
 800397e:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <.text_6>)
 8003980:	4603      	mov	r3, r0
 8003982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003986:	6853      	ldr	r3, [r2, #4]
 8003988:	781c      	ldrb	r4, [r3, #0]
 800398a:	f004 0403 	and.w	r4, r4, #3
 800398e:	42a1      	cmp	r1, r4
 8003990:	bf28      	it	cs
 8003992:	4621      	movcs	r1, r4
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	f361 649b 	bfi	r4, r1, #26, #2
 800399a:	601c      	str	r4, [r3, #0]
 800399c:	6851      	ldr	r1, [r2, #4]
 800399e:	680a      	ldr	r2, [r1, #0]
 80039a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a4:	f3c2 6181 	ubfx	r1, r2, #26, #2
 80039a8:	f001 baa2 	b.w	8004ef0 <USBPD_PRL_CBL_SetHeaderSpecification>

080039ac <.text_6>:
 80039ac:	20000374 	.word	0x20000374

080039b0 <PE_SubStateMachine_VconnSwap>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	2502      	movs	r5, #2
 80039b6:	7c60      	ldrb	r0, [r4, #17]
 80039b8:	289d      	cmp	r0, #157	; 0x9d
 80039ba:	d010      	beq.n	80039de <PE_SubStateMachine_VconnSwap+0x2e>
 80039bc:	d30e      	bcc.n	80039dc <PE_SubStateMachine_VconnSwap+0x2c>
 80039be:	289f      	cmp	r0, #159	; 0x9f
 80039c0:	d054      	beq.n	8003a6c <PE_SubStateMachine_VconnSwap+0xbc>
 80039c2:	d33b      	bcc.n	8003a3c <PE_SubStateMachine_VconnSwap+0x8c>
 80039c4:	28a1      	cmp	r0, #161	; 0xa1
 80039c6:	f000 807e 	beq.w	8003ac6 <PE_SubStateMachine_VconnSwap+0x116>
 80039ca:	d370      	bcc.n	8003aae <PE_SubStateMachine_VconnSwap+0xfe>
 80039cc:	28a3      	cmp	r0, #163	; 0xa3
 80039ce:	f000 809a 	beq.w	8003b06 <PE_SubStateMachine_VconnSwap+0x156>
 80039d2:	f0c0 8086 	bcc.w	8003ae2 <PE_SubStateMachine_VconnSwap+0x132>
 80039d6:	28a4      	cmp	r0, #164	; 0xa4
 80039d8:	f000 80ee 	beq.w	8003bb8 <PE_SubStateMachine_VconnSwap+0x208>
 80039dc:	e0f8      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 80039de:	6861      	ldr	r1, [r4, #4]
 80039e0:	6808      	ldr	r0, [r1, #0]
 80039e2:	f400 50b8 	and.w	r0, r0, #5888	; 0x1700
 80039e6:	f5b0 5f98 	cmp.w	r0, #4864	; 0x1300
 80039ea:	d11f      	bne.n	8003a2c <PE_SubStateMachine_VconnSwap+0x7c>
 80039ec:	68a1      	ldr	r1, [r4, #8]
 80039ee:	7c20      	ldrb	r0, [r4, #16]
 80039f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80039f2:	4790      	blx	r2
 80039f4:	280a      	cmp	r0, #10
 80039f6:	d002      	beq.n	80039fe <PE_SubStateMachine_VconnSwap+0x4e>
 80039f8:	280d      	cmp	r0, #13
 80039fa:	d007      	beq.n	8003a0c <PE_SubStateMachine_VconnSwap+0x5c>
 80039fc:	e00d      	b.n	8003a1a <PE_SubStateMachine_VconnSwap+0x6a>
 80039fe:	6961      	ldr	r1, [r4, #20]
 8003a00:	209e      	movs	r0, #158	; 0x9e
 8003a02:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003a06:	7460      	strb	r0, [r4, #17]
 8003a08:	6161      	str	r1, [r4, #20]
 8003a0a:	e0e1      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	9000      	str	r0, [sp, #0]
 8003a10:	2303      	movs	r3, #3
 8003a12:	220c      	movs	r2, #12
 8003a14:	f000 f8f4 	bl	8003c00 <.text_11>
 8003a18:	e0da      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	9000      	str	r0, [sp, #0]
 8003a1e:	2303      	movs	r3, #3
 8003a20:	2204      	movs	r2, #4
 8003a22:	f000 f8ed 	bl	8003c00 <.text_11>
 8003a26:	2003      	movs	r0, #3
 8003a28:	7460      	strb	r0, [r4, #17]
 8003a2a:	e005      	b.n	8003a38 <PE_SubStateMachine_VconnSwap+0x88>
 8003a2c:	6960      	ldr	r0, [r4, #20]
 8003a2e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003a32:	2103      	movs	r1, #3
 8003a34:	6160      	str	r0, [r4, #20]
 8003a36:	7461      	strb	r1, [r4, #17]
 8003a38:	2500      	movs	r5, #0
 8003a3a:	e0c9      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	9000      	str	r0, [sp, #0]
 8003a40:	239e      	movs	r3, #158	; 0x9e
 8003a42:	2203      	movs	r2, #3
 8003a44:	f000 f8dc 	bl	8003c00 <.text_11>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d1f6      	bne.n	8003a3a <PE_SubStateMachine_VconnSwap+0x8a>
 8003a4c:	6860      	ldr	r0, [r4, #4]
 8003a4e:	6801      	ldr	r1, [r0, #0]
 8003a50:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a54:	b130      	cbz	r0, 8003a64 <PE_SubStateMachine_VconnSwap+0xb4>
 8003a56:	209f      	movs	r0, #159	; 0x9f
 8003a58:	7460      	strb	r0, [r4, #17]
 8003a5a:	f248 0196 	movw	r1, #32918	; 0x8096
 8003a5e:	83e1      	strh	r1, [r4, #30]
 8003a60:	2596      	movs	r5, #150	; 0x96
 8003a62:	e001      	b.n	8003a68 <PE_SubStateMachine_VconnSwap+0xb8>
 8003a64:	20a0      	movs	r0, #160	; 0xa0
 8003a66:	7460      	strb	r0, [r4, #17]
 8003a68:	213f      	movs	r1, #63	; 0x3f
 8003a6a:	e0a1      	b.n	8003bb0 <PE_SubStateMachine_VconnSwap+0x200>
 8003a6c:	8be0      	ldrh	r0, [r4, #30]
 8003a6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003a72:	f000 8095 	beq.w	8003ba0 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003a76:	780a      	ldrb	r2, [r1, #0]
 8003a78:	2a11      	cmp	r2, #17
 8003a7a:	bf01      	itttt	eq
 8003a7c:	8ea2      	ldrheq	r2, [r4, #52]	; 0x34
 8003a7e:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 8003a82:	4002      	andeq	r2, r0
 8003a84:	2a06      	cmpeq	r2, #6
 8003a86:	d111      	bne.n	8003aac <PE_SubStateMachine_VconnSwap+0xfc>
 8003a88:	f000 f8ab 	bl	8003be2 <.text_9>
 8003a8c:	68a0      	ldr	r0, [r4, #8]
 8003a8e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003a90:	b112      	cbz	r2, 8003a98 <PE_SubStateMachine_VconnSwap+0xe8>
 8003a92:	7c20      	ldrb	r0, [r4, #16]
 8003a94:	2100      	movs	r1, #0
 8003a96:	4790      	blx	r2
 8003a98:	f000 f89c 	bl	8003bd4 <.text_8>
 8003a9c:	2142      	movs	r1, #66	; 0x42
 8003a9e:	7c20      	ldrb	r0, [r4, #16]
 8003aa0:	f7fc fd61 	bl	8000566 <USBPD_PE_Notification>
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	8465      	strh	r5, [r4, #34]	; 0x22
 8003aa8:	f884 5262 	strb.w	r5, [r4, #610]	; 0x262
 8003aac:	e090      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003aae:	68a0      	ldr	r0, [r4, #8]
 8003ab0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ab2:	b112      	cbz	r2, 8003aba <PE_SubStateMachine_VconnSwap+0x10a>
 8003ab4:	7c20      	ldrb	r0, [r4, #16]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4790      	blx	r2
 8003aba:	20a1      	movs	r0, #161	; 0xa1
 8003abc:	2100      	movs	r1, #0
 8003abe:	7460      	strb	r0, [r4, #17]
 8003ac0:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
 8003ac4:	e084      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	9000      	str	r0, [sp, #0]
 8003aca:	2303      	movs	r3, #3
 8003acc:	2206      	movs	r2, #6
 8003ace:	f000 f897 	bl	8003c00 <.text_11>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d17c      	bne.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003ad6:	6960      	ldr	r0, [r4, #20]
 8003ad8:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003adc:	6160      	str	r0, [r4, #20]
 8003ade:	2142      	movs	r1, #66	; 0x42
 8003ae0:	e066      	b.n	8003bb0 <PE_SubStateMachine_VconnSwap+0x200>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	9000      	str	r0, [sp, #0]
 8003ae6:	23a3      	movs	r3, #163	; 0xa3
 8003ae8:	220b      	movs	r2, #11
 8003aea:	f000 f889 	bl	8003c00 <.text_11>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d16e      	bne.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003af2:	6960      	ldr	r0, [r4, #20]
 8003af4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8003af8:	6160      	str	r0, [r4, #20]
 8003afa:	f248 011b 	movw	r1, #32795	; 0x801b
 8003afe:	83e1      	strh	r1, [r4, #30]
 8003b00:	251b      	movs	r5, #27
 8003b02:	213e      	movs	r1, #62	; 0x3e
 8003b04:	e054      	b.n	8003bb0 <PE_SubStateMachine_VconnSwap+0x200>
 8003b06:	7808      	ldrb	r0, [r1, #0]
 8003b08:	2811      	cmp	r0, #17
 8003b0a:	bf04      	itt	eq
 8003b0c:	8ea0      	ldrheq	r0, [r4, #52]	; 0x34
 8003b0e:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8003b12:	d141      	bne.n	8003b98 <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b14:	f000 001f 	and.w	r0, r0, #31
 8003b18:	2803      	cmp	r0, #3
 8003b1a:	d006      	beq.n	8003b2a <PE_SubStateMachine_VconnSwap+0x17a>
 8003b1c:	2804      	cmp	r0, #4
 8003b1e:	d01c      	beq.n	8003b5a <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b20:	280c      	cmp	r0, #12
 8003b22:	d013      	beq.n	8003b4c <PE_SubStateMachine_VconnSwap+0x19c>
 8003b24:	2810      	cmp	r0, #16
 8003b26:	d01f      	beq.n	8003b68 <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b28:	e036      	b.n	8003b98 <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b2a:	6860      	ldr	r0, [r4, #4]
 8003b2c:	6802      	ldr	r2, [r0, #0]
 8003b2e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b32:	2800      	cmp	r0, #0
 8003b34:	bf19      	ittee	ne
 8003b36:	209f      	movne	r0, #159	; 0x9f
 8003b38:	7460      	strbne	r0, [r4, #17]
 8003b3a:	22a0      	moveq	r2, #160	; 0xa0
 8003b3c:	7462      	strbeq	r2, [r4, #17]
 8003b3e:	7808      	ldrb	r0, [r1, #0]
 8003b40:	2814      	cmp	r0, #20
 8003b42:	d001      	beq.n	8003b48 <PE_SubStateMachine_VconnSwap+0x198>
 8003b44:	f000 f84d 	bl	8003be2 <.text_9>
 8003b48:	213f      	movs	r1, #63	; 0x3f
 8003b4a:	e022      	b.n	8003b92 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b4c:	f000 f84e 	bl	8003bec <.text_10>
 8003b50:	d001      	beq.n	8003b56 <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b52:	f000 f846 	bl	8003be2 <.text_9>
 8003b56:	2140      	movs	r1, #64	; 0x40
 8003b58:	e01b      	b.n	8003b92 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b5a:	f000 f847 	bl	8003bec <.text_10>
 8003b5e:	d001      	beq.n	8003b64 <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b60:	f000 f83f 	bl	8003be2 <.text_9>
 8003b64:	2141      	movs	r1, #65	; 0x41
 8003b66:	e014      	b.n	8003b92 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b68:	6860      	ldr	r0, [r4, #4]
 8003b6a:	6802      	ldr	r2, [r0, #0]
 8003b6c:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b70:	b910      	cbnz	r0, 8003b78 <PE_SubStateMachine_VconnSwap+0x1c8>
 8003b72:	20a4      	movs	r0, #164	; 0xa4
 8003b74:	7460      	strb	r0, [r4, #17]
 8003b76:	e006      	b.n	8003b86 <PE_SubStateMachine_VconnSwap+0x1d6>
 8003b78:	6960      	ldr	r0, [r4, #20]
 8003b7a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003b7e:	2203      	movs	r2, #3
 8003b80:	6160      	str	r0, [r4, #20]
 8003b82:	7462      	strb	r2, [r4, #17]
 8003b84:	2500      	movs	r5, #0
 8003b86:	7808      	ldrb	r0, [r1, #0]
 8003b88:	2814      	cmp	r0, #20
 8003b8a:	d001      	beq.n	8003b90 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003b8c:	f000 f829 	bl	8003be2 <.text_9>
 8003b90:	2143      	movs	r1, #67	; 0x43
 8003b92:	7c20      	ldrb	r0, [r4, #16]
 8003b94:	f7fc fce7 	bl	8000566 <USBPD_PE_Notification>
 8003b98:	8be0      	ldrh	r0, [r4, #30]
 8003b9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003b9e:	d117      	bne.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003ba0:	6960      	ldr	r0, [r4, #20]
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	7461      	strb	r1, [r4, #17]
 8003ba6:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003baa:	6160      	str	r0, [r4, #20]
 8003bac:	2500      	movs	r5, #0
 8003bae:	211c      	movs	r1, #28
 8003bb0:	7c20      	ldrb	r0, [r4, #16]
 8003bb2:	f7fc fcd8 	bl	8000566 <USBPD_PE_Notification>
 8003bb6:	e00b      	b.n	8003bd0 <PE_SubStateMachine_VconnSwap+0x220>
 8003bb8:	68a0      	ldr	r0, [r4, #8]
 8003bba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003bbc:	b112      	cbz	r2, 8003bc4 <PE_SubStateMachine_VconnSwap+0x214>
 8003bbe:	7c20      	ldrb	r0, [r4, #16]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4790      	blx	r2
 8003bc4:	f000 f806 	bl	8003bd4 <.text_8>
 8003bc8:	f248 002d 	movw	r0, #32813	; 0x802d
 8003bcc:	2500      	movs	r5, #0
 8003bce:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	bd32      	pop	{r1, r4, r5, pc}

08003bd4 <.text_8>:
 8003bd4:	6960      	ldr	r0, [r4, #20]
 8003bd6:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003bda:	6160      	str	r0, [r4, #20]
 8003bdc:	2103      	movs	r1, #3
 8003bde:	7461      	strb	r1, [r4, #17]
 8003be0:	4770      	bx	lr

08003be2 <.text_9>:
 8003be2:	2214      	movs	r2, #20
 8003be4:	700a      	strb	r2, [r1, #0]
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fc bec5 	b.w	8000976 <PE_Clear_RxEvent>

08003bec <.text_10>:
 8003bec:	6960      	ldr	r0, [r4, #20]
 8003bee:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8003bf2:	6160      	str	r0, [r4, #20]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	7462      	strb	r2, [r4, #17]
 8003bf8:	2500      	movs	r5, #0
 8003bfa:	7808      	ldrb	r0, [r1, #0]
 8003bfc:	2814      	cmp	r0, #20
 8003bfe:	4770      	bx	lr

08003c00 <.text_11>:
 8003c00:	2100      	movs	r1, #0
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7fd bbaa 	b.w	800135c <PE_Send_CtrlMessage>

08003c08 <USBPD_PE_SVDM_RequestIdentity>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4aab      	ldr	r2, [pc, #684]	; (8003eb8 <.text_16>)
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	6854      	ldr	r4, [r2, #4]
 8003c16:	f3c4 2240 	ubfx	r2, r4, #9, #1
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	bf1e      	ittt	ne
 8003c1e:	68da      	ldrne	r2, [r3, #12]
 8003c20:	2a00      	cmpne	r2, #0
 8003c22:	2902      	cmpne	r1, #2
 8003c24:	d101      	bne.n	8003c2a <USBPD_PE_SVDM_RequestIdentity+0x22>
 8003c26:	2002      	movs	r0, #2
 8003c28:	bd32      	pop	{r1, r4, r5, pc}
 8003c2a:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003c2e:	7822      	ldrb	r2, [r4, #0]
 8003c30:	b922      	cbnz	r2, 8003c3c <USBPD_PE_SVDM_RequestIdentity+0x34>
 8003c32:	685d      	ldr	r5, [r3, #4]
 8003c34:	682a      	ldr	r2, [r5, #0]
 8003c36:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003c3a:	b90a      	cbnz	r2, 8003c40 <USBPD_PE_SVDM_RequestIdentity+0x38>
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	bd32      	pop	{r1, r4, r5, pc}
 8003c40:	7061      	strb	r1, [r4, #1]
 8003c42:	b111      	cbz	r1, 8003c4a <USBPD_PE_SVDM_RequestIdentity+0x42>
 8003c44:	2901      	cmp	r1, #1
 8003c46:	d007      	beq.n	8003c58 <USBPD_PE_SVDM_RequestIdentity+0x50>
 8003c48:	e013      	b.n	8003c72 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003c4a:	6829      	ldr	r1, [r5, #0]
 8003c4c:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8003c50:	2903      	cmp	r1, #3
 8003c52:	d10e      	bne.n	8003c72 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003c54:	217d      	movs	r1, #125	; 0x7d
 8003c56:	e00b      	b.n	8003c70 <USBPD_PE_SVDM_RequestIdentity+0x68>
 8003c58:	6829      	ldr	r1, [r5, #0]
 8003c5a:	f240 7204 	movw	r2, #1796	; 0x704
 8003c5e:	400a      	ands	r2, r1
 8003c60:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003c64:	bf1c      	itt	ne
 8003c66:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003c6a:	2903      	cmpne	r1, #3
 8003c6c:	d101      	bne.n	8003c72 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003c6e:	2105      	movs	r1, #5
 8003c70:	e124      	b.n	8003ebc <.text_17>
 8003c72:	2010      	movs	r0, #16
 8003c74:	bd32      	pop	{r1, r4, r5, pc}

08003c76 <USBPD_PE_SVDM_RequestSVID>:
 8003c76:	b538      	push	{r3, r4, r5, lr}
 8003c78:	f000 f918 	bl	8003eac <.text_15>
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	bf18      	it	ne
 8003c80:	2902      	cmpne	r1, #2
 8003c82:	d101      	bne.n	8003c88 <USBPD_PE_SVDM_RequestSVID+0x12>
 8003c84:	2002      	movs	r0, #2
 8003c86:	bd32      	pop	{r1, r4, r5, pc}
 8003c88:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003c8c:	7822      	ldrb	r2, [r4, #0]
 8003c8e:	b922      	cbnz	r2, 8003c9a <USBPD_PE_SVDM_RequestSVID+0x24>
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	6815      	ldr	r5, [r2, #0]
 8003c94:	f3c5 3200 	ubfx	r2, r5, #12, #1
 8003c98:	b90a      	cbnz	r2, 8003c9e <USBPD_PE_SVDM_RequestSVID+0x28>
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	bd32      	pop	{r1, r4, r5, pc}
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	f3c5 2502 	ubfx	r5, r5, #8, #3
 8003ca4:	2d03      	cmp	r5, #3
 8003ca6:	d001      	beq.n	8003cac <USBPD_PE_SVDM_RequestSVID+0x36>
 8003ca8:	2010      	movs	r0, #16
 8003caa:	bd32      	pop	{r1, r4, r5, pc}
 8003cac:	257f      	movs	r5, #127	; 0x7f
 8003cae:	7061      	strb	r1, [r4, #1]
 8003cb0:	7025      	strb	r5, [r4, #0]
 8003cb2:	b129      	cbz	r1, 8003cc0 <USBPD_PE_SVDM_RequestSVID+0x4a>
 8003cb4:	2901      	cmp	r1, #1
 8003cb6:	d107      	bne.n	8003cc8 <USBPD_PE_SVDM_RequestSVID+0x52>
 8003cb8:	6959      	ldr	r1, [r3, #20]
 8003cba:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8003cbe:	b119      	cbz	r1, 8003cc8 <USBPD_PE_SVDM_RequestSVID+0x52>
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003cc4:	4790      	blx	r2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4610      	mov	r0, r2
 8003cca:	bd32      	pop	{r1, r4, r5, pc}

08003ccc <USBPD_PE_SVDM_RequestMode>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	f000 f8c8 	bl	8003e62 <.text_13>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf18      	it	ne
 8003cd6:	2902      	cmpne	r1, #2
 8003cd8:	d101      	bne.n	8003cde <USBPD_PE_SVDM_RequestMode+0x12>
 8003cda:	2002      	movs	r0, #2
 8003cdc:	bd70      	pop	{r4, r5, r6, pc}
 8003cde:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003ce2:	782b      	ldrb	r3, [r5, #0]
 8003ce4:	b923      	cbnz	r3, 8003cf0 <USBPD_PE_SVDM_RequestMode+0x24>
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	681e      	ldr	r6, [r3, #0]
 8003cea:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003cee:	b90b      	cbnz	r3, 8003cf4 <USBPD_PE_SVDM_RequestMode+0x28>
 8003cf0:	2003      	movs	r0, #3
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	f3c6 2602 	ubfx	r6, r6, #8, #3
 8003cfa:	2e03      	cmp	r6, #3
 8003cfc:	d001      	beq.n	8003d02 <USBPD_PE_SVDM_RequestMode+0x36>
 8003cfe:	2010      	movs	r0, #16
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	2681      	movs	r6, #129	; 0x81
 8003d04:	7069      	strb	r1, [r5, #1]
 8003d06:	702e      	strb	r6, [r5, #0]
 8003d08:	f8a4 2258 	strh.w	r2, [r4, #600]	; 0x258
 8003d0c:	b129      	cbz	r1, 8003d1a <USBPD_PE_SVDM_RequestMode+0x4e>
 8003d0e:	2901      	cmp	r1, #1
 8003d10:	d107      	bne.n	8003d22 <USBPD_PE_SVDM_RequestMode+0x56>
 8003d12:	6961      	ldr	r1, [r4, #20]
 8003d14:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8003d18:	b119      	cbz	r1, 8003d22 <USBPD_PE_SVDM_RequestMode+0x56>
 8003d1a:	68a1      	ldr	r1, [r4, #8]
 8003d1c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d1e:	4790      	blx	r2
 8003d20:	2300      	movs	r3, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	bd70      	pop	{r4, r5, r6, pc}

08003d26 <USBPD_PE_SVDM_RequestModeEnter>:
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	f000 f848 	bl	8003dbc <.text_10>
 8003d2c:	b90c      	cbnz	r4, 8003d32 <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d2e:	2002      	movs	r0, #2
 8003d30:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003d32:	f105 0632 	add.w	r6, r5, #50	; 0x32
 8003d36:	7834      	ldrb	r4, [r6, #0]
 8003d38:	b914      	cbnz	r4, 8003d40 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d3a:	f000 f83a 	bl	8003db2 <.text_9>
 8003d3e:	b90c      	cbnz	r4, 8003d44 <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d40:	2003      	movs	r0, #3
 8003d42:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003d44:	f000 f82f 	bl	8003da6 <.text_8>
 8003d48:	d001      	beq.n	8003d4e <USBPD_PE_SVDM_RequestModeEnter+0x28>
 8003d4a:	2010      	movs	r0, #16
 8003d4c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003d4e:	2782      	movs	r7, #130	; 0x82
 8003d50:	e014      	b.n	8003d7c <.text_7>

08003d52 <USBPD_PE_SVDM_RequestModeExit>:
 8003d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d54:	f000 f832 	bl	8003dbc <.text_10>
 8003d58:	b90c      	cbnz	r4, 8003d5e <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003d5a:	2002      	movs	r0, #2
 8003d5c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003d5e:	f105 0632 	add.w	r6, r5, #50	; 0x32
 8003d62:	7834      	ldrb	r4, [r6, #0]
 8003d64:	b914      	cbnz	r4, 8003d6c <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003d66:	f000 f824 	bl	8003db2 <.text_9>
 8003d6a:	b90c      	cbnz	r4, 8003d70 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003d6c:	2003      	movs	r0, #3
 8003d6e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003d70:	f000 f819 	bl	8003da6 <.text_8>
 8003d74:	d001      	beq.n	8003d7a <USBPD_PE_SVDM_RequestModeExit+0x28>
 8003d76:	2010      	movs	r0, #16
 8003d78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003d7a:	2783      	movs	r7, #131	; 0x83

08003d7c <.text_7>:
 8003d7c:	7071      	strb	r1, [r6, #1]
 8003d7e:	7037      	strb	r7, [r6, #0]
 8003d80:	f8a5 2258 	strh.w	r2, [r5, #600]	; 0x258
 8003d84:	696a      	ldr	r2, [r5, #20]
 8003d86:	f363 1247 	bfi	r2, r3, #5, #3
 8003d8a:	616a      	str	r2, [r5, #20]
 8003d8c:	b129      	cbz	r1, 8003d9a <.text_7+0x1e>
 8003d8e:	2902      	cmp	r1, #2
 8003d90:	d000      	beq.n	8003d94 <.text_7+0x18>
 8003d92:	d206      	bcs.n	8003da2 <.text_7+0x26>
 8003d94:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 8003d98:	b119      	cbz	r1, 8003da2 <.text_7+0x26>
 8003d9a:	68a9      	ldr	r1, [r5, #8]
 8003d9c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d9e:	4790      	blx	r2
 8003da0:	2400      	movs	r4, #0
 8003da2:	4620      	mov	r0, r4
 8003da4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003da6 <.text_8>:
 8003da6:	2410      	movs	r4, #16
 8003da8:	f407 67e1 	and.w	r7, r7, #1800	; 0x708
 8003dac:	f5b7 7f42 	cmp.w	r7, #776	; 0x308
 8003db0:	4770      	bx	lr

08003db2 <.text_9>:
 8003db2:	686c      	ldr	r4, [r5, #4]
 8003db4:	6827      	ldr	r7, [r4, #0]
 8003db6:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003dba:	4770      	bx	lr

08003dbc <.text_10>:
 8003dbc:	4c3e      	ldr	r4, [pc, #248]	; (8003eb8 <.text_16>)
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8003dc4:	68ec      	ldr	r4, [r5, #12]
 8003dc6:	4770      	bx	lr

08003dc8 <USBPD_PE_SVDM_RequestSpecific>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	f7ff fff7 	bl	8003dbc <.text_10>
 8003dce:	b90c      	cbnz	r4, 8003dd4 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003dd4:	f105 0632 	add.w	r6, r5, #50	; 0x32
 8003dd8:	7834      	ldrb	r4, [r6, #0]
 8003dda:	b914      	cbnz	r4, 8003de2 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003ddc:	f7ff ffe9 	bl	8003db2 <.text_9>
 8003de0:	b90c      	cbnz	r4, 8003de6 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003de2:	2003      	movs	r0, #3
 8003de4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003de6:	696c      	ldr	r4, [r5, #20]
 8003de8:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 8003dec:	b90c      	cbnz	r4, 8003df2 <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003dee:	000c      	movs	r4, r1
 8003df0:	d10f      	bne.n	8003e12 <USBPD_PE_SVDM_RequestSpecific+0x4a>
 8003df2:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003df6:	2c03      	cmp	r4, #3
 8003df8:	d10b      	bne.n	8003e12 <USBPD_PE_SVDM_RequestSpecific+0x4a>
 8003dfa:	7071      	strb	r1, [r6, #1]
 8003dfc:	2185      	movs	r1, #133	; 0x85
 8003dfe:	7031      	strb	r1, [r6, #0]
 8003e00:	f505 7115 	add.w	r1, r5, #596	; 0x254
 8003e04:	600a      	str	r2, [r1, #0]
 8003e06:	808b      	strh	r3, [r1, #4]
 8003e08:	68a9      	ldr	r1, [r5, #8]
 8003e0a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e0c:	4790      	blx	r2
 8003e0e:	2000      	movs	r0, #0
 8003e10:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8003e12:	2010      	movs	r0, #16
 8003e14:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e16 <USBPD_PE_SVDM_RequestAttention>:
 8003e16:	b538      	push	{r3, r4, r5, lr}
 8003e18:	f000 f823 	bl	8003e62 <.text_13>
 8003e1c:	b103      	cbz	r3, 8003e20 <USBPD_PE_SVDM_RequestAttention+0xa>
 8003e1e:	b109      	cbz	r1, 8003e24 <USBPD_PE_SVDM_RequestAttention+0xe>
 8003e20:	2002      	movs	r0, #2
 8003e22:	bd32      	pop	{r1, r4, r5, pc}
 8003e24:	f104 0332 	add.w	r3, r4, #50	; 0x32
 8003e28:	7819      	ldrb	r1, [r3, #0]
 8003e2a:	b921      	cbnz	r1, 8003e36 <USBPD_PE_SVDM_RequestAttention+0x20>
 8003e2c:	6861      	ldr	r1, [r4, #4]
 8003e2e:	680d      	ldr	r5, [r1, #0]
 8003e30:	f3c5 3100 	ubfx	r1, r5, #12, #1
 8003e34:	b909      	cbnz	r1, 8003e3a <USBPD_PE_SVDM_RequestAttention+0x24>
 8003e36:	2003      	movs	r0, #3
 8003e38:	bd32      	pop	{r1, r4, r5, pc}
 8003e3a:	f3c5 2102 	ubfx	r1, r5, #8, #3
 8003e3e:	2903      	cmp	r1, #3
 8003e40:	d10d      	bne.n	8003e5e <USBPD_PE_SVDM_RequestAttention+0x48>
 8003e42:	2100      	movs	r1, #0
 8003e44:	7059      	strb	r1, [r3, #1]
 8003e46:	2584      	movs	r5, #132	; 0x84
 8003e48:	701d      	strb	r5, [r3, #0]
 8003e4a:	f504 7115 	add.w	r1, r4, #596	; 0x254
 8003e4e:	2306      	movs	r3, #6
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	808a      	strh	r2, [r1, #4]
 8003e54:	68a1      	ldr	r1, [r4, #8]
 8003e56:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e58:	4790      	blx	r2
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	bd32      	pop	{r1, r4, r5, pc}
 8003e5e:	2010      	movs	r0, #16
 8003e60:	bd32      	pop	{r1, r4, r5, pc}

08003e62 <.text_13>:
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <.text_16>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	4770      	bx	lr

08003e6e <USBPD_PE_UVDM_RequestMessage>:
 8003e6e:	b538      	push	{r3, r4, r5, lr}
 8003e70:	f000 f81c 	bl	8003eac <.text_15>
 8003e74:	b90a      	cbnz	r2, 8003e7a <USBPD_PE_UVDM_RequestMessage+0xc>
 8003e76:	2002      	movs	r0, #2
 8003e78:	bd32      	pop	{r1, r4, r5, pc}
 8003e7a:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003e7e:	7822      	ldrb	r2, [r4, #0]
 8003e80:	b922      	cbnz	r2, 8003e8c <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	6815      	ldr	r5, [r2, #0]
 8003e86:	f3c5 3200 	ubfx	r2, r5, #12, #1
 8003e8a:	b90a      	cbnz	r2, 8003e90 <USBPD_PE_UVDM_RequestMessage+0x22>
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	bd32      	pop	{r1, r4, r5, pc}
 8003e90:	f3c5 32c0 	ubfx	r2, r5, #15, #1
 8003e94:	b90a      	cbnz	r2, 8003e9a <USBPD_PE_UVDM_RequestMessage+0x2c>
 8003e96:	000a      	movs	r2, r1
 8003e98:	d106      	bne.n	8003ea8 <USBPD_PE_UVDM_RequestMessage+0x3a>
 8003e9a:	f3c5 2202 	ubfx	r2, r5, #8, #3
 8003e9e:	2a03      	cmp	r2, #3
 8003ea0:	d102      	bne.n	8003ea8 <USBPD_PE_UVDM_RequestMessage+0x3a>
 8003ea2:	7061      	strb	r1, [r4, #1]
 8003ea4:	2186      	movs	r1, #134	; 0x86
 8003ea6:	e009      	b.n	8003ebc <.text_17>
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	bd32      	pop	{r1, r4, r5, pc}

08003eac <.text_15>:
 8003eac:	4a02      	ldr	r2, [pc, #8]	; (8003eb8 <.text_16>)
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	4770      	bx	lr

08003eb8 <.text_16>:
 8003eb8:	20000374 	.word	0x20000374

08003ebc <.text_17>:
 8003ebc:	7021      	strb	r1, [r4, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ec2:	4788      	blx	r1
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	bd32      	pop	{r1, r4, r5, pc}

08003ec8 <PE_Receive_SVDM>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	4604      	mov	r4, r0
 8003ecc:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003ed0:	f204 4294 	addw	r2, r4, #1172	; 0x494
 8003ed4:	8808      	ldrh	r0, [r1, #0]
 8003ed6:	0b00      	lsrs	r0, r0, #12
 8003ed8:	f000 0007 	and.w	r0, r0, #7
 8003edc:	1e43      	subs	r3, r0, #1
 8003ede:	7613      	strb	r3, [r2, #24]
 8003ee0:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d165      	bne.n	8003fb4 <PE_Receive_SVDM+0xec>
 8003ee8:	e010      	b.n	8003f0c <PE_Receive_SVDM+0x44>
 8003eea:	684b      	ldr	r3, [r1, #4]
 8003eec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003ef0:	799d      	ldrb	r5, [r3, #6]
 8003ef2:	79de      	ldrb	r6, [r3, #7]
 8003ef4:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8003ef8:	7a1d      	ldrb	r5, [r3, #8]
 8003efa:	7a5b      	ldrb	r3, [r3, #9]
 8003efc:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8003f00:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 8003f04:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8003f08:	1c40      	adds	r0, r0, #1
 8003f0a:	b2c0      	uxtb	r0, r0
 8003f0c:	7e15      	ldrb	r5, [r2, #24]
 8003f0e:	42a8      	cmp	r0, r5
 8003f10:	dbeb      	blt.n	8003eea <PE_Receive_SVDM+0x22>
 8003f12:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	1e5b      	subs	r3, r3, #1
 8003f1c:	f248 0119 	movw	r1, #32793	; 0x8019
 8003f20:	f248 000f 	movw	r0, #32783	; 0x800f
 8003f24:	d00d      	beq.n	8003f42 <PE_Receive_SVDM+0x7a>
 8003f26:	1e5b      	subs	r3, r3, #1
 8003f28:	d01f      	beq.n	8003f6a <PE_Receive_SVDM+0xa2>
 8003f2a:	1e5b      	subs	r3, r3, #1
 8003f2c:	d022      	beq.n	8003f74 <PE_Receive_SVDM+0xac>
 8003f2e:	1e5b      	subs	r3, r3, #1
 8003f30:	d025      	beq.n	8003f7e <PE_Receive_SVDM+0xb6>
 8003f32:	1e5b      	subs	r3, r3, #1
 8003f34:	d028      	beq.n	8003f88 <PE_Receive_SVDM+0xc0>
 8003f36:	1e5b      	subs	r3, r3, #1
 8003f38:	d02b      	beq.n	8003f92 <PE_Receive_SVDM+0xca>
 8003f3a:	3b0a      	subs	r3, #10
 8003f3c:	2b0f      	cmp	r3, #15
 8003f3e:	d934      	bls.n	8003faa <PE_Receive_SVDM+0xe2>
 8003f40:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003f42:	2150      	movs	r1, #80	; 0x50
 8003f44:	7721      	strb	r1, [r4, #28]
 8003f46:	6861      	ldr	r1, [r4, #4]
 8003f48:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
 8003f4c:	680a      	ldr	r2, [r1, #0]
 8003f4e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8003f52:	f3c3 3341 	ubfx	r3, r3, #13, #2
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bfb8      	it	lt
 8003f5a:	461a      	movlt	r2, r3
 8003f5c:	680b      	ldr	r3, [r1, #0]
 8003f5e:	f362 1345 	bfi	r3, r2, #5, #1
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	83e0      	strh	r0, [r4, #30]
 8003f66:	2075      	movs	r0, #117	; 0x75
 8003f68:	e023      	b.n	8003fb2 <PE_Receive_SVDM+0xea>
 8003f6a:	2152      	movs	r1, #82	; 0x52
 8003f6c:	7721      	strb	r1, [r4, #28]
 8003f6e:	83e0      	strh	r0, [r4, #30]
 8003f70:	2076      	movs	r0, #118	; 0x76
 8003f72:	e01e      	b.n	8003fb2 <PE_Receive_SVDM+0xea>
 8003f74:	2153      	movs	r1, #83	; 0x53
 8003f76:	7721      	strb	r1, [r4, #28]
 8003f78:	83e0      	strh	r0, [r4, #30]
 8003f7a:	2078      	movs	r0, #120	; 0x78
 8003f7c:	e019      	b.n	8003fb2 <PE_Receive_SVDM+0xea>
 8003f7e:	2254      	movs	r2, #84	; 0x54
 8003f80:	7722      	strb	r2, [r4, #28]
 8003f82:	83e1      	strh	r1, [r4, #30]
 8003f84:	2079      	movs	r0, #121	; 0x79
 8003f86:	e014      	b.n	8003fb2 <PE_Receive_SVDM+0xea>
 8003f88:	2255      	movs	r2, #85	; 0x55
 8003f8a:	7722      	strb	r2, [r4, #28]
 8003f8c:	83e1      	strh	r1, [r4, #30]
 8003f8e:	207a      	movs	r0, #122	; 0x7a
 8003f90:	e00f      	b.n	8003fb2 <PE_Receive_SVDM+0xea>
 8003f92:	68e0      	ldr	r0, [r4, #12]
 8003f94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f96:	b12b      	cbz	r3, 8003fa4 <PE_Receive_SVDM+0xdc>
 8003f98:	0029      	movs	r1, r5
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	7c20      	ldrb	r0, [r4, #16]
 8003f9e:	bf18      	it	ne
 8003fa0:	2101      	movne	r1, #1
 8003fa2:	4798      	blx	r3
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	7461      	strb	r1, [r4, #17]
 8003fa8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003faa:	225a      	movs	r2, #90	; 0x5a
 8003fac:	7722      	strb	r2, [r4, #28]
 8003fae:	83e0      	strh	r0, [r4, #30]
 8003fb0:	207b      	movs	r0, #123	; 0x7b
 8003fb2:	7460      	strb	r0, [r4, #17]
 8003fb4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003fb6 <PE_StateMachine_VDM>:
 8003fb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fba:	4605      	mov	r5, r0
 8003fbc:	b097      	sub	sp, #92	; 0x5c
 8003fbe:	7c68      	ldrb	r0, [r5, #17]
 8003fc0:	468a      	mov	sl, r1
 8003fc2:	f1a0 0175 	sub.w	r1, r0, #117	; 0x75
 8003fc6:	2907      	cmp	r1, #7
 8003fc8:	f04f 0802 	mov.w	r8, #2
 8003fcc:	d204      	bcs.n	8003fd8 <PE_StateMachine_VDM+0x22>
 8003fce:	f89a 2000 	ldrb.w	r2, [sl]
 8003fd2:	2a14      	cmp	r2, #20
 8003fd4:	f040 8469 	bne.w	80048aa <PE_StateMachine_VDM+0x8f4>
 8003fd8:	2875      	cmp	r0, #117	; 0x75
 8003fda:	f205 49ac 	addw	r9, r5, #1196	; 0x4ac
 8003fde:	f105 0b34 	add.w	fp, r5, #52	; 0x34
 8003fe2:	f105 0731 	add.w	r7, r5, #49	; 0x31
 8003fe6:	f505 7614 	add.w	r6, r5, #592	; 0x250
 8003fea:	f248 041e 	movw	r4, #32798	; 0x801e
 8003fee:	d039      	beq.n	8004064 <PE_StateMachine_VDM+0xae>
 8003ff0:	2876      	cmp	r0, #118	; 0x76
 8003ff2:	f000 8081 	beq.w	80040f8 <PE_StateMachine_VDM+0x142>
 8003ff6:	2877      	cmp	r0, #119	; 0x77
 8003ff8:	f000 80da 	beq.w	80041b0 <PE_StateMachine_VDM+0x1fa>
 8003ffc:	2878      	cmp	r0, #120	; 0x78
 8003ffe:	f000 811d 	beq.w	800423c <PE_StateMachine_VDM+0x286>
 8004002:	2879      	cmp	r0, #121	; 0x79
 8004004:	f000 815b 	beq.w	80042be <PE_StateMachine_VDM+0x308>
 8004008:	287a      	cmp	r0, #122	; 0x7a
 800400a:	f000 8179 	beq.w	8004300 <PE_StateMachine_VDM+0x34a>
 800400e:	287b      	cmp	r0, #123	; 0x7b
 8004010:	f000 81a4 	beq.w	800435c <PE_StateMachine_VDM+0x3a6>
 8004014:	287d      	cmp	r0, #125	; 0x7d
 8004016:	f000 81d7 	beq.w	80043c8 <PE_StateMachine_VDM+0x412>
 800401a:	287f      	cmp	r0, #127	; 0x7f
 800401c:	f000 822e 	beq.w	800447c <PE_StateMachine_VDM+0x4c6>
 8004020:	2881      	cmp	r0, #129	; 0x81
 8004022:	f000 8277 	beq.w	8004514 <PE_StateMachine_VDM+0x55e>
 8004026:	2882      	cmp	r0, #130	; 0x82
 8004028:	f000 82c9 	beq.w	80045be <PE_StateMachine_VDM+0x608>
 800402c:	2883      	cmp	r0, #131	; 0x83
 800402e:	f000 831b 	beq.w	8004668 <PE_StateMachine_VDM+0x6b2>
 8004032:	2884      	cmp	r0, #132	; 0x84
 8004034:	f000 8419 	beq.w	800486a <PE_StateMachine_VDM+0x8b4>
 8004038:	2885      	cmp	r0, #133	; 0x85
 800403a:	f000 8372 	beq.w	8004722 <PE_StateMachine_VDM+0x76c>
 800403e:	2887      	cmp	r0, #135	; 0x87
 8004040:	f000 81e9 	beq.w	8004416 <PE_StateMachine_VDM+0x460>
 8004044:	2889      	cmp	r0, #137	; 0x89
 8004046:	f000 8237 	beq.w	80044b8 <PE_StateMachine_VDM+0x502>
 800404a:	288b      	cmp	r0, #139	; 0x8b
 800404c:	f000 8285 	beq.w	800455a <PE_StateMachine_VDM+0x5a4>
 8004050:	288c      	cmp	r0, #140	; 0x8c
 8004052:	f000 82ca 	beq.w	80045ea <PE_StateMachine_VDM+0x634>
 8004056:	288d      	cmp	r0, #141	; 0x8d
 8004058:	f000 8324 	beq.w	80046a4 <PE_StateMachine_VDM+0x6ee>
 800405c:	288f      	cmp	r0, #143	; 0x8f
 800405e:	f000 8393 	beq.w	8004788 <PE_StateMachine_VDM+0x7d2>
 8004062:	e17a      	b.n	800435a <PE_StateMachine_VDM+0x3a4>
 8004064:	f000 fcb9 	bl	80049da <.text_36>
 8004068:	d048      	beq.n	80040fc <PE_StateMachine_VDM+0x146>
 800406a:	6831      	ldr	r1, [r6, #0]
 800406c:	f364 0104 	bfi	r1, r4, #0, #5
 8004070:	f000 fc95 	bl	800499e <.text_33>
 8004074:	bf1c      	itt	ne
 8004076:	68e8      	ldrne	r0, [r5, #12]
 8004078:	2800      	cmpne	r0, #0
 800407a:	d032      	beq.n	80040e2 <PE_StateMachine_VDM+0x12c>
 800407c:	6802      	ldr	r2, [r0, #0]
 800407e:	b382      	cbz	r2, 80040e2 <PE_StateMachine_VDM+0x12c>
 8004080:	0c09      	lsrs	r1, r1, #16
 8004082:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 8004086:	d12c      	bne.n	80040e2 <PE_StateMachine_VDM+0x12c>
 8004088:	7c28      	ldrb	r0, [r5, #16]
 800408a:	a908      	add	r1, sp, #32
 800408c:	4790      	blx	r2
 800408e:	2803      	cmp	r0, #3
 8004090:	d002      	beq.n	8004098 <PE_StateMachine_VDM+0xe2>
 8004092:	280f      	cmp	r0, #15
 8004094:	d003      	beq.n	800409e <PE_StateMachine_VDM+0xe8>
 8004096:	e024      	b.n	80040e2 <PE_StateMachine_VDM+0x12c>
 8004098:	f000 fc68 	bl	800496c <.text_31>
 800409c:	e023      	b.n	80040e6 <PE_StateMachine_VDM+0x130>
 800409e:	f000 fc97 	bl	80049d0 <.text_35>
 80040a2:	a811      	add	r0, sp, #68	; 0x44
 80040a4:	9908      	ldr	r1, [sp, #32]
 80040a6:	6041      	str	r1, [r0, #4]
 80040a8:	2404      	movs	r4, #4
 80040aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040ac:	6081      	str	r1, [r0, #8]
 80040ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040b0:	60c1      	str	r1, [r0, #12]
 80040b2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80040b6:	f3c1 0240 	ubfx	r2, r1, #1, #1
 80040ba:	b112      	cbz	r2, 80040c2 <PE_StateMachine_VDM+0x10c>
 80040bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040be:	6102      	str	r2, [r0, #16]
 80040c0:	2405      	movs	r4, #5
 80040c2:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 80040c6:	b122      	cbz	r2, 80040d2 <PE_StateMachine_VDM+0x11c>
 80040c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ca:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80040ce:	1c64      	adds	r4, r4, #1
 80040d0:	b2e4      	uxtb	r4, r4
 80040d2:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80040d6:	b131      	cbz	r1, 80040e6 <PE_StateMachine_VDM+0x130>
 80040d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80040da:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80040de:	1c64      	adds	r4, r4, #1
 80040e0:	e001      	b.n	80040e6 <PE_StateMachine_VDM+0x130>
 80040e2:	f000 fc88 	bl	80049f6 <.text_39>
 80040e6:	2000      	movs	r0, #0
 80040e8:	6832      	ldr	r2, [r6, #0]
 80040ea:	9211      	str	r2, [sp, #68]	; 0x44
 80040ec:	2103      	movs	r1, #3
 80040ee:	9002      	str	r0, [sp, #8]
 80040f0:	9101      	str	r1, [sp, #4]
 80040f2:	9400      	str	r4, [sp, #0]
 80040f4:	ab11      	add	r3, sp, #68	; 0x44
 80040f6:	e164      	b.n	80043c2 <PE_StateMachine_VDM+0x40c>
 80040f8:	f000 fc6f 	bl	80049da <.text_36>
 80040fc:	f000 83b0 	beq.w	8004860 <PE_StateMachine_VDM+0x8aa>
 8004100:	6831      	ldr	r1, [r6, #0]
 8004102:	f368 0104 	bfi	r1, r8, #0, #5
 8004106:	f000 fc7b 	bl	8004a00 <.text_40>
 800410a:	6869      	ldr	r1, [r5, #4]
 800410c:	780a      	ldrb	r2, [r1, #0]
 800410e:	f002 020b 	and.w	r2, r2, #11
 8004112:	2a09      	cmp	r2, #9
 8004114:	bf1e      	ittt	ne
 8004116:	68e9      	ldrne	r1, [r5, #12]
 8004118:	684b      	ldrne	r3, [r1, #4]
 800411a:	2b00      	cmpne	r3, #0
 800411c:	d03d      	beq.n	800419a <PE_StateMachine_VDM+0x1e4>
 800411e:	0c00      	lsrs	r0, r0, #16
 8004120:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8004124:	d139      	bne.n	800419a <PE_StateMachine_VDM+0x1e4>
 8004126:	7c28      	ldrb	r0, [r5, #16]
 8004128:	f205 42ad 	addw	r2, r5, #1197	; 0x4ad
 800412c:	a903      	add	r1, sp, #12
 800412e:	4798      	blx	r3
 8004130:	2803      	cmp	r0, #3
 8004132:	d02e      	beq.n	8004192 <PE_StateMachine_VDM+0x1dc>
 8004134:	280f      	cmp	r0, #15
 8004136:	d130      	bne.n	800419a <PE_StateMachine_VDM+0x1e4>
 8004138:	f000 fc4a 	bl	80049d0 <.text_35>
 800413c:	a804      	add	r0, sp, #16
 800413e:	211c      	movs	r1, #28
 8004140:	f017 fb78 	bl	801b834 <__aeabi_memclr>
 8004144:	2400      	movs	r4, #0
 8004146:	2200      	movs	r2, #0
 8004148:	f899 0001 	ldrb.w	r0, [r9, #1]
 800414c:	4282      	cmp	r2, r0
 800414e:	bf38      	it	cc
 8004150:	2a0c      	cmpcc	r2, #12
 8004152:	f080 83ae 	bcs.w	80048b2 <PE_StateMachine_VDM+0x8fc>
 8004156:	1c64      	adds	r4, r4, #1
 8004158:	0850      	lsrs	r0, r2, #1
 800415a:	07d3      	lsls	r3, r2, #31
 800415c:	a905      	add	r1, sp, #20
 800415e:	d407      	bmi.n	8004170 <PE_StateMachine_VDM+0x1ba>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8004166:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800416a:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 800416e:	e007      	b.n	8004180 <PE_StateMachine_VDM+0x1ca>
 8004170:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004174:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8004178:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
 800417c:	ea4e 0303 	orr.w	r3, lr, r3
 8004180:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8004184:	1c52      	adds	r2, r2, #1
 8004186:	e7df      	b.n	8004148 <PE_StateMachine_VDM+0x192>
 8004188:	0624      	lsls	r4, r4, #24
 800418a:	0e64      	lsrs	r4, r4, #25
 800418c:	6830      	ldr	r0, [r6, #0]
 800418e:	1ca4      	adds	r4, r4, #2
 8004190:	e001      	b.n	8004196 <PE_StateMachine_VDM+0x1e0>
 8004192:	f000 fbeb 	bl	800496c <.text_31>
 8004196:	9004      	str	r0, [sp, #16]
 8004198:	e002      	b.n	80041a0 <PE_StateMachine_VDM+0x1ea>
 800419a:	f000 fc2c 	bl	80049f6 <.text_39>
 800419e:	9104      	str	r1, [sp, #16]
 80041a0:	2000      	movs	r0, #0
 80041a2:	2103      	movs	r1, #3
 80041a4:	b2e4      	uxtb	r4, r4
 80041a6:	9002      	str	r0, [sp, #8]
 80041a8:	9101      	str	r1, [sp, #4]
 80041aa:	9400      	str	r4, [sp, #0]
 80041ac:	ab04      	add	r3, sp, #16
 80041ae:	e108      	b.n	80043c2 <PE_StateMachine_VDM+0x40c>
 80041b0:	f000 fc18 	bl	80049e4 <.text_37>
 80041b4:	d0a2      	beq.n	80040fc <PE_StateMachine_VDM+0x146>
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	f368 0104 	bfi	r1, r8, #0, #5
 80041bc:	6031      	str	r1, [r6, #0]
 80041be:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80041c2:	f360 411f 	bfi	r1, r0, #16, #16
 80041c6:	f000 fc1b 	bl	8004a00 <.text_40>
 80041ca:	2001      	movs	r0, #1
 80041cc:	6831      	ldr	r1, [r6, #0]
 80041ce:	f360 1187 	bfi	r1, r0, #6, #2
 80041d2:	6031      	str	r1, [r6, #0]
 80041d4:	aa03      	add	r2, sp, #12
 80041d6:	68eb      	ldr	r3, [r5, #12]
 80041d8:	7c28      	ldrb	r0, [r5, #16]
 80041da:	685c      	ldr	r4, [r3, #4]
 80041dc:	a904      	add	r1, sp, #16
 80041de:	47a0      	blx	r4
 80041e0:	211c      	movs	r1, #28
 80041e2:	a805      	add	r0, sp, #20
 80041e4:	f017 fb26 	bl	801b834 <__aeabi_memclr>
 80041e8:	2200      	movs	r2, #0
 80041ea:	2300      	movs	r3, #0
 80041ec:	f899 0001 	ldrb.w	r0, [r9, #1]
 80041f0:	4283      	cmp	r3, r0
 80041f2:	bf38      	it	cc
 80041f4:	2b0c      	cmpcc	r3, #12
 80041f6:	f080 8372 	bcs.w	80048de <PE_StateMachine_VDM+0x928>
 80041fa:	1c52      	adds	r2, r2, #1
 80041fc:	0858      	lsrs	r0, r3, #1
 80041fe:	07dc      	lsls	r4, r3, #31
 8004200:	a906      	add	r1, sp, #24
 8004202:	d407      	bmi.n	8004214 <PE_StateMachine_VDM+0x25e>
 8004204:	9c04      	ldr	r4, [sp, #16]
 8004206:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800420a:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 800420e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8004212:	e005      	b.n	8004220 <PE_StateMachine_VDM+0x26a>
 8004214:	9e04      	ldr	r6, [sp, #16]
 8004216:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800421a:	f836 6013 	ldrh.w	r6, [r6, r3, lsl #1]
 800421e:	4334      	orrs	r4, r6
 8004220:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 8004224:	1c5b      	adds	r3, r3, #1
 8004226:	e7e1      	b.n	80041ec <PE_StateMachine_VDM+0x236>
 8004228:	0612      	lsls	r2, r2, #24
 800422a:	0e52      	lsrs	r2, r2, #25
 800422c:	1c92      	adds	r2, r2, #2
 800422e:	2000      	movs	r0, #0
 8004230:	2103      	movs	r1, #3
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	9002      	str	r0, [sp, #8]
 8004236:	9101      	str	r1, [sp, #4]
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	e03e      	b.n	80042ba <PE_StateMachine_VDM+0x304>
 800423c:	f000 fbd2 	bl	80049e4 <.text_37>
 8004240:	f04f 0901 	mov.w	r9, #1
 8004244:	d05e      	beq.n	8004304 <PE_StateMachine_VDM+0x34e>
 8004246:	6831      	ldr	r1, [r6, #0]
 8004248:	2003      	movs	r0, #3
 800424a:	f360 0104 	bfi	r1, r0, #0, #5
 800424e:	f000 fba6 	bl	800499e <.text_33>
 8004252:	bf1e      	ittt	ne
 8004254:	68e8      	ldrne	r0, [r5, #12]
 8004256:	6884      	ldrne	r4, [r0, #8]
 8004258:	2c00      	cmpne	r4, #0
 800425a:	d024      	beq.n	80042a6 <PE_StateMachine_VDM+0x2f0>
 800425c:	7c28      	ldrb	r0, [r5, #16]
 800425e:	ab03      	add	r3, sp, #12
 8004260:	aa04      	add	r2, sp, #16
 8004262:	0c09      	lsrs	r1, r1, #16
 8004264:	47a0      	blx	r4
 8004266:	2803      	cmp	r0, #3
 8004268:	d002      	beq.n	8004270 <PE_StateMachine_VDM+0x2ba>
 800426a:	280f      	cmp	r0, #15
 800426c:	d003      	beq.n	8004276 <PE_StateMachine_VDM+0x2c0>
 800426e:	e01a      	b.n	80042a6 <PE_StateMachine_VDM+0x2f0>
 8004270:	f000 fb7c 	bl	800496c <.text_31>
 8004274:	e019      	b.n	80042aa <PE_StateMachine_VDM+0x2f4>
 8004276:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800427a:	b1a0      	cbz	r0, 80042a6 <PE_StateMachine_VDM+0x2f0>
 800427c:	2807      	cmp	r0, #7
 800427e:	d212      	bcs.n	80042a6 <PE_StateMachine_VDM+0x2f0>
 8004280:	6832      	ldr	r2, [r6, #0]
 8004282:	f369 1287 	bfi	r2, r9, #6, #2
 8004286:	6032      	str	r2, [r6, #0]
 8004288:	2100      	movs	r1, #0
 800428a:	ac06      	add	r4, sp, #24
 800428c:	4281      	cmp	r1, r0
 800428e:	d20c      	bcs.n	80042aa <PE_StateMachine_VDM+0x2f4>
 8004290:	9a04      	ldr	r2, [sp, #16]
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8004298:	f109 0901 	add.w	r9, r9, #1
 800429c:	9a04      	ldr	r2, [sp, #16]
 800429e:	1d13      	adds	r3, r2, #4
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	1c49      	adds	r1, r1, #1
 80042a4:	e7f2      	b.n	800428c <PE_StateMachine_VDM+0x2d6>
 80042a6:	f000 fba6 	bl	80049f6 <.text_39>
 80042aa:	2000      	movs	r0, #0
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	9205      	str	r2, [sp, #20]
 80042b0:	2103      	movs	r1, #3
 80042b2:	9002      	str	r0, [sp, #8]
 80042b4:	9101      	str	r1, [sp, #4]
 80042b6:	f8cd 9000 	str.w	r9, [sp]
 80042ba:	ab05      	add	r3, sp, #20
 80042bc:	e081      	b.n	80043c2 <PE_StateMachine_VDM+0x40c>
 80042be:	f000 fb91 	bl	80049e4 <.text_37>
 80042c2:	d01f      	beq.n	8004304 <PE_StateMachine_VDM+0x34e>
 80042c4:	6831      	ldr	r1, [r6, #0]
 80042c6:	2004      	movs	r0, #4
 80042c8:	f000 fb55 	bl	8004976 <.text_32>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d136      	bne.n	800433e <PE_StateMachine_VDM+0x388>
 80042d0:	68e8      	ldr	r0, [r5, #12]
 80042d2:	68c3      	ldr	r3, [r0, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d032      	beq.n	800433e <PE_StateMachine_VDM+0x388>
 80042d8:	f3c1 2202 	ubfx	r2, r1, #8, #3
 80042dc:	7c28      	ldrb	r0, [r5, #16]
 80042de:	0c09      	lsrs	r1, r1, #16
 80042e0:	4798      	blx	r3
 80042e2:	2803      	cmp	r0, #3
 80042e4:	d028      	beq.n	8004338 <PE_StateMachine_VDM+0x382>
 80042e6:	280f      	cmp	r0, #15
 80042e8:	d129      	bne.n	800433e <PE_StateMachine_VDM+0x388>
 80042ea:	f000 fb6b 	bl	80049c4 <.text_34>
 80042ee:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80042f2:	6969      	ldr	r1, [r5, #20]
 80042f4:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 80042f8:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 80042fc:	6169      	str	r1, [r5, #20]
 80042fe:	e020      	b.n	8004342 <PE_StateMachine_VDM+0x38c>
 8004300:	f000 fb70 	bl	80049e4 <.text_37>
 8004304:	f000 82ac 	beq.w	8004860 <PE_StateMachine_VDM+0x8aa>
 8004308:	6831      	ldr	r1, [r6, #0]
 800430a:	2005      	movs	r0, #5
 800430c:	f000 fb33 	bl	8004976 <.text_32>
 8004310:	b9a8      	cbnz	r0, 800433e <PE_StateMachine_VDM+0x388>
 8004312:	68e8      	ldr	r0, [r5, #12]
 8004314:	6903      	ldr	r3, [r0, #16]
 8004316:	b193      	cbz	r3, 800433e <PE_StateMachine_VDM+0x388>
 8004318:	f3c1 2202 	ubfx	r2, r1, #8, #3
 800431c:	7c28      	ldrb	r0, [r5, #16]
 800431e:	0c09      	lsrs	r1, r1, #16
 8004320:	4798      	blx	r3
 8004322:	2803      	cmp	r0, #3
 8004324:	d008      	beq.n	8004338 <PE_StateMachine_VDM+0x382>
 8004326:	280f      	cmp	r0, #15
 8004328:	d109      	bne.n	800433e <PE_StateMachine_VDM+0x388>
 800432a:	f000 fb4b 	bl	80049c4 <.text_34>
 800432e:	6968      	ldr	r0, [r5, #20]
 8004330:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
 8004334:	6168      	str	r0, [r5, #20]
 8004336:	e004      	b.n	8004342 <PE_StateMachine_VDM+0x38c>
 8004338:	f000 fb18 	bl	800496c <.text_31>
 800433c:	e001      	b.n	8004342 <PE_StateMachine_VDM+0x38c>
 800433e:	f000 fb5a 	bl	80049f6 <.text_39>
 8004342:	2101      	movs	r1, #1
 8004344:	2200      	movs	r2, #0
 8004346:	2003      	movs	r0, #3
 8004348:	9100      	str	r1, [sp, #0]
 800434a:	9202      	str	r2, [sp, #8]
 800434c:	9001      	str	r0, [sp, #4]
 800434e:	4633      	mov	r3, r6
 8004350:	7839      	ldrb	r1, [r7, #0]
 8004352:	220f      	movs	r2, #15
 8004354:	4628      	mov	r0, r5
 8004356:	f7fd f82c 	bl	80013b2 <PE_Send_DataMessage>
 800435a:	e2a6      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 800435c:	f000 fb3d 	bl	80049da <.text_36>
 8004360:	d0d0      	beq.n	8004304 <PE_StateMachine_VDM+0x34e>
 8004362:	68e8      	ldr	r0, [r5, #12]
 8004364:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
 8004368:	f1bc 0f00 	cmp.w	ip, #0
 800436c:	d01e      	beq.n	80043ac <PE_StateMachine_VDM+0x3f6>
 800436e:	7831      	ldrb	r1, [r6, #0]
 8004370:	7c28      	ldrb	r0, [r5, #16]
 8004372:	f205 4a94 	addw	sl, r5, #1172	; 0x494
 8004376:	4653      	mov	r3, sl
 8004378:	464a      	mov	r2, r9
 800437a:	f001 011f 	and.w	r1, r1, #31
 800437e:	47e0      	blx	ip
 8004380:	2803      	cmp	r0, #3
 8004382:	d010      	beq.n	80043a6 <PE_StateMachine_VDM+0x3f0>
 8004384:	280f      	cmp	r0, #15
 8004386:	d111      	bne.n	80043ac <PE_StateMachine_VDM+0x3f6>
 8004388:	f000 fb22 	bl	80049d0 <.text_35>
 800438c:	2000      	movs	r0, #0
 800438e:	f899 1000 	ldrb.w	r1, [r9]
 8004392:	4288      	cmp	r0, r1
 8004394:	d20c      	bcs.n	80043b0 <PE_StateMachine_VDM+0x3fa>
 8004396:	f85a 2020 	ldr.w	r2, [sl, r0, lsl #2]
 800439a:	a904      	add	r1, sp, #16
 800439c:	1c64      	adds	r4, r4, #1
 800439e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 80043a2:	1c40      	adds	r0, r0, #1
 80043a4:	e7f3      	b.n	800438e <PE_StateMachine_VDM+0x3d8>
 80043a6:	f000 fae1 	bl	800496c <.text_31>
 80043aa:	e001      	b.n	80043b0 <PE_StateMachine_VDM+0x3fa>
 80043ac:	f000 fb23 	bl	80049f6 <.text_39>
 80043b0:	2000      	movs	r0, #0
 80043b2:	6832      	ldr	r2, [r6, #0]
 80043b4:	2103      	movs	r1, #3
 80043b6:	b2e4      	uxtb	r4, r4
 80043b8:	9203      	str	r2, [sp, #12]
 80043ba:	9002      	str	r0, [sp, #8]
 80043bc:	9101      	str	r1, [sp, #4]
 80043be:	9400      	str	r4, [sp, #0]
 80043c0:	ab03      	add	r3, sp, #12
 80043c2:	f000 fac1 	bl	8004948 <.text_28>
 80043c6:	e270      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 80043c8:	6831      	ldr	r1, [r6, #0]
 80043ca:	2001      	movs	r0, #1
 80043cc:	f360 0104 	bfi	r1, r0, #0, #5
 80043d0:	f000 fb16 	bl	8004a00 <.text_40>
 80043d4:	4633      	mov	r3, r6
 80043d6:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80043da:	6030      	str	r0, [r6, #0]
 80043dc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80043e0:	6030      	str	r0, [r6, #0]
 80043e2:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80043e6:	6831      	ldr	r1, [r6, #0]
 80043e8:	f360 411f 	bfi	r1, r0, #16, #16
 80043ec:	6031      	str	r1, [r6, #0]
 80043ee:	6868      	ldr	r0, [r5, #4]
 80043f0:	6801      	ldr	r1, [r0, #0]
 80043f2:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80043f6:	2800      	cmp	r0, #0
 80043f8:	bf1d      	ittte	ne
 80043fa:	6968      	ldrne	r0, [r5, #20]
 80043fc:	0840      	lsrne	r0, r0, #1
 80043fe:	f000 0001 	andne.w	r0, r0, #1
 8004402:	2002      	moveq	r0, #2
 8004404:	9002      	str	r0, [sp, #8]
 8004406:	2101      	movs	r1, #1
 8004408:	2087      	movs	r0, #135	; 0x87
 800440a:	f000 faa8 	bl	800495e <.text_30>
 800440e:	2800      	cmp	r0, #0
 8004410:	d1d9      	bne.n	80043c6 <PE_StateMachine_VDM+0x410>
 8004412:	2050      	movs	r0, #80	; 0x50
 8004414:	e09c      	b.n	8004550 <PE_StateMachine_VDM+0x59a>
 8004416:	f000 fa94 	bl	8004942 <.text_27>
 800441a:	f000 fa8e 	bl	800493a <.text_26>
 800441e:	d160      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 8004420:	f000 fa87 	bl	8004932 <.text_25>
 8004424:	d15d      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 8004426:	f000 fa7c 	bl	8004922 <.text_23>
 800442a:	d05e      	beq.n	80044ea <PE_StateMachine_VDM+0x534>
 800442c:	f000 fa7d 	bl	800492a <.text_24>
 8004430:	d157      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 8004432:	2914      	cmp	r1, #20
 8004434:	d001      	beq.n	800443a <PE_StateMachine_VDM+0x484>
 8004436:	f000 fa8c 	bl	8004952 <.text_29>
 800443a:	f000 fa6c 	bl	8004916 <.text_22>
 800443e:	2a01      	cmp	r2, #1
 8004440:	d14f      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 8004442:	f000 fa5b 	bl	80048fc <.text_20>
 8004446:	d050      	beq.n	80044ea <PE_StateMachine_VDM+0x534>
 8004448:	68ea      	ldr	r2, [r5, #12]
 800444a:	6950      	ldr	r0, [r2, #20]
 800444c:	2800      	cmp	r0, #0
 800444e:	f000 81e8 	beq.w	8004822 <PE_StateMachine_VDM+0x86c>
 8004452:	2c01      	cmp	r4, #1
 8004454:	f040 81e5 	bne.w	8004822 <PE_StateMachine_VDM+0x86c>
 8004458:	7c28      	ldrb	r0, [r5, #16]
 800445a:	aa08      	add	r2, sp, #32
 800445c:	1d89      	adds	r1, r1, #6
 800445e:	f000 fbeb 	bl	8004c38 <PE_SVDM_CheckIdentity>
 8004462:	b948      	cbnz	r0, 8004478 <PE_StateMachine_VDM+0x4c2>
 8004464:	68ec      	ldr	r4, [r5, #12]
 8004466:	7c28      	ldrb	r0, [r5, #16]
 8004468:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800446c:	ab08      	add	r3, sp, #32
 800446e:	2201      	movs	r2, #1
 8004470:	2100      	movs	r1, #0
 8004472:	47c0      	blx	r8
 8004474:	2151      	movs	r1, #81	; 0x51
 8004476:	e09e      	b.n	80045b6 <PE_StateMachine_VDM+0x600>
 8004478:	211b      	movs	r1, #27
 800447a:	e09c      	b.n	80045b6 <PE_StateMachine_VDM+0x600>
 800447c:	f000 fab6 	bl	80049ec <.text_38>
 8004480:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8004484:	f368 0104 	bfi	r1, r8, #0, #5
 8004488:	6031      	str	r1, [r6, #0]
 800448a:	4633      	mov	r3, r6
 800448c:	f360 411f 	bfi	r1, r0, #16, #16
 8004490:	6031      	str	r1, [r6, #0]
 8004492:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004496:	f000 fac1 	bl	8004a1c <.text_41>
 800449a:	bf1d      	ittte	ne
 800449c:	6968      	ldrne	r0, [r5, #20]
 800449e:	0840      	lsrne	r0, r0, #1
 80044a0:	f000 0001 	andne.w	r0, r0, #1
 80044a4:	2002      	moveq	r0, #2
 80044a6:	9002      	str	r0, [sp, #8]
 80044a8:	2101      	movs	r1, #1
 80044aa:	2089      	movs	r0, #137	; 0x89
 80044ac:	f000 fa57 	bl	800495e <.text_30>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d151      	bne.n	8004558 <PE_StateMachine_VDM+0x5a2>
 80044b4:	2052      	movs	r0, #82	; 0x52
 80044b6:	e04b      	b.n	8004550 <PE_StateMachine_VDM+0x59a>
 80044b8:	f000 fa43 	bl	8004942 <.text_27>
 80044bc:	f000 fa3d 	bl	800493a <.text_26>
 80044c0:	d10f      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 80044c2:	f000 fa36 	bl	8004932 <.text_25>
 80044c6:	d10c      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 80044c8:	f000 fa2b 	bl	8004922 <.text_23>
 80044cc:	d00d      	beq.n	80044ea <PE_StateMachine_VDM+0x534>
 80044ce:	f000 fa2c 	bl	800492a <.text_24>
 80044d2:	d106      	bne.n	80044e2 <PE_StateMachine_VDM+0x52c>
 80044d4:	2914      	cmp	r1, #20
 80044d6:	d001      	beq.n	80044dc <PE_StateMachine_VDM+0x526>
 80044d8:	f000 fa3b 	bl	8004952 <.text_29>
 80044dc:	f000 fa1b 	bl	8004916 <.text_22>
 80044e0:	2a02      	cmp	r2, #2
 80044e2:	f040 8113 	bne.w	800470c <PE_StateMachine_VDM+0x756>
 80044e6:	f000 fa09 	bl	80048fc <.text_20>
 80044ea:	f000 810f 	beq.w	800470c <PE_StateMachine_VDM+0x756>
 80044ee:	68ea      	ldr	r2, [r5, #12]
 80044f0:	6990      	ldr	r0, [r2, #24]
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d062      	beq.n	80045bc <PE_StateMachine_VDM+0x606>
 80044f6:	7c28      	ldrb	r0, [r5, #16]
 80044f8:	aa08      	add	r2, sp, #32
 80044fa:	1d89      	adds	r1, r1, #6
 80044fc:	f000 fc24 	bl	8004d48 <PE_SVDM_CheckSVIDs>
 8004500:	4622      	mov	r2, r4
 8004502:	68ec      	ldr	r4, [r5, #12]
 8004504:	7839      	ldrb	r1, [r7, #0]
 8004506:	7c28      	ldrb	r0, [r5, #16]
 8004508:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800450c:	ab08      	add	r3, sp, #32
 800450e:	47c0      	blx	r8
 8004510:	2153      	movs	r1, #83	; 0x53
 8004512:	e050      	b.n	80045b6 <PE_StateMachine_VDM+0x600>
 8004514:	f000 fa6a 	bl	80049ec <.text_38>
 8004518:	2003      	movs	r0, #3
 800451a:	f360 0104 	bfi	r1, r0, #0, #5
 800451e:	6031      	str	r1, [r6, #0]
 8004520:	4633      	mov	r3, r6
 8004522:	8930      	ldrh	r0, [r6, #8]
 8004524:	f360 411f 	bfi	r1, r0, #16, #16
 8004528:	6031      	str	r1, [r6, #0]
 800452a:	6830      	ldr	r0, [r6, #0]
 800452c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004530:	f000 fa74 	bl	8004a1c <.text_41>
 8004534:	bf1d      	ittte	ne
 8004536:	6968      	ldrne	r0, [r5, #20]
 8004538:	0840      	lsrne	r0, r0, #1
 800453a:	f000 0001 	andne.w	r0, r0, #1
 800453e:	2002      	moveq	r0, #2
 8004540:	9002      	str	r0, [sp, #8]
 8004542:	2101      	movs	r1, #1
 8004544:	208b      	movs	r0, #139	; 0x8b
 8004546:	f000 fa0a 	bl	800495e <.text_30>
 800454a:	2800      	cmp	r0, #0
 800454c:	d104      	bne.n	8004558 <PE_StateMachine_VDM+0x5a2>
 800454e:	2053      	movs	r0, #83	; 0x53
 8004550:	7728      	strb	r0, [r5, #28]
 8004552:	83ec      	strh	r4, [r5, #30]
 8004554:	f04f 081e 	mov.w	r8, #30
 8004558:	e1a7      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 800455a:	f000 f9f2 	bl	8004942 <.text_27>
 800455e:	f000 f9ec 	bl	800493a <.text_26>
 8004562:	d159      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 8004564:	f000 f9e5 	bl	8004932 <.text_25>
 8004568:	d156      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 800456a:	f000 f9da 	bl	8004922 <.text_23>
 800456e:	d056      	beq.n	800461e <PE_StateMachine_VDM+0x668>
 8004570:	f000 f9db 	bl	800492a <.text_24>
 8004574:	d150      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 8004576:	2914      	cmp	r1, #20
 8004578:	d001      	beq.n	800457e <PE_StateMachine_VDM+0x5c8>
 800457a:	f000 f9ea 	bl	8004952 <.text_29>
 800457e:	f000 f9ca 	bl	8004916 <.text_22>
 8004582:	2a03      	cmp	r2, #3
 8004584:	d148      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 8004586:	f000 f9b9 	bl	80048fc <.text_20>
 800458a:	d048      	beq.n	800461e <PE_StateMachine_VDM+0x668>
 800458c:	68ea      	ldr	r2, [r5, #12]
 800458e:	69d0      	ldr	r0, [r2, #28]
 8004590:	2800      	cmp	r0, #0
 8004592:	d013      	beq.n	80045bc <PE_StateMachine_VDM+0x606>
 8004594:	1d8a      	adds	r2, r1, #6
 8004596:	6831      	ldr	r1, [r6, #0]
 8004598:	7c28      	ldrb	r0, [r5, #16]
 800459a:	ab08      	add	r3, sp, #32
 800459c:	0c09      	lsrs	r1, r1, #16
 800459e:	f000 fc07 	bl	8004db0 <PE_SVDM_CheckModes>
 80045a2:	68ee      	ldr	r6, [r5, #12]
 80045a4:	7839      	ldrb	r1, [r7, #0]
 80045a6:	7c28      	ldrb	r0, [r5, #16]
 80045a8:	69f7      	ldr	r7, [r6, #28]
 80045aa:	ab08      	add	r3, sp, #32
 80045ac:	4622      	mov	r2, r4
 80045ae:	47b8      	blx	r7
 80045b0:	2c01      	cmp	r4, #1
 80045b2:	d103      	bne.n	80045bc <PE_StateMachine_VDM+0x606>
 80045b4:	2154      	movs	r1, #84	; 0x54
 80045b6:	7c28      	ldrb	r0, [r5, #16]
 80045b8:	f7fb ffd5 	bl	8000566 <USBPD_PE_Notification>
 80045bc:	e131      	b.n	8004822 <PE_StateMachine_VDM+0x86c>
 80045be:	f000 fa15 	bl	80049ec <.text_38>
 80045c2:	2004      	movs	r0, #4
 80045c4:	f000 fa5b 	bl	8004a7e <.text_43>
 80045c8:	bf1d      	ittte	ne
 80045ca:	6968      	ldrne	r0, [r5, #20]
 80045cc:	0840      	lsrne	r0, r0, #1
 80045ce:	f000 0001 	andne.w	r0, r0, #1
 80045d2:	2002      	moveq	r0, #2
 80045d4:	9002      	str	r0, [sp, #8]
 80045d6:	2101      	movs	r1, #1
 80045d8:	208c      	movs	r0, #140	; 0x8c
 80045da:	f000 f9c0 	bl	800495e <.text_30>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d1ba      	bne.n	8004558 <PE_StateMachine_VDM+0x5a2>
 80045e2:	2054      	movs	r0, #84	; 0x54
 80045e4:	7728      	strb	r0, [r5, #28]
 80045e6:	2134      	movs	r1, #52	; 0x34
 80045e8:	e053      	b.n	8004692 <PE_StateMachine_VDM+0x6dc>
 80045ea:	f000 f9aa 	bl	8004942 <.text_27>
 80045ee:	f000 f9a4 	bl	800493a <.text_26>
 80045f2:	f04f 0934 	mov.w	r9, #52	; 0x34
 80045f6:	d10f      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 80045f8:	f000 f99b 	bl	8004932 <.text_25>
 80045fc:	d10c      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 80045fe:	f000 f990 	bl	8004922 <.text_23>
 8004602:	d00c      	beq.n	800461e <PE_StateMachine_VDM+0x668>
 8004604:	f000 f991 	bl	800492a <.text_24>
 8004608:	d106      	bne.n	8004618 <PE_StateMachine_VDM+0x662>
 800460a:	2914      	cmp	r1, #20
 800460c:	d001      	beq.n	8004612 <PE_StateMachine_VDM+0x65c>
 800460e:	f000 f9a0 	bl	8004952 <.text_29>
 8004612:	f000 fa57 	bl	8004ac4 <.text_44>
 8004616:	2904      	cmp	r1, #4
 8004618:	d178      	bne.n	800470c <PE_StateMachine_VDM+0x756>
 800461a:	f000 f96f 	bl	80048fc <.text_20>
 800461e:	d075      	beq.n	800470c <PE_StateMachine_VDM+0x756>
 8004620:	2c01      	cmp	r4, #1
 8004622:	d00a      	beq.n	800463a <PE_StateMachine_VDM+0x684>
 8004624:	d312      	bcc.n	800464c <PE_StateMachine_VDM+0x696>
 8004626:	2c03      	cmp	r4, #3
 8004628:	d00a      	beq.n	8004640 <PE_StateMachine_VDM+0x68a>
 800462a:	bf3f      	itttt	cc
 800462c:	6968      	ldrcc	r0, [r5, #20]
 800462e:	f020 00e0 	biccc.w	r0, r0, #224	; 0xe0
 8004632:	6168      	strcc	r0, [r5, #20]
 8004634:	f04f 0936 	movcc.w	r9, #54	; 0x36
 8004638:	e008      	b.n	800464c <PE_StateMachine_VDM+0x696>
 800463a:	f04f 0935 	mov.w	r9, #53	; 0x35
 800463e:	e005      	b.n	800464c <PE_StateMachine_VDM+0x696>
 8004640:	6968      	ldr	r0, [r5, #20]
 8004642:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
 8004646:	6168      	str	r0, [r5, #20]
 8004648:	f04f 0937 	mov.w	r9, #55	; 0x37
 800464c:	7c28      	ldrb	r0, [r5, #16]
 800464e:	4649      	mov	r1, r9
 8004650:	f7fb ff89 	bl	8000566 <USBPD_PE_Notification>
 8004654:	68e8      	ldr	r0, [r5, #12]
 8004656:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800465a:	f1b8 0f00 	cmp.w	r8, #0
 800465e:	d002      	beq.n	8004666 <PE_StateMachine_VDM+0x6b0>
 8004660:	f000 f950 	bl	8004904 <.text_21>
 8004664:	47c0      	blx	r8
 8004666:	e0dc      	b.n	8004822 <PE_StateMachine_VDM+0x86c>
 8004668:	f000 f9c0 	bl	80049ec <.text_38>
 800466c:	2005      	movs	r0, #5
 800466e:	f000 fa06 	bl	8004a7e <.text_43>
 8004672:	bf1d      	ittte	ne
 8004674:	6968      	ldrne	r0, [r5, #20]
 8004676:	0840      	lsrne	r0, r0, #1
 8004678:	f000 0001 	andne.w	r0, r0, #1
 800467c:	2002      	moveq	r0, #2
 800467e:	9002      	str	r0, [sp, #8]
 8004680:	2101      	movs	r1, #1
 8004682:	208d      	movs	r0, #141	; 0x8d
 8004684:	f000 f96b 	bl	800495e <.text_30>
 8004688:	2800      	cmp	r0, #0
 800468a:	d10a      	bne.n	80046a2 <PE_StateMachine_VDM+0x6ec>
 800468c:	2055      	movs	r0, #85	; 0x55
 800468e:	7728      	strb	r0, [r5, #28]
 8004690:	2155      	movs	r1, #85	; 0x55
 8004692:	7c28      	ldrb	r0, [r5, #16]
 8004694:	f7fb ff67 	bl	8000566 <USBPD_PE_Notification>
 8004698:	f248 0032 	movw	r0, #32818	; 0x8032
 800469c:	83e8      	strh	r0, [r5, #30]
 800469e:	f04f 0832 	mov.w	r8, #50	; 0x32
 80046a2:	e102      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 80046a4:	f000 f94d 	bl	8004942 <.text_27>
 80046a8:	f000 f947 	bl	800493a <.text_26>
 80046ac:	d12e      	bne.n	800470c <PE_StateMachine_VDM+0x756>
 80046ae:	f000 f940 	bl	8004932 <.text_25>
 80046b2:	d12b      	bne.n	800470c <PE_StateMachine_VDM+0x756>
 80046b4:	f3c2 3002 	ubfx	r0, r2, #12, #3
 80046b8:	b340      	cbz	r0, 800470c <PE_StateMachine_VDM+0x756>
 80046ba:	f000 f936 	bl	800492a <.text_24>
 80046be:	d125      	bne.n	800470c <PE_StateMachine_VDM+0x756>
 80046c0:	2914      	cmp	r1, #20
 80046c2:	d001      	beq.n	80046c8 <PE_StateMachine_VDM+0x712>
 80046c4:	f000 f945 	bl	8004952 <.text_29>
 80046c8:	f000 f9fc 	bl	8004ac4 <.text_44>
 80046cc:	2905      	cmp	r1, #5
 80046ce:	d11d      	bne.n	800470c <PE_StateMachine_VDM+0x756>
 80046d0:	f3c0 1481 	ubfx	r4, r0, #6, #2
 80046d4:	b1d4      	cbz	r4, 800470c <PE_StateMachine_VDM+0x756>
 80046d6:	2c01      	cmp	r4, #1
 80046d8:	d004      	beq.n	80046e4 <PE_StateMachine_VDM+0x72e>
 80046da:	d309      	bcc.n	80046f0 <PE_StateMachine_VDM+0x73a>
 80046dc:	2c03      	cmp	r4, #3
 80046de:	d005      	beq.n	80046ec <PE_StateMachine_VDM+0x736>
 80046e0:	d302      	bcc.n	80046e8 <PE_StateMachine_VDM+0x732>
 80046e2:	e005      	b.n	80046f0 <PE_StateMachine_VDM+0x73a>
 80046e4:	2156      	movs	r1, #86	; 0x56
 80046e6:	e004      	b.n	80046f2 <PE_StateMachine_VDM+0x73c>
 80046e8:	2157      	movs	r1, #87	; 0x57
 80046ea:	e002      	b.n	80046f2 <PE_StateMachine_VDM+0x73c>
 80046ec:	2158      	movs	r1, #88	; 0x58
 80046ee:	e000      	b.n	80046f2 <PE_StateMachine_VDM+0x73c>
 80046f0:	2155      	movs	r1, #85	; 0x55
 80046f2:	7c28      	ldrb	r0, [r5, #16]
 80046f4:	f7fb ff37 	bl	8000566 <USBPD_PE_Notification>
 80046f8:	68e8      	ldr	r0, [r5, #12]
 80046fa:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 80046fe:	f1b8 0f00 	cmp.w	r8, #0
 8004702:	d002      	beq.n	800470a <PE_StateMachine_VDM+0x754>
 8004704:	f000 f8fe 	bl	8004904 <.text_21>
 8004708:	47c0      	blx	r8
 800470a:	e08a      	b.n	8004822 <PE_StateMachine_VDM+0x86c>
 800470c:	f89b 0000 	ldrb.w	r0, [fp]
 8004710:	f000 001f 	and.w	r0, r0, #31
 8004714:	2810      	cmp	r0, #16
 8004716:	f000 808d 	beq.w	8004834 <PE_StateMachine_VDM+0x87e>
 800471a:	f000 f963 	bl	80049e4 <.text_37>
 800471e:	d1c0      	bne.n	80046a2 <PE_StateMachine_VDM+0x6ec>
 8004720:	e09e      	b.n	8004860 <PE_StateMachine_VDM+0x8aa>
 8004722:	2100      	movs	r1, #0
 8004724:	f88d 100c 	strb.w	r1, [sp, #12]
 8004728:	6830      	ldr	r0, [r6, #0]
 800472a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800472e:	6030      	str	r0, [r6, #0]
 8004730:	6831      	ldr	r1, [r6, #0]
 8004732:	f000 f986 	bl	8004a42 <.text_42>
 8004736:	f8d0 c030 	ldr.w	ip, [r0, #48]	; 0x30
 800473a:	f1bc 0f00 	cmp.w	ip, #0
 800473e:	d008      	beq.n	8004752 <PE_StateMachine_VDM+0x79c>
 8004740:	a805      	add	r0, sp, #20
 8004742:	9000      	str	r0, [sp, #0]
 8004744:	ab03      	add	r3, sp, #12
 8004746:	7832      	ldrb	r2, [r6, #0]
 8004748:	7839      	ldrb	r1, [r7, #0]
 800474a:	7c28      	ldrb	r0, [r5, #16]
 800474c:	f002 021f 	and.w	r2, r2, #31
 8004750:	47e0      	blx	ip
 8004752:	f000 f9bf 	bl	8004ad4 <.text_45>
 8004756:	bf1d      	ittte	ne
 8004758:	6968      	ldrne	r0, [r5, #20]
 800475a:	0840      	lsrne	r0, r0, #1
 800475c:	f000 0001 	andne.w	r0, r0, #1
 8004760:	2002      	moveq	r0, #2
 8004762:	9002      	str	r0, [sp, #8]
 8004764:	208f      	movs	r0, #143	; 0x8f
 8004766:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800476a:	9100      	str	r1, [sp, #0]
 800476c:	9001      	str	r0, [sp, #4]
 800476e:	220f      	movs	r2, #15
 8004770:	7839      	ldrb	r1, [r7, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	f7fc fe1d 	bl	80013b2 <PE_Send_DataMessage>
 8004778:	2800      	cmp	r0, #0
 800477a:	d104      	bne.n	8004786 <PE_StateMachine_VDM+0x7d0>
 800477c:	205a      	movs	r0, #90	; 0x5a
 800477e:	7728      	strb	r0, [r5, #28]
 8004780:	83ec      	strh	r4, [r5, #30]
 8004782:	f04f 081e 	mov.w	r8, #30
 8004786:	e08e      	b.n	80048a6 <PE_StateMachine_VDM+0x8f0>
 8004788:	f8bb 0000 	ldrh.w	r0, [fp]
 800478c:	0b00      	lsrs	r0, r0, #12
 800478e:	f000 0007 	and.w	r0, r0, #7
 8004792:	1e41      	subs	r1, r0, #1
 8004794:	f88d 1004 	strb.w	r1, [sp, #4]
 8004798:	f000 f8d3 	bl	8004942 <.text_27>
 800479c:	f000 f8cd 	bl	800493a <.text_26>
 80047a0:	d142      	bne.n	8004828 <PE_StateMachine_VDM+0x872>
 80047a2:	f000 f8c6 	bl	8004932 <.text_25>
 80047a6:	d13f      	bne.n	8004828 <PE_StateMachine_VDM+0x872>
 80047a8:	f000 f8bb 	bl	8004922 <.text_23>
 80047ac:	d03c      	beq.n	8004828 <PE_StateMachine_VDM+0x872>
 80047ae:	f000 f8bc 	bl	800492a <.text_24>
 80047b2:	d139      	bne.n	8004828 <PE_StateMachine_VDM+0x872>
 80047b4:	2914      	cmp	r1, #20
 80047b6:	d001      	beq.n	80047bc <PE_StateMachine_VDM+0x806>
 80047b8:	f000 f8cb 	bl	8004952 <.text_29>
 80047bc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80047c0:	7882      	ldrb	r2, [r0, #2]
 80047c2:	6870      	ldr	r0, [r6, #4]
 80047c4:	f002 011f 	and.w	r1, r2, #31
 80047c8:	4281      	cmp	r1, r0
 80047ca:	d12d      	bne.n	8004828 <PE_StateMachine_VDM+0x872>
 80047cc:	f3c2 1081 	ubfx	r0, r2, #6, #2
 80047d0:	b350      	cbz	r0, 8004828 <PE_StateMachine_VDM+0x872>
 80047d2:	68e9      	ldr	r1, [r5, #12]
 80047d4:	6b88      	ldr	r0, [r1, #56]	; 0x38
 80047d6:	b320      	cbz	r0, 8004822 <PE_StateMachine_VDM+0x86c>
 80047d8:	2000      	movs	r0, #0
 80047da:	e013      	b.n	8004804 <PE_StateMachine_VDM+0x84e>
 80047dc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80047e0:	0083      	lsls	r3, r0, #2
 80047e2:	18cc      	adds	r4, r1, r3
 80047e4:	3108      	adds	r1, #8
 80047e6:	79a6      	ldrb	r6, [r4, #6]
 80047e8:	f894 c007 	ldrb.w	ip, [r4, #7]
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	7a61      	ldrb	r1, [r4, #9]
 80047f0:	eb06 260c 	add.w	r6, r6, ip, lsl #8
 80047f4:	eb06 4303 	add.w	r3, r6, r3, lsl #16
 80047f8:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 80047fc:	ab02      	add	r3, sp, #8
 80047fe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8004802:	1c40      	adds	r0, r0, #1
 8004804:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004808:	4288      	cmp	r0, r1
 800480a:	d3e7      	bcc.n	80047dc <PE_StateMachine_VDM+0x826>
 800480c:	a802      	add	r0, sp, #8
 800480e:	9000      	str	r0, [sp, #0]
 8004810:	ab01      	add	r3, sp, #4
 8004812:	68ec      	ldr	r4, [r5, #12]
 8004814:	7839      	ldrb	r1, [r7, #0]
 8004816:	7c28      	ldrb	r0, [r5, #16]
 8004818:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800481c:	f002 021f 	and.w	r2, r2, #31
 8004820:	47c0      	blx	r8
 8004822:	2000      	movs	r0, #0
 8004824:	83e8      	strh	r0, [r5, #30]
 8004826:	e01b      	b.n	8004860 <PE_StateMachine_VDM+0x8aa>
 8004828:	f89b 1000 	ldrb.w	r1, [fp]
 800482c:	f001 011f 	and.w	r1, r1, #31
 8004830:	2910      	cmp	r1, #16
 8004832:	d112      	bne.n	800485a <PE_StateMachine_VDM+0x8a4>
 8004834:	f89a 0000 	ldrb.w	r0, [sl]
 8004838:	2814      	cmp	r0, #20
 800483a:	d004      	beq.n	8004846 <PE_StateMachine_VDM+0x890>
 800483c:	2114      	movs	r1, #20
 800483e:	f88a 1000 	strb.w	r1, [sl]
 8004842:	f000 f889 	bl	8004958 <.text_29+0x6>
 8004846:	2000      	movs	r0, #0
 8004848:	83e8      	strh	r0, [r5, #30]
 800484a:	2103      	movs	r1, #3
 800484c:	7469      	strb	r1, [r5, #17]
 800484e:	4680      	mov	r8, r0
 8004850:	7c28      	ldrb	r0, [r5, #16]
 8004852:	2159      	movs	r1, #89	; 0x59
 8004854:	f7fb fe87 	bl	8000566 <USBPD_PE_Notification>
 8004858:	e027      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 800485a:	f000 f8c3 	bl	80049e4 <.text_37>
 800485e:	d124      	bne.n	80048aa <PE_StateMachine_VDM+0x8f4>
 8004860:	2103      	movs	r1, #3
 8004862:	7469      	strb	r1, [r5, #17]
 8004864:	f04f 0800 	mov.w	r8, #0
 8004868:	e01f      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 800486a:	2000      	movs	r0, #0
 800486c:	f88d 000c 	strb.w	r0, [sp, #12]
 8004870:	f000 f8bc 	bl	80049ec <.text_38>
 8004874:	f000 f8e5 	bl	8004a42 <.text_42>
 8004878:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800487a:	b11b      	cbz	r3, 8004884 <PE_StateMachine_VDM+0x8ce>
 800487c:	7c28      	ldrb	r0, [r5, #16]
 800487e:	aa05      	add	r2, sp, #20
 8004880:	a903      	add	r1, sp, #12
 8004882:	4798      	blx	r3
 8004884:	f000 f926 	bl	8004ad4 <.text_45>
 8004888:	bf1d      	ittte	ne
 800488a:	6968      	ldrne	r0, [r5, #20]
 800488c:	0840      	lsrne	r0, r0, #1
 800488e:	f000 0001 	andne.w	r0, r0, #1
 8004892:	2002      	moveq	r0, #2
 8004894:	f000 f965 	bl	8004b62 <.text_47>
 8004898:	7839      	ldrb	r1, [r7, #0]
 800489a:	4628      	mov	r0, r5
 800489c:	f7fc fd89 	bl	80013b2 <PE_Send_DataMessage>
 80048a0:	b908      	cbnz	r0, 80048a6 <PE_StateMachine_VDM+0x8f0>
 80048a2:	205a      	movs	r0, #90	; 0x5a
 80048a4:	7728      	strb	r0, [r5, #28]
 80048a6:	2100      	movs	r1, #0
 80048a8:	7079      	strb	r1, [r7, #1]
 80048aa:	4640      	mov	r0, r8
 80048ac:	b017      	add	sp, #92	; 0x5c
 80048ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b2:	1b00      	subs	r0, r0, r4
 80048b4:	f889 0001 	strb.w	r0, [r9, #1]
 80048b8:	b2e0      	uxtb	r0, r4
 80048ba:	280c      	cmp	r0, #12
 80048bc:	f47f ac64 	bne.w	8004188 <PE_StateMachine_VDM+0x1d2>
 80048c0:	6831      	ldr	r1, [r6, #0]
 80048c2:	9104      	str	r1, [sp, #16]
 80048c4:	2000      	movs	r0, #0
 80048c6:	2277      	movs	r2, #119	; 0x77
 80048c8:	2107      	movs	r1, #7
 80048ca:	9002      	str	r0, [sp, #8]
 80048cc:	9201      	str	r2, [sp, #4]
 80048ce:	9100      	str	r1, [sp, #0]
 80048d0:	ab04      	add	r3, sp, #16
 80048d2:	f000 f839 	bl	8004948 <.text_28>
 80048d6:	f248 000f 	movw	r0, #32783	; 0x800f
 80048da:	83e8      	strh	r0, [r5, #30]
 80048dc:	e7e5      	b.n	80048aa <PE_StateMachine_VDM+0x8f4>
 80048de:	b2d1      	uxtb	r1, r2
 80048e0:	1a80      	subs	r0, r0, r2
 80048e2:	290c      	cmp	r1, #12
 80048e4:	f889 0001 	strb.w	r0, [r9, #1]
 80048e8:	f47f ac9e 	bne.w	8004228 <PE_StateMachine_VDM+0x272>
 80048ec:	2000      	movs	r0, #0
 80048ee:	2177      	movs	r1, #119	; 0x77
 80048f0:	2207      	movs	r2, #7
 80048f2:	9002      	str	r0, [sp, #8]
 80048f4:	9101      	str	r1, [sp, #4]
 80048f6:	9200      	str	r2, [sp, #0]
 80048f8:	ab05      	add	r3, sp, #20
 80048fa:	e7ea      	b.n	80048d2 <PE_StateMachine_VDM+0x91c>

080048fc <.text_20>:
 80048fc:	f3c0 1481 	ubfx	r4, r0, #6, #2
 8004900:	2c00      	cmp	r4, #0
 8004902:	4770      	bx	lr

08004904 <.text_21>:
 8004904:	6833      	ldr	r3, [r6, #0]
 8004906:	f3c3 2002 	ubfx	r0, r3, #8, #3
 800490a:	9000      	str	r0, [sp, #0]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	7839      	ldrb	r1, [r7, #0]
 8004910:	7c28      	ldrb	r0, [r5, #16]
 8004912:	4622      	mov	r2, r4
 8004914:	4770      	bx	lr

08004916 <.text_22>:
 8004916:	f8db 1004 	ldr.w	r1, [fp, #4]
 800491a:	7888      	ldrb	r0, [r1, #2]
 800491c:	f000 021f 	and.w	r2, r0, #31
 8004920:	4770      	bx	lr

08004922 <.text_23>:
 8004922:	f3c2 3002 	ubfx	r0, r2, #12, #3
 8004926:	2800      	cmp	r0, #0
 8004928:	4770      	bx	lr

0800492a <.text_24>:
 800492a:	f002 021f 	and.w	r2, r2, #31
 800492e:	2a0f      	cmp	r2, #15
 8004930:	4770      	bx	lr

08004932 <.text_25>:
 8004932:	f8bb 2000 	ldrh.w	r2, [fp]
 8004936:	0bd0      	lsrs	r0, r2, #15
 8004938:	4770      	bx	lr

0800493a <.text_26>:
 800493a:	f89a 1000 	ldrb.w	r1, [sl]
 800493e:	4281      	cmp	r1, r0
 8004940:	4770      	bx	lr

08004942 <.text_27>:
 8004942:	7838      	ldrb	r0, [r7, #0]
 8004944:	f7fc b84a 	b.w	80009dc <PE_Convert_SOPRxEvent>

08004948 <.text_28>:
 8004948:	7839      	ldrb	r1, [r7, #0]
 800494a:	220f      	movs	r2, #15
 800494c:	4628      	mov	r0, r5
 800494e:	f7fc bd30 	b.w	80013b2 <PE_Send_DataMessage>

08004952 <.text_29>:
 8004952:	2014      	movs	r0, #20
 8004954:	f88a 0000 	strb.w	r0, [sl]
 8004958:	4628      	mov	r0, r5
 800495a:	f7fc b80c 	b.w	8000976 <PE_Clear_RxEvent>

0800495e <.text_30>:
 800495e:	9100      	str	r1, [sp, #0]
 8004960:	9001      	str	r0, [sp, #4]
 8004962:	220f      	movs	r2, #15
 8004964:	7839      	ldrb	r1, [r7, #0]
 8004966:	4628      	mov	r0, r5
 8004968:	f7fc bd23 	b.w	80013b2 <PE_Send_DataMessage>

0800496c <.text_31>:
 800496c:	6830      	ldr	r0, [r6, #0]
 800496e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8004972:	6030      	str	r0, [r6, #0]
 8004974:	4770      	bx	lr

08004976 <.text_32>:
 8004976:	f360 0104 	bfi	r1, r0, #0, #5
 800497a:	6031      	str	r1, [r6, #0]
 800497c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004980:	6031      	str	r1, [r6, #0]
 8004982:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004986:	6868      	ldr	r0, [r5, #4]
 8004988:	6802      	ldr	r2, [r0, #0]
 800498a:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800498e:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004992:	6031      	str	r1, [r6, #0]
 8004994:	6868      	ldr	r0, [r5, #4]
 8004996:	6802      	ldr	r2, [r0, #0]
 8004998:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 800499c:	4770      	bx	lr

0800499e <.text_33>:
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80049a4:	6031      	str	r1, [r6, #0]
 80049a6:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 80049aa:	6868      	ldr	r0, [r5, #4]
 80049ac:	6802      	ldr	r2, [r0, #0]
 80049ae:	f3c2 1040 	ubfx	r0, r2, #5, #1
 80049b2:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 80049b6:	6031      	str	r1, [r6, #0]
 80049b8:	6868      	ldr	r0, [r5, #4]
 80049ba:	7802      	ldrb	r2, [r0, #0]
 80049bc:	f002 020b 	and.w	r2, r2, #11
 80049c0:	2a09      	cmp	r2, #9
 80049c2:	4770      	bx	lr

080049c4 <.text_34>:
 80049c4:	6831      	ldr	r1, [r6, #0]
 80049c6:	2001      	movs	r0, #1
 80049c8:	f360 1187 	bfi	r1, r0, #6, #2
 80049cc:	6031      	str	r1, [r6, #0]
 80049ce:	4770      	bx	lr

080049d0 <.text_35>:
 80049d0:	6831      	ldr	r1, [r6, #0]
 80049d2:	f364 1187 	bfi	r1, r4, #6, #2
 80049d6:	6031      	str	r1, [r6, #0]
 80049d8:	4770      	bx	lr

080049da <.text_36>:
 80049da:	8be8      	ldrh	r0, [r5, #30]
 80049dc:	2401      	movs	r4, #1
 80049de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80049e2:	4770      	bx	lr

080049e4 <.text_37>:
 80049e4:	8be8      	ldrh	r0, [r5, #30]
 80049e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80049ea:	4770      	bx	lr

080049ec <.text_38>:
 80049ec:	6831      	ldr	r1, [r6, #0]
 80049ee:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80049f2:	6031      	str	r1, [r6, #0]
 80049f4:	4770      	bx	lr

080049f6 <.text_39>:
 80049f6:	6831      	ldr	r1, [r6, #0]
 80049f8:	f368 1187 	bfi	r1, r8, #6, #2
 80049fc:	6031      	str	r1, [r6, #0]
 80049fe:	4770      	bx	lr

08004a00 <.text_40>:
 8004a00:	6031      	str	r1, [r6, #0]
 8004a02:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004a06:	6030      	str	r0, [r6, #0]
 8004a08:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8004a0c:	6869      	ldr	r1, [r5, #4]
 8004a0e:	680a      	ldr	r2, [r1, #0]
 8004a10:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004a14:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8004a18:	6030      	str	r0, [r6, #0]
 8004a1a:	4770      	bx	lr

08004a1c <.text_41>:
 8004a1c:	6030      	str	r0, [r6, #0]
 8004a1e:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8004a22:	6869      	ldr	r1, [r5, #4]
 8004a24:	680a      	ldr	r2, [r1, #0]
 8004a26:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004a2a:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8004a2e:	6030      	str	r0, [r6, #0]
 8004a30:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004a34:	6030      	str	r0, [r6, #0]
 8004a36:	6868      	ldr	r0, [r5, #4]
 8004a38:	6801      	ldr	r1, [r0, #0]
 8004a3a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	4770      	bx	lr

08004a42 <.text_42>:
 8004a42:	6870      	ldr	r0, [r6, #4]
 8004a44:	f360 0104 	bfi	r1, r0, #0, #5
 8004a48:	6031      	str	r1, [r6, #0]
 8004a4a:	8930      	ldrh	r0, [r6, #8]
 8004a4c:	f360 411f 	bfi	r1, r0, #16, #16
 8004a50:	6031      	str	r1, [r6, #0]
 8004a52:	6830      	ldr	r0, [r6, #0]
 8004a54:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004a58:	6030      	str	r0, [r6, #0]
 8004a5a:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8004a5e:	6869      	ldr	r1, [r5, #4]
 8004a60:	680a      	ldr	r2, [r1, #0]
 8004a62:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004a66:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8004a6a:	6030      	str	r0, [r6, #0]
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	6831      	ldr	r1, [r6, #0]
 8004a70:	f360 210a 	bfi	r1, r0, #8, #3
 8004a74:	6031      	str	r1, [r6, #0]
 8004a76:	6832      	ldr	r2, [r6, #0]
 8004a78:	9204      	str	r2, [sp, #16]
 8004a7a:	68e8      	ldr	r0, [r5, #12]
 8004a7c:	4770      	bx	lr

08004a7e <.text_43>:
 8004a7e:	f360 0104 	bfi	r1, r0, #0, #5
 8004a82:	6031      	str	r1, [r6, #0]
 8004a84:	4633      	mov	r3, r6
 8004a86:	8930      	ldrh	r0, [r6, #8]
 8004a88:	f360 411f 	bfi	r1, r0, #16, #16
 8004a8c:	6031      	str	r1, [r6, #0]
 8004a8e:	6830      	ldr	r0, [r6, #0]
 8004a90:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8004a9a:	6869      	ldr	r1, [r5, #4]
 8004a9c:	680a      	ldr	r2, [r1, #0]
 8004a9e:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004aa2:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8004aa6:	6030      	str	r0, [r6, #0]
 8004aa8:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004aac:	6969      	ldr	r1, [r5, #20]
 8004aae:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8004ab2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8004ab6:	6030      	str	r0, [r6, #0]
 8004ab8:	6868      	ldr	r0, [r5, #4]
 8004aba:	6801      	ldr	r1, [r0, #0]
 8004abc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	4770      	bx	lr

08004ac4 <.text_44>:
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	7729      	strb	r1, [r5, #28]
 8004ac8:	f8db 0004 	ldr.w	r0, [fp, #4]
 8004acc:	7880      	ldrb	r0, [r0, #2]
 8004ace:	f000 011f 	and.w	r1, r0, #31
 8004ad2:	4770      	bx	lr

08004ad4 <.text_45>:
 8004ad4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004ad8:	1c40      	adds	r0, r0, #1
 8004ada:	f88d 000c 	strb.w	r0, [sp, #12]
 8004ade:	ab04      	add	r3, sp, #16
 8004ae0:	6868      	ldr	r0, [r5, #4]
 8004ae2:	6801      	ldr	r1, [r0, #0]
 8004ae4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	4770      	bx	lr

08004aec <PE_StateMachine_UVDM>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	2914      	cmp	r1, #20
 8004af0:	b08c      	sub	sp, #48	; 0x30
 8004af2:	4604      	mov	r4, r0
 8004af4:	d133      	bne.n	8004b5e <PE_StateMachine_UVDM+0x72>
 8004af6:	68e0      	ldr	r0, [r4, #12]
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bf1c      	itt	ne
 8004afc:	6bc0      	ldrne	r0, [r0, #60]	; 0x3c
 8004afe:	2800      	cmpne	r0, #0
 8004b00:	d02d      	beq.n	8004b5e <PE_StateMachine_UVDM+0x72>
 8004b02:	2100      	movs	r1, #0
 8004b04:	f88d 100c 	strb.w	r1, [sp, #12]
 8004b08:	ab06      	add	r3, sp, #24
 8004b0a:	68e5      	ldr	r5, [r4, #12]
 8004b0c:	7c20      	ldrb	r0, [r4, #16]
 8004b0e:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 8004b10:	aa03      	add	r2, sp, #12
 8004b12:	a904      	add	r1, sp, #16
 8004b14:	47b0      	blx	r6
 8004b16:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004b1a:	9804      	ldr	r0, [sp, #16]
 8004b1c:	1c49      	adds	r1, r1, #1
 8004b1e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004b22:	f88d 100c 	strb.w	r1, [sp, #12]
 8004b26:	9004      	str	r0, [sp, #16]
 8004b28:	f104 0531 	add.w	r5, r4, #49	; 0x31
 8004b2c:	9904      	ldr	r1, [sp, #16]
 8004b2e:	9105      	str	r1, [sp, #20]
 8004b30:	ab05      	add	r3, sp, #20
 8004b32:	6860      	ldr	r0, [r4, #4]
 8004b34:	6801      	ldr	r1, [r0, #0]
 8004b36:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	bf1d      	ittte	ne
 8004b3e:	6960      	ldrne	r0, [r4, #20]
 8004b40:	0840      	lsrne	r0, r0, #1
 8004b42:	f000 0001 	andne.w	r0, r0, #1
 8004b46:	2002      	moveq	r0, #2
 8004b48:	f000 f80b 	bl	8004b62 <.text_47>
 8004b4c:	7829      	ldrb	r1, [r5, #0]
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7fc fc2f 	bl	80013b2 <PE_Send_DataMessage>
 8004b54:	b908      	cbnz	r0, 8004b5a <PE_StateMachine_UVDM+0x6e>
 8004b56:	2059      	movs	r0, #89	; 0x59
 8004b58:	7720      	strb	r0, [r4, #28]
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	7069      	strb	r1, [r5, #1]
 8004b5e:	b00c      	add	sp, #48	; 0x30
 8004b60:	bd70      	pop	{r4, r5, r6, pc}

08004b62 <.text_47>:
 8004b62:	9002      	str	r0, [sp, #8]
 8004b64:	2003      	movs	r0, #3
 8004b66:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004b6a:	9100      	str	r1, [sp, #0]
 8004b6c:	9001      	str	r0, [sp, #4]
 8004b6e:	220f      	movs	r2, #15
 8004b70:	4770      	bx	lr

08004b72 <PE_Check_DataMessageVDM>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	4605      	mov	r5, r0
 8004b76:	6828      	ldr	r0, [r5, #0]
 8004b78:	6841      	ldr	r1, [r0, #4]
 8004b7a:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	bf04      	itt	eq
 8004b82:	68e8      	ldreq	r0, [r5, #12]
 8004b84:	2800      	cmpeq	r0, #0
 8004b86:	d04e      	beq.n	8004c26 <PE_Check_DataMessageVDM+0xb4>
 8004b88:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004b8a:	7888      	ldrb	r0, [r1, #2]
 8004b8c:	78ca      	ldrb	r2, [r1, #3]
 8004b8e:	790b      	ldrb	r3, [r1, #4]
 8004b90:	7949      	ldrb	r1, [r1, #5]
 8004b92:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004b96:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8004b9a:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	0bca      	lsrs	r2, r1, #15
 8004ba2:	f012 0201 	ands.w	r2, r2, #1
 8004ba6:	d012      	beq.n	8004bce <PE_Check_DataMessageVDM+0x5c>
 8004ba8:	2a01      	cmp	r2, #1
 8004baa:	d144      	bne.n	8004c36 <PE_Check_DataMessageVDM+0xc4>
 8004bac:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f8c5 1250 	str.w	r1, [r5, #592]	; 0x250
 8004bb6:	d136      	bne.n	8004c26 <PE_Check_DataMessageVDM+0xb4>
 8004bb8:	6828      	ldr	r0, [r5, #0]
 8004bba:	6841      	ldr	r1, [r0, #4]
 8004bbc:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d030      	beq.n	8004c26 <PE_Check_DataMessageVDM+0xb4>
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004bca:	f7ff b97d 	b.w	8003ec8 <PE_Receive_SVDM>
 8004bce:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004bd0:	0b00      	lsrs	r0, r0, #12
 8004bd2:	f000 0007 	and.w	r0, r0, #7
 8004bd6:	1e42      	subs	r2, r0, #1
 8004bd8:	f885 24ac 	strb.w	r2, [r5, #1196]	; 0x4ac
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f205 4394 	addw	r3, r5, #1172	; 0x494
 8004be2:	e00f      	b.n	8004c04 <PE_Check_DataMessageVDM+0x92>
 8004be4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004be6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004bea:	7994      	ldrb	r4, [r2, #6]
 8004bec:	79d6      	ldrb	r6, [r2, #7]
 8004bee:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 8004bf2:	7a14      	ldrb	r4, [r2, #8]
 8004bf4:	7a52      	ldrb	r2, [r2, #9]
 8004bf6:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004bfa:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 8004bfe:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004c02:	1c40      	adds	r0, r0, #1
 8004c04:	f895 24ac 	ldrb.w	r2, [r5, #1196]	; 0x4ac
 8004c08:	4290      	cmp	r0, r2
 8004c0a:	d3eb      	bcc.n	8004be4 <PE_Check_DataMessageVDM+0x72>
 8004c0c:	68e8      	ldr	r0, [r5, #12]
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	bf1c      	itt	ne
 8004c12:	6c04      	ldrne	r4, [r0, #64]	; 0x40
 8004c14:	2c00      	cmpne	r4, #0
 8004c16:	d006      	beq.n	8004c26 <PE_Check_DataMessageVDM+0xb4>
 8004c18:	7c28      	ldrb	r0, [r5, #16]
 8004c1a:	f205 42ac 	addw	r2, r5, #1196	; 0x4ac
 8004c1e:	47a0      	blx	r4
 8004c20:	b908      	cbnz	r0, 8004c26 <PE_Check_DataMessageVDM+0xb4>
 8004c22:	2003      	movs	r0, #3
 8004c24:	e006      	b.n	8004c34 <PE_Check_DataMessageVDM+0xc2>
 8004c26:	6868      	ldr	r0, [r5, #4]
 8004c28:	7801      	ldrb	r1, [r0, #0]
 8004c2a:	f001 0103 	and.w	r1, r1, #3
 8004c2e:	2902      	cmp	r1, #2
 8004c30:	d101      	bne.n	8004c36 <PE_Check_DataMessageVDM+0xc4>
 8004c32:	2001      	movs	r0, #1
 8004c34:	7468      	strb	r0, [r5, #17]
 8004c36:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004c38 <PE_SVDM_CheckIdentity>:
 8004c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3a:	f000 f8dc 	bl	8004df6 <.text_54>
 8004c3e:	0b24      	lsrs	r4, r4, #12
 8004c40:	f004 0407 	and.w	r4, r4, #7
 8004c44:	1e65      	subs	r5, r4, #1
 8004c46:	2300      	movs	r3, #0
 8004c48:	b2ee      	uxtb	r6, r5
 8004c4a:	2e02      	cmp	r6, #2
 8004c4c:	d96c      	bls.n	8004d28 <PE_SVDM_CheckIdentity+0xf0>
 8004c4e:	780c      	ldrb	r4, [r1, #0]
 8004c50:	784e      	ldrb	r6, [r1, #1]
 8004c52:	788f      	ldrb	r7, [r1, #2]
 8004c54:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004c58:	78ce      	ldrb	r6, [r1, #3]
 8004c5a:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004c5e:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8004c62:	6014      	str	r4, [r2, #0]
 8004c64:	790f      	ldrb	r7, [r1, #4]
 8004c66:	794e      	ldrb	r6, [r1, #5]
 8004c68:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004c6c:	798f      	ldrb	r7, [r1, #6]
 8004c6e:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8004c72:	79ce      	ldrb	r6, [r1, #7]
 8004c74:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8004c78:	6056      	str	r6, [r2, #4]
 8004c7a:	1eed      	subs	r5, r5, #3
 8004c7c:	7a0e      	ldrb	r6, [r1, #8]
 8004c7e:	7a4f      	ldrb	r7, [r1, #9]
 8004c80:	eb06 2707 	add.w	r7, r6, r7, lsl #8
 8004c84:	7a8e      	ldrb	r6, [r1, #10]
 8004c86:	eb07 4606 	add.w	r6, r7, r6, lsl #16
 8004c8a:	7acf      	ldrb	r7, [r1, #11]
 8004c8c:	eb06 6607 	add.w	r6, r6, r7, lsl #24
 8004c90:	6096      	str	r6, [r2, #8]
 8004c92:	b2ee      	uxtb	r6, r5
 8004c94:	2e00      	cmp	r6, #0
 8004c96:	d048      	beq.n	8004d2a <PE_SVDM_CheckIdentity+0xf2>
 8004c98:	f892 6020 	ldrb.w	r6, [r2, #32]
 8004c9c:	0ee7      	lsrs	r7, r4, #27
 8004c9e:	1e6d      	subs	r5, r5, #1
 8004ca0:	f007 0707 	and.w	r7, r7, #7
 8004ca4:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8004ca8:	2f05      	cmp	r7, #5
 8004caa:	f882 6020 	strb.w	r6, [r2, #32]
 8004cae:	d83b      	bhi.n	8004d28 <PE_SVDM_CheckIdentity+0xf0>
 8004cb0:	e8df f007 	tbb	[pc, r7]
 8004cb4:	0903031c 	.word	0x0903031c
 8004cb8:	150f      	.short	0x150f
 8004cba:	f046 0608 	orr.w	r6, r6, #8
 8004cbe:	f000 f836 	bl	8004d2e <.text_50>
 8004cc2:	6196      	str	r6, [r2, #24]
 8004cc4:	e010      	b.n	8004ce8 <PE_SVDM_CheckIdentity+0xb0>
 8004cc6:	f046 0601 	orr.w	r6, r6, #1
 8004cca:	f000 f830 	bl	8004d2e <.text_50>
 8004cce:	60d6      	str	r6, [r2, #12]
 8004cd0:	e00a      	b.n	8004ce8 <PE_SVDM_CheckIdentity+0xb0>
 8004cd2:	f046 0604 	orr.w	r6, r6, #4
 8004cd6:	f000 f82a 	bl	8004d2e <.text_50>
 8004cda:	6156      	str	r6, [r2, #20]
 8004cdc:	e004      	b.n	8004ce8 <PE_SVDM_CheckIdentity+0xb0>
 8004cde:	f046 0602 	orr.w	r6, r6, #2
 8004ce2:	f000 f824 	bl	8004d2e <.text_50>
 8004ce6:	6116      	str	r6, [r2, #16]
 8004ce8:	b2ed      	uxtb	r5, r5
 8004cea:	b1f5      	cbz	r5, 8004d2a <PE_SVDM_CheckIdentity+0xf2>
 8004cec:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8004cee:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004cf2:	2802      	cmp	r0, #2
 8004cf4:	d319      	bcc.n	8004d2a <PE_SVDM_CheckIdentity+0xf2>
 8004cf6:	0de4      	lsrs	r4, r4, #23
 8004cf8:	f014 0407 	ands.w	r4, r4, #7
 8004cfc:	d015      	beq.n	8004d2a <PE_SVDM_CheckIdentity+0xf2>
 8004cfe:	1e64      	subs	r4, r4, #1
 8004d00:	2c02      	cmp	r4, #2
 8004d02:	d811      	bhi.n	8004d28 <PE_SVDM_CheckIdentity+0xf0>
 8004d04:	f892 4020 	ldrb.w	r4, [r2, #32]
 8004d08:	f044 0410 	orr.w	r4, r4, #16
 8004d0c:	f882 4020 	strb.w	r4, [r2, #32]
 8004d10:	7c08      	ldrb	r0, [r1, #16]
 8004d12:	7c4c      	ldrb	r4, [r1, #17]
 8004d14:	eb00 2504 	add.w	r5, r0, r4, lsl #8
 8004d18:	7c88      	ldrb	r0, [r1, #18]
 8004d1a:	7cc9      	ldrb	r1, [r1, #19]
 8004d1c:	eb05 4500 	add.w	r5, r5, r0, lsl #16
 8004d20:	eb05 6501 	add.w	r5, r5, r1, lsl #24
 8004d24:	61d5      	str	r5, [r2, #28]
 8004d26:	e000      	b.n	8004d2a <PE_SVDM_CheckIdentity+0xf2>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d2e <.text_50>:
 8004d2e:	f882 6020 	strb.w	r6, [r2, #32]
 8004d32:	7b4f      	ldrb	r7, [r1, #13]
 8004d34:	7b0e      	ldrb	r6, [r1, #12]
 8004d36:	eb06 2707 	add.w	r7, r6, r7, lsl #8
 8004d3a:	7b8e      	ldrb	r6, [r1, #14]
 8004d3c:	eb07 4606 	add.w	r6, r7, r6, lsl #16
 8004d40:	7bcf      	ldrb	r7, [r1, #15]
 8004d42:	eb06 6607 	add.w	r6, r6, r7, lsl #24
 8004d46:	4770      	bx	lr

08004d48 <PE_SVDM_CheckSVIDs>:
 8004d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4a:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <.text_55>)
 8004d4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004d50:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8004d52:	0b1b      	lsrs	r3, r3, #12
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	1e5b      	subs	r3, r3, #1
 8004d5a:	2400      	movs	r4, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2500      	movs	r5, #0
 8004d60:	7614      	strb	r4, [r2, #24]
 8004d62:	7654      	strb	r4, [r2, #25]
 8004d64:	f000 f816 	bl	8004d94 <.text_52>
 8004d68:	bf19      	ittee	ne
 8004d6a:	1c76      	addne	r6, r6, #1
 8004d6c:	7616      	strbne	r6, [r2, #24]
 8004d6e:	2501      	moveq	r5, #1
 8004d70:	7655      	strbeq	r5, [r2, #25]
 8004d72:	1ca4      	adds	r4, r4, #2
 8004d74:	b2e4      	uxtb	r4, r4
 8004d76:	f000 f80d 	bl	8004d94 <.text_52>
 8004d7a:	bf19      	ittee	ne
 8004d7c:	1c76      	addne	r6, r6, #1
 8004d7e:	7616      	strbne	r6, [r2, #24]
 8004d80:	2501      	moveq	r5, #1
 8004d82:	7655      	strbeq	r5, [r2, #25]
 8004d84:	1ca4      	adds	r4, r4, #2
 8004d86:	b2e4      	uxtb	r4, r4
 8004d88:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004d8c:	d201      	bcs.n	8004d92 <PE_SVDM_CheckSVIDs+0x4a>
 8004d8e:	0028      	movs	r0, r5
 8004d90:	d0e8      	beq.n	8004d64 <PE_SVDM_CheckSVIDs+0x1c>
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d94 <.text_52>:
 8004d94:	1c4e      	adds	r6, r1, #1
 8004d96:	5d08      	ldrb	r0, [r1, r4]
 8004d98:	5d37      	ldrb	r7, [r6, r4]
 8004d9a:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004d9e:	7e10      	ldrb	r0, [r2, #24]
 8004da0:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8004da4:	7e16      	ldrb	r6, [r2, #24]
 8004da6:	4637      	mov	r7, r6
 8004da8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004dac:	2800      	cmp	r0, #0
 8004dae:	4770      	bx	lr

08004db0 <PE_SVDM_CheckModes>:
 8004db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db2:	f000 f820 	bl	8004df6 <.text_54>
 8004db6:	8399      	strh	r1, [r3, #28]
 8004db8:	0b24      	lsrs	r4, r4, #12
 8004dba:	f004 0407 	and.w	r4, r4, #7
 8004dbe:	1e60      	subs	r0, r4, #1
 8004dc0:	2400      	movs	r4, #0
 8004dc2:	b2c0      	uxtb	r0, r0
 8004dc4:	601c      	str	r4, [r3, #0]
 8004dc6:	1911      	adds	r1, r2, r4
 8004dc8:	780d      	ldrb	r5, [r1, #0]
 8004dca:	784e      	ldrb	r6, [r1, #1]
 8004dcc:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8004dd0:	788d      	ldrb	r5, [r1, #2]
 8004dd2:	78c9      	ldrb	r1, [r1, #3]
 8004dd4:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004dd8:	681d      	ldr	r5, [r3, #0]
 8004dda:	eb03 0685 	add.w	r6, r3, r5, lsl #2
 8004dde:	eb07 6701 	add.w	r7, r7, r1, lsl #24
 8004de2:	6077      	str	r7, [r6, #4]
 8004de4:	1d24      	adds	r4, r4, #4
 8004de6:	6819      	ldr	r1, [r3, #0]
 8004de8:	b2e4      	uxtb	r4, r4
 8004dea:	1c49      	adds	r1, r1, #1
 8004dec:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8004df0:	6019      	str	r1, [r3, #0]
 8004df2:	d3e8      	bcc.n	8004dc6 <PE_SVDM_CheckModes+0x16>
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004df6 <.text_54>:
 8004df6:	4c02      	ldr	r4, [pc, #8]	; (8004e00 <.text_55>)
 8004df8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004dfc:	8e84      	ldrh	r4, [r0, #52]	; 0x34
 8004dfe:	4770      	bx	lr

08004e00 <.text_55>:
 8004e00:	20000374 	.word	0x20000374

08004e04 <USBPD_PRL_TimerCounter>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	f8df 2b10 	ldr.w	r2, [pc, #2832]	; 8005918 <.text_33>
 8004e0a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004e0e:	7919      	ldrb	r1, [r3, #4]
 8004e10:	b111      	cbz	r1, 8004e18 <USBPD_PRL_TimerCounter+0x14>
 8004e12:	7919      	ldrb	r1, [r3, #4]
 8004e14:	1e4c      	subs	r4, r1, #1
 8004e16:	711c      	strb	r4, [r3, #4]
 8004e18:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004e1c:	7848      	ldrb	r0, [r1, #1]
 8004e1e:	b108      	cbz	r0, 8004e24 <USBPD_PRL_TimerCounter+0x20>
 8004e20:	1e40      	subs	r0, r0, #1
 8004e22:	7048      	strb	r0, [r1, #1]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <USBPD_PRL_Init>:
 8004e26:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	4616      	mov	r6, r2
 8004e30:	461f      	mov	r7, r3
 8004e32:	f44f 709c 	mov.w	r0, #312	; 0x138
 8004e36:	f016 fd2f 	bl	801b898 <malloc>
 8004e3a:	f8df 9adc 	ldr.w	r9, [pc, #2780]	; 8005918 <.text_33>
 8004e3e:	46a0      	mov	r8, r4
 8004e40:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
 8004e44:	b908      	cbnz	r0, 8004e4a <USBPD_PRL_Init+0x24>
 8004e46:	2016      	movs	r0, #22
 8004e48:	e020      	b.n	8004e8c <USBPD_PRL_Init+0x66>
 8004e4a:	f44f 7a9c 	mov.w	sl, #312	; 0x138
 8004e4e:	4651      	mov	r1, sl
 8004e50:	f016 fcf0 	bl	801b834 <__aeabi_memclr>
 8004e54:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8004e58:	4651      	mov	r1, sl
 8004e5a:	f016 fceb 	bl	801b834 <__aeabi_memclr>
 8004e5e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8004e62:	220f      	movs	r2, #15
 8004e64:	2103      	movs	r1, #3
 8004e66:	1d80      	adds	r0, r0, #6
 8004e68:	f000 fd67 	bl	800593a <__aeabi_memset>
 8004e6c:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8004e70:	6286      	str	r6, [r0, #40]	; 0x28
 8004e72:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004e74:	2101      	movs	r1, #1
 8004e76:	9100      	str	r1, [sp, #0]
 8004e78:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8004e7c:	6869      	ldr	r1, [r5, #4]
 8004e7e:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8004e82:	f60f 219c 	addw	r1, pc, #2716	; 0xa9c
 8004e86:	4620      	mov	r0, r4
 8004e88:	f009 fdec 	bl	800ea64 <USBPD_PHY_Init>
 8004e8c:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004e90 <USBPD_PRL_GetMemoryConsumption>:
 8004e90:	f44f 701c 	mov.w	r0, #624	; 0x270
 8004e94:	4770      	bx	lr

08004e96 <USBPD_PRL_SetHeader>:
 8004e96:	b510      	push	{r4, lr}
 8004e98:	f8df 4a7c 	ldr.w	r4, [pc, #2684]	; 8005918 <.text_33>
 8004e9c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004ea0:	8a44      	ldrh	r4, [r0, #18]
 8004ea2:	f361 2408 	bfi	r4, r1, #8, #1
 8004ea6:	8244      	strh	r4, [r0, #18]
 8004ea8:	8a41      	ldrh	r1, [r0, #18]
 8004eaa:	f362 1145 	bfi	r1, r2, #5, #1
 8004eae:	8241      	strh	r1, [r0, #18]
 8004eb0:	8a41      	ldrh	r1, [r0, #18]
 8004eb2:	f363 1187 	bfi	r1, r3, #6, #2
 8004eb6:	8241      	strh	r1, [r0, #18]
 8004eb8:	bd10      	pop	{r4, pc}

08004eba <USBPD_PRL_SetHeaderPowerRole>:
 8004eba:	f8df 2a5c 	ldr.w	r2, [pc, #2652]	; 8005918 <.text_33>
 8004ebe:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004ec2:	8a42      	ldrh	r2, [r0, #18]
 8004ec4:	f361 2208 	bfi	r2, r1, #8, #1
 8004ec8:	8242      	strh	r2, [r0, #18]
 8004eca:	4770      	bx	lr

08004ecc <USBPD_PRL_SetHeaderDataRole>:
 8004ecc:	f8df 2a48 	ldr.w	r2, [pc, #2632]	; 8005918 <.text_33>
 8004ed0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004ed4:	8a42      	ldrh	r2, [r0, #18]
 8004ed6:	f361 1245 	bfi	r2, r1, #5, #1
 8004eda:	8242      	strh	r2, [r0, #18]
 8004edc:	4770      	bx	lr

08004ede <USBPD_PRL_SetHeaderSpecification>:
 8004ede:	f8df 2a38 	ldr.w	r2, [pc, #2616]	; 8005918 <.text_33>
 8004ee2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004ee6:	8a42      	ldrh	r2, [r0, #18]
 8004ee8:	f361 1287 	bfi	r2, r1, #6, #2
 8004eec:	8242      	strh	r2, [r0, #18]
 8004eee:	4770      	bx	lr

08004ef0 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8004ef0:	f8df 2a24 	ldr.w	r2, [pc, #2596]	; 8005918 <.text_33>
 8004ef4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004ef8:	8a83      	ldrh	r3, [r0, #20]
 8004efa:	8ac2      	ldrh	r2, [r0, #22]
 8004efc:	f361 1387 	bfi	r3, r1, #6, #2
 8004f00:	f361 1287 	bfi	r2, r1, #6, #2
 8004f04:	8283      	strh	r3, [r0, #20]
 8004f06:	82c2      	strh	r2, [r0, #22]
 8004f08:	4770      	bx	lr

08004f0a <USBPD_PRL_SRCSetSinkNG>:
 8004f0a:	f009 be86 	b.w	800ec1a <USBPD_PHY_SetResistor_SinkTxNG>

08004f0e <USBPD_PRL_SRCReleaseSinkNG>:
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	4604      	mov	r4, r0
 8004f12:	f009 fe8f 	bl	800ec34 <USBPD_PHY_SetResistor_SinkTxOK>
 8004f16:	f8df 1a00 	ldr.w	r1, [pc, #2560]	; 8005918 <.text_33>
 8004f1a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8004f1e:	2000      	movs	r0, #0
 8004f20:	7150      	strb	r0, [r2, #5]
 8004f22:	bd10      	pop	{r4, pc}

08004f24 <USBPD_PRL_IsResistor_SinkTxOK>:
 8004f24:	f009 bea8 	b.w	800ec78 <USBPD_PHY_IsResistor_SinkTxOk>

08004f28 <USBPD_PRL_FastRoleSwapSignalling>:
 8004f28:	f009 beb4 	b.w	800ec94 <USBPD_PHY_FastRoleSwapSignalling>

08004f2c <PRL_FastRoleSwapReception>:
 8004f2c:	f7fb be87 	b.w	8000c3e <PE_PRL_FastRoleSwapReception>

08004f30 <USBPD_PRL_SOPCapability>:
 8004f30:	f009 be8e 	b.w	800ec50 <USBPD_PHY_SOPSupported>

08004f34 <USBPD_PRL_SendMessage>:
 8004f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	4605      	mov	r5, r0
 8004f3a:	f8df 89dc 	ldr.w	r8, [pc, #2524]	; 8005918 <.text_33>
 8004f3e:	46a9      	mov	r9, r5
 8004f40:	f858 e029 	ldr.w	lr, [r8, r9, lsl #2]
 8004f44:	4694      	mov	ip, r2
 8004f46:	f89e 2005 	ldrb.w	r2, [lr, #5]
 8004f4a:	469a      	mov	sl, r3
 8004f4c:	2603      	movs	r6, #3
 8004f4e:	b12a      	cbz	r2, 8004f5c <USBPD_PRL_SendMessage+0x28>
 8004f50:	f89e 2009 	ldrb.w	r2, [lr, #9]
 8004f54:	b912      	cbnz	r2, 8004f5c <USBPD_PRL_SendMessage+0x28>
 8004f56:	230f      	movs	r3, #15
 8004f58:	f88e 3005 	strb.w	r3, [lr, #5]
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	f89e b005 	ldrb.w	fp, [lr, #5]
 8004f66:	f1bb 0f10 	cmp.w	fp, #16
 8004f6a:	461f      	mov	r7, r3
 8004f6c:	f200 8148 	bhi.w	8005200 <USBPD_PRL_SendMessage+0x2cc>
 8004f70:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8004f74:	00290011 	.word	0x00290011
 8004f78:	01460033 	.word	0x01460033
 8004f7c:	005b0039 	.word	0x005b0039
 8004f80:	00b50049 	.word	0x00b50049
 8004f84:	01460146 	.word	0x01460146
 8004f88:	00d200bb 	.word	0x00d200bb
 8004f8c:	00fd00ea 	.word	0x00fd00ea
 8004f90:	01410146 	.word	0x01410146
 8004f94:	0121      	.short	0x0121
 8004f96:	f3ef 8410 	mrs	r4, PRIMASK
 8004f9a:	b672      	cpsid	i
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f7fb fd0e 	bl	80009be <PE_PRL_Control_RxEvent>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	bf02      	ittt	eq
 8004fa6:	f858 1029 	ldreq.w	r1, [r8, r9, lsl #2]
 8004faa:	7a88      	ldrbeq	r0, [r1, #10]
 8004fac:	2800      	cmpeq	r0, #0
 8004fae:	d102      	bne.n	8004fb6 <USBPD_PRL_SendMessage+0x82>
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	724a      	strb	r2, [r1, #9]
 8004fb4:	e003      	b.n	8004fbe <USBPD_PRL_SendMessage+0x8a>
 8004fb6:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	7248      	strb	r0, [r1, #9]
 8004fbe:	f384 8810 	msr	PRIMASK, r4
 8004fc2:	2006      	movs	r0, #6
 8004fc4:	e017      	b.n	8004ff6 <USBPD_PRL_SendMessage+0xc2>
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f009 fe27 	bl	800ec1a <USBPD_PHY_SetResistor_SinkTxNG>
 8004fcc:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	7141      	strb	r1, [r0, #5]
 8004fd4:	2213      	movs	r2, #19
 8004fd6:	7042      	strb	r2, [r0, #1]
 8004fd8:	e116      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 8004fda:	2801      	cmp	r0, #1
 8004fdc:	d111      	bne.n	8005002 <USBPD_PRL_SendMessage+0xce>
 8004fde:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8004fe2:	b960      	cbnz	r0, 8004ffe <USBPD_PRL_SendMessage+0xca>
 8004fe4:	e01d      	b.n	8005022 <USBPD_PRL_SendMessage+0xee>
 8004fe6:	2802      	cmp	r0, #2
 8004fe8:	d10b      	bne.n	8005002 <USBPD_PRL_SendMessage+0xce>
 8004fea:	4628      	mov	r0, r5
 8004fec:	f009 fe44 	bl	800ec78 <USBPD_PHY_IsResistor_SinkTxOk>
 8004ff0:	2801      	cmp	r0, #1
 8004ff2:	d104      	bne.n	8004ffe <USBPD_PRL_SendMessage+0xca>
 8004ff4:	2005      	movs	r0, #5
 8004ff6:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 8004ffa:	7148      	strb	r0, [r1, #5]
 8004ffc:	e104      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 8004ffe:	2009      	movs	r0, #9
 8005000:	e103      	b.n	800520a <USBPD_PRL_SendMessage+0x2d6>
 8005002:	2006      	movs	r0, #6
 8005004:	e09d      	b.n	8005142 <USBPD_PRL_SendMessage+0x20e>
 8005006:	f10e 0212 	add.w	r2, lr, #18
 800500a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800500e:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8005012:	2902      	cmp	r1, #2
 8005014:	d105      	bne.n	8005022 <USBPD_PRL_SendMessage+0xee>
 8005016:	2801      	cmp	r0, #1
 8005018:	d0f4      	beq.n	8005004 <USBPD_PRL_SendMessage+0xd0>
 800501a:	2802      	cmp	r0, #2
 800501c:	bf08      	it	eq
 800501e:	2004      	moveq	r0, #4
 8005020:	d0f0      	beq.n	8005004 <USBPD_PRL_SendMessage+0xd0>
 8005022:	2105      	movs	r1, #5
 8005024:	f88e 1005 	strb.w	r1, [lr, #5]
 8005028:	e0ee      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 800502a:	f10e 0212 	add.w	r2, lr, #18
 800502e:	f10e 0012 	add.w	r0, lr, #18
 8005032:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8005036:	f36c 0404 	bfi	r4, ip, #0, #5
 800503a:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 800503e:	f3c4 000e 	ubfx	r0, r4, #0, #15
 8005042:	ea4f 14dc 	mov.w	r4, ip, lsr #7
 8005046:	ea40 30c4 	orr.w	r0, r0, r4, lsl #15
 800504a:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 800504e:	2000      	movs	r0, #0
 8005050:	f88e 0002 	strb.w	r0, [lr, #2]
 8005054:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
 8005058:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 800505c:	8a60      	ldrh	r0, [r4, #18]
 800505e:	0bc0      	lsrs	r0, r0, #15
 8005060:	d01f      	beq.n	80050a2 <USBPD_PRL_SendMessage+0x16e>
 8005062:	f89a 0002 	ldrb.w	r0, [sl, #2]
 8005066:	f89a 5003 	ldrb.w	r5, [sl, #3]
 800506a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800506e:	8390      	strh	r0, [r2, #28]
 8005070:	8b90      	ldrh	r0, [r2, #28]
 8005072:	f3c0 2580 	ubfx	r5, r0, #10, #1
 8005076:	b965      	cbnz	r5, 8005092 <USBPD_PRL_SendMessage+0x15e>
 8005078:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800507c:	b9c8      	cbnz	r0, 80050b2 <USBPD_PRL_SendMessage+0x17e>
 800507e:	1f18      	subs	r0, r3, #4
 8005080:	8450      	strh	r0, [r2, #34]	; 0x22
 8005082:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005086:	8b93      	ldrh	r3, [r2, #28]
 8005088:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 800508c:	4318      	orrs	r0, r3
 800508e:	8390      	strh	r0, [r2, #28]
 8005090:	e00f      	b.n	80050b2 <USBPD_PRL_SendMessage+0x17e>
 8005092:	2000      	movs	r0, #0
 8005094:	8450      	strh	r0, [r2, #34]	; 0x22
 8005096:	2001      	movs	r0, #1
 8005098:	8a63      	ldrh	r3, [r4, #18]
 800509a:	f360 330e 	bfi	r3, r0, #12, #3
 800509e:	8263      	strh	r3, [r4, #18]
 80050a0:	e007      	b.n	80050b2 <USBPD_PRL_SendMessage+0x17e>
 80050a2:	1ebf      	subs	r7, r7, #2
 80050a4:	8a60      	ldrh	r0, [r4, #18]
 80050a6:	08bf      	lsrs	r7, r7, #2
 80050a8:	f367 300e 	bfi	r0, r7, #12, #3
 80050ac:	8260      	strh	r0, [r4, #18]
 80050ae:	2300      	movs	r3, #0
 80050b0:	8453      	strh	r3, [r2, #34]	; 0x22
 80050b2:	f1bc 0f0d 	cmp.w	ip, #13
 80050b6:	bf04      	itt	eq
 80050b8:	8a60      	ldrheq	r0, [r4, #18]
 80050ba:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80050be:	d109      	bne.n	80050d4 <USBPD_PRL_SendMessage+0x1a0>
 80050c0:	320b      	adds	r2, #11
 80050c2:	2000      	movs	r0, #0
 80050c4:	5450      	strb	r0, [r2, r1]
 80050c6:	220f      	movs	r2, #15
 80050c8:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 80050cc:	2103      	movs	r1, #3
 80050ce:	1d80      	adds	r0, r0, #6
 80050d0:	f000 fc33 	bl	800593a <__aeabi_memset>
 80050d4:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 80050d8:	2107      	movs	r1, #7
 80050da:	7141      	strb	r1, [r0, #5]
 80050dc:	e094      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 80050de:	4652      	mov	r2, sl
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 f907 	bl	80052f4 <PRL_StateTXConstructMessage>
 80050e6:	4606      	mov	r6, r0
 80050e8:	e08e      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 80050ea:	f3ef 8410 	mrs	r4, PRIMASK
 80050ee:	b672      	cpsid	i
 80050f0:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 80050f4:	7941      	ldrb	r1, [r0, #5]
 80050f6:	290a      	cmp	r1, #10
 80050f8:	d10b      	bne.n	8005112 <USBPD_PRL_SendMessage+0x1de>
 80050fa:	2d00      	cmp	r5, #0
 80050fc:	bf0c      	ite	eq
 80050fe:	2001      	moveq	r0, #1
 8005100:	2003      	movne	r0, #3
 8005102:	f00b f855 	bl	80101b0 <USBPD_TIM_IsExpired>
 8005106:	2801      	cmp	r0, #1
 8005108:	d103      	bne.n	8005112 <USBPD_PRL_SendMessage+0x1de>
 800510a:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 800510e:	200d      	movs	r0, #13
 8005110:	7148      	strb	r0, [r1, #5]
 8005112:	f384 8810 	msr	PRIMASK, r4
 8005116:	e077      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 8005118:	eb0e 0001 	add.w	r0, lr, r1
 800511c:	f8be 201a 	ldrh.w	r2, [lr, #26]
 8005120:	7ac1      	ldrb	r1, [r0, #11]
 8005122:	0a53      	lsrs	r3, r2, #9
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4299      	cmp	r1, r3
 800512a:	bf04      	itt	eq
 800512c:	f002 021f 	andeq.w	r2, r2, #31
 8005130:	2a01      	cmpeq	r2, #1
 8005132:	d105      	bne.n	8005140 <USBPD_PRL_SendMessage+0x20c>
 8005134:	f000 f86b 	bl	800520e <.text_18>
 8005138:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 800513c:	7148      	strb	r0, [r1, #5]
 800513e:	e014      	b.n	800516a <USBPD_PRL_SendMessage+0x236>
 8005140:	200d      	movs	r0, #13
 8005142:	f88e 0005 	strb.w	r0, [lr, #5]
 8005146:	e05f      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 8005148:	eb0e 0001 	add.w	r0, lr, r1
 800514c:	7ac1      	ldrb	r1, [r0, #11]
 800514e:	f000 f85e 	bl	800520e <.text_18>
 8005152:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
 8005156:	7150      	strb	r0, [r2, #5]
 8005158:	f248 71ff 	movw	r1, #34815	; 0x87ff
 800515c:	8b93      	ldrh	r3, [r2, #28]
 800515e:	400b      	ands	r3, r1
 8005160:	8393      	strh	r3, [r2, #28]
 8005162:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8005166:	4003      	ands	r3, r0
 8005168:	8393      	strh	r3, [r2, #28]
 800516a:	2605      	movs	r6, #5
 800516c:	e04c      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 800516e:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8005172:	1c40      	adds	r0, r0, #1
 8005174:	f88e 0002 	strb.w	r0, [lr, #2]
 8005178:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
 800517c:	f102 0012 	add.w	r0, r2, #18
 8005180:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8005184:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8005188:	2901      	cmp	r1, #1
 800518a:	bf0c      	ite	eq
 800518c:	2103      	moveq	r1, #3
 800518e:	2102      	movne	r1, #2
 8005190:	0bc0      	lsrs	r0, r0, #15
 8005192:	d006      	beq.n	80051a2 <USBPD_PRL_SendMessage+0x26e>
 8005194:	8b93      	ldrh	r3, [r2, #28]
 8005196:	0bd8      	lsrs	r0, r3, #15
 8005198:	d103      	bne.n	80051a2 <USBPD_PRL_SendMessage+0x26e>
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	2b1b      	cmp	r3, #27
 80051a0:	d205      	bcs.n	80051ae <USBPD_PRL_SendMessage+0x27a>
 80051a2:	7890      	ldrb	r0, [r2, #2]
 80051a4:	4281      	cmp	r1, r0
 80051a6:	d302      	bcc.n	80051ae <USBPD_PRL_SendMessage+0x27a>
 80051a8:	2110      	movs	r1, #16
 80051aa:	7151      	strb	r1, [r2, #5]
 80051ac:	e02c      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 80051ae:	2000      	movs	r0, #0
 80051b0:	7150      	strb	r0, [r2, #5]
 80051b2:	2607      	movs	r6, #7
 80051b4:	e028      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 80051b6:	200a      	movs	r0, #10
 80051b8:	f88e 0005 	strb.w	r0, [lr, #5]
 80051bc:	2102      	movs	r1, #2
 80051be:	f88e 1010 	strb.w	r1, [lr, #16]
 80051c2:	002a      	movs	r2, r5
 80051c4:	bf0c      	ite	eq
 80051c6:	2001      	moveq	r0, #1
 80051c8:	2003      	movne	r0, #3
 80051ca:	f242 7110 	movw	r1, #10000	; 0x2710
 80051ce:	f00a ff7d 	bl	80100cc <USBPD_TIM_Start>
 80051d2:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 80051d6:	89c3      	ldrh	r3, [r0, #14]
 80051d8:	4652      	mov	r2, sl
 80051da:	4621      	mov	r1, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	f009 fce4 	bl	800ebaa <USBPD_PHY_SendMessage>
 80051e2:	4622      	mov	r2, r4
 80051e4:	f8df 4734 	ldr.w	r4, [pc, #1844]	; 800591c <.text_34>
 80051e8:	9700      	str	r7, [sp, #0]
 80051ea:	4629      	mov	r1, r5
 80051ec:	6825      	ldr	r5, [r4, #0]
 80051ee:	4653      	mov	r3, sl
 80051f0:	2002      	movs	r0, #2
 80051f2:	47a8      	blx	r5
 80051f4:	e008      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 80051f6:	2000      	movs	r0, #0
 80051f8:	f88e 0005 	strb.w	r0, [lr, #5]
 80051fc:	2606      	movs	r6, #6
 80051fe:	e003      	b.n	8005208 <USBPD_PRL_SendMessage+0x2d4>
 8005200:	2000      	movs	r0, #0
 8005202:	f88e 0005 	strb.w	r0, [lr, #5]
 8005206:	2610      	movs	r6, #16
 8005208:	4630      	mov	r0, r6
 800520a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800520e <.text_18>:
 800520e:	1c49      	adds	r1, r1, #1
 8005210:	f001 0107 	and.w	r1, r1, #7
 8005214:	72c1      	strb	r1, [r0, #11]
 8005216:	2000      	movs	r0, #0
 8005218:	4770      	bx	lr

0800521a <USBPD_PRL_ResetRequestProcess>:
 800521a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800521e:	4605      	mov	r5, r0
 8005220:	f8df 86f4 	ldr.w	r8, [pc, #1780]	; 8005918 <.text_33>
 8005224:	462f      	mov	r7, r5
 8005226:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 800522a:	2000      	movs	r0, #0
 800522c:	70e0      	strb	r0, [r4, #3]
 800522e:	72e0      	strb	r0, [r4, #11]
 8005230:	7320      	strb	r0, [r4, #12]
 8005232:	7360      	strb	r0, [r4, #13]
 8005234:	460e      	mov	r6, r1
 8005236:	220f      	movs	r2, #15
 8005238:	2103      	movs	r1, #3
 800523a:	1da0      	adds	r0, r4, #6
 800523c:	f000 fb7d 	bl	800593a <__aeabi_memset>
 8005240:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 8005244:	f8df 76d4 	ldr.w	r7, [pc, #1748]	; 800591c <.text_34>
 8005248:	2200      	movs	r2, #0
 800524a:	7142      	strb	r2, [r0, #5]
 800524c:	9200      	str	r2, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	f8d7 c000 	ldr.w	ip, [r7]
 8005254:	4632      	mov	r2, r6
 8005256:	4629      	mov	r1, r5
 8005258:	2002      	movs	r0, #2
 800525a:	47e0      	blx	ip
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f847 	bl	80052f0 <PRL_DisableRX>
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	f009 fc8d 	bl	800eb84 <USBPD_PHY_ResetRequest>
 800526a:	2005      	movs	r0, #5
 800526c:	7120      	strb	r0, [r4, #4]
 800526e:	78e0      	ldrb	r0, [r4, #3]
 8005270:	2801      	cmp	r0, #1
 8005272:	bf1c      	itt	ne
 8005274:	7920      	ldrbne	r0, [r4, #4]
 8005276:	2800      	cmpne	r0, #0
 8005278:	d1f9      	bne.n	800526e <USBPD_PRL_ResetRequestProcess+0x54>
 800527a:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

0800527e <USBDPD_PRL_BistCarrierEyeMode>:
 800527e:	2905      	cmp	r1, #5
 8005280:	bf08      	it	eq
 8005282:	f009 bca8 	beq.w	800ebd6 <USBPD_PHY_Send_BIST_Pattern>
 8005286:	2010      	movs	r0, #16
 8005288:	4770      	bx	lr

0800528a <USBDPD_PRL_BistCarrierEyeModeExit>:
 800528a:	2905      	cmp	r1, #5
 800528c:	bf04      	itt	eq
 800528e:	2107      	moveq	r1, #7
 8005290:	f009 bcaf 	beq.w	800ebf2 <USBPD_PHY_ExitTransmit>
 8005294:	2010      	movs	r0, #16
 8005296:	4770      	bx	lr

08005298 <USBPD_PRL_Reset>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4604      	mov	r4, r0
 800529c:	f8df 6678 	ldr.w	r6, [pc, #1656]	; 8005918 <.text_33>
 80052a0:	4625      	mov	r5, r4
 80052a2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80052a6:	2100      	movs	r1, #0
 80052a8:	7141      	strb	r1, [r0, #5]
 80052aa:	7001      	strb	r1, [r0, #0]
 80052ac:	2000      	movs	r0, #0
 80052ae:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80052b2:	7108      	strb	r0, [r1, #4]
 80052b4:	220f      	movs	r2, #15
 80052b6:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80052ba:	72c8      	strb	r0, [r1, #11]
 80052bc:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80052c0:	7308      	strb	r0, [r1, #12]
 80052c2:	2103      	movs	r1, #3
 80052c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052c8:	7358      	strb	r0, [r3, #13]
 80052ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ce:	1d98      	adds	r0, r3, #6
 80052d0:	f000 fb33 	bl	800593a <__aeabi_memset>
 80052d4:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80052d8:	2100      	movs	r1, #0
 80052da:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80052de:	4620      	mov	r0, r4
 80052e0:	f009 fc45 	bl	800eb6e <USBPD_PHY_Reset>
 80052e4:	4620      	mov	r0, r4
 80052e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052ea:	f009 bce0 	b.w	800ecae <USBPD_PHY_EnableRX>

080052ee <USBPD_PRL_DeInit>:
 80052ee:	4770      	bx	lr

080052f0 <PRL_DisableRX>:
 80052f0:	f009 bcea 	b.w	800ecc8 <USBPD_PHY_DisableRX>

080052f4 <PRL_StateTXConstructMessage>:
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	4614      	mov	r4, r2
 80052fa:	4680      	mov	r8, r0
 80052fc:	4689      	mov	r9, r1
 80052fe:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 8005918 <.text_33>
 8005302:	4641      	mov	r1, r8
 8005304:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
 8005308:	461f      	mov	r7, r3
 800530a:	f10c 0012 	add.w	r0, ip, #18
 800530e:	464b      	mov	r3, r9
 8005310:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
 8005314:	ea5f 30de 	movs.w	r0, lr, lsr #15
 8005318:	d07d      	beq.n	8005416 <PRL_StateTXConstructMessage+0x122>
 800531a:	f8bc 601c 	ldrh.w	r6, [ip, #28]
 800531e:	f3c6 2080 	ubfx	r0, r6, #10, #1
 8005322:	2800      	cmp	r0, #0
 8005324:	d16e      	bne.n	8005404 <PRL_StateTXConstructMessage+0x110>
 8005326:	f8bc 5022 	ldrh.w	r5, [ip, #34]	; 0x22
 800532a:	2d1b      	cmp	r5, #27
 800532c:	d301      	bcc.n	8005332 <PRL_StateTXConstructMessage+0x3e>
 800532e:	0bf0      	lsrs	r0, r6, #15
 8005330:	d15b      	bne.n	80053ea <PRL_StateTXConstructMessage+0xf6>
 8005332:	f3c6 20c3 	ubfx	r0, r6, #11, #4
 8005336:	b920      	cbnz	r0, 8005342 <PRL_StateTXConstructMessage+0x4e>
 8005338:	4630      	mov	r0, r6
 800533a:	f365 0008 	bfi	r0, r5, #0, #9
 800533e:	f8ac 001c 	strh.w	r0, [ip, #28]
 8005342:	f10c 0012 	add.w	r0, ip, #18
 8005346:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
 800534a:	f648 70ff 	movw	r0, #36863	; 0x8fff
 800534e:	ea00 0605 	and.w	r6, r0, r5
 8005352:	f10c 0512 	add.w	r5, ip, #18
 8005356:	f825 6013 	strh.w	r6, [r5, r3, lsl #1]
 800535a:	f8bc 001c 	ldrh.w	r0, [ip, #28]
 800535e:	0bc0      	lsrs	r0, r0, #15
 8005360:	d03e      	beq.n	80053e0 <PRL_StateTXConstructMessage+0xec>
 8005362:	f8bc 0022 	ldrh.w	r0, [ip, #34]	; 0x22
 8005366:	1c80      	adds	r0, r0, #2
 8005368:	0880      	lsrs	r0, r0, #2
 800536a:	0300      	lsls	r0, r0, #12
 800536c:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 8005370:	ea40 0506 	orr.w	r5, r0, r6
 8005374:	f10c 0012 	add.w	r0, ip, #18
 8005378:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 800537c:	f8bc 0022 	ldrh.w	r0, [ip, #34]	; 0x22
 8005380:	1c80      	adds	r0, r0, #2
 8005382:	f010 0003 	ands.w	r0, r0, #3
 8005386:	d021      	beq.n	80053cc <PRL_StateTXConstructMessage+0xd8>
 8005388:	2700      	movs	r7, #0
 800538a:	f1c0 0504 	rsb	r5, r0, #4
 800538e:	e007      	b.n	80053a0 <PRL_StateTXConstructMessage+0xac>
 8005390:	f8b6 c022 	ldrh.w	ip, [r6, #34]	; 0x22
 8005394:	4484      	add	ip, r0
 8005396:	44a4      	add	ip, r4
 8005398:	2000      	movs	r0, #0
 800539a:	f88c 0004 	strb.w	r0, [ip, #4]
 800539e:	1c7f      	adds	r7, r7, #1
 80053a0:	b2f8      	uxtb	r0, r7
 80053a2:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 80053a6:	42a8      	cmp	r0, r5
 80053a8:	d3f2      	bcc.n	8005390 <PRL_StateTXConstructMessage+0x9c>
 80053aa:	f106 0012 	add.w	r0, r6, #18
 80053ae:	f648 77ff 	movw	r7, #36863	; 0x8fff
 80053b2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80053b6:	4007      	ands	r7, r0
 80053b8:	0b00      	lsrs	r0, r0, #12
 80053ba:	1c40      	adds	r0, r0, #1
 80053bc:	0300      	lsls	r0, r0, #12
 80053be:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 80053c2:	4338      	orrs	r0, r7
 80053c4:	f106 0712 	add.w	r7, r6, #18
 80053c8:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 80053cc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80053d0:	f100 0712 	add.w	r7, r0, #18
 80053d4:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 80053d8:	f3c0 3702 	ubfx	r7, r0, #12, #3
 80053dc:	00bf      	lsls	r7, r7, #2
 80053de:	1cbf      	adds	r7, r7, #2
 80053e0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80053e4:	2000      	movs	r0, #0
 80053e6:	8468      	strh	r0, [r5, #34]	; 0x22
 80053e8:	e00c      	b.n	8005404 <PRL_StateTXConstructMessage+0x110>
 80053ea:	f10c 0012 	add.w	r0, ip, #18
 80053ee:	f44e 45e0 	orr.w	r5, lr, #28672	; 0x7000
 80053f2:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 80053f6:	f8bc 7022 	ldrh.w	r7, [ip, #34]	; 0x22
 80053fa:	f1a7 001a 	sub.w	r0, r7, #26
 80053fe:	f8ac 0022 	strh.w	r0, [ip, #34]	; 0x22
 8005402:	271e      	movs	r7, #30
 8005404:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005408:	8b80      	ldrh	r0, [r0, #28]
 800540a:	70a0      	strb	r0, [r4, #2]
 800540c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005410:	8b80      	ldrh	r0, [r0, #28]
 8005412:	0a00      	lsrs	r0, r0, #8
 8005414:	70e0      	strb	r0, [r4, #3]
 8005416:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800541a:	18c5      	adds	r5, r0, r3
 800541c:	f100 0e12 	add.w	lr, r0, #18
 8005420:	7aee      	ldrb	r6, [r5, #11]
 8005422:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8005426:	f366 254b 	bfi	r5, r6, #9, #3
 800542a:	f100 0612 	add.w	r6, r0, #18
 800542e:	3012      	adds	r0, #18
 8005430:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
 8005434:	2502      	movs	r5, #2
 8005436:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800543a:	f8df 64e0 	ldr.w	r6, [pc, #1248]	; 800591c <.text_34>
 800543e:	7020      	strb	r0, [r4, #0]
 8005440:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005444:	3012      	adds	r0, #18
 8005446:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	7063      	strb	r3, [r4, #1]
 800544e:	4623      	mov	r3, r4
 8005450:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005454:	81c7      	strh	r7, [r0, #14]
 8005456:	210a      	movs	r1, #10
 8005458:	7141      	strb	r1, [r0, #5]
 800545a:	7405      	strb	r5, [r0, #16]
 800545c:	b2b9      	uxth	r1, r7
 800545e:	9100      	str	r1, [sp, #0]
 8005460:	464a      	mov	r2, r9
 8005462:	6835      	ldr	r5, [r6, #0]
 8005464:	4641      	mov	r1, r8
 8005466:	2002      	movs	r0, #2
 8005468:	47a8      	blx	r5
 800546a:	ea5f 0008 	movs.w	r0, r8
 800546e:	bf0c      	ite	eq
 8005470:	2001      	moveq	r0, #1
 8005472:	2003      	movne	r0, #3
 8005474:	f242 7110 	movw	r1, #10000	; 0x2710
 8005478:	f00a fe28 	bl	80100cc <USBPD_TIM_Start>
 800547c:	b2bb      	uxth	r3, r7
 800547e:	4622      	mov	r2, r4
 8005480:	4649      	mov	r1, r9
 8005482:	4640      	mov	r0, r8
 8005484:	f009 fb91 	bl	800ebaa <USBPD_PHY_SendMessage>
 8005488:	2003      	movs	r0, #3
 800548a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0800548e <PRL_Received>:
 800548e:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005492:	4680      	mov	r8, r0
 8005494:	f8df b480 	ldr.w	fp, [pc, #1152]	; 8005918 <.text_33>
 8005498:	b083      	sub	sp, #12
 800549a:	46c1      	mov	r9, r8
 800549c:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
 80054a0:	f009 fb59 	bl	800eb56 <USBPD_PHY_GetMinGOODCRCTimerValue>
 80054a4:	ea5f 0108 	movs.w	r1, r8
 80054a8:	bf0c      	ite	eq
 80054aa:	f04f 0a00 	moveq.w	sl, #0
 80054ae:	f04f 0a02 	movne.w	sl, #2
 80054b2:	4601      	mov	r1, r0
 80054b4:	4650      	mov	r0, sl
 80054b6:	f00a fe09 	bl	80100cc <USBPD_TIM_Start>
 80054ba:	f105 0628 	add.w	r6, r5, #40	; 0x28
 80054be:	7a30      	ldrb	r0, [r6, #8]
 80054c0:	7a71      	ldrb	r1, [r6, #9]
 80054c2:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 80054c6:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80054ca:	4038      	ands	r0, r7
 80054cc:	2801      	cmp	r0, #1
 80054ce:	f3c7 3402 	ubfx	r4, r7, #12, #3
 80054d2:	d11b      	bne.n	800550c <PRL_Received+0x7e>
 80054d4:	ea5f 0008 	movs.w	r0, r8
 80054d8:	bf0c      	ite	eq
 80054da:	2001      	moveq	r0, #1
 80054dc:	2003      	movne	r0, #3
 80054de:	f00a fe67 	bl	80101b0 <USBPD_TIM_IsExpired>
 80054e2:	2801      	cmp	r0, #1
 80054e4:	d011      	beq.n	800550a <PRL_Received+0x7c>
 80054e6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80054ea:	200b      	movs	r0, #11
 80054ec:	7148      	strb	r0, [r1, #5]
 80054ee:	00a4      	lsls	r4, r4, #2
 80054f0:	836f      	strh	r7, [r5, #26]
 80054f2:	1ca4      	adds	r4, r4, #2
 80054f4:	9400      	str	r4, [sp, #0]
 80054f6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80054fa:	f8df 4420 	ldr.w	r4, [pc, #1056]	; 800591c <.text_34>
 80054fe:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005502:	6825      	ldr	r5, [r4, #0]
 8005504:	4641      	mov	r1, r8
 8005506:	2001      	movs	r0, #1
 8005508:	47a8      	blx	r5
 800550a:	e155      	b.n	80057b8 <PRL_Received+0x32a>
 800550c:	f20f 4028 	addw	r0, pc, #1064	; 0x428
 8005510:	f8b0 b000 	ldrh.w	fp, [r0]
 8005514:	2101      	movs	r1, #1
 8005516:	72a9      	strb	r1, [r5, #10]
 8005518:	f24f 011f 	movw	r1, #61471	; 0xf01f
 800551c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8005520:	4039      	ands	r1, r7
 8005522:	4428      	add	r0, r5
 8005524:	290d      	cmp	r1, #13
 8005526:	9002      	str	r0, [sp, #8]
 8005528:	d107      	bne.n	800553a <PRL_Received+0xac>
 800552a:	9902      	ldr	r1, [sp, #8]
 800552c:	2000      	movs	r0, #0
 800552e:	72c8      	strb	r0, [r1, #11]
 8005530:	220f      	movs	r2, #15
 8005532:	2103      	movs	r1, #3
 8005534:	1da8      	adds	r0, r5, #6
 8005536:	f000 fa00 	bl	800593a <__aeabi_memset>
 800553a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800553e:	b968      	cbnz	r0, 800555c <PRL_Received+0xce>
 8005540:	8a68      	ldrh	r0, [r5, #18]
 8005542:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005546:	f3c0 2200 	ubfx	r2, r0, #8, #1
 800554a:	f64f 60df 	movw	r0, #65247	; 0xfedf
 800554e:	ea00 000b 	and.w	r0, r0, fp
 8005552:	ea40 1041 	orr.w	r0, r0, r1, lsl #5
 8005556:	ea40 2b02 	orr.w	fp, r0, r2, lsl #8
 800555a:	e003      	b.n	8005564 <PRL_Received+0xd6>
 800555c:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8005560:	ea01 0b0b 	and.w	fp, r1, fp
 8005564:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8005568:	ea00 0b0b 	and.w	fp, r0, fp
 800556c:	f3c7 1081 	ubfx	r0, r7, #6, #2
 8005570:	2802      	cmp	r0, #2
 8005572:	bf38      	it	cc
 8005574:	f04b 0b40 	orrcc.w	fp, fp, #64	; 0x40
 8005578:	0438      	lsls	r0, r7, #16
 800557a:	ea4f 6950 	mov.w	r9, r0, lsr #25
 800557e:	f369 2b4b 	bfi	fp, r9, #9, #3
 8005582:	f885 b018 	strb.w	fp, [r5, #24]
 8005586:	ea4f 201b 	mov.w	r0, fp, lsr #8
 800558a:	7668      	strb	r0, [r5, #25]
 800558c:	4640      	mov	r0, r8
 800558e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8005592:	f7fb fb5e 	bl	8000c52 <PE_PRL_PostReceiveEvent>
 8005596:	2800      	cmp	r0, #0
 8005598:	d0b7      	beq.n	800550a <PRL_Received+0x7c>
 800559a:	2001      	movs	r0, #1
 800559c:	7428      	strb	r0, [r5, #16]
 800559e:	4650      	mov	r0, sl
 80055a0:	f00a fe06 	bl	80101b0 <USBPD_TIM_IsExpired>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d0fa      	beq.n	800559e <PRL_Received+0x110>
 80055a8:	2302      	movs	r3, #2
 80055aa:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80055ae:	f105 0218 	add.w	r2, r5, #24
 80055b2:	4640      	mov	r0, r8
 80055b4:	f009 faf9 	bl	800ebaa <USBPD_PHY_SendMessage>
 80055b8:	f88d 0004 	strb.w	r0, [sp, #4]
 80055bc:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80055c0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80055c4:	7268      	strb	r0, [r5, #9]
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7fb fb75 	bl	8000cb6 <PE_PRL_PostReceiveEventCopy>
 80055cc:	7af2      	ldrb	r2, [r6, #11]
 80055ce:	7ab3      	ldrb	r3, [r6, #10]
 80055d0:	0439      	lsls	r1, r7, #16
 80055d2:	eb03 2a02 	add.w	sl, r3, r2, lsl #8
 80055d6:	0fc9      	lsrs	r1, r1, #31
 80055d8:	f3ca 0b08 	ubfx	fp, sl, #0, #9
 80055dc:	d006      	beq.n	80055ec <PRL_Received+0x15e>
 80055de:	ea4f 400a 	mov.w	r0, sl, lsl #16
 80055e2:	0fc0      	lsrs	r0, r0, #31
 80055e4:	bf08      	it	eq
 80055e6:	f10b 0004 	addeq.w	r0, fp, #4
 80055ea:	d015      	beq.n	8005618 <PRL_Received+0x18a>
 80055ec:	7828      	ldrb	r0, [r5, #0]
 80055ee:	b988      	cbnz	r0, 8005614 <PRL_Received+0x186>
 80055f0:	b184      	cbz	r4, 8005614 <PRL_Received+0x186>
 80055f2:	f007 001f 	and.w	r0, r7, #31
 80055f6:	2803      	cmp	r0, #3
 80055f8:	d10c      	bne.n	8005614 <PRL_Received+0x186>
 80055fa:	7b30      	ldrb	r0, [r6, #12]
 80055fc:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 8005600:	7b72      	ldrb	r2, [r6, #13]
 8005602:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005606:	eb01 6102 	add.w	r1, r1, r2, lsl #24
 800560a:	0f09      	lsrs	r1, r1, #28
 800560c:	2908      	cmp	r1, #8
 800560e:	bf04      	itt	eq
 8005610:	2001      	moveq	r0, #1
 8005612:	7028      	strbeq	r0, [r5, #0]
 8005614:	00a0      	lsls	r0, r4, #2
 8005616:	1c80      	adds	r0, r0, #2
 8005618:	f8df e300 	ldr.w	lr, [pc, #768]	; 800591c <.text_34>
 800561c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005620:	f8de c000 	ldr.w	ip, [lr]
 8005624:	9000      	str	r0, [sp, #0]
 8005626:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800562a:	4641      	mov	r1, r8
 800562c:	2001      	movs	r0, #1
 800562e:	47e0      	blx	ip
 8005630:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005634:	2800      	cmp	r0, #0
 8005636:	f040 80bf 	bne.w	80057b8 <PRL_Received+0x32a>
 800563a:	2102      	movs	r1, #2
 800563c:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 800591c <.text_34>
 8005640:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005644:	f8de c000 	ldr.w	ip, [lr]
 8005648:	9100      	str	r1, [sp, #0]
 800564a:	f105 0318 	add.w	r3, r5, #24
 800564e:	4641      	mov	r1, r8
 8005650:	2002      	movs	r0, #2
 8005652:	47e0      	blx	ip
 8005654:	9802      	ldr	r0, [sp, #8]
 8005656:	7981      	ldrb	r1, [r0, #6]
 8005658:	f3c7 2042 	ubfx	r0, r7, #9, #3
 800565c:	4281      	cmp	r1, r0
 800565e:	f000 80a4 	beq.w	80057aa <PRL_Received+0x31c>
 8005662:	9802      	ldr	r0, [sp, #8]
 8005664:	f009 0107 	and.w	r1, r9, #7
 8005668:	7181      	strb	r1, [r0, #6]
 800566a:	842f      	strh	r7, [r5, #32]
 800566c:	0439      	lsls	r1, r7, #16
 800566e:	0fc9      	lsrs	r1, r1, #31
 8005670:	d074      	beq.n	800575c <PRL_Received+0x2ce>
 8005672:	ea4f 400a 	mov.w	r0, sl, lsl #16
 8005676:	0fc0      	lsrs	r0, r0, #31
 8005678:	d070      	beq.n	800575c <PRL_Received+0x2ce>
 800567a:	211a      	movs	r1, #26
 800567c:	f41a 4ff8 	tst.w	sl, #31744	; 0x7c00
 8005680:	f8a5 a01e 	strh.w	sl, [r5, #30]
 8005684:	f3ca 0208 	ubfx	r2, sl, #0, #9
 8005688:	f3ca 20c3 	ubfx	r0, sl, #11, #4
 800568c:	d13b      	bne.n	8005706 <PRL_Received+0x278>
 800568e:	2c07      	cmp	r4, #7
 8005690:	d301      	bcc.n	8005696 <PRL_Received+0x208>
 8005692:	2a1a      	cmp	r2, #26
 8005694:	d820      	bhi.n	80056d8 <PRL_Received+0x24a>
 8005696:	2300      	movs	r3, #0
 8005698:	3534      	adds	r5, #52	; 0x34
 800569a:	e00a      	b.n	80056b2 <PRL_Received+0x224>
 800569c:	f8d6 c000 	ldr.w	ip, [r6]
 80056a0:	f815 a003 	ldrb.w	sl, [r5, r3]
 80056a4:	4686      	mov	lr, r0
 80056a6:	fb11 3e0e 	smlabb	lr, r1, lr, r3
 80056aa:	1c5b      	adds	r3, r3, #1
 80056ac:	f80c a00e 	strb.w	sl, [ip, lr]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80056b6:	f1ac 0c02 	sub.w	ip, ip, #2
 80056ba:	4563      	cmp	r3, ip
 80056bc:	d3ee      	bcc.n	800569c <PRL_Received+0x20e>
 80056be:	00a4      	lsls	r4, r4, #2
 80056c0:	1ea4      	subs	r4, r4, #2
 80056c2:	4294      	cmp	r4, r2
 80056c4:	d204      	bcs.n	80056d0 <PRL_Received+0x242>
 80056c6:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80056ca:	0080      	lsls	r0, r0, #2
 80056cc:	1e80      	subs	r0, r0, #2
 80056ce:	e010      	b.n	80056f2 <PRL_Received+0x264>
 80056d0:	6870      	ldr	r0, [r6, #4]
 80056d2:	f8a0 b000 	strh.w	fp, [r0]
 80056d6:	e00e      	b.n	80056f6 <PRL_Received+0x268>
 80056d8:	2101      	movs	r1, #1
 80056da:	f885 1025 	strb.w	r1, [r5, #37]	; 0x25
 80056de:	2000      	movs	r0, #0
 80056e0:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	5c0a      	ldrb	r2, [r1, r0]
 80056e8:	541a      	strb	r2, [r3, r0]
 80056ea:	1c40      	adds	r0, r0, #1
 80056ec:	281a      	cmp	r0, #26
 80056ee:	d3f9      	bcc.n	80056e4 <PRL_Received+0x256>
 80056f0:	201a      	movs	r0, #26
 80056f2:	6871      	ldr	r1, [r6, #4]
 80056f4:	8008      	strh	r0, [r1, #0]
 80056f6:	4640      	mov	r0, r8
 80056f8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80056fc:	b005      	add	sp, #20
 80056fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005702:	f7fb baa6 	b.w	8000c52 <PE_PRL_PostReceiveEvent>
 8005706:	6873      	ldr	r3, [r6, #4]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	f240 1805 	movw	r8, #261	; 0x105
 800570e:	f103 0c1a 	add.w	ip, r3, #26
 8005712:	45c4      	cmp	ip, r8
 8005714:	bf3e      	ittt	cc
 8005716:	eb03 0e84 	addcc.w	lr, r3, r4, lsl #2
 800571a:	f1ae 0e02 	subcc.w	lr, lr, #2
 800571e:	4596      	cmpcc	lr, r2
 8005720:	d21d      	bcs.n	800575e <PRL_Received+0x2d0>
 8005722:	2201      	movs	r2, #1
 8005724:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 8005728:	3534      	adds	r5, #52	; 0x34
 800572a:	2200      	movs	r2, #0
 800572c:	e009      	b.n	8005742 <PRL_Received+0x2b4>
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	f815 e002 	ldrb.w	lr, [r5, r2]
 8005734:	4680      	mov	r8, r0
 8005736:	fb11 2808 	smlabb	r8, r1, r8, r2
 800573a:	1c52      	adds	r2, r2, #1
 800573c:	f803 e008 	strb.w	lr, [r3, r8]
 8005740:	b292      	uxth	r2, r2
 8005742:	00a3      	lsls	r3, r4, #2
 8005744:	1e9b      	subs	r3, r3, #2
 8005746:	429a      	cmp	r2, r3
 8005748:	d3f1      	bcc.n	800572e <PRL_Received+0x2a0>
 800574a:	6871      	ldr	r1, [r6, #4]
 800574c:	880a      	ldrh	r2, [r1, #0]
 800574e:	043f      	lsls	r7, r7, #16
 8005750:	0ebf      	lsrs	r7, r7, #26
 8005752:	f007 071c 	and.w	r7, r7, #28
 8005756:	1eb8      	subs	r0, r7, #2
 8005758:	1882      	adds	r2, r0, r2
 800575a:	800a      	strh	r2, [r1, #0]
 800575c:	e02c      	b.n	80057b8 <PRL_Received+0x32a>
 800575e:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 8005762:	1ebf      	subs	r7, r7, #2
 8005764:	4547      	cmp	r7, r8
 8005766:	d21c      	bcs.n	80057a2 <PRL_Received+0x314>
 8005768:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800576c:	1e9b      	subs	r3, r3, #2
 800576e:	4293      	cmp	r3, r2
 8005770:	d317      	bcc.n	80057a2 <PRL_Received+0x314>
 8005772:	2201      	movs	r2, #1
 8005774:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 8005778:	f105 0734 	add.w	r7, r5, #52	; 0x34
 800577c:	2200      	movs	r2, #0
 800577e:	e008      	b.n	8005792 <PRL_Received+0x304>
 8005780:	6833      	ldr	r3, [r6, #0]
 8005782:	5cbd      	ldrb	r5, [r7, r2]
 8005784:	4680      	mov	r8, r0
 8005786:	fb11 2808 	smlabb	r8, r1, r8, r2
 800578a:	1c52      	adds	r2, r2, #1
 800578c:	f803 5008 	strb.w	r5, [r3, r8]
 8005790:	b292      	uxth	r2, r2
 8005792:	00a3      	lsls	r3, r4, #2
 8005794:	1e9b      	subs	r3, r3, #2
 8005796:	429a      	cmp	r2, r3
 8005798:	d3f2      	bcc.n	8005780 <PRL_Received+0x2f2>
 800579a:	6870      	ldr	r0, [r6, #4]
 800579c:	f8a0 b000 	strh.w	fp, [r0]
 80057a0:	e00a      	b.n	80057b8 <PRL_Received+0x32a>
 80057a2:	2100      	movs	r1, #0
 80057a4:	f885 1025 	strb.w	r1, [r5, #37]	; 0x25
 80057a8:	e006      	b.n	80057b8 <PRL_Received+0x32a>
 80057aa:	2000      	movs	r0, #0
 80057ac:	7428      	strb	r0, [r5, #16]
 80057ae:	4640      	mov	r0, r8
 80057b0:	f7fb fa6b 	bl	8000c8a <PE_PRL_PostReceiveEventError>
 80057b4:	2000      	movs	r0, #0
 80057b6:	72a8      	strb	r0, [r5, #10]
 80057b8:	b005      	add	sp, #20
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080057be <PRL_ResetIndicate>:
 80057be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c0:	460d      	mov	r5, r1
 80057c2:	2d05      	cmp	r5, #5
 80057c4:	4604      	mov	r4, r0
 80057c6:	d11b      	bne.n	8005800 <PRL_ResetIndicate+0x42>
 80057c8:	2000      	movs	r0, #0
 80057ca:	4626      	mov	r6, r4
 80057cc:	4f52      	ldr	r7, [pc, #328]	; (8005918 <.text_33>)
 80057ce:	2300      	movs	r3, #0
 80057d0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80057d4:	b2c2      	uxtb	r2, r0
 80057d6:	4411      	add	r1, r2
 80057d8:	1c40      	adds	r0, r0, #1
 80057da:	72cb      	strb	r3, [r1, #11]
 80057dc:	b2c1      	uxtb	r1, r0
 80057de:	2903      	cmp	r1, #3
 80057e0:	d3f6      	bcc.n	80057d0 <PRL_ResetIndicate+0x12>
 80057e2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80057e6:	220f      	movs	r2, #15
 80057e8:	2103      	movs	r1, #3
 80057ea:	1d98      	adds	r0, r3, #6
 80057ec:	f000 f8a5 	bl	800593a <__aeabi_memset>
 80057f0:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80057f4:	2100      	movs	r1, #0
 80057f6:	7141      	strb	r1, [r0, #5]
 80057f8:	7001      	strb	r1, [r0, #0]
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff fd78 	bl	80052f0 <PRL_DisableRX>
 8005800:	2000      	movs	r0, #0
 8005802:	4e46      	ldr	r6, [pc, #280]	; (800591c <.text_34>)
 8005804:	6837      	ldr	r7, [r6, #0]
 8005806:	9000      	str	r0, [sp, #0]
 8005808:	2300      	movs	r3, #0
 800580a:	462a      	mov	r2, r5
 800580c:	4621      	mov	r1, r4
 800580e:	2001      	movs	r0, #1
 8005810:	47b8      	blx	r7
 8005812:	4629      	mov	r1, r5
 8005814:	4620      	mov	r0, r4
 8005816:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 800581a:	f7fb b923 	b.w	8000a64 <PE_PRL_ResetReceived>

0800581e <PRL_ResetCompleted>:
 800581e:	4a3e      	ldr	r2, [pc, #248]	; (8005918 <.text_33>)
 8005820:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005824:	2101      	movs	r1, #1
 8005826:	70c1      	strb	r1, [r0, #3]
 8005828:	4770      	bx	lr

0800582a <PRL_BistCompleted>:
 800582a:	f7fb b93f 	b.w	8000aac <PE_PRL_BistCompleted>

0800582e <PRL_TxCompleted>:
 800582e:	b538      	push	{r3, r4, r5, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	4839      	ldr	r0, [pc, #228]	; (8005918 <.text_33>)
 8005834:	4622      	mov	r2, r4
 8005836:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800583a:	7c28      	ldrb	r0, [r5, #16]
 800583c:	2801      	cmp	r0, #1
 800583e:	d002      	beq.n	8005846 <PRL_TxCompleted+0x18>
 8005840:	2802      	cmp	r0, #2
 8005842:	d00b      	beq.n	800585c <PRL_TxCompleted+0x2e>
 8005844:	e014      	b.n	8005870 <PRL_TxCompleted+0x42>
 8005846:	2900      	cmp	r1, #0
 8005848:	4620      	mov	r0, r4
 800584a:	d102      	bne.n	8005852 <PRL_TxCompleted+0x24>
 800584c:	f7fb fa50 	bl	8000cf0 <PE_PRL_PostReceiveEventComplete>
 8005850:	e001      	b.n	8005856 <PRL_TxCompleted+0x28>
 8005852:	f7fb fa1a 	bl	8000c8a <PE_PRL_PostReceiveEventError>
 8005856:	2000      	movs	r0, #0
 8005858:	72a8      	strb	r0, [r5, #10]
 800585a:	e009      	b.n	8005870 <PRL_TxCompleted+0x42>
 800585c:	4620      	mov	r0, r4
 800585e:	f009 f96d 	bl	800eb3c <USBPD_PHY_GetRetryTimerValue>
 8005862:	4601      	mov	r1, r0
 8005864:	2c00      	cmp	r4, #0
 8005866:	bf0c      	ite	eq
 8005868:	2001      	moveq	r0, #1
 800586a:	2003      	movne	r0, #3
 800586c:	f00a fc2e 	bl	80100cc <USBPD_TIM_Start>
 8005870:	2000      	movs	r0, #0
 8005872:	7428      	strb	r0, [r5, #16]
 8005874:	bd31      	pop	{r0, r4, r5, pc}

08005876 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8005876:	b530      	push	{r4, r5, lr}
 8005878:	4c27      	ldr	r4, [pc, #156]	; (8005918 <.text_33>)
 800587a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800587e:	8ba5      	ldrh	r5, [r4, #28]
 8005880:	f248 30ff 	movw	r0, #33791	; 0x83ff
 8005884:	4005      	ands	r5, r0
 8005886:	8a60      	ldrh	r0, [r4, #18]
 8005888:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800588c:	8260      	strh	r0, [r4, #18]
 800588e:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8005892:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
 8005896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800589a:	8c20      	ldrh	r0, [r4, #32]
 800589c:	8a61      	ldrh	r1, [r4, #18]
 800589e:	432a      	orrs	r2, r5
 80058a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a4:	f360 0104 	bfi	r1, r0, #0, #5
 80058a8:	83a2      	strh	r2, [r4, #28]
 80058aa:	8261      	strh	r1, [r4, #18]
 80058ac:	7019      	strb	r1, [r3, #0]
 80058ae:	8a61      	ldrh	r1, [r4, #18]
 80058b0:	0a09      	lsrs	r1, r1, #8
 80058b2:	7059      	strb	r1, [r3, #1]
 80058b4:	8ba0      	ldrh	r0, [r4, #28]
 80058b6:	7098      	strb	r0, [r3, #2]
 80058b8:	8ba1      	ldrh	r1, [r4, #28]
 80058ba:	0a09      	lsrs	r1, r1, #8
 80058bc:	70d9      	strb	r1, [r3, #3]
 80058be:	bd30      	pop	{r4, r5, pc}

080058c0 <USBPD_PRL_PrepareChunkRequest>:
 80058c0:	b530      	push	{r4, r5, lr}
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <.text_33>)
 80058c4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80058c8:	f100 0212 	add.w	r2, r0, #18
 80058cc:	8953      	ldrh	r3, [r2, #10]
 80058ce:	8994      	ldrh	r4, [r2, #12]
 80058d0:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80058d4:	0ae4      	lsrs	r4, r4, #11
 80058d6:	8153      	strh	r3, [r2, #10]
 80058d8:	1c64      	adds	r4, r4, #1
 80058da:	02e4      	lsls	r4, r4, #11
 80058dc:	f403 4306 	and.w	r3, r3, #34304	; 0x8600
 80058e0:	f404 44f0 	and.w	r4, r4, #30720	; 0x7800
 80058e4:	4323      	orrs	r3, r4
 80058e6:	8153      	strh	r3, [r2, #10]
 80058e8:	2500      	movs	r5, #0
 80058ea:	8813      	ldrh	r3, [r2, #0]
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f0:	8013      	strh	r3, [r2, #0]
 80058f2:	8814      	ldrh	r4, [r2, #0]
 80058f4:	89d3      	ldrh	r3, [r2, #14]
 80058f6:	f363 0404 	bfi	r4, r3, #0, #5
 80058fa:	8014      	strh	r4, [r2, #0]
 80058fc:	7145      	strb	r5, [r0, #5]
 80058fe:	8810      	ldrh	r0, [r2, #0]
 8005900:	7008      	strb	r0, [r1, #0]
 8005902:	8813      	ldrh	r3, [r2, #0]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	704b      	strb	r3, [r1, #1]
 8005908:	8950      	ldrh	r0, [r2, #10]
 800590a:	7088      	strb	r0, [r1, #2]
 800590c:	8952      	ldrh	r2, [r2, #10]
 800590e:	710d      	strb	r5, [r1, #4]
 8005910:	0a12      	lsrs	r2, r2, #8
 8005912:	714d      	strb	r5, [r1, #5]
 8005914:	70ca      	strb	r2, [r1, #3]
 8005916:	bd30      	pop	{r4, r5, pc}

08005918 <.text_33>:
 8005918:	2000037c 	.word	0x2000037c

0800591c <.text_34>:
 800591c:	20000000 	.word	0x20000000

08005920 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005920:	0800548f 080057bf 0800581f 0800582b     .T...W...X..+X..
 8005930:	0800582f 08004f2d                       /X..-O..

08005938 <.text_36>:
 8005938:	0001      	.short	0x0001

0800593a <__aeabi_memset>:
 800593a:	b470      	push	{r4, r5, r6}
 800593c:	0784      	lsls	r4, r0, #30
 800593e:	d046      	beq.n	80059ce <__aeabi_memset+0x94>
 8005940:	1e4c      	subs	r4, r1, #1
 8005942:	2900      	cmp	r1, #0
 8005944:	d041      	beq.n	80059ca <__aeabi_memset+0x90>
 8005946:	b2d5      	uxtb	r5, r2
 8005948:	4603      	mov	r3, r0
 800594a:	e002      	b.n	8005952 <__aeabi_memset+0x18>
 800594c:	1e61      	subs	r1, r4, #1
 800594e:	b3e4      	cbz	r4, 80059ca <__aeabi_memset+0x90>
 8005950:	460c      	mov	r4, r1
 8005952:	f803 5b01 	strb.w	r5, [r3], #1
 8005956:	0799      	lsls	r1, r3, #30
 8005958:	d1f8      	bne.n	800594c <__aeabi_memset+0x12>
 800595a:	2c03      	cmp	r4, #3
 800595c:	d92e      	bls.n	80059bc <__aeabi_memset+0x82>
 800595e:	b2d5      	uxtb	r5, r2
 8005960:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005964:	2c0f      	cmp	r4, #15
 8005966:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800596a:	d919      	bls.n	80059a0 <__aeabi_memset+0x66>
 800596c:	4626      	mov	r6, r4
 800596e:	f103 0110 	add.w	r1, r3, #16
 8005972:	3e10      	subs	r6, #16
 8005974:	2e0f      	cmp	r6, #15
 8005976:	f841 5c10 	str.w	r5, [r1, #-16]
 800597a:	f841 5c0c 	str.w	r5, [r1, #-12]
 800597e:	f841 5c08 	str.w	r5, [r1, #-8]
 8005982:	f841 5c04 	str.w	r5, [r1, #-4]
 8005986:	f101 0110 	add.w	r1, r1, #16
 800598a:	d8f2      	bhi.n	8005972 <__aeabi_memset+0x38>
 800598c:	f1a4 0110 	sub.w	r1, r4, #16
 8005990:	f021 010f 	bic.w	r1, r1, #15
 8005994:	f004 040f 	and.w	r4, r4, #15
 8005998:	3110      	adds	r1, #16
 800599a:	2c03      	cmp	r4, #3
 800599c:	440b      	add	r3, r1
 800599e:	d90d      	bls.n	80059bc <__aeabi_memset+0x82>
 80059a0:	461e      	mov	r6, r3
 80059a2:	4621      	mov	r1, r4
 80059a4:	3904      	subs	r1, #4
 80059a6:	2903      	cmp	r1, #3
 80059a8:	f846 5b04 	str.w	r5, [r6], #4
 80059ac:	d8fa      	bhi.n	80059a4 <__aeabi_memset+0x6a>
 80059ae:	1f21      	subs	r1, r4, #4
 80059b0:	f021 0103 	bic.w	r1, r1, #3
 80059b4:	3104      	adds	r1, #4
 80059b6:	440b      	add	r3, r1
 80059b8:	f004 0403 	and.w	r4, r4, #3
 80059bc:	b12c      	cbz	r4, 80059ca <__aeabi_memset+0x90>
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	441c      	add	r4, r3
 80059c2:	f803 2b01 	strb.w	r2, [r3], #1
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	d1fb      	bne.n	80059c2 <__aeabi_memset+0x88>
 80059ca:	bc70      	pop	{r4, r5, r6}
 80059cc:	4770      	bx	lr
 80059ce:	460c      	mov	r4, r1
 80059d0:	4603      	mov	r3, r0
 80059d2:	e7c2      	b.n	800595a <__aeabi_memset+0x20>

080059d4 <strlen>:
 80059d4:	4603      	mov	r3, r0
 80059d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059da:	2a00      	cmp	r2, #0
 80059dc:	d1fb      	bne.n	80059d6 <strlen+0x2>
 80059de:	1a18      	subs	r0, r3, r0
 80059e0:	3801      	subs	r0, #1
 80059e2:	4770      	bx	lr
	...

080059f0 <memchr>:
 80059f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80059f4:	2a10      	cmp	r2, #16
 80059f6:	db2b      	blt.n	8005a50 <memchr+0x60>
 80059f8:	f010 0f07 	tst.w	r0, #7
 80059fc:	d008      	beq.n	8005a10 <memchr+0x20>
 80059fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a02:	3a01      	subs	r2, #1
 8005a04:	428b      	cmp	r3, r1
 8005a06:	d02d      	beq.n	8005a64 <memchr+0x74>
 8005a08:	f010 0f07 	tst.w	r0, #7
 8005a0c:	b342      	cbz	r2, 8005a60 <memchr+0x70>
 8005a0e:	d1f6      	bne.n	80059fe <memchr+0xe>
 8005a10:	b4f0      	push	{r4, r5, r6, r7}
 8005a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005a1a:	f022 0407 	bic.w	r4, r2, #7
 8005a1e:	f07f 0700 	mvns.w	r7, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005a28:	3c08      	subs	r4, #8
 8005a2a:	ea85 0501 	eor.w	r5, r5, r1
 8005a2e:	ea86 0601 	eor.w	r6, r6, r1
 8005a32:	fa85 f547 	uadd8	r5, r5, r7
 8005a36:	faa3 f587 	sel	r5, r3, r7
 8005a3a:	fa86 f647 	uadd8	r6, r6, r7
 8005a3e:	faa5 f687 	sel	r6, r5, r7
 8005a42:	b98e      	cbnz	r6, 8005a68 <memchr+0x78>
 8005a44:	d1ee      	bne.n	8005a24 <memchr+0x34>
 8005a46:	bcf0      	pop	{r4, r5, r6, r7}
 8005a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005a4c:	f002 0207 	and.w	r2, r2, #7
 8005a50:	b132      	cbz	r2, 8005a60 <memchr+0x70>
 8005a52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a56:	3a01      	subs	r2, #1
 8005a58:	ea83 0301 	eor.w	r3, r3, r1
 8005a5c:	b113      	cbz	r3, 8005a64 <memchr+0x74>
 8005a5e:	d1f8      	bne.n	8005a52 <memchr+0x62>
 8005a60:	2000      	movs	r0, #0
 8005a62:	4770      	bx	lr
 8005a64:	3801      	subs	r0, #1
 8005a66:	4770      	bx	lr
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	bf06      	itte	eq
 8005a6c:	4635      	moveq	r5, r6
 8005a6e:	3803      	subeq	r0, #3
 8005a70:	3807      	subne	r0, #7
 8005a72:	f015 0f01 	tst.w	r5, #1
 8005a76:	d107      	bne.n	8005a88 <memchr+0x98>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005a7e:	bf02      	ittt	eq
 8005a80:	3001      	addeq	r0, #1
 8005a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005a86:	3001      	addeq	r0, #1
 8005a88:	bcf0      	pop	{r4, r5, r6, r7}
 8005a8a:	3801      	subs	r0, #1
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <__aeabi_uldivmod>:
 8005a90:	b953      	cbnz	r3, 8005aa8 <__aeabi_uldivmod+0x18>
 8005a92:	b94a      	cbnz	r2, 8005aa8 <__aeabi_uldivmod+0x18>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	bf08      	it	eq
 8005a98:	2800      	cmpeq	r0, #0
 8005a9a:	bf1c      	itt	ne
 8005a9c:	f04f 31ff 	movne.w	r1, #4294967295
 8005aa0:	f04f 30ff 	movne.w	r0, #4294967295
 8005aa4:	f000 b96e 	b.w	8005d84 <__aeabi_idiv0>
 8005aa8:	f1ad 0c08 	sub.w	ip, sp, #8
 8005aac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005ab0:	f000 f806 	bl	8005ac0 <__udivmoddi4>
 8005ab4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005abc:	b004      	add	sp, #16
 8005abe:	4770      	bx	lr

08005ac0 <__udivmoddi4>:
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	9d08      	ldr	r5, [sp, #32]
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	468c      	mov	ip, r1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 8083 	bne.w	8005bd6 <__udivmoddi4+0x116>
 8005ad0:	428a      	cmp	r2, r1
 8005ad2:	4617      	mov	r7, r2
 8005ad4:	d947      	bls.n	8005b66 <__udivmoddi4+0xa6>
 8005ad6:	fab2 f282 	clz	r2, r2
 8005ada:	b142      	cbz	r2, 8005aee <__udivmoddi4+0x2e>
 8005adc:	f1c2 0020 	rsb	r0, r2, #32
 8005ae0:	fa24 f000 	lsr.w	r0, r4, r0
 8005ae4:	4091      	lsls	r1, r2
 8005ae6:	4097      	lsls	r7, r2
 8005ae8:	ea40 0c01 	orr.w	ip, r0, r1
 8005aec:	4094      	lsls	r4, r2
 8005aee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8005af2:	0c23      	lsrs	r3, r4, #16
 8005af4:	fbbc f6f8 	udiv	r6, ip, r8
 8005af8:	fa1f fe87 	uxth.w	lr, r7
 8005afc:	fb08 c116 	mls	r1, r8, r6, ip
 8005b00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005b04:	fb06 f10e 	mul.w	r1, r6, lr
 8005b08:	4299      	cmp	r1, r3
 8005b0a:	d909      	bls.n	8005b20 <__udivmoddi4+0x60>
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8005b12:	f080 8119 	bcs.w	8005d48 <__udivmoddi4+0x288>
 8005b16:	4299      	cmp	r1, r3
 8005b18:	f240 8116 	bls.w	8005d48 <__udivmoddi4+0x288>
 8005b1c:	3e02      	subs	r6, #2
 8005b1e:	443b      	add	r3, r7
 8005b20:	1a5b      	subs	r3, r3, r1
 8005b22:	b2a4      	uxth	r4, r4
 8005b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8005b28:	fb08 3310 	mls	r3, r8, r0, r3
 8005b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005b30:	fb00 fe0e 	mul.w	lr, r0, lr
 8005b34:	45a6      	cmp	lr, r4
 8005b36:	d909      	bls.n	8005b4c <__udivmoddi4+0x8c>
 8005b38:	193c      	adds	r4, r7, r4
 8005b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b3e:	f080 8105 	bcs.w	8005d4c <__udivmoddi4+0x28c>
 8005b42:	45a6      	cmp	lr, r4
 8005b44:	f240 8102 	bls.w	8005d4c <__udivmoddi4+0x28c>
 8005b48:	3802      	subs	r0, #2
 8005b4a:	443c      	add	r4, r7
 8005b4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005b50:	eba4 040e 	sub.w	r4, r4, lr
 8005b54:	2600      	movs	r6, #0
 8005b56:	b11d      	cbz	r5, 8005b60 <__udivmoddi4+0xa0>
 8005b58:	40d4      	lsrs	r4, r2
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8005b60:	4631      	mov	r1, r6
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b66:	b902      	cbnz	r2, 8005b6a <__udivmoddi4+0xaa>
 8005b68:	deff      	udf	#255	; 0xff
 8005b6a:	fab2 f282 	clz	r2, r2
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d150      	bne.n	8005c14 <__udivmoddi4+0x154>
 8005b72:	1bcb      	subs	r3, r1, r7
 8005b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8005b78:	fa1f f887 	uxth.w	r8, r7
 8005b7c:	2601      	movs	r6, #1
 8005b7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8005b82:	0c21      	lsrs	r1, r4, #16
 8005b84:	fb0e 331c 	mls	r3, lr, ip, r3
 8005b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005b8c:	fb08 f30c 	mul.w	r3, r8, ip
 8005b90:	428b      	cmp	r3, r1
 8005b92:	d907      	bls.n	8005ba4 <__udivmoddi4+0xe4>
 8005b94:	1879      	adds	r1, r7, r1
 8005b96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8005b9a:	d202      	bcs.n	8005ba2 <__udivmoddi4+0xe2>
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	f200 80e9 	bhi.w	8005d74 <__udivmoddi4+0x2b4>
 8005ba2:	4684      	mov	ip, r0
 8005ba4:	1ac9      	subs	r1, r1, r3
 8005ba6:	b2a3      	uxth	r3, r4
 8005ba8:	fbb1 f0fe 	udiv	r0, r1, lr
 8005bac:	fb0e 1110 	mls	r1, lr, r0, r1
 8005bb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8005bb4:	fb08 f800 	mul.w	r8, r8, r0
 8005bb8:	45a0      	cmp	r8, r4
 8005bba:	d907      	bls.n	8005bcc <__udivmoddi4+0x10c>
 8005bbc:	193c      	adds	r4, r7, r4
 8005bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc2:	d202      	bcs.n	8005bca <__udivmoddi4+0x10a>
 8005bc4:	45a0      	cmp	r8, r4
 8005bc6:	f200 80d9 	bhi.w	8005d7c <__udivmoddi4+0x2bc>
 8005bca:	4618      	mov	r0, r3
 8005bcc:	eba4 0408 	sub.w	r4, r4, r8
 8005bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8005bd4:	e7bf      	b.n	8005b56 <__udivmoddi4+0x96>
 8005bd6:	428b      	cmp	r3, r1
 8005bd8:	d909      	bls.n	8005bee <__udivmoddi4+0x12e>
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	f000 80b1 	beq.w	8005d42 <__udivmoddi4+0x282>
 8005be0:	2600      	movs	r6, #0
 8005be2:	e9c5 0100 	strd	r0, r1, [r5]
 8005be6:	4630      	mov	r0, r6
 8005be8:	4631      	mov	r1, r6
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bee:	fab3 f683 	clz	r6, r3
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d14a      	bne.n	8005c8c <__udivmoddi4+0x1cc>
 8005bf6:	428b      	cmp	r3, r1
 8005bf8:	d302      	bcc.n	8005c00 <__udivmoddi4+0x140>
 8005bfa:	4282      	cmp	r2, r0
 8005bfc:	f200 80b8 	bhi.w	8005d70 <__udivmoddi4+0x2b0>
 8005c00:	1a84      	subs	r4, r0, r2
 8005c02:	eb61 0103 	sbc.w	r1, r1, r3
 8005c06:	2001      	movs	r0, #1
 8005c08:	468c      	mov	ip, r1
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	d0a8      	beq.n	8005b60 <__udivmoddi4+0xa0>
 8005c0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8005c12:	e7a5      	b.n	8005b60 <__udivmoddi4+0xa0>
 8005c14:	f1c2 0320 	rsb	r3, r2, #32
 8005c18:	fa20 f603 	lsr.w	r6, r0, r3
 8005c1c:	4097      	lsls	r7, r2
 8005c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8005c22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8005c26:	40d9      	lsrs	r1, r3
 8005c28:	4330      	orrs	r0, r6
 8005c2a:	0c03      	lsrs	r3, r0, #16
 8005c2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8005c30:	fa1f f887 	uxth.w	r8, r7
 8005c34:	fb0e 1116 	mls	r1, lr, r6, r1
 8005c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005c3c:	fb06 f108 	mul.w	r1, r6, r8
 8005c40:	4299      	cmp	r1, r3
 8005c42:	fa04 f402 	lsl.w	r4, r4, r2
 8005c46:	d909      	bls.n	8005c5c <__udivmoddi4+0x19c>
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8005c4e:	f080 808d 	bcs.w	8005d6c <__udivmoddi4+0x2ac>
 8005c52:	4299      	cmp	r1, r3
 8005c54:	f240 808a 	bls.w	8005d6c <__udivmoddi4+0x2ac>
 8005c58:	3e02      	subs	r6, #2
 8005c5a:	443b      	add	r3, r7
 8005c5c:	1a5b      	subs	r3, r3, r1
 8005c5e:	b281      	uxth	r1, r0
 8005c60:	fbb3 f0fe 	udiv	r0, r3, lr
 8005c64:	fb0e 3310 	mls	r3, lr, r0, r3
 8005c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005c6c:	fb00 f308 	mul.w	r3, r0, r8
 8005c70:	428b      	cmp	r3, r1
 8005c72:	d907      	bls.n	8005c84 <__udivmoddi4+0x1c4>
 8005c74:	1879      	adds	r1, r7, r1
 8005c76:	f100 3cff 	add.w	ip, r0, #4294967295
 8005c7a:	d273      	bcs.n	8005d64 <__udivmoddi4+0x2a4>
 8005c7c:	428b      	cmp	r3, r1
 8005c7e:	d971      	bls.n	8005d64 <__udivmoddi4+0x2a4>
 8005c80:	3802      	subs	r0, #2
 8005c82:	4439      	add	r1, r7
 8005c84:	1acb      	subs	r3, r1, r3
 8005c86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8005c8a:	e778      	b.n	8005b7e <__udivmoddi4+0xbe>
 8005c8c:	f1c6 0c20 	rsb	ip, r6, #32
 8005c90:	fa03 f406 	lsl.w	r4, r3, r6
 8005c94:	fa22 f30c 	lsr.w	r3, r2, ip
 8005c98:	431c      	orrs	r4, r3
 8005c9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8005c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8005ca2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8005ca6:	fa21 f10c 	lsr.w	r1, r1, ip
 8005caa:	431f      	orrs	r7, r3
 8005cac:	0c3b      	lsrs	r3, r7, #16
 8005cae:	fbb1 f9fe 	udiv	r9, r1, lr
 8005cb2:	fa1f f884 	uxth.w	r8, r4
 8005cb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8005cba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005cbe:	fb09 fa08 	mul.w	sl, r9, r8
 8005cc2:	458a      	cmp	sl, r1
 8005cc4:	fa02 f206 	lsl.w	r2, r2, r6
 8005cc8:	fa00 f306 	lsl.w	r3, r0, r6
 8005ccc:	d908      	bls.n	8005ce0 <__udivmoddi4+0x220>
 8005cce:	1861      	adds	r1, r4, r1
 8005cd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8005cd4:	d248      	bcs.n	8005d68 <__udivmoddi4+0x2a8>
 8005cd6:	458a      	cmp	sl, r1
 8005cd8:	d946      	bls.n	8005d68 <__udivmoddi4+0x2a8>
 8005cda:	f1a9 0902 	sub.w	r9, r9, #2
 8005cde:	4421      	add	r1, r4
 8005ce0:	eba1 010a 	sub.w	r1, r1, sl
 8005ce4:	b2bf      	uxth	r7, r7
 8005ce6:	fbb1 f0fe 	udiv	r0, r1, lr
 8005cea:	fb0e 1110 	mls	r1, lr, r0, r1
 8005cee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8005cf2:	fb00 f808 	mul.w	r8, r0, r8
 8005cf6:	45b8      	cmp	r8, r7
 8005cf8:	d907      	bls.n	8005d0a <__udivmoddi4+0x24a>
 8005cfa:	19e7      	adds	r7, r4, r7
 8005cfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8005d00:	d22e      	bcs.n	8005d60 <__udivmoddi4+0x2a0>
 8005d02:	45b8      	cmp	r8, r7
 8005d04:	d92c      	bls.n	8005d60 <__udivmoddi4+0x2a0>
 8005d06:	3802      	subs	r0, #2
 8005d08:	4427      	add	r7, r4
 8005d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005d0e:	eba7 0708 	sub.w	r7, r7, r8
 8005d12:	fba0 8902 	umull	r8, r9, r0, r2
 8005d16:	454f      	cmp	r7, r9
 8005d18:	46c6      	mov	lr, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	d31a      	bcc.n	8005d54 <__udivmoddi4+0x294>
 8005d1e:	d017      	beq.n	8005d50 <__udivmoddi4+0x290>
 8005d20:	b15d      	cbz	r5, 8005d3a <__udivmoddi4+0x27a>
 8005d22:	ebb3 020e 	subs.w	r2, r3, lr
 8005d26:	eb67 0701 	sbc.w	r7, r7, r1
 8005d2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005d2e:	40f2      	lsrs	r2, r6
 8005d30:	ea4c 0202 	orr.w	r2, ip, r2
 8005d34:	40f7      	lsrs	r7, r6
 8005d36:	e9c5 2700 	strd	r2, r7, [r5]
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	462e      	mov	r6, r5
 8005d44:	4628      	mov	r0, r5
 8005d46:	e70b      	b.n	8005b60 <__udivmoddi4+0xa0>
 8005d48:	4606      	mov	r6, r0
 8005d4a:	e6e9      	b.n	8005b20 <__udivmoddi4+0x60>
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	e6fd      	b.n	8005b4c <__udivmoddi4+0x8c>
 8005d50:	4543      	cmp	r3, r8
 8005d52:	d2e5      	bcs.n	8005d20 <__udivmoddi4+0x260>
 8005d54:	ebb8 0e02 	subs.w	lr, r8, r2
 8005d58:	eb69 0104 	sbc.w	r1, r9, r4
 8005d5c:	3801      	subs	r0, #1
 8005d5e:	e7df      	b.n	8005d20 <__udivmoddi4+0x260>
 8005d60:	4608      	mov	r0, r1
 8005d62:	e7d2      	b.n	8005d0a <__udivmoddi4+0x24a>
 8005d64:	4660      	mov	r0, ip
 8005d66:	e78d      	b.n	8005c84 <__udivmoddi4+0x1c4>
 8005d68:	4681      	mov	r9, r0
 8005d6a:	e7b9      	b.n	8005ce0 <__udivmoddi4+0x220>
 8005d6c:	4666      	mov	r6, ip
 8005d6e:	e775      	b.n	8005c5c <__udivmoddi4+0x19c>
 8005d70:	4630      	mov	r0, r6
 8005d72:	e74a      	b.n	8005c0a <__udivmoddi4+0x14a>
 8005d74:	f1ac 0c02 	sub.w	ip, ip, #2
 8005d78:	4439      	add	r1, r7
 8005d7a:	e713      	b.n	8005ba4 <__udivmoddi4+0xe4>
 8005d7c:	3802      	subs	r0, #2
 8005d7e:	443c      	add	r4, r7
 8005d80:	e724      	b.n	8005bcc <__udivmoddi4+0x10c>
 8005d82:	bf00      	nop

08005d84 <__aeabi_idiv0>:
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop

08005d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d8c:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <__NVIC_GetPriorityGrouping+0x18>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	f003 0307 	and.w	r3, r3, #7
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000ed00 	.word	0xe000ed00

08005da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	db0b      	blt.n	8005dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	f003 021f 	and.w	r2, r3, #31
 8005dbc:	4907      	ldr	r1, [pc, #28]	; (8005ddc <__NVIC_EnableIRQ+0x38>)
 8005dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	e000e100 	.word	0xe000e100

08005de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	db0a      	blt.n	8005e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	490c      	ldr	r1, [pc, #48]	; (8005e2c <__NVIC_SetPriority+0x4c>)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	0112      	lsls	r2, r2, #4
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	440b      	add	r3, r1
 8005e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e08:	e00a      	b.n	8005e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4908      	ldr	r1, [pc, #32]	; (8005e30 <__NVIC_SetPriority+0x50>)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	3b04      	subs	r3, #4
 8005e18:	0112      	lsls	r2, r2, #4
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	761a      	strb	r2, [r3, #24]
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000e100 	.word	0xe000e100
 8005e30:	e000ed00 	.word	0xe000ed00

08005e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	bf28      	it	cs
 8005e52:	2304      	movcs	r3, #4
 8005e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2b06      	cmp	r3, #6
 8005e5c:	d902      	bls.n	8005e64 <NVIC_EncodePriority+0x30>
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3b03      	subs	r3, #3
 8005e62:	e000      	b.n	8005e66 <NVIC_EncodePriority+0x32>
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43da      	mvns	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	401a      	ands	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	fa01 f303 	lsl.w	r3, r1, r3
 8005e86:	43d9      	mvns	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e8c:	4313      	orrs	r3, r2
         );
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3724      	adds	r7, #36	; 0x24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	075b      	lsls	r3, r3, #29
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	065b      	lsls	r3, r3, #25
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(USART_TypeDef *LPUARTx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f3e:	d101      	bne.n	8005f44 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(USART_TypeDef *LPUARTx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f66:	d101      	bne.n	8005f6c <LL_LPUART_IsActiveFlag_REACK+0x1a>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <LL_LPUART_IsActiveFlag_REACK+0x1c>
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f88:	4907      	ldr	r1, [pc, #28]	; (8005fa8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4013      	ands	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40021000 	.word	0x40021000

08005fac <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8005fb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fb8:	4907      	ldr	r1, [pc, #28]	; (8005fd8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8005fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40021000 	.word	0x40021000

08005fdc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005fec:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <LL_DMA_SetDataTransferDirection+0x4c>)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006000:	f023 0310 	bic.w	r3, r3, #16
 8006004:	4908      	ldr	r1, [pc, #32]	; (8006028 <LL_DMA_SetDataTransferDirection+0x4c>)
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	440a      	add	r2, r1
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	4611      	mov	r1, r2
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	4611      	mov	r1, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	0801cb00 	.word	0x0801cb00

0800602c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 800603c:	4a0d      	ldr	r2, [pc, #52]	; (8006074 <LL_DMA_SetMode+0x48>)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4413      	add	r3, r2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 0220 	bic.w	r2, r3, #32
 8006050:	4908      	ldr	r1, [pc, #32]	; (8006074 <LL_DMA_SetMode+0x48>)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	440b      	add	r3, r1
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	4619      	mov	r1, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	440b      	add	r3, r1
 800605e:	4619      	mov	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4313      	orrs	r3, r2
 8006064:	600b      	str	r3, [r1, #0]
             Mode);
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	0801cb00 	.word	0x0801cb00

08006078 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8006088:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <LL_DMA_SetPeriphIncMode+0x48>)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4413      	add	r3, r2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800609c:	4908      	ldr	r1, [pc, #32]	; (80060c0 <LL_DMA_SetPeriphIncMode+0x48>)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	440b      	add	r3, r1
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	440b      	add	r3, r1
 80060aa:	4619      	mov	r1, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	0801cb00 	.word	0x0801cb00

080060c4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 80060d4:	4a0d      	ldr	r2, [pc, #52]	; (800610c <LL_DMA_SetMemoryIncMode+0x48>)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4413      	add	r3, r2
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060e8:	4908      	ldr	r1, [pc, #32]	; (800610c <LL_DMA_SetMemoryIncMode+0x48>)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	440b      	add	r3, r1
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	440b      	add	r3, r1
 80060f6:	4619      	mov	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	0801cb00 	.word	0x0801cb00

08006110 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8006120:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <LL_DMA_SetPeriphSize+0x48>)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4413      	add	r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006134:	4908      	ldr	r1, [pc, #32]	; (8006158 <LL_DMA_SetPeriphSize+0x48>)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	440b      	add	r3, r1
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	4619      	mov	r1, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	440b      	add	r3, r1
 8006142:	4619      	mov	r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4313      	orrs	r3, r2
 8006148:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	0801cb00 	.word	0x0801cb00

0800615c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800616c:	4a0d      	ldr	r2, [pc, #52]	; (80061a4 <LL_DMA_SetMemorySize+0x48>)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006180:	4908      	ldr	r1, [pc, #32]	; (80061a4 <LL_DMA_SetMemorySize+0x48>)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	440b      	add	r3, r1
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	440b      	add	r3, r1
 800618e:	4619      	mov	r1, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	0801cb00 	.word	0x0801cb00

080061a8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80061b8:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061cc:	4908      	ldr	r1, [pc, #32]	; (80061f0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	440b      	add	r3, r1
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	4619      	mov	r1, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	440b      	add	r3, r1
 80061da:	4619      	mov	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4313      	orrs	r3, r2
 80061e0:	600b      	str	r3, [r1, #0]
             Priority);
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	0801cb00 	.word	0x0801cb00

080061f4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006208:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800621c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006232:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800624c:	f000 fc65 	bl	8006b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006250:	f000 f820 	bl	8006294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006254:	f000 fa56 	bl	8006704 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8006258:	f000 f88a 	bl	8006370 <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 800625c:	f000 f9f0 	bl	8006640 <MX_DMA_Init>
  MX_UCPD1_Init();
 8006260:	f000 f95e 	bl	8006520 <MX_UCPD1_Init>
  MX_USB_Device_Init();
 8006264:	f010 f894 	bl	8016390 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006268:	f00b fc5e 	bl	8011b28 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 800626c:	f00e fcc6 	bl	8014bfc <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006270:	4a05      	ldr	r2, [pc, #20]	; (8006288 <main+0x40>)
 8006272:	2100      	movs	r1, #0
 8006274:	4805      	ldr	r0, [pc, #20]	; (800628c <main+0x44>)
 8006276:	f00b fca1 	bl	8011bbc <osThreadNew>
 800627a:	4603      	mov	r3, r0
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <main+0x48>)
 800627e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8006280:	f00b fc76 	bl	8011b70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006284:	e7fe      	b.n	8006284 <main+0x3c>
 8006286:	bf00      	nop
 8006288:	0801cb08 	.word	0x0801cb08
 800628c:	080067e5 	.word	0x080067e5
 8006290:	20002ff4 	.word	0x20002ff4

08006294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b0a8      	sub	sp, #160	; 0xa0
 8006298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800629a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800629e:	2238      	movs	r2, #56	; 0x38
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f015 fb0e 	bl	801b8c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062b8:	463b      	mov	r3, r7
 80062ba:	2254      	movs	r2, #84	; 0x54
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f015 fb00 	bl	801b8c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80062c4:	2000      	movs	r0, #0
 80062c6:	f002 fe73 	bl	8008fb0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80062ca:	2322      	movs	r3, #34	; 0x22
 80062cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80062d4:	2340      	movs	r3, #64	; 0x40
 80062d6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80062d8:	2301      	movs	r3, #1
 80062da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062de:	2302      	movs	r3, #2
 80062e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80062e4:	2302      	movs	r3, #2
 80062e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80062ea:	2304      	movs	r3, #4
 80062ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80062f0:	2355      	movs	r3, #85	; 0x55
 80062f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80062f6:	2302      	movs	r3, #2
 80062f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80062fc:	2302      	movs	r3, #2
 80062fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006302:	2302      	movs	r3, #2
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006308:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800630c:	4618      	mov	r0, r3
 800630e:	f002 fef3 	bl	80090f8 <HAL_RCC_OscConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8006318:	f000 fa8c 	bl	8006834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800631c:	230f      	movs	r3, #15
 800631e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006320:	2303      	movs	r3, #3
 8006322:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006324:	2300      	movs	r3, #0
 8006326:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006328:	2300      	movs	r3, #0
 800632a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800632c:	2300      	movs	r3, #0
 800632e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006330:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006334:	2104      	movs	r1, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f003 f9f6 	bl	8009728 <HAL_RCC_ClockConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006342:	f000 fa77 	bl	8006834 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
 8006346:	f242 0320 	movw	r3, #8224	; 0x2020
 800634a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006350:	2300      	movs	r3, #0
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006354:	463b      	mov	r3, r7
 8006356:	4618      	mov	r0, r3
 8006358:	f003 fc1e 	bl	8009b98 <HAL_RCCEx_PeriphCLKConfig>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8006362:	f000 fa67 	bl	8006834 <Error_Handler>
  }
}
 8006366:	bf00      	nop
 8006368:	37a0      	adds	r7, #160	; 0xa0
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08e      	sub	sp, #56	; 0x38
 8006374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8006376:	f107 031c 	add.w	r3, r7, #28
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	611a      	str	r2, [r3, #16]
 8006386:	615a      	str	r2, [r3, #20]
 8006388:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	605a      	str	r2, [r3, #4]
 8006392:	609a      	str	r2, [r3, #8]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	611a      	str	r2, [r3, #16]
 8006398:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 800639a:	2001      	movs	r0, #1
 800639c:	f7ff fe06 	bl	8005fac <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80063a0:	2001      	movs	r0, #1
 80063a2:	f7ff fdeb 	bl	8005f7c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80063a6:	2304      	movs	r3, #4
 80063a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80063aa:	2302      	movs	r3, #2
 80063ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80063ba:	230c      	movs	r3, #12
 80063bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063c6:	f004 fc05 	bl	800abd4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80063ca:	2308      	movs	r3, #8
 80063cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80063ce:	2302      	movs	r3, #2
 80063d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80063de:	230c      	movs	r3, #12
 80063e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063e2:	1d3b      	adds	r3, r7, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063ea:	f004 fbf3 	bl	800abd4 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 80063ee:	2223      	movs	r2, #35	; 0x23
 80063f0:	2102      	movs	r1, #2
 80063f2:	4849      	ldr	r0, [pc, #292]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 80063f4:	f7ff fefe 	bl	80061f4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80063f8:	2210      	movs	r2, #16
 80063fa:	2102      	movs	r1, #2
 80063fc:	4846      	ldr	r0, [pc, #280]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 80063fe:	f7ff fded 	bl	8005fdc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8006402:	2200      	movs	r2, #0
 8006404:	2102      	movs	r1, #2
 8006406:	4844      	ldr	r0, [pc, #272]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006408:	f7ff fece 	bl	80061a8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800640c:	2200      	movs	r2, #0
 800640e:	2102      	movs	r1, #2
 8006410:	4841      	ldr	r0, [pc, #260]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006412:	f7ff fe0b 	bl	800602c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8006416:	2200      	movs	r2, #0
 8006418:	2102      	movs	r1, #2
 800641a:	483f      	ldr	r0, [pc, #252]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 800641c:	f7ff fe2c 	bl	8006078 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8006420:	2280      	movs	r2, #128	; 0x80
 8006422:	2102      	movs	r1, #2
 8006424:	483c      	ldr	r0, [pc, #240]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006426:	f7ff fe4d 	bl	80060c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800642a:	2200      	movs	r2, #0
 800642c:	2102      	movs	r1, #2
 800642e:	483a      	ldr	r0, [pc, #232]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006430:	f7ff fe6e 	bl	8006110 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8006434:	2200      	movs	r2, #0
 8006436:	2102      	movs	r1, #2
 8006438:	4837      	ldr	r0, [pc, #220]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 800643a:	f7ff fe8f 	bl	800615c <LL_DMA_SetMemorySize>

  /* LPUART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_LPUART1_RX);
 800643e:	2222      	movs	r2, #34	; 0x22
 8006440:	2103      	movs	r1, #3
 8006442:	4835      	ldr	r0, [pc, #212]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006444:	f7ff fed6 	bl	80061f4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8006448:	2200      	movs	r2, #0
 800644a:	2103      	movs	r1, #3
 800644c:	4832      	ldr	r0, [pc, #200]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 800644e:	f7ff fdc5 	bl	8005fdc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8006452:	2200      	movs	r2, #0
 8006454:	2103      	movs	r1, #3
 8006456:	4830      	ldr	r0, [pc, #192]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006458:	f7ff fea6 	bl	80061a8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 800645c:	2200      	movs	r2, #0
 800645e:	2103      	movs	r1, #3
 8006460:	482d      	ldr	r0, [pc, #180]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006462:	f7ff fde3 	bl	800602c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8006466:	2200      	movs	r2, #0
 8006468:	2103      	movs	r1, #3
 800646a:	482b      	ldr	r0, [pc, #172]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 800646c:	f7ff fe04 	bl	8006078 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8006470:	2280      	movs	r2, #128	; 0x80
 8006472:	2103      	movs	r1, #3
 8006474:	4828      	ldr	r0, [pc, #160]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006476:	f7ff fe25 	bl	80060c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 800647a:	2200      	movs	r2, #0
 800647c:	2103      	movs	r1, #3
 800647e:	4826      	ldr	r0, [pc, #152]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 8006480:	f7ff fe46 	bl	8006110 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8006484:	2200      	movs	r2, #0
 8006486:	2103      	movs	r1, #3
 8006488:	4823      	ldr	r0, [pc, #140]	; (8006518 <MX_LPUART1_UART_Init+0x1a8>)
 800648a:	f7ff fe67 	bl	800615c <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 800648e:	f7ff fc7b 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 8006492:	4603      	mov	r3, r0
 8006494:	2200      	movs	r2, #0
 8006496:	2103      	movs	r1, #3
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fccb 	bl	8005e34 <NVIC_EncodePriority>
 800649e:	4603      	mov	r3, r0
 80064a0:	4619      	mov	r1, r3
 80064a2:	205b      	movs	r0, #91	; 0x5b
 80064a4:	f7ff fc9c 	bl	8005de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 80064a8:	205b      	movs	r0, #91	; 0x5b
 80064aa:	f7ff fc7b 	bl	8005da4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 921600;
 80064b2:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80064b6:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80064b8:	2300      	movs	r3, #0
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80064bc:	2300      	movs	r3, #0
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80064c4:	230c      	movs	r3, #12
 80064c6:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80064c8:	2300      	movs	r3, #0
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80064cc:	f107 031c 	add.w	r3, r7, #28
 80064d0:	4619      	mov	r1, r3
 80064d2:	4812      	ldr	r0, [pc, #72]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 80064d4:	f004 fc7c 	bl	800add0 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80064d8:	2100      	movs	r1, #0
 80064da:	4810      	ldr	r0, [pc, #64]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 80064dc:	f7ff fcfd 	bl	8005eda <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80064e0:	2100      	movs	r1, #0
 80064e2:	480e      	ldr	r0, [pc, #56]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 80064e4:	f7ff fd0d 	bl	8005f02 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 80064e8:	480c      	ldr	r0, [pc, #48]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 80064ea:	f7ff fce6 	bl	8005eba <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 80064ee:	480b      	ldr	r0, [pc, #44]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 80064f0:	f7ff fcd3 	bl	8005e9a <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 80064f4:	bf00      	nop
 80064f6:	4809      	ldr	r0, [pc, #36]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 80064f8:	f7ff fd17 	bl	8005f2a <LL_LPUART_IsActiveFlag_TEACK>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f9      	beq.n	80064f6 <MX_LPUART1_UART_Init+0x186>
 8006502:	4806      	ldr	r0, [pc, #24]	; (800651c <MX_LPUART1_UART_Init+0x1ac>)
 8006504:	f7ff fd25 	bl	8005f52 <LL_LPUART_IsActiveFlag_REACK>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f3      	beq.n	80064f6 <MX_LPUART1_UART_Init+0x186>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800650e:	bf00      	nop
 8006510:	bf00      	nop
 8006512:	3738      	adds	r7, #56	; 0x38
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40020000 	.word	0x40020000
 800651c:	40008000 	.word	0x40008000

08006520 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006526:	463b      	mov	r3, r7
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	611a      	str	r2, [r3, #16]
 8006534:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8006536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800653a:	f7ff fd37 	bl	8005fac <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800653e:	2002      	movs	r0, #2
 8006540:	f7ff fd1c 	bl	8005f7c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8006544:	2310      	movs	r3, #16
 8006546:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006548:	2303      	movs	r3, #3
 800654a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006550:	463b      	mov	r3, r7
 8006552:	4619      	mov	r1, r3
 8006554:	4838      	ldr	r0, [pc, #224]	; (8006638 <MX_UCPD1_Init+0x118>)
 8006556:	f004 fb3d 	bl	800abd4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800655a:	2340      	movs	r3, #64	; 0x40
 800655c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800655e:	2303      	movs	r3, #3
 8006560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006566:	463b      	mov	r3, r7
 8006568:	4619      	mov	r1, r3
 800656a:	4833      	ldr	r0, [pc, #204]	; (8006638 <MX_UCPD1_Init+0x118>)
 800656c:	f004 fb32 	bl	800abd4 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8006570:	2272      	movs	r2, #114	; 0x72
 8006572:	2100      	movs	r1, #0
 8006574:	4831      	ldr	r0, [pc, #196]	; (800663c <MX_UCPD1_Init+0x11c>)
 8006576:	f7ff fe3d 	bl	80061f4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800657a:	2200      	movs	r2, #0
 800657c:	2100      	movs	r1, #0
 800657e:	482f      	ldr	r0, [pc, #188]	; (800663c <MX_UCPD1_Init+0x11c>)
 8006580:	f7ff fd2c 	bl	8005fdc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8006584:	2200      	movs	r2, #0
 8006586:	2100      	movs	r1, #0
 8006588:	482c      	ldr	r0, [pc, #176]	; (800663c <MX_UCPD1_Init+0x11c>)
 800658a:	f7ff fe0d 	bl	80061a8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	482a      	ldr	r0, [pc, #168]	; (800663c <MX_UCPD1_Init+0x11c>)
 8006594:	f7ff fd4a 	bl	800602c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	4827      	ldr	r0, [pc, #156]	; (800663c <MX_UCPD1_Init+0x11c>)
 800659e:	f7ff fd6b 	bl	8006078 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	2100      	movs	r1, #0
 80065a6:	4825      	ldr	r0, [pc, #148]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065a8:	f7ff fd8c 	bl	80060c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80065ac:	2200      	movs	r2, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	4822      	ldr	r0, [pc, #136]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065b2:	f7ff fdad 	bl	8006110 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	4820      	ldr	r0, [pc, #128]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065bc:	f7ff fdce 	bl	800615c <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 80065c0:	2273      	movs	r2, #115	; 0x73
 80065c2:	2101      	movs	r1, #1
 80065c4:	481d      	ldr	r0, [pc, #116]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065c6:	f7ff fe15 	bl	80061f4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80065ca:	2210      	movs	r2, #16
 80065cc:	2101      	movs	r1, #1
 80065ce:	481b      	ldr	r0, [pc, #108]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065d0:	f7ff fd04 	bl	8005fdc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80065d4:	2200      	movs	r2, #0
 80065d6:	2101      	movs	r1, #1
 80065d8:	4818      	ldr	r0, [pc, #96]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065da:	f7ff fde5 	bl	80061a8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80065de:	2200      	movs	r2, #0
 80065e0:	2101      	movs	r1, #1
 80065e2:	4816      	ldr	r0, [pc, #88]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065e4:	f7ff fd22 	bl	800602c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80065e8:	2200      	movs	r2, #0
 80065ea:	2101      	movs	r1, #1
 80065ec:	4813      	ldr	r0, [pc, #76]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065ee:	f7ff fd43 	bl	8006078 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	2101      	movs	r1, #1
 80065f6:	4811      	ldr	r0, [pc, #68]	; (800663c <MX_UCPD1_Init+0x11c>)
 80065f8:	f7ff fd64 	bl	80060c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80065fc:	2200      	movs	r2, #0
 80065fe:	2101      	movs	r1, #1
 8006600:	480e      	ldr	r0, [pc, #56]	; (800663c <MX_UCPD1_Init+0x11c>)
 8006602:	f7ff fd85 	bl	8006110 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8006606:	2200      	movs	r2, #0
 8006608:	2101      	movs	r1, #1
 800660a:	480c      	ldr	r0, [pc, #48]	; (800663c <MX_UCPD1_Init+0x11c>)
 800660c:	f7ff fda6 	bl	800615c <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8006610:	f7ff fbba 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 8006614:	4603      	mov	r3, r0
 8006616:	2200      	movs	r2, #0
 8006618:	2103      	movs	r1, #3
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fc0a 	bl	8005e34 <NVIC_EncodePriority>
 8006620:	4603      	mov	r3, r0
 8006622:	4619      	mov	r1, r3
 8006624:	203f      	movs	r0, #63	; 0x3f
 8006626:	f7ff fbdb 	bl	8005de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 800662a:	203f      	movs	r0, #63	; 0x3f
 800662c:	f7ff fbba 	bl	8005da4 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8006630:	bf00      	nop
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	48000400 	.word	0x48000400
 800663c:	40020000 	.word	0x40020000

08006640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006646:	4b2e      	ldr	r3, [pc, #184]	; (8006700 <MX_DMA_Init+0xc0>)
 8006648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664a:	4a2d      	ldr	r2, [pc, #180]	; (8006700 <MX_DMA_Init+0xc0>)
 800664c:	f043 0304 	orr.w	r3, r3, #4
 8006650:	6493      	str	r3, [r2, #72]	; 0x48
 8006652:	4b2b      	ldr	r3, [pc, #172]	; (8006700 <MX_DMA_Init+0xc0>)
 8006654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <MX_DMA_Init+0xc0>)
 8006660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <MX_DMA_Init+0xc0>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6493      	str	r3, [r2, #72]	; 0x48
 800666a:	4b25      	ldr	r3, [pc, #148]	; (8006700 <MX_DMA_Init+0xc0>)
 800666c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8006676:	f7ff fb87 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 800667a:	4603      	mov	r3, r0
 800667c:	2200      	movs	r2, #0
 800667e:	2103      	movs	r1, #3
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fbd7 	bl	8005e34 <NVIC_EncodePriority>
 8006686:	4603      	mov	r3, r0
 8006688:	4619      	mov	r1, r3
 800668a:	200b      	movs	r0, #11
 800668c:	f7ff fba8 	bl	8005de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006690:	200b      	movs	r0, #11
 8006692:	f7ff fb87 	bl	8005da4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8006696:	f7ff fb77 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 800669a:	4603      	mov	r3, r0
 800669c:	2200      	movs	r2, #0
 800669e:	2103      	movs	r1, #3
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fbc7 	bl	8005e34 <NVIC_EncodePriority>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4619      	mov	r1, r3
 80066aa:	200c      	movs	r0, #12
 80066ac:	f7ff fb98 	bl	8005de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80066b0:	200c      	movs	r0, #12
 80066b2:	f7ff fb77 	bl	8005da4 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80066b6:	f7ff fb67 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2200      	movs	r2, #0
 80066be:	2103      	movs	r1, #3
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fbb7 	bl	8005e34 <NVIC_EncodePriority>
 80066c6:	4603      	mov	r3, r0
 80066c8:	4619      	mov	r1, r3
 80066ca:	200d      	movs	r0, #13
 80066cc:	f7ff fb88 	bl	8005de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80066d0:	200d      	movs	r0, #13
 80066d2:	f7ff fb67 	bl	8005da4 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80066d6:	f7ff fb57 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 80066da:	4603      	mov	r3, r0
 80066dc:	2200      	movs	r2, #0
 80066de:	2103      	movs	r1, #3
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fba7 	bl	8005e34 <NVIC_EncodePriority>
 80066e6:	4603      	mov	r3, r0
 80066e8:	4619      	mov	r1, r3
 80066ea:	200e      	movs	r0, #14
 80066ec:	f7ff fb78 	bl	8005de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80066f0:	200e      	movs	r0, #14
 80066f2:	f7ff fb57 	bl	8005da4 <__NVIC_EnableIRQ>

}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000

08006704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800670a:	f107 0314 	add.w	r3, r7, #20
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	609a      	str	r2, [r3, #8]
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800671a:	4b2f      	ldr	r3, [pc, #188]	; (80067d8 <MX_GPIO_Init+0xd4>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006720:	f043 0304 	orr.w	r3, r3, #4
 8006724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006726:	4b2c      	ldr	r3, [pc, #176]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006732:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006736:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006738:	f043 0320 	orr.w	r3, r3, #32
 800673c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800673e:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800674a:	4b23      	ldr	r3, [pc, #140]	; (80067d8 <MX_GPIO_Init+0xd4>)
 800674c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674e:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006756:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006762:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006768:	f043 0302 	orr.w	r3, r3, #2
 800676c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <MX_GPIO_Init+0xd4>)
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	607b      	str	r3, [r7, #4]
 8006778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800677a:	2200      	movs	r2, #0
 800677c:	2120      	movs	r1, #32
 800677e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006782:	f000 ff45 	bl	8007610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800678a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800678c:	4b13      	ldr	r3, [pc, #76]	; (80067dc <MX_GPIO_Init+0xd8>)
 800678e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006794:	f107 0314 	add.w	r3, r7, #20
 8006798:	4619      	mov	r1, r3
 800679a:	4811      	ldr	r0, [pc, #68]	; (80067e0 <MX_GPIO_Init+0xdc>)
 800679c:	f000 fdb6 	bl	800730c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80067a0:	2320      	movs	r3, #32
 80067a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067a4:	2301      	movs	r3, #1
 80067a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ac:	2300      	movs	r3, #0
 80067ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80067b0:	f107 0314 	add.w	r3, r7, #20
 80067b4:	4619      	mov	r1, r3
 80067b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ba:	f000 fda7 	bl	800730c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80067be:	2200      	movs	r2, #0
 80067c0:	2103      	movs	r1, #3
 80067c2:	2028      	movs	r0, #40	; 0x28
 80067c4:	f000 fad1 	bl	8006d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80067c8:	2028      	movs	r0, #40	; 0x28
 80067ca:	f000 fae8 	bl	8006d9e <HAL_NVIC_EnableIRQ>

}
 80067ce:	bf00      	nop
 80067d0:	3728      	adds	r7, #40	; 0x28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000
 80067dc:	10110000 	.word	0x10110000
 80067e0:	48000800 	.word	0x48000800

080067e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	CDC_Transmit_FS("TEST\r\n", 6);
 80067ec:	2106      	movs	r1, #6
 80067ee:	4804      	ldr	r0, [pc, #16]	; (8006800 <StartDefaultTask+0x1c>)
 80067f0:	f00f fe8c 	bl	801650c <CDC_Transmit_FS>
    osDelay(1000);
 80067f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067f8:	f00b fa9f 	bl	8011d3a <osDelay>
	CDC_Transmit_FS("TEST\r\n", 6);
 80067fc:	e7f6      	b.n	80067ec <StartDefaultTask+0x8>
 80067fe:	bf00      	nop
 8006800:	0801c230 	.word	0x0801c230

08006804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a07      	ldr	r2, [pc, #28]	; (8006830 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d101      	bne.n	800681a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006816:	f000 f999 	bl	8006b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
#ifdef _GUI_INTERFACE
  if (htim->Instance == TIM6) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a04      	ldr	r2, [pc, #16]	; (8006830 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <HAL_TIM_PeriodElapsedCallback+0x24>
	  GUI_TimerCounter();
 8006824:	f011 f93c 	bl	8017aa0 <GUI_TimerCounter>
  }
#endif
  /* USER CODE END Callback 1 */
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40001000 	.word	0x40001000

08006834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006838:	b672      	cpsid	i
}
 800683a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800683c:	e7fe      	b.n	800683c <Error_Handler+0x8>
	...

08006840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <HAL_MspInit+0x4c>)
 8006848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684a:	4a10      	ldr	r2, [pc, #64]	; (800688c <HAL_MspInit+0x4c>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6613      	str	r3, [r2, #96]	; 0x60
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <HAL_MspInit+0x4c>)
 8006854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_MspInit+0x4c>)
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_MspInit+0x4c>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006868:	6593      	str	r3, [r2, #88]	; 0x58
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_MspInit+0x4c>)
 800686c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006876:	2200      	movs	r2, #0
 8006878:	210f      	movs	r1, #15
 800687a:	f06f 0001 	mvn.w	r0, #1
 800687e:	f000 fa74 	bl	8006d6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000

08006890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08c      	sub	sp, #48	; 0x30
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80068a6:	4b2d      	ldr	r3, [pc, #180]	; (800695c <HAL_InitTick+0xcc>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	4a2c      	ldr	r2, [pc, #176]	; (800695c <HAL_InitTick+0xcc>)
 80068ac:	f043 0310 	orr.w	r3, r3, #16
 80068b0:	6593      	str	r3, [r2, #88]	; 0x58
 80068b2:	4b2a      	ldr	r3, [pc, #168]	; (800695c <HAL_InitTick+0xcc>)
 80068b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80068be:	f107 020c 	add.w	r2, r7, #12
 80068c2:	f107 0310 	add.w	r3, r7, #16
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f003 f8ed 	bl	8009aa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80068ce:	f003 f8d5 	bl	8009a7c <HAL_RCC_GetPCLK1Freq>
 80068d2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_InitTick+0xd0>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	0c9b      	lsrs	r3, r3, #18
 80068de:	3b01      	subs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <HAL_InitTick+0xd4>)
 80068e4:	4a20      	ldr	r2, [pc, #128]	; (8006968 <HAL_InitTick+0xd8>)
 80068e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80068e8:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <HAL_InitTick+0xd4>)
 80068ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80068ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80068f0:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <HAL_InitTick+0xd4>)
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80068f6:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <HAL_InitTick+0xd4>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068fc:	4b19      	ldr	r3, [pc, #100]	; (8006964 <HAL_InitTick+0xd4>)
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8006902:	4818      	ldr	r0, [pc, #96]	; (8006964 <HAL_InitTick+0xd4>)
 8006904:	f003 fb94 	bl	800a030 <HAL_TIM_Base_Init>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800690e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11b      	bne.n	800694e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006916:	4813      	ldr	r0, [pc, #76]	; (8006964 <HAL_InitTick+0xd4>)
 8006918:	f003 fbec 	bl	800a0f4 <HAL_TIM_Base_Start_IT>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006926:	2b00      	cmp	r3, #0
 8006928:	d111      	bne.n	800694e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800692a:	2036      	movs	r0, #54	; 0x36
 800692c:	f000 fa37 	bl	8006d9e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b0f      	cmp	r3, #15
 8006934:	d808      	bhi.n	8006948 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006936:	2200      	movs	r2, #0
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	2036      	movs	r0, #54	; 0x36
 800693c:	f000 fa15 	bl	8006d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <HAL_InitTick+0xdc>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e002      	b.n	800694e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 800694e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006952:	4618      	mov	r0, r3
 8006954:	3730      	adds	r7, #48	; 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000
 8006960:	431bde83 	.word	0x431bde83
 8006964:	20002ff8 	.word	0x20002ff8
 8006968:	40001000 	.word	0x40001000
 800696c:	20000008 	.word	0x20000008

08006970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006974:	e7fe      	b.n	8006974 <NMI_Handler+0x4>

08006976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006976:	b480      	push	{r7}
 8006978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800697a:	e7fe      	b.n	800697a <HardFault_Handler+0x4>

0800697c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006980:	e7fe      	b.n	8006980 <MemManage_Handler+0x4>

08006982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006982:	b480      	push	{r7}
 8006984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006986:	e7fe      	b.n	8006986 <BusFault_Handler+0x4>

08006988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800698c:	e7fe      	b.n	800698c <UsageFault_Handler+0x4>

0800698e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800698e:	b480      	push	{r7}
 8006990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006992:	bf00      	nop
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80069aa:	b480      	push	{r7}
 80069ac:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80069ae:	bf00      	nop
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */

  TRACER_EMB_IRQHandlerDMA();
 80069bc:	f013 ff8a 	bl	801a8d4 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80069c0:	bf00      	nop
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80069d8:	4802      	ldr	r0, [pc, #8]	; (80069e4 <USB_HP_IRQHandler+0x10>)
 80069da:	f000 ff5b 	bl	8007894 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80069de:	bf00      	nop
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20004598 	.word	0x20004598

080069e8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80069ec:	4802      	ldr	r0, [pc, #8]	; (80069f8 <USB_LP_IRQHandler+0x10>)
 80069ee:	f000 ff51 	bl	8007894 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20004598 	.word	0x20004598

080069fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006a04:	f000 fe1c 	bl	8007640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a08:	bf00      	nop
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006a10:	4802      	ldr	r0, [pc, #8]	; (8006a1c <TIM6_DAC_IRQHandler+0x10>)
 8006a12:	f003 fbe7 	bl	800a1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006a16:	bf00      	nop
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20002ff8 	.word	0x20002ff8

08006a20 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8006a24:	f007 fe4b 	bl	800e6be <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 8006a30:	f013 ff56 	bl	801a8e0 <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006a34:	bf00      	nop
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a40:	4a14      	ldr	r2, [pc, #80]	; (8006a94 <_sbrk+0x5c>)
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <_sbrk+0x60>)
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <_sbrk+0x64>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a54:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <_sbrk+0x64>)
 8006a56:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <_sbrk+0x68>)
 8006a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a5a:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <_sbrk+0x64>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d207      	bcs.n	8006a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a68:	f014 feea 	bl	801b840 <__errno>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	220c      	movs	r2, #12
 8006a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295
 8006a76:	e009      	b.n	8006a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a78:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <_sbrk+0x64>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <_sbrk+0x64>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	4a05      	ldr	r2, [pc, #20]	; (8006a9c <_sbrk+0x64>)
 8006a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20020000 	.word	0x20020000
 8006a98:	00000400 	.word	0x00000400
 8006a9c:	20000384 	.word	0x20000384
 8006aa0:	20004b20 	.word	0x20004b20

08006aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <SystemInit+0x20>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	4a05      	ldr	r2, [pc, #20]	; (8006ac4 <SystemInit+0x20>)
 8006ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ab8:	bf00      	nop
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	e000ed00 	.word	0xe000ed00

08006ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ac8:	480d      	ldr	r0, [pc, #52]	; (8006b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006aca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006acc:	480d      	ldr	r0, [pc, #52]	; (8006b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8006ace:	490e      	ldr	r1, [pc, #56]	; (8006b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ad0:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <LoopForever+0xe>)
  movs r3, #0
 8006ad2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006ad4:	e002      	b.n	8006adc <LoopCopyDataInit>

08006ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ada:	3304      	adds	r3, #4

08006adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ae0:	d3f9      	bcc.n	8006ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ae4:	4c0b      	ldr	r4, [pc, #44]	; (8006b14 <LoopForever+0x16>)
  movs r3, #0
 8006ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ae8:	e001      	b.n	8006aee <LoopFillZerobss>

08006aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006aec:	3204      	adds	r2, #4

08006aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006af0:	d3fb      	bcc.n	8006aea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006af2:	f7ff ffd7 	bl	8006aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006af6:	f014 fea9 	bl	801b84c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006afa:	f7ff fba5 	bl	8006248 <main>

08006afe <LoopForever>:

LoopForever:
    b LoopForever
 8006afe:	e7fe      	b.n	8006afe <LoopForever>
  ldr   r0, =_estack
 8006b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b08:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8006b0c:	0801cca0 	.word	0x0801cca0
  ldr r2, =_sbss
 8006b10:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8006b14:	20004b20 	.word	0x20004b20

08006b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b18:	e7fe      	b.n	8006b18 <ADC1_2_IRQHandler>

08006b1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b24:	2003      	movs	r0, #3
 8006b26:	f000 f915 	bl	8006d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b2a:	2004      	movs	r0, #4
 8006b2c:	f7ff feb0 	bl	8006890 <HAL_InitTick>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	71fb      	strb	r3, [r7, #7]
 8006b3a:	e001      	b.n	8006b40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b3c:	f7ff fe80 	bl	8006840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b40:	79fb      	ldrb	r3, [r7, #7]

}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_IncTick+0x1c>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_IncTick+0x20>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4413      	add	r3, r2
 8006b5a:	4a03      	ldr	r2, [pc, #12]	; (8006b68 <HAL_IncTick+0x1c>)
 8006b5c:	6013      	str	r3, [r2, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	20003044 	.word	0x20003044
 8006b6c:	2000000c 	.word	0x2000000c

08006b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return uwTick;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_GetTick+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20003044 	.word	0x20003044

08006b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b90:	f7ff ffee 	bl	8006b70 <HAL_GetTick>
 8006b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d004      	beq.n	8006bac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <HAL_Delay+0x40>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006bac:	bf00      	nop
 8006bae:	f7ff ffdf 	bl	8006b70 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d8f7      	bhi.n	8006bae <HAL_Delay+0x26>
  {
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	2000000c 	.word	0x2000000c

08006bcc <__NVIC_SetPriorityGrouping>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <__NVIC_SetPriorityGrouping+0x44>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006be8:	4013      	ands	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bfe:	4a04      	ldr	r2, [pc, #16]	; (8006c10 <__NVIC_SetPriorityGrouping+0x44>)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	60d3      	str	r3, [r2, #12]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	e000ed00 	.word	0xe000ed00

08006c14 <__NVIC_GetPriorityGrouping>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <__NVIC_GetPriorityGrouping+0x18>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	f003 0307 	and.w	r3, r3, #7
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	e000ed00 	.word	0xe000ed00

08006c30 <__NVIC_EnableIRQ>:
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	db0b      	blt.n	8006c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	f003 021f 	and.w	r2, r3, #31
 8006c48:	4907      	ldr	r1, [pc, #28]	; (8006c68 <__NVIC_EnableIRQ+0x38>)
 8006c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	2001      	movs	r0, #1
 8006c52:	fa00 f202 	lsl.w	r2, r0, r2
 8006c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	e000e100 	.word	0xe000e100

08006c6c <__NVIC_SetPriority>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	6039      	str	r1, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	db0a      	blt.n	8006c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	490c      	ldr	r1, [pc, #48]	; (8006cb8 <__NVIC_SetPriority+0x4c>)
 8006c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8a:	0112      	lsls	r2, r2, #4
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	440b      	add	r3, r1
 8006c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c94:	e00a      	b.n	8006cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	4908      	ldr	r1, [pc, #32]	; (8006cbc <__NVIC_SetPriority+0x50>)
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	3b04      	subs	r3, #4
 8006ca4:	0112      	lsls	r2, r2, #4
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	440b      	add	r3, r1
 8006caa:	761a      	strb	r2, [r3, #24]
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	e000e100 	.word	0xe000e100
 8006cbc:	e000ed00 	.word	0xe000ed00

08006cc0 <NVIC_EncodePriority>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f1c3 0307 	rsb	r3, r3, #7
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	bf28      	it	cs
 8006cde:	2304      	movcs	r3, #4
 8006ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d902      	bls.n	8006cf0 <NVIC_EncodePriority+0x30>
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3b03      	subs	r3, #3
 8006cee:	e000      	b.n	8006cf2 <NVIC_EncodePriority+0x32>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	401a      	ands	r2, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d08:	f04f 31ff 	mov.w	r1, #4294967295
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d12:	43d9      	mvns	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d18:	4313      	orrs	r3, r2
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3724      	adds	r7, #36	; 0x24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006d2c:	f3bf 8f4f 	dsb	sy
}
 8006d30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <__NVIC_SystemReset+0x24>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006d3a:	4904      	ldr	r1, [pc, #16]	; (8006d4c <__NVIC_SystemReset+0x24>)
 8006d3c:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <__NVIC_SystemReset+0x28>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d42:	f3bf 8f4f 	dsb	sy
}
 8006d46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <__NVIC_SystemReset+0x20>
 8006d4c:	e000ed00 	.word	0xe000ed00
 8006d50:	05fa0004 	.word	0x05fa0004

08006d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff ff35 	bl	8006bcc <__NVIC_SetPriorityGrouping>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	4603      	mov	r3, r0
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d78:	f7ff ff4c 	bl	8006c14 <__NVIC_GetPriorityGrouping>
 8006d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff9c 	bl	8006cc0 <NVIC_EncodePriority>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff6b 	bl	8006c6c <__NVIC_SetPriority>
}
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	4603      	mov	r3, r0
 8006da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ff3f 	bl	8006c30 <__NVIC_EnableIRQ>
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006dbe:	f7ff ffb3 	bl	8006d28 <__NVIC_SystemReset>
	...

08006dc4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <HAL_FLASH_Program+0xa4>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_FLASH_Program+0x1e>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e03e      	b.n	8006e60 <HAL_FLASH_Program+0x9c>
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <HAL_FLASH_Program+0xa4>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dec:	f000 f87c 	bl	8006ee8 <FLASH_WaitForLastOperation>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d12e      	bne.n	8006e58 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <HAL_FLASH_Program+0xa4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d107      	bne.n	8006e16 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0a:	68b8      	ldr	r0, [r7, #8]
 8006e0c:	f000 f8c0 	bl	8006f90 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006e10:	2301      	movs	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e010      	b.n	8006e38 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d002      	beq.n	8006e22 <HAL_FLASH_Program+0x5e>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d10a      	bne.n	8006e38 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	68b8      	ldr	r0, [r7, #8]
 8006e28:	f000 f8d8 	bl	8006fdc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d102      	bne.n	8006e38 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006e32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e36:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e3c:	f000 f854 	bl	8006ee8 <FLASH_WaitForLastOperation>
 8006e40:	4603      	mov	r3, r0
 8006e42:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <HAL_FLASH_Program+0xa8>)
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	4906      	ldr	r1, [pc, #24]	; (8006e6c <HAL_FLASH_Program+0xa8>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <HAL_FLASH_Program+0xa4>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000010 	.word	0x20000010
 8006e6c:	40022000 	.word	0x40022000

08006e70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_FLASH_Unlock+0x38>)
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da0b      	bge.n	8006e9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006e82:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <HAL_FLASH_Unlock+0x38>)
 8006e84:	4a09      	ldr	r2, [pc, #36]	; (8006eac <HAL_FLASH_Unlock+0x3c>)
 8006e86:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006e88:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <HAL_FLASH_Unlock+0x38>)
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <HAL_FLASH_Unlock+0x40>)
 8006e8c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <HAL_FLASH_Unlock+0x38>)
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	da01      	bge.n	8006e9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40022000 	.word	0x40022000
 8006eac:	45670123 	.word	0x45670123
 8006eb0:	cdef89ab 	.word	0xcdef89ab

08006eb4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <HAL_FLASH_Lock+0x30>)
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <HAL_FLASH_Lock+0x30>)
 8006ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_FLASH_Lock+0x30>)
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	da01      	bge.n	8006ed6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40022000 	.word	0x40022000

08006ee8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006ef0:	f7ff fe3e 	bl	8006b70 <HAL_GetTick>
 8006ef4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006ef6:	e009      	b.n	8006f0c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006ef8:	f7ff fe3a 	bl	8006b70 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d201      	bcs.n	8006f0c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e038      	b.n	8006f7e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f18:	d0ee      	beq.n	8006ef8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006f22:	4013      	ands	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01e      	beq.n	8006f6a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <FLASH_WaitForLastOperation+0xa4>)
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	4a15      	ldr	r2, [pc, #84]	; (8006f8c <FLASH_WaitForLastOperation+0xa4>)
 8006f36:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <FLASH_WaitForLastOperation+0x6a>
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f4c:	490e      	ldr	r1, [pc, #56]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	618b      	str	r3, [r1, #24]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <FLASH_WaitForLastOperation+0x7e>
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f64:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e009      	b.n	8006f7e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f76:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <FLASH_WaitForLastOperation+0xa0>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40022000 	.word	0x40022000
 8006f8c:	20000010 	.word	0x20000010

08006f90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <FLASH_Program_DoubleWord+0x48>)
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	4a0d      	ldr	r2, [pc, #52]	; (8006fd8 <FLASH_Program_DoubleWord+0x48>)
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006fae:	f3bf 8f6f 	isb	sy
}
 8006fb2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	000a      	movs	r2, r1
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	3104      	adds	r1, #4
 8006fc8:	4613      	mov	r3, r2
 8006fca:	600b      	str	r3, [r1, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40022000 	.word	0x40022000

08006fdc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	; 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <FLASH_Program_Fast+0x68>)
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	; (8007044 <FLASH_Program_Fast+0x68>)
 8006ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ffc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8007002:	60fb      	str	r3, [r7, #12]
  return(result);
 8007004:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007008:	b672      	cpsid	i
}
 800700a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	3304      	adds	r3, #4
 8007018:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	3304      	adds	r3, #4
 800701e:	617b      	str	r3, [r7, #20]
    row_index--;
 8007020:	7ffb      	ldrb	r3, [r7, #31]
 8007022:	3b01      	subs	r3, #1
 8007024:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007026:	7ffb      	ldrb	r3, [r7, #31]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1ef      	bne.n	800700c <FLASH_Program_Fast+0x30>
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f383 8810 	msr	PRIMASK, r3
}
 8007036:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007038:	bf00      	nop
 800703a:	3724      	adds	r7, #36	; 0x24
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	40022000 	.word	0x40022000

08007048 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007052:	4b4c      	ldr	r3, [pc, #304]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_FLASHEx_Erase+0x16>
 800705a:	2302      	movs	r3, #2
 800705c:	e08d      	b.n	800717a <HAL_FLASHEx_Erase+0x132>
 800705e:	4b49      	ldr	r3, [pc, #292]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 8007060:	2201      	movs	r2, #1
 8007062:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007068:	f7ff ff3e 	bl	8006ee8 <FLASH_WaitForLastOperation>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d17d      	bne.n	8007172 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007076:	4b43      	ldr	r3, [pc, #268]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800707c:	4b42      	ldr	r3, [pc, #264]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007084:	2b00      	cmp	r3, #0
 8007086:	d019      	beq.n	80070bc <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007088:	4b3f      	ldr	r3, [pc, #252]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a3e      	ldr	r2, [pc, #248]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 800708e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007092:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007094:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709c:	2b00      	cmp	r3, #0
 800709e:	d009      	beq.n	80070b4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80070a0:	4b39      	ldr	r3, [pc, #228]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a38      	ldr	r2, [pc, #224]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 80070a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070aa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80070ac:	4b35      	ldr	r3, [pc, #212]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 80070ae:	2203      	movs	r2, #3
 80070b0:	771a      	strb	r2, [r3, #28]
 80070b2:	e016      	b.n	80070e2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80070b4:	4b33      	ldr	r3, [pc, #204]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	771a      	strb	r2, [r3, #28]
 80070ba:	e012      	b.n	80070e2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80070bc:	4b32      	ldr	r3, [pc, #200]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80070c8:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a2e      	ldr	r2, [pc, #184]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 80070ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80070d4:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 80070d6:	2202      	movs	r2, #2
 80070d8:	771a      	strb	r2, [r3, #28]
 80070da:	e002      	b.n	80070e2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80070dc:	4b29      	ldr	r3, [pc, #164]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 80070de:	2200      	movs	r2, #0
 80070e0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d113      	bne.n	8007112 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 f84c 	bl	800718c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80070f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070f8:	f7ff fef6 	bl	8006ee8 <FLASH_WaitForLastOperation>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8007100:	4b21      	ldr	r3, [pc, #132]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	4a20      	ldr	r2, [pc, #128]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 8007106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800710a:	f023 0304 	bic.w	r3, r3, #4
 800710e:	6153      	str	r3, [r2, #20]
 8007110:	e02d      	b.n	800716e <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	e01d      	b.n	800715e <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4619      	mov	r1, r3
 8007128:	68b8      	ldr	r0, [r7, #8]
 800712a:	f000 f867 	bl	80071fc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800712e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007132:	f7ff fed9 	bl	8006ee8 <FLASH_WaitForLastOperation>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800713a:	4b13      	ldr	r3, [pc, #76]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <HAL_FLASHEx_Erase+0x140>)
 8007140:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8007144:	f023 0302 	bic.w	r3, r3, #2
 8007148:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	601a      	str	r2, [r3, #0]
          break;
 8007156:	e00a      	b.n	800716e <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	3301      	adds	r3, #1
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	4413      	add	r3, r2
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	429a      	cmp	r2, r3
 800716c:	d3d9      	bcc.n	8007122 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800716e:	f000 f889 	bl	8007284 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007172:	4b04      	ldr	r3, [pc, #16]	; (8007184 <HAL_FLASHEx_Erase+0x13c>)
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]

  return status;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000010 	.word	0x20000010
 8007188:	40022000 	.word	0x40022000

0800718c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8007194:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <FLASH_MassErase+0x6c>)
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d016      	beq.n	80071ce <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071b0:	f043 0304 	orr.w	r3, r3, #4
 80071b4:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80071c0:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	4a0c      	ldr	r2, [pc, #48]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ca:	6153      	str	r3, [r2, #20]
 80071cc:	e007      	b.n	80071de <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d8:	f043 0304 	orr.w	r3, r3, #4
 80071dc:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	4a05      	ldr	r2, [pc, #20]	; (80071f8 <FLASH_MassErase+0x6c>)
 80071e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e8:	6153      	str	r3, [r2, #20]
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40022000 	.word	0x40022000

080071fc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8007206:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <FLASH_PageErase+0x84>)
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8007212:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <FLASH_PageErase+0x84>)
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4a1a      	ldr	r2, [pc, #104]	; (8007280 <FLASH_PageErase+0x84>)
 8007218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800721c:	6153      	str	r3, [r2, #20]
 800721e:	e011      	b.n	8007244 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d006      	beq.n	8007238 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <FLASH_PageErase+0x84>)
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	4a14      	ldr	r2, [pc, #80]	; (8007280 <FLASH_PageErase+0x84>)
 8007230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007234:	6153      	str	r3, [r2, #20]
 8007236:	e005      	b.n	8007244 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <FLASH_PageErase+0x84>)
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	4a10      	ldr	r2, [pc, #64]	; (8007280 <FLASH_PageErase+0x84>)
 800723e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007242:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007244:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <FLASH_PageErase+0x84>)
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007254:	490a      	ldr	r1, [pc, #40]	; (8007280 <FLASH_PageErase+0x84>)
 8007256:	4313      	orrs	r3, r2
 8007258:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800725a:	4b09      	ldr	r3, [pc, #36]	; (8007280 <FLASH_PageErase+0x84>)
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	4a08      	ldr	r2, [pc, #32]	; (8007280 <FLASH_PageErase+0x84>)
 8007260:	f043 0302 	orr.w	r3, r3, #2
 8007264:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007266:	4b06      	ldr	r3, [pc, #24]	; (8007280 <FLASH_PageErase+0x84>)
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	4a05      	ldr	r2, [pc, #20]	; (8007280 <FLASH_PageErase+0x84>)
 800726c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007270:	6153      	str	r3, [r2, #20]
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40022000 	.word	0x40022000

08007284 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800728a:	4b1e      	ldr	r3, [pc, #120]	; (8007304 <FLASH_FlushCaches+0x80>)
 800728c:	7f1b      	ldrb	r3, [r3, #28]
 800728e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d002      	beq.n	800729c <FLASH_FlushCaches+0x18>
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	2b03      	cmp	r3, #3
 800729a:	d111      	bne.n	80072c0 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <FLASH_FlushCaches+0x84>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	4b17      	ldr	r3, [pc, #92]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a16      	ldr	r2, [pc, #88]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072b4:	4b14      	ldr	r3, [pc, #80]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d002      	beq.n	80072cc <FLASH_FlushCaches+0x48>
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d111      	bne.n	80072f0 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a0a      	ldr	r2, [pc, #40]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a07      	ldr	r2, [pc, #28]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072ee:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <FLASH_FlushCaches+0x80>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	771a      	strb	r2, [r3, #28]
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000010 	.word	0x20000010
 8007308:	40022000 	.word	0x40022000

0800730c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800731a:	e15a      	b.n	80075d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 814c 	beq.w	80075cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d00b      	beq.n	8007354 <HAL_GPIO_Init+0x48>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d007      	beq.n	8007354 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007348:	2b11      	cmp	r3, #17
 800734a:	d003      	beq.n	8007354 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b12      	cmp	r3, #18
 8007352:	d130      	bne.n	80073b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	2203      	movs	r2, #3
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	43db      	mvns	r3, r3
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4013      	ands	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800738a:	2201      	movs	r2, #1
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4013      	ands	r3, r2
 8007398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	091b      	lsrs	r3, r3, #4
 80073a0:	f003 0201 	and.w	r2, r3, #1
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	2203      	movs	r2, #3
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43db      	mvns	r3, r3
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4013      	ands	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d003      	beq.n	80073f6 <HAL_GPIO_Init+0xea>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b12      	cmp	r3, #18
 80073f4:	d123      	bne.n	800743e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	08da      	lsrs	r2, r3, #3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3208      	adds	r2, #8
 80073fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	220f      	movs	r2, #15
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	08da      	lsrs	r2, r3, #3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3208      	adds	r2, #8
 8007438:	6939      	ldr	r1, [r7, #16]
 800743a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	2203      	movs	r2, #3
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4013      	ands	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f003 0203 	and.w	r2, r3, #3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80a6 	beq.w	80075cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007480:	4b5b      	ldr	r3, [pc, #364]	; (80075f0 <HAL_GPIO_Init+0x2e4>)
 8007482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007484:	4a5a      	ldr	r2, [pc, #360]	; (80075f0 <HAL_GPIO_Init+0x2e4>)
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	6613      	str	r3, [r2, #96]	; 0x60
 800748c:	4b58      	ldr	r3, [pc, #352]	; (80075f0 <HAL_GPIO_Init+0x2e4>)
 800748e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	60bb      	str	r3, [r7, #8]
 8007496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007498:	4a56      	ldr	r2, [pc, #344]	; (80075f4 <HAL_GPIO_Init+0x2e8>)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	089b      	lsrs	r3, r3, #2
 800749e:	3302      	adds	r3, #2
 80074a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	220f      	movs	r2, #15
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4013      	ands	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80074c2:	d01f      	beq.n	8007504 <HAL_GPIO_Init+0x1f8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a4c      	ldr	r2, [pc, #304]	; (80075f8 <HAL_GPIO_Init+0x2ec>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d019      	beq.n	8007500 <HAL_GPIO_Init+0x1f4>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a4b      	ldr	r2, [pc, #300]	; (80075fc <HAL_GPIO_Init+0x2f0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <HAL_GPIO_Init+0x1f0>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a4a      	ldr	r2, [pc, #296]	; (8007600 <HAL_GPIO_Init+0x2f4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00d      	beq.n	80074f8 <HAL_GPIO_Init+0x1ec>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a49      	ldr	r2, [pc, #292]	; (8007604 <HAL_GPIO_Init+0x2f8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d007      	beq.n	80074f4 <HAL_GPIO_Init+0x1e8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a48      	ldr	r2, [pc, #288]	; (8007608 <HAL_GPIO_Init+0x2fc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d101      	bne.n	80074f0 <HAL_GPIO_Init+0x1e4>
 80074ec:	2305      	movs	r3, #5
 80074ee:	e00a      	b.n	8007506 <HAL_GPIO_Init+0x1fa>
 80074f0:	2306      	movs	r3, #6
 80074f2:	e008      	b.n	8007506 <HAL_GPIO_Init+0x1fa>
 80074f4:	2304      	movs	r3, #4
 80074f6:	e006      	b.n	8007506 <HAL_GPIO_Init+0x1fa>
 80074f8:	2303      	movs	r3, #3
 80074fa:	e004      	b.n	8007506 <HAL_GPIO_Init+0x1fa>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e002      	b.n	8007506 <HAL_GPIO_Init+0x1fa>
 8007500:	2301      	movs	r3, #1
 8007502:	e000      	b.n	8007506 <HAL_GPIO_Init+0x1fa>
 8007504:	2300      	movs	r3, #0
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	f002 0203 	and.w	r2, r2, #3
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	4093      	lsls	r3, r2
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007516:	4937      	ldr	r1, [pc, #220]	; (80075f4 <HAL_GPIO_Init+0x2e8>)
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	089b      	lsrs	r3, r3, #2
 800751c:	3302      	adds	r3, #2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007524:	4b39      	ldr	r3, [pc, #228]	; (800760c <HAL_GPIO_Init+0x300>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	43db      	mvns	r3, r3
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4013      	ands	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007548:	4a30      	ldr	r2, [pc, #192]	; (800760c <HAL_GPIO_Init+0x300>)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800754e:	4b2f      	ldr	r3, [pc, #188]	; (800760c <HAL_GPIO_Init+0x300>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	43db      	mvns	r3, r3
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4013      	ands	r3, r2
 800755c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007572:	4a26      	ldr	r2, [pc, #152]	; (800760c <HAL_GPIO_Init+0x300>)
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007578:	4b24      	ldr	r3, [pc, #144]	; (800760c <HAL_GPIO_Init+0x300>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	43db      	mvns	r3, r3
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4013      	ands	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800759c:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_GPIO_Init+0x300>)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075a2:	4b1a      	ldr	r3, [pc, #104]	; (800760c <HAL_GPIO_Init+0x300>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	43db      	mvns	r3, r3
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4013      	ands	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80075c6:	4a11      	ldr	r2, [pc, #68]	; (800760c <HAL_GPIO_Init+0x300>)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3301      	adds	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f ae9d 	bne.w	800731c <HAL_GPIO_Init+0x10>
  }
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	40021000 	.word	0x40021000
 80075f4:	40010000 	.word	0x40010000
 80075f8:	48000400 	.word	0x48000400
 80075fc:	48000800 	.word	0x48000800
 8007600:	48000c00 	.word	0x48000c00
 8007604:	48001000 	.word	0x48001000
 8007608:	48001400 	.word	0x48001400
 800760c:	40010400 	.word	0x40010400

08007610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
 800761c:	4613      	mov	r3, r2
 800761e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007620:	787b      	ldrb	r3, [r7, #1]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007626:	887a      	ldrh	r2, [r7, #2]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800762c:	e002      	b.n	8007634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800762e:	887a      	ldrh	r2, [r7, #2]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800764a:	4b08      	ldr	r3, [pc, #32]	; (800766c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007656:	4a05      	ldr	r2, [pc, #20]	; (800766c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f806 	bl	8007670 <HAL_GPIO_EXTI_Callback>
  }
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40010400 	.word	0x40010400

08007670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007688:	b08b      	sub	sp, #44	; 0x2c
 800768a:	af06      	add	r7, sp, #24
 800768c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0d7      	b.n	8007848 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f00f f875 	bl	801679c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2203      	movs	r2, #3
 80076b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4618      	mov	r0, r3
 80076c0:	f003 fdbc 	bl	800b23c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
 80076c8:	e04c      	b.n	8007764 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	440b      	add	r3, r1
 80076da:	3301      	adds	r3, #1
 80076dc:	2201      	movs	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	440b      	add	r3, r1
 80076f0:	7bfa      	ldrb	r2, [r7, #15]
 80076f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80076f4:	7bfa      	ldrb	r2, [r7, #15]
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	b298      	uxth	r0, r3
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	440b      	add	r3, r1
 8007706:	3336      	adds	r3, #54	; 0x36
 8007708:	4602      	mov	r2, r0
 800770a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	440b      	add	r3, r1
 800771c:	3303      	adds	r3, #3
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007722:	7bfa      	ldrb	r2, [r7, #15]
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	440b      	add	r3, r1
 8007730:	3338      	adds	r3, #56	; 0x38
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007736:	7bfa      	ldrb	r2, [r7, #15]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	440b      	add	r3, r1
 8007744:	333c      	adds	r3, #60	; 0x3c
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800774a:	7bfa      	ldrb	r2, [r7, #15]
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	440b      	add	r3, r1
 8007758:	3340      	adds	r3, #64	; 0x40
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	3301      	adds	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d3ad      	bcc.n	80076ca <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]
 8007772:	e044      	b.n	80077fe <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007774:	7bfa      	ldrb	r2, [r7, #15]
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	440b      	add	r3, r1
 8007782:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800778a:	7bfa      	ldrb	r2, [r7, #15]
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	440b      	add	r3, r1
 8007798:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800779c:	7bfa      	ldrb	r2, [r7, #15]
 800779e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077a0:	7bfa      	ldrb	r2, [r7, #15]
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	440b      	add	r3, r1
 80077ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077b6:	7bfa      	ldrb	r2, [r7, #15]
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	440b      	add	r3, r1
 80077c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077cc:	7bfa      	ldrb	r2, [r7, #15]
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80077e2:	7bfa      	ldrb	r2, [r7, #15]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	440b      	add	r3, r1
 80077f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	3301      	adds	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d3b5      	bcc.n	8007774 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	603b      	str	r3, [r7, #0]
 800780e:	687e      	ldr	r6, [r7, #4]
 8007810:	466d      	mov	r5, sp
 8007812:	f106 0410 	add.w	r4, r6, #16
 8007816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	1d33      	adds	r3, r6, #4
 8007820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007822:	6838      	ldr	r0, [r7, #0]
 8007824:	f003 fd25 	bl	800b272 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d102      	bne.n	8007846 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fb8a 	bl	8008f5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007850 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_PCD_Start+0x16>
 8007862:	2302      	movs	r3, #2
 8007864:	e012      	b.n	800788c <HAL_PCD_Start+0x3c>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4618      	mov	r0, r3
 8007874:	f003 fccb 	bl	800b20e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f005 fe7e 	bl	800d57e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f005 fe83 	bl	800d5ac <USB_ReadInterrupts>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b0:	d102      	bne.n	80078b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fb4d 	bl	8007f52 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f005 fe75 	bl	800d5ac <USB_ReadInterrupts>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d112      	bne.n	80078f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e0:	b292      	uxth	r2, r2
 80078e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f00e ffdb 	bl	80168a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80078ec:	2100      	movs	r1, #0
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f91e 	bl	8007b30 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f005 fe57 	bl	800d5ac <USB_ReadInterrupts>
 80078fe:	4603      	mov	r3, r0
 8007900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007908:	d10b      	bne.n	8007922 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800791c:	b292      	uxth	r2, r2
 800791e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f005 fe40 	bl	800d5ac <USB_ReadInterrupts>
 800792c:	4603      	mov	r3, r0
 800792e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	d10b      	bne.n	8007950 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007940:	b29a      	uxth	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800794a:	b292      	uxth	r2, r2
 800794c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f005 fe29 	bl	800d5ac <USB_ReadInterrupts>
 800795a:	4603      	mov	r3, r0
 800795c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007964:	d133      	bne.n	80079ce <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0204 	bic.w	r2, r2, #4
 8007978:	b292      	uxth	r2, r2
 800797a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0208 	bic.w	r2, r2, #8
 8007990:	b292      	uxth	r2, r2
 8007992:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800799c:	2b01      	cmp	r3, #1
 800799e:	d107      	bne.n	80079b0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80079a8:	2100      	movs	r1, #0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f00f f96e 	bl	8016c8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f00e ffaf 	bl	8016914 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079c8:	b292      	uxth	r2, r2
 80079ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f005 fdea 	bl	800d5ac <USB_ReadInterrupts>
 80079d8:	4603      	mov	r3, r0
 80079da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e2:	d126      	bne.n	8007a32 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0208 	orr.w	r2, r2, #8
 80079f6:	b292      	uxth	r2, r2
 80079f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0204 	orr.w	r2, r2, #4
 8007a26:	b292      	uxth	r2, r2
 8007a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f00e ff57 	bl	80168e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f005 fdb8 	bl	800d5ac <USB_ReadInterrupts>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d13f      	bne.n	8007ac6 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a58:	b292      	uxth	r2, r2
 8007a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d12b      	bne.n	8007ac0 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0204 	orr.w	r2, r2, #4
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0208 	orr.w	r2, r2, #8
 8007a92:	b292      	uxth	r2, r2
 8007a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f00f f8e7 	bl	8016c8c <HAL_PCDEx_LPM_Callback>
 8007abe:	e002      	b.n	8007ac6 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f00e ff0d 	bl	80168e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f005 fd6e 	bl	800d5ac <USB_ReadInterrupts>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ada:	d10e      	bne.n	8007afa <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007aee:	b292      	uxth	r2, r2
 8007af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f00e fec6 	bl	8016886 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f005 fd54 	bl	800d5ac <USB_ReadInterrupts>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b0e:	d10b      	bne.n	8007b28 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b22:	b292      	uxth	r2, r2
 8007b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_PCD_SetAddress+0x1a>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e013      	b.n	8007b72 <HAL_PCD_SetAddress+0x42>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f005 fcf7 	bl	800d556 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	461a      	mov	r2, r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	70fb      	strb	r3, [r7, #3]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	803b      	strh	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da0e      	bge.n	8007bbe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	705a      	strb	r2, [r3, #1]
 8007bbc:	e00e      	b.n	8007bdc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	f003 0207 	and.w	r2, r3, #7
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007be8:	883a      	ldrh	r2, [r7, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	78ba      	ldrb	r2, [r7, #2]
 8007bf2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c06:	78bb      	ldrb	r3, [r7, #2]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d102      	bne.n	8007c12 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_PCD_EP_Open+0xa6>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e00e      	b.n	8007c3e <HAL_PCD_EP_Open+0xc4>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f003 fb40 	bl	800b2b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da0e      	bge.n	8007c78 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	705a      	strb	r2, [r3, #1]
 8007c76:	e00e      	b.n	8007c96 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	f003 0207 	and.w	r2, r3, #7
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_PCD_EP_Close+0x6a>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e00e      	b.n	8007cce <HAL_PCD_EP_Close+0x88>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f003 fe66 	bl	800b990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	f003 0207 	and.w	r2, r3, #7
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2200      	movs	r2, #0
 8007d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6979      	ldr	r1, [r7, #20]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f004 f819 	bl	800bd6a <USB_EPStartXfer>
 8007d38:	e005      	b.n	8007d46 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6979      	ldr	r1, [r7, #20]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f004 f812 	bl	800bd6a <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	f003 0207 	and.w	r2, r3, #7
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	440b      	add	r3, r1
 8007d6e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007d72:	681b      	ldr	r3, [r3, #0]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f003 ffbe 	bl	800bd6a <USB_EPStartXfer>
 8007dee:	e005      	b.n	8007dfc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6979      	ldr	r1, [r7, #20]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f003 ffb7 	bl	800bd6a <USB_EPStartXfer>
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	f003 0207 	and.w	r2, r3, #7
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d901      	bls.n	8007e24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e03e      	b.n	8007ea2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da0e      	bge.n	8007e4a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	4413      	add	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	705a      	strb	r2, [r3, #1]
 8007e48:	e00c      	b.n	8007e64 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_PCD_EP_SetStall+0x7e>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e00e      	b.n	8007ea2 <HAL_PCD_EP_SetStall+0x9c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68f9      	ldr	r1, [r7, #12]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f005 fa60 	bl	800d358 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	f003 020f 	and.w	r2, r3, #15
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d901      	bls.n	8007ec8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e040      	b.n	8007f4a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	da0e      	bge.n	8007eee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	705a      	strb	r2, [r3, #1]
 8007eec:	e00e      	b.n	8007f0c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	f003 0207 	and.w	r2, r3, #7
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	4413      	add	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_PCD_EP_ClrStall+0x82>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e00e      	b.n	8007f4a <HAL_PCD_EP_ClrStall+0xa0>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68f9      	ldr	r1, [r7, #12]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f005 fa5d 	bl	800d3fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b08e      	sub	sp, #56	; 0x38
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007f5a:	e2d6      	b.n	800850a <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f64:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007f66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8007f72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 815b 	bne.w	8008232 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007f7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d150      	bne.n	8008028 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	81fb      	strh	r3, [r7, #14]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	89fb      	ldrh	r3, [r7, #14]
 8007f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3328      	adds	r3, #40	; 0x28
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	441a      	add	r2, r3
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f00e fc32 	bl	8016852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8287 	beq.w	800850a <PCD_EP_ISR_Handler+0x5b8>
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 8282 	bne.w	800850a <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008012:	b2da      	uxtb	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	b292      	uxth	r2, r2
 800801a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008026:	e270      	b.n	800850a <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800803a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800803e:	2b00      	cmp	r3, #0
 8008040:	d032      	beq.n	80080a8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800804a:	b29b      	uxth	r3, r3
 800804c:	461a      	mov	r2, r3
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	4413      	add	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	4413      	add	r3, r2
 800805c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800807c:	b29b      	uxth	r3, r3
 800807e:	f005 fae7 	bl	800d650 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29a      	uxth	r2, r3
 800808a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800808e:	4013      	ands	r3, r2
 8008090:	823b      	strh	r3, [r7, #16]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	8a3a      	ldrh	r2, [r7, #16]
 8008098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800809c:	b292      	uxth	r2, r2
 800809e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f00e fba9 	bl	80167f8 <HAL_PCD_SetupStageCallback>
 80080a6:	e230      	b.n	800850a <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80080a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f280 822c 	bge.w	800850a <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80080be:	4013      	ands	r3, r2
 80080c0:	83bb      	strh	r3, [r7, #28]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	8bba      	ldrh	r2, [r7, #28]
 80080c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080cc:	b292      	uxth	r2, r2
 80080ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d8:	b29b      	uxth	r3, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4413      	add	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	4413      	add	r3, r2
 80080ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d019      	beq.n	8008134 <PCD_EP_ISR_Handler+0x1e2>
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d015      	beq.n	8008134 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	6959      	ldr	r1, [r3, #20]
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008118:	b29b      	uxth	r3, r3
 800811a:	f005 fa99 	bl	800d650 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	441a      	add	r2, r3
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800812c:	2100      	movs	r1, #0
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f00e fb74 	bl	801681c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008140:	2b00      	cmp	r3, #0
 8008142:	f040 81e2 	bne.w	800850a <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008154:	b29b      	uxth	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	4413      	add	r3, r2
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d112      	bne.n	8008194 <PCD_EP_ISR_Handler+0x242>
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008178:	b29a      	uxth	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818c:	b29a      	uxth	r2, r3
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	e02f      	b.n	80081f4 <PCD_EP_ISR_Handler+0x2a2>
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b3e      	cmp	r3, #62	; 0x3e
 800819a:	d813      	bhi.n	80081c4 <PCD_EP_ISR_Handler+0x272>
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	633b      	str	r3, [r7, #48]	; 0x30
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <PCD_EP_ISR_Handler+0x264>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	3301      	adds	r3, #1
 80081b4:	633b      	str	r3, [r7, #48]	; 0x30
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b29a      	uxth	r2, r3
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	e017      	b.n	80081f4 <PCD_EP_ISR_Handler+0x2a2>
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	095b      	lsrs	r3, r3, #5
 80081ca:	633b      	str	r3, [r7, #48]	; 0x30
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <PCD_EP_ISR_Handler+0x28c>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	3b01      	subs	r3, #1
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	029b      	lsls	r3, r3, #10
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008204:	827b      	strh	r3, [r7, #18]
 8008206:	8a7b      	ldrh	r3, [r7, #18]
 8008208:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800820c:	827b      	strh	r3, [r7, #18]
 800820e:	8a7b      	ldrh	r3, [r7, #18]
 8008210:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008214:	827b      	strh	r3, [r7, #18]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	8a7b      	ldrh	r3, [r7, #18]
 800821c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822c:	b29b      	uxth	r3, r3
 800822e:	8013      	strh	r3, [r2, #0]
 8008230:	e16b      	b.n	800850a <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008244:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008248:	2b00      	cmp	r3, #0
 800824a:	f280 80e4 	bge.w	8008416 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29a      	uxth	r2, r3
 8008260:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008264:	4013      	ands	r3, r2
 8008266:	853b      	strh	r3, [r7, #40]	; 0x28
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800827c:	b292      	uxth	r2, r2
 800827e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008280:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4413      	add	r3, r2
 8008294:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	7b1b      	ldrb	r3, [r3, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d120      	bne.n	80082e0 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	4413      	add	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	4413      	add	r3, r2
 80082b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80082c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8083 	beq.w	80083d2 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	6959      	ldr	r1, [r3, #20]
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	88da      	ldrh	r2, [r3, #6]
 80082d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082da:	f005 f9b9 	bl	800d650 <USB_ReadPMA>
 80082de:	e078      	b.n	80083d2 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d108      	bne.n	80082fa <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80082e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082ea:	461a      	mov	r2, r3
 80082ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f919 	bl	8008526 <HAL_PCD_EP_DB_Receive>
 80082f4:	4603      	mov	r3, r0
 80082f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80082f8:	e06b      	b.n	80083d2 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008314:	847b      	strh	r3, [r7, #34]	; 0x22
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008336:	b29b      	uxth	r3, r3
 8008338:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01f      	beq.n	8008394 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800835c:	b29b      	uxth	r3, r3
 800835e:	461a      	mov	r2, r3
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	4413      	add	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	4413      	add	r3, r2
 800836e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008378:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800837a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800837c:	2b00      	cmp	r3, #0
 800837e:	d028      	beq.n	80083d2 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	6959      	ldr	r1, [r3, #20]
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	891a      	ldrh	r2, [r3, #8]
 800838c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800838e:	f005 f95f 	bl	800d650 <USB_ReadPMA>
 8008392:	e01e      	b.n	80083d2 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800839c:	b29b      	uxth	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	4413      	add	r3, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	4413      	add	r3, r2
 80083ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80083ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d008      	beq.n	80083d2 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	6959      	ldr	r1, [r3, #20]
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	895a      	ldrh	r2, [r3, #10]
 80083cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083ce:	f005 f93f 	bl	800d650 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	69da      	ldr	r2, [r3, #28]
 80083d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083d8:	441a      	add	r2, r3
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083e4:	441a      	add	r2, r3
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <PCD_EP_ISR_Handler+0x4aa>
 80083f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d206      	bcs.n	800840a <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f00e fa0a 	bl	801681c <HAL_PCD_DataOutStageCallback>
 8008408:	e005      	b.n	8008416 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008410:	4618      	mov	r0, r3
 8008412:	f003 fcaa 	bl	800bd6a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b00      	cmp	r3, #0
 800841e:	d074      	beq.n	800850a <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8008420:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	843b      	strh	r3, [r7, #32]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	441a      	add	r2, r3
 800845e:	8c3b      	ldrh	r3, [r7, #32]
 8008460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008468:	b29b      	uxth	r3, r3
 800846a:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	78db      	ldrb	r3, [r3, #3]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d144      	bne.n	80084fe <PCD_EP_ISR_Handler+0x5ac>
 8008474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	2b00      	cmp	r3, #0
 800847c:	d13f      	bne.n	80084fe <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4413      	add	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	4413      	add	r3, r2
 8008498:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	699a      	ldr	r2, [r3, #24]
 80084a8:	8bfb      	ldrh	r3, [r7, #30]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d906      	bls.n	80084bc <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	8bfb      	ldrh	r3, [r7, #30]
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	619a      	str	r2, [r3, #24]
 80084ba:	e002      	b.n	80084c2 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	2200      	movs	r2, #0
 80084c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f00e f9be 	bl	8016852 <HAL_PCD_DataInStageCallback>
 80084d6:	e018      	b.n	800850a <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	8bfb      	ldrh	r3, [r7, #30]
 80084de:	441a      	add	r2, r3
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	69da      	ldr	r2, [r3, #28]
 80084e8:	8bfb      	ldrh	r3, [r7, #30]
 80084ea:	441a      	add	r2, r3
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f003 fc37 	bl	800bd6a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80084fc:	e005      	b.n	800850a <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80084fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008500:	461a      	mov	r2, r3
 8008502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f917 	bl	8008738 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008512:	b29b      	uxth	r3, r3
 8008514:	b21b      	sxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	f6ff ad20 	blt.w	8007f5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3738      	adds	r7, #56	; 0x38
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b088      	sub	sp, #32
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	4613      	mov	r3, r2
 8008532:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d07c      	beq.n	8008638 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008546:	b29b      	uxth	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	4413      	add	r3, r2
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	4413      	add	r3, r2
 8008558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008562:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	699a      	ldr	r2, [r3, #24]
 8008568:	8b7b      	ldrh	r3, [r7, #26]
 800856a:	429a      	cmp	r2, r3
 800856c:	d306      	bcc.n	800857c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	8b7b      	ldrh	r3, [r7, #26]
 8008574:	1ad2      	subs	r2, r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	619a      	str	r2, [r3, #24]
 800857a:	e002      	b.n	8008582 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d123      	bne.n	80085d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a4:	833b      	strh	r3, [r7, #24]
 80085a6:	8b3b      	ldrh	r3, [r7, #24]
 80085a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085ac:	833b      	strh	r3, [r7, #24]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	8b3b      	ldrh	r3, [r7, #24]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01f      	beq.n	800861c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f6:	82fb      	strh	r3, [r7, #22]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	8afb      	ldrh	r3, [r7, #22]
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800861c:	8b7b      	ldrh	r3, [r7, #26]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 8085 	beq.w	800872e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6959      	ldr	r1, [r3, #20]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	891a      	ldrh	r2, [r3, #8]
 8008630:	8b7b      	ldrh	r3, [r7, #26]
 8008632:	f005 f80d 	bl	800d650 <USB_ReadPMA>
 8008636:	e07a      	b.n	800872e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008640:	b29b      	uxth	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	4413      	add	r3, r2
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	6812      	ldr	r2, [r2, #0]
 8008650:	4413      	add	r3, r2
 8008652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	8b7b      	ldrh	r3, [r7, #26]
 8008664:	429a      	cmp	r2, r3
 8008666:	d306      	bcc.n	8008676 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	8b7b      	ldrh	r3, [r7, #26]
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	619a      	str	r2, [r3, #24]
 8008674:	e002      	b.n	800867c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d123      	bne.n	80086cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	83fb      	strh	r3, [r7, #30]
 80086a0:	8bfb      	ldrh	r3, [r7, #30]
 80086a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086a6:	83fb      	strh	r3, [r7, #30]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	441a      	add	r2, r3
 80086b6:	8bfb      	ldrh	r3, [r7, #30]
 80086b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d11f      	bne.n	8008716 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f0:	83bb      	strh	r3, [r7, #28]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	441a      	add	r2, r3
 8008700:	8bbb      	ldrh	r3, [r7, #28]
 8008702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800870a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008712:	b29b      	uxth	r3, r3
 8008714:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008716:	8b7b      	ldrh	r3, [r7, #26]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6959      	ldr	r1, [r3, #20]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	895a      	ldrh	r2, [r3, #10]
 8008728:	8b7b      	ldrh	r3, [r7, #26]
 800872a:	f004 ff91 	bl	800d650 <USB_ReadPMA>
    }
  }

  return count;
 800872e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b0a2      	sub	sp, #136	; 0x88
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 81c5 	beq.w	8008adc <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875a:	b29b      	uxth	r3, r3
 800875c:	461a      	mov	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	4413      	add	r3, r2
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	4413      	add	r3, r2
 800876c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008776:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008782:	429a      	cmp	r2, r3
 8008784:	d907      	bls.n	8008796 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	619a      	str	r2, [r3, #24]
 8008794:	e002      	b.n	800879c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2200      	movs	r2, #0
 800879a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 80b9 	bne.w	8008918 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d126      	bne.n	80087fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	4413      	add	r3, r2
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	00da      	lsls	r2, r3, #3
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	4413      	add	r3, r2
 80087d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	801a      	strh	r2, [r3, #0]
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	e01a      	b.n	8008832 <HAL_PCD_EP_DB_Transmit+0xfa>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d116      	bne.n	8008832 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	633b      	str	r3, [r7, #48]	; 0x30
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008812:	b29b      	uxth	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	4413      	add	r3, r2
 800881a:	633b      	str	r3, [r7, #48]	; 0x30
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	00da      	lsls	r2, r3, #3
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	4413      	add	r3, r2
 8008826:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	2200      	movs	r2, #0
 8008830:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	623b      	str	r3, [r7, #32]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d126      	bne.n	800888e <HAL_PCD_EP_DB_Transmit+0x156>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800884e:	b29b      	uxth	r3, r3
 8008850:	461a      	mov	r2, r3
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	4413      	add	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	00da      	lsls	r2, r3, #3
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	4413      	add	r3, r2
 8008862:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008872:	b29a      	uxth	r2, r3
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008886:	b29a      	uxth	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e017      	b.n	80088be <HAL_PCD_EP_DB_Transmit+0x186>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	785b      	ldrb	r3, [r3, #1]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d113      	bne.n	80088be <HAL_PCD_EP_DB_Transmit+0x186>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889e:	b29b      	uxth	r3, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	4413      	add	r3, r2
 80088a6:	623b      	str	r3, [r7, #32]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	00da      	lsls	r2, r3, #3
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	4413      	add	r3, r2
 80088b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2200      	movs	r2, #0
 80088bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f00d ffc4 	bl	8016852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 82d2 	beq.w	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f0:	827b      	strh	r3, [r7, #18]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	441a      	add	r2, r3
 8008900:	8a7b      	ldrh	r3, [r7, #18]
 8008902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800890a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800890e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008912:	b29b      	uxth	r3, r3
 8008914:	8013      	strh	r3, [r2, #0]
 8008916:	e2b0      	b.n	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d021      	beq.n	8008966 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	441a      	add	r2, r3
 800894e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800895e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008962:	b29b      	uxth	r3, r3
 8008964:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800896c:	2b01      	cmp	r3, #1
 800896e:	f040 8284 	bne.w	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800897a:	441a      	add	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	69da      	ldr	r2, [r3, #28]
 8008984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008988:	441a      	add	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	429a      	cmp	r2, r3
 8008998:	d309      	bcc.n	80089ae <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a6:	1ad2      	subs	r2, r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	621a      	str	r2, [r3, #32]
 80089ac:	e015      	b.n	80089da <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d107      	bne.n	80089c6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80089b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80089c4:	e009      	b.n	80089da <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2200      	movs	r2, #0
 80089d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d155      	bne.n	8008a8e <HAL_PCD_EP_DB_Transmit+0x356>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	4413      	add	r3, r2
 80089f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	00da      	lsls	r2, r3, #3
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	4413      	add	r3, r2
 8008a04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a08:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d112      	bne.n	8008a36 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e047      	b.n	8008ac6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a38:	2b3e      	cmp	r3, #62	; 0x3e
 8008a3a:	d811      	bhi.n	8008a60 <HAL_PCD_EP_DB_Transmit+0x328>
 8008a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_PCD_EP_DB_Transmit+0x31a>
 8008a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a4e:	3301      	adds	r3, #1
 8008a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	029b      	lsls	r3, r3, #10
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	e032      	b.n	8008ac6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <HAL_PCD_EP_DB_Transmit+0x33e>
 8008a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a72:	3b01      	subs	r3, #1
 8008a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	029b      	lsls	r3, r3, #10
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	e01b      	b.n	8008ac6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d117      	bne.n	8008ac6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aaa:	4413      	add	r3, r2
 8008aac:	643b      	str	r3, [r7, #64]	; 0x40
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	00da      	lsls	r2, r3, #3
 8008ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6959      	ldr	r1, [r3, #20]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	891a      	ldrh	r2, [r3, #8]
 8008ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f004 fd79 	bl	800d5cc <USB_WritePMA>
 8008ada:	e1ce      	b.n	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d307      	bcc.n	8008b20 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	699a      	ldr	r2, [r3, #24]
 8008b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b18:	1ad2      	subs	r2, r2, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	619a      	str	r2, [r3, #24]
 8008b1e:	e002      	b.n	8008b26 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 80c4 	bne.w	8008cb8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d126      	bne.n	8008b86 <HAL_PCD_EP_DB_Transmit+0x44e>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4c:	4413      	add	r3, r2
 8008b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	00da      	lsls	r2, r3, #3
 8008b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b58:	4413      	add	r3, r2
 8008b5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b82:	801a      	strh	r2, [r3, #0]
 8008b84:	e01a      	b.n	8008bbc <HAL_PCD_EP_DB_Transmit+0x484>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d116      	bne.n	8008bbc <HAL_PCD_EP_DB_Transmit+0x484>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	677b      	str	r3, [r7, #116]	; 0x74
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba2:	4413      	add	r3, r2
 8008ba4:	677b      	str	r3, [r7, #116]	; 0x74
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	00da      	lsls	r2, r3, #3
 8008bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bae:	4413      	add	r3, r2
 8008bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bb4:	673b      	str	r3, [r7, #112]	; 0x70
 8008bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb8:	2200      	movs	r2, #0
 8008bba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	785b      	ldrb	r3, [r3, #1]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d12f      	bne.n	8008c2a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008be2:	4413      	add	r3, r2
 8008be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	00da      	lsls	r2, r3, #3
 8008bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c0e:	801a      	strh	r2, [r3, #0]
 8008c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c26:	801a      	strh	r2, [r3, #0]
 8008c28:	e017      	b.n	8008c5a <HAL_PCD_EP_DB_Transmit+0x522>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	785b      	ldrb	r3, [r3, #1]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d113      	bne.n	8008c5a <HAL_PCD_EP_DB_Transmit+0x522>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c40:	4413      	add	r3, r2
 8008c42:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	00da      	lsls	r2, r3, #3
 8008c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c56:	2200      	movs	r2, #0
 8008c58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f00d fdf6 	bl	8016852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8104 	bne.w	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	8013      	strh	r3, [r2, #0]
 8008cb6:	e0e0      	b.n	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d121      	bne.n	8008d06 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	f040 80b4 	bne.w	8008e7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d28:	441a      	add	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6a1a      	ldr	r2, [r3, #32]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d309      	bcc.n	8008d4e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	621a      	str	r2, [r3, #32]
 8008d4c:	e015      	b.n	8008d7a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d107      	bne.n	8008d66 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8008d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d5a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008d64:	e009      	b.n	8008d7a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d155      	bne.n	8008e34 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d9c:	4413      	add	r3, r2
 8008d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	00da      	lsls	r2, r3, #3
 8008da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008da8:	4413      	add	r3, r2
 8008daa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8008db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d112      	bne.n	8008ddc <HAL_PCD_EP_DB_Transmit+0x6a4>
 8008db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dc4:	801a      	strh	r2, [r3, #0]
 8008dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dd8:	801a      	strh	r2, [r3, #0]
 8008dda:	e044      	b.n	8008e66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dde:	2b3e      	cmp	r3, #62	; 0x3e
 8008de0:	d811      	bhi.n	8008e06 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8008de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	657b      	str	r3, [r7, #84]	; 0x54
 8008de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8008df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df4:	3301      	adds	r3, #1
 8008df6:	657b      	str	r3, [r7, #84]	; 0x54
 8008df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	029b      	lsls	r3, r3, #10
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	e02f      	b.n	8008e66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e08:	095b      	lsrs	r3, r3, #5
 8008e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <HAL_PCD_EP_DB_Transmit+0x6e4>
 8008e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	029b      	lsls	r3, r3, #10
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e018      	b.n	8008e66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d114      	bne.n	8008e66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e4a:	4413      	add	r3, r2
 8008e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	00da      	lsls	r2, r3, #3
 8008e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e56:	4413      	add	r3, r2
 8008e58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8008e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e64:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6959      	ldr	r1, [r3, #20]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	895a      	ldrh	r2, [r3, #10]
 8008e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	f004 fba9 	bl	800d5cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e94:	823b      	strh	r3, [r7, #16]
 8008e96:	8a3b      	ldrh	r3, [r7, #16]
 8008e98:	f083 0310 	eor.w	r3, r3, #16
 8008e9c:	823b      	strh	r3, [r7, #16]
 8008e9e:	8a3b      	ldrh	r3, [r7, #16]
 8008ea0:	f083 0320 	eor.w	r3, r3, #32
 8008ea4:	823b      	strh	r3, [r7, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	441a      	add	r2, r3
 8008eb4:	8a3b      	ldrh	r3, [r7, #16]
 8008eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3788      	adds	r7, #136	; 0x88
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	817b      	strh	r3, [r7, #10]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008ee6:	897b      	ldrh	r3, [r7, #10]
 8008ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ef2:	897b      	ldrh	r3, [r7, #10]
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	4613      	mov	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	e009      	b.n	8008f1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f0a:	897a      	ldrh	r2, [r7, #10]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008f1e:	893b      	ldrh	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d107      	bne.n	8008f34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2200      	movs	r2, #0
 8008f28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	80da      	strh	r2, [r3, #6]
 8008f32:	e00b      	b.n	8008f4c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2201      	movs	r2, #1
 8008f38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	0c1b      	lsrs	r3, r3, #16
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f043 0302 	orr.w	r3, r3, #2
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
	...

08008fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d141      	bne.n	8009042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fbe:	4b4b      	ldr	r3, [pc, #300]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fca:	d131      	bne.n	8009030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fcc:	4b47      	ldr	r3, [pc, #284]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd2:	4a46      	ldr	r2, [pc, #280]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fdc:	4b43      	ldr	r3, [pc, #268]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008fe4:	4a41      	ldr	r2, [pc, #260]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008fec:	4b40      	ldr	r3, [pc, #256]	; (80090f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2232      	movs	r2, #50	; 0x32
 8008ff2:	fb02 f303 	mul.w	r3, r2, r3
 8008ff6:	4a3f      	ldr	r2, [pc, #252]	; (80090f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	0c9b      	lsrs	r3, r3, #18
 8008ffe:	3301      	adds	r3, #1
 8009000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009002:	e002      	b.n	800900a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3b01      	subs	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800900a:	4b38      	ldr	r3, [pc, #224]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009016:	d102      	bne.n	800901e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f2      	bne.n	8009004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800901e:	4b33      	ldr	r3, [pc, #204]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902a:	d158      	bne.n	80090de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e057      	b.n	80090e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009030:	4b2e      	ldr	r3, [pc, #184]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009036:	4a2d      	ldr	r2, [pc, #180]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800903c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009040:	e04d      	b.n	80090de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009048:	d141      	bne.n	80090ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800904a:	4b28      	ldr	r3, [pc, #160]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009056:	d131      	bne.n	80090bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009058:	4b24      	ldr	r3, [pc, #144]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800905a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800905e:	4a23      	ldr	r2, [pc, #140]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009068:	4b20      	ldr	r3, [pc, #128]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009070:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009078:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2232      	movs	r2, #50	; 0x32
 800907e:	fb02 f303 	mul.w	r3, r2, r3
 8009082:	4a1c      	ldr	r2, [pc, #112]	; (80090f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009084:	fba2 2303 	umull	r2, r3, r2, r3
 8009088:	0c9b      	lsrs	r3, r3, #18
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800908e:	e002      	b.n	8009096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3b01      	subs	r3, #1
 8009094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009096:	4b15      	ldr	r3, [pc, #84]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800909e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a2:	d102      	bne.n	80090aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1f2      	bne.n	8009090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090aa:	4b10      	ldr	r3, [pc, #64]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090b6:	d112      	bne.n	80090de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e011      	b.n	80090e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090bc:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c2:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80090cc:	e007      	b.n	80090de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80090ce:	4b07      	ldr	r3, [pc, #28]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80090d6:	4a05      	ldr	r2, [pc, #20]	; (80090ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	40007000 	.word	0x40007000
 80090f0:	20000004 	.word	0x20000004
 80090f4:	431bde83 	.word	0x431bde83

080090f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e308      	b.n	800971c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d075      	beq.n	8009202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009116:	4ba3      	ldr	r3, [pc, #652]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 030c 	and.w	r3, r3, #12
 800911e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009120:	4ba0      	ldr	r3, [pc, #640]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	2b0c      	cmp	r3, #12
 800912e:	d102      	bne.n	8009136 <HAL_RCC_OscConfig+0x3e>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b03      	cmp	r3, #3
 8009134:	d002      	beq.n	800913c <HAL_RCC_OscConfig+0x44>
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b08      	cmp	r3, #8
 800913a:	d10b      	bne.n	8009154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800913c:	4b99      	ldr	r3, [pc, #612]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d05b      	beq.n	8009200 <HAL_RCC_OscConfig+0x108>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d157      	bne.n	8009200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e2e3      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d106      	bne.n	800916c <HAL_RCC_OscConfig+0x74>
 800915e:	4b91      	ldr	r3, [pc, #580]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a90      	ldr	r2, [pc, #576]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e01d      	b.n	80091a8 <HAL_RCC_OscConfig+0xb0>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009174:	d10c      	bne.n	8009190 <HAL_RCC_OscConfig+0x98>
 8009176:	4b8b      	ldr	r3, [pc, #556]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a8a      	ldr	r2, [pc, #552]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800917c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	4b88      	ldr	r3, [pc, #544]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a87      	ldr	r2, [pc, #540]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	e00b      	b.n	80091a8 <HAL_RCC_OscConfig+0xb0>
 8009190:	4b84      	ldr	r3, [pc, #528]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a83      	ldr	r2, [pc, #524]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	4b81      	ldr	r3, [pc, #516]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a80      	ldr	r2, [pc, #512]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80091a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d013      	beq.n	80091d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fd fcde 	bl	8006b70 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091b8:	f7fd fcda 	bl	8006b70 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b64      	cmp	r3, #100	; 0x64
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e2a8      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091ca:	4b76      	ldr	r3, [pc, #472]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0xc0>
 80091d6:	e014      	b.n	8009202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d8:	f7fd fcca 	bl	8006b70 <HAL_GetTick>
 80091dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091de:	e008      	b.n	80091f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091e0:	f7fd fcc6 	bl	8006b70 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b64      	cmp	r3, #100	; 0x64
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e294      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091f2:	4b6c      	ldr	r3, [pc, #432]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1f0      	bne.n	80091e0 <HAL_RCC_OscConfig+0xe8>
 80091fe:	e000      	b.n	8009202 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d075      	beq.n	80092fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800920e:	4b65      	ldr	r3, [pc, #404]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 030c 	and.w	r3, r3, #12
 8009216:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009218:	4b62      	ldr	r3, [pc, #392]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2b0c      	cmp	r3, #12
 8009226:	d102      	bne.n	800922e <HAL_RCC_OscConfig+0x136>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d002      	beq.n	8009234 <HAL_RCC_OscConfig+0x13c>
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b04      	cmp	r3, #4
 8009232:	d11f      	bne.n	8009274 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009234:	4b5b      	ldr	r3, [pc, #364]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_RCC_OscConfig+0x154>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e267      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800924c:	4b55      	ldr	r3, [pc, #340]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	061b      	lsls	r3, r3, #24
 800925a:	4952      	ldr	r1, [pc, #328]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800925c:	4313      	orrs	r3, r2
 800925e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009260:	4b51      	ldr	r3, [pc, #324]	; (80093a8 <HAL_RCC_OscConfig+0x2b0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f7fd fb13 	bl	8006890 <HAL_InitTick>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d043      	beq.n	80092f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e253      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d023      	beq.n	80092c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800927c:	4b49      	ldr	r3, [pc, #292]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a48      	ldr	r2, [pc, #288]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7fd fc72 	bl	8006b70 <HAL_GetTick>
 800928c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800928e:	e008      	b.n	80092a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009290:	f7fd fc6e 	bl	8006b70 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e23c      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092a2:	4b40      	ldr	r3, [pc, #256]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f0      	beq.n	8009290 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ae:	4b3d      	ldr	r3, [pc, #244]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	061b      	lsls	r3, r3, #24
 80092bc:	4939      	ldr	r1, [pc, #228]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	604b      	str	r3, [r1, #4]
 80092c2:	e01a      	b.n	80092fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092c4:	4b37      	ldr	r3, [pc, #220]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a36      	ldr	r2, [pc, #216]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d0:	f7fd fc4e 	bl	8006b70 <HAL_GetTick>
 80092d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092d8:	f7fd fc4a 	bl	8006b70 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e218      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092ea:	4b2e      	ldr	r3, [pc, #184]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f0      	bne.n	80092d8 <HAL_RCC_OscConfig+0x1e0>
 80092f6:	e000      	b.n	80092fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d03c      	beq.n	8009380 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01c      	beq.n	8009348 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800930e:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009314:	4a23      	ldr	r2, [pc, #140]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800931e:	f7fd fc27 	bl	8006b70 <HAL_GetTick>
 8009322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009324:	e008      	b.n	8009338 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009326:	f7fd fc23 	bl	8006b70 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	2b02      	cmp	r3, #2
 8009332:	d901      	bls.n	8009338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e1f1      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009338:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800933a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0ef      	beq.n	8009326 <HAL_RCC_OscConfig+0x22e>
 8009346:	e01b      	b.n	8009380 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009348:	4b16      	ldr	r3, [pc, #88]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 800934a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800934e:	4a15      	ldr	r2, [pc, #84]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009358:	f7fd fc0a 	bl	8006b70 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009360:	f7fd fc06 	bl	8006b70 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e1d4      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ef      	bne.n	8009360 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80ab 	beq.w	80094e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800938e:	2300      	movs	r3, #0
 8009390:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009392:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <HAL_RCC_OscConfig+0x2ac>)
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <HAL_RCC_OscConfig+0x2b4>
 800939e:	2301      	movs	r3, #1
 80093a0:	e005      	b.n	80093ae <HAL_RCC_OscConfig+0x2b6>
 80093a2:	bf00      	nop
 80093a4:	40021000 	.word	0x40021000
 80093a8:	20000008 	.word	0x20000008
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00d      	beq.n	80093ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093b2:	4baf      	ldr	r3, [pc, #700]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80093b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b6:	4aae      	ldr	r2, [pc, #696]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80093b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093bc:	6593      	str	r3, [r2, #88]	; 0x58
 80093be:	4bac      	ldr	r3, [pc, #688]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80093c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80093ca:	2301      	movs	r3, #1
 80093cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093ce:	4ba9      	ldr	r3, [pc, #676]	; (8009674 <HAL_RCC_OscConfig+0x57c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d118      	bne.n	800940c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093da:	4ba6      	ldr	r3, [pc, #664]	; (8009674 <HAL_RCC_OscConfig+0x57c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4aa5      	ldr	r2, [pc, #660]	; (8009674 <HAL_RCC_OscConfig+0x57c>)
 80093e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093e6:	f7fd fbc3 	bl	8006b70 <HAL_GetTick>
 80093ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093ec:	e008      	b.n	8009400 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093ee:	f7fd fbbf 	bl	8006b70 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e18d      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009400:	4b9c      	ldr	r3, [pc, #624]	; (8009674 <HAL_RCC_OscConfig+0x57c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0f0      	beq.n	80093ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d108      	bne.n	8009426 <HAL_RCC_OscConfig+0x32e>
 8009414:	4b96      	ldr	r3, [pc, #600]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800941a:	4a95      	ldr	r2, [pc, #596]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800941c:	f043 0301 	orr.w	r3, r3, #1
 8009420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009424:	e024      	b.n	8009470 <HAL_RCC_OscConfig+0x378>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b05      	cmp	r3, #5
 800942c:	d110      	bne.n	8009450 <HAL_RCC_OscConfig+0x358>
 800942e:	4b90      	ldr	r3, [pc, #576]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009434:	4a8e      	ldr	r2, [pc, #568]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009436:	f043 0304 	orr.w	r3, r3, #4
 800943a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800943e:	4b8c      	ldr	r3, [pc, #560]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009444:	4a8a      	ldr	r2, [pc, #552]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009446:	f043 0301 	orr.w	r3, r3, #1
 800944a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800944e:	e00f      	b.n	8009470 <HAL_RCC_OscConfig+0x378>
 8009450:	4b87      	ldr	r3, [pc, #540]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009456:	4a86      	ldr	r2, [pc, #536]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009460:	4b83      	ldr	r3, [pc, #524]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009466:	4a82      	ldr	r2, [pc, #520]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009468:	f023 0304 	bic.w	r3, r3, #4
 800946c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d016      	beq.n	80094a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009478:	f7fd fb7a 	bl	8006b70 <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800947e:	e00a      	b.n	8009496 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009480:	f7fd fb76 	bl	8006b70 <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	f241 3288 	movw	r2, #5000	; 0x1388
 800948e:	4293      	cmp	r3, r2
 8009490:	d901      	bls.n	8009496 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e142      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009496:	4b76      	ldr	r3, [pc, #472]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0ed      	beq.n	8009480 <HAL_RCC_OscConfig+0x388>
 80094a4:	e015      	b.n	80094d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a6:	f7fd fb63 	bl	8006b70 <HAL_GetTick>
 80094aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80094ac:	e00a      	b.n	80094c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ae:	f7fd fb5f 	bl	8006b70 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	4293      	cmp	r3, r2
 80094be:	d901      	bls.n	80094c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e12b      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80094c4:	4b6a      	ldr	r3, [pc, #424]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80094c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1ed      	bne.n	80094ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80094d2:	7ffb      	ldrb	r3, [r7, #31]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d105      	bne.n	80094e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094d8:	4b65      	ldr	r3, [pc, #404]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80094da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094dc:	4a64      	ldr	r2, [pc, #400]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80094de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d03c      	beq.n	800956a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01c      	beq.n	8009532 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094f8:	4b5d      	ldr	r3, [pc, #372]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80094fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094fe:	4a5c      	ldr	r2, [pc, #368]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009500:	f043 0301 	orr.w	r3, r3, #1
 8009504:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009508:	f7fd fb32 	bl	8006b70 <HAL_GetTick>
 800950c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800950e:	e008      	b.n	8009522 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009510:	f7fd fb2e 	bl	8006b70 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d901      	bls.n	8009522 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e0fc      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009522:	4b53      	ldr	r3, [pc, #332]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0ef      	beq.n	8009510 <HAL_RCC_OscConfig+0x418>
 8009530:	e01b      	b.n	800956a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009532:	4b4f      	ldr	r3, [pc, #316]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009538:	4a4d      	ldr	r2, [pc, #308]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800953a:	f023 0301 	bic.w	r3, r3, #1
 800953e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009542:	f7fd fb15 	bl	8006b70 <HAL_GetTick>
 8009546:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009548:	e008      	b.n	800955c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800954a:	f7fd fb11 	bl	8006b70 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b02      	cmp	r3, #2
 8009556:	d901      	bls.n	800955c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e0df      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800955c:	4b44      	ldr	r3, [pc, #272]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800955e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1ef      	bne.n	800954a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80d3 	beq.w	800971a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009574:	4b3e      	ldr	r3, [pc, #248]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 030c 	and.w	r3, r3, #12
 800957c:	2b0c      	cmp	r3, #12
 800957e:	f000 808d 	beq.w	800969c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d15a      	bne.n	8009640 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800958a:	4b39      	ldr	r3, [pc, #228]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a38      	ldr	r2, [pc, #224]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009596:	f7fd faeb 	bl	8006b70 <HAL_GetTick>
 800959a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800959c:	e008      	b.n	80095b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800959e:	f7fd fae7 	bl	8006b70 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e0b5      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095b0:	4b2f      	ldr	r3, [pc, #188]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f0      	bne.n	800959e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095bc:	4b2c      	ldr	r3, [pc, #176]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	4b2d      	ldr	r3, [pc, #180]	; (8009678 <HAL_RCC_OscConfig+0x580>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6a11      	ldr	r1, [r2, #32]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095cc:	3a01      	subs	r2, #1
 80095ce:	0112      	lsls	r2, r2, #4
 80095d0:	4311      	orrs	r1, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80095d6:	0212      	lsls	r2, r2, #8
 80095d8:	4311      	orrs	r1, r2
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80095de:	0852      	lsrs	r2, r2, #1
 80095e0:	3a01      	subs	r2, #1
 80095e2:	0552      	lsls	r2, r2, #21
 80095e4:	4311      	orrs	r1, r2
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80095ea:	0852      	lsrs	r2, r2, #1
 80095ec:	3a01      	subs	r2, #1
 80095ee:	0652      	lsls	r2, r2, #25
 80095f0:	4311      	orrs	r1, r2
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80095f6:	06d2      	lsls	r2, r2, #27
 80095f8:	430a      	orrs	r2, r1
 80095fa:	491d      	ldr	r1, [pc, #116]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009600:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1a      	ldr	r2, [pc, #104]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800960a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800960c:	4b18      	ldr	r3, [pc, #96]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	4a17      	ldr	r2, [pc, #92]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009616:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009618:	f7fd faaa 	bl	8006b70 <HAL_GetTick>
 800961c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800961e:	e008      	b.n	8009632 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009620:	f7fd faa6 	bl	8006b70 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b02      	cmp	r3, #2
 800962c:	d901      	bls.n	8009632 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e074      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0f0      	beq.n	8009620 <HAL_RCC_OscConfig+0x528>
 800963e:	e06c      	b.n	800971a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800964a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	4a07      	ldr	r2, [pc, #28]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	4a04      	ldr	r2, [pc, #16]	; (8009670 <HAL_RCC_OscConfig+0x578>)
 800965e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009668:	f7fd fa82 	bl	8006b70 <HAL_GetTick>
 800966c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800966e:	e00e      	b.n	800968e <HAL_RCC_OscConfig+0x596>
 8009670:	40021000 	.word	0x40021000
 8009674:	40007000 	.word	0x40007000
 8009678:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800967c:	f7fd fa78 	bl	8006b70 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d901      	bls.n	800968e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e046      	b.n	800971c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800968e:	4b25      	ldr	r3, [pc, #148]	; (8009724 <HAL_RCC_OscConfig+0x62c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1f0      	bne.n	800967c <HAL_RCC_OscConfig+0x584>
 800969a:	e03e      	b.n	800971a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e039      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80096a8:	4b1e      	ldr	r3, [pc, #120]	; (8009724 <HAL_RCC_OscConfig+0x62c>)
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f003 0203 	and.w	r2, r3, #3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d12c      	bne.n	8009716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	3b01      	subs	r3, #1
 80096c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d123      	bne.n	8009716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096da:	429a      	cmp	r2, r3
 80096dc:	d11b      	bne.n	8009716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d113      	bne.n	8009716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	085b      	lsrs	r3, r3, #1
 80096fa:	3b01      	subs	r3, #1
 80096fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80096fe:	429a      	cmp	r2, r3
 8009700:	d109      	bne.n	8009716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970c:	085b      	lsrs	r3, r3, #1
 800970e:	3b01      	subs	r3, #1
 8009710:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009712:	429a      	cmp	r2, r3
 8009714:	d001      	beq.n	800971a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40021000 	.word	0x40021000

08009728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e11e      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009740:	4b91      	ldr	r3, [pc, #580]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d910      	bls.n	8009770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974e:	4b8e      	ldr	r3, [pc, #568]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f023 020f 	bic.w	r2, r3, #15
 8009756:	498c      	ldr	r1, [pc, #560]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	4313      	orrs	r3, r2
 800975c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800975e:	4b8a      	ldr	r3, [pc, #552]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d001      	beq.n	8009770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e106      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d073      	beq.n	8009864 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b03      	cmp	r3, #3
 8009782:	d129      	bne.n	80097d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009784:	4b81      	ldr	r3, [pc, #516]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0f4      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009794:	f000 f9ba 	bl	8009b0c <RCC_GetSysClockFreqFromPLLSource>
 8009798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4a7c      	ldr	r2, [pc, #496]	; (8009990 <HAL_RCC_ClockConfig+0x268>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d93f      	bls.n	8009822 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80097a2:	4b7a      	ldr	r3, [pc, #488]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d033      	beq.n	8009822 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d12f      	bne.n	8009822 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80097c2:	4b72      	ldr	r3, [pc, #456]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097ca:	4a70      	ldr	r2, [pc, #448]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80097cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80097d2:	2380      	movs	r3, #128	; 0x80
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e024      	b.n	8009822 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d107      	bne.n	80097f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097e0:	4b6a      	ldr	r3, [pc, #424]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e0c6      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097f0:	4b66      	ldr	r3, [pc, #408]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0be      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009800:	f000 f8ce 	bl	80099a0 <HAL_RCC_GetSysClockFreq>
 8009804:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	4a61      	ldr	r2, [pc, #388]	; (8009990 <HAL_RCC_ClockConfig+0x268>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d909      	bls.n	8009822 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800980e:	4b5f      	ldr	r3, [pc, #380]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009816:	4a5d      	ldr	r2, [pc, #372]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800981e:	2380      	movs	r3, #128	; 0x80
 8009820:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009822:	4b5a      	ldr	r3, [pc, #360]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f023 0203 	bic.w	r2, r3, #3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	4957      	ldr	r1, [pc, #348]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009830:	4313      	orrs	r3, r2
 8009832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009834:	f7fd f99c 	bl	8006b70 <HAL_GetTick>
 8009838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800983a:	e00a      	b.n	8009852 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800983c:	f7fd f998 	bl	8006b70 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	f241 3288 	movw	r2, #5000	; 0x1388
 800984a:	4293      	cmp	r3, r2
 800984c:	d901      	bls.n	8009852 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e095      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009852:	4b4e      	ldr	r3, [pc, #312]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 020c 	and.w	r2, r3, #12
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	429a      	cmp	r2, r3
 8009862:	d1eb      	bne.n	800983c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d023      	beq.n	80098b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800987c:	4b43      	ldr	r3, [pc, #268]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	4a42      	ldr	r2, [pc, #264]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009886:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009894:	4b3d      	ldr	r3, [pc, #244]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800989c:	4a3b      	ldr	r2, [pc, #236]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 800989e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80098a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098a4:	4b39      	ldr	r3, [pc, #228]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	4936      	ldr	r1, [pc, #216]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	608b      	str	r3, [r1, #8]
 80098b6:	e008      	b.n	80098ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2b80      	cmp	r3, #128	; 0x80
 80098bc:	d105      	bne.n	80098ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80098be:	4b33      	ldr	r3, [pc, #204]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	4a32      	ldr	r2, [pc, #200]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 80098c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098ca:	4b2f      	ldr	r3, [pc, #188]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d21d      	bcs.n	8009914 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098d8:	4b2b      	ldr	r3, [pc, #172]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f023 020f 	bic.w	r2, r3, #15
 80098e0:	4929      	ldr	r1, [pc, #164]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80098e8:	f7fd f942 	bl	8006b70 <HAL_GetTick>
 80098ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ee:	e00a      	b.n	8009906 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098f0:	f7fd f93e 	bl	8006b70 <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fe:	4293      	cmp	r3, r2
 8009900:	d901      	bls.n	8009906 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e03b      	b.n	800997e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009906:	4b20      	ldr	r3, [pc, #128]	; (8009988 <HAL_RCC_ClockConfig+0x260>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d1ed      	bne.n	80098f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d008      	beq.n	8009932 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009920:	4b1a      	ldr	r3, [pc, #104]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	4917      	ldr	r1, [pc, #92]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 800992e:	4313      	orrs	r3, r2
 8009930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0308 	and.w	r3, r3, #8
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800993e:	4b13      	ldr	r3, [pc, #76]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	490f      	ldr	r1, [pc, #60]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 800994e:	4313      	orrs	r3, r2
 8009950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009952:	f000 f825 	bl	80099a0 <HAL_RCC_GetSysClockFreq>
 8009956:	4602      	mov	r2, r0
 8009958:	4b0c      	ldr	r3, [pc, #48]	; (800998c <HAL_RCC_ClockConfig+0x264>)
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	091b      	lsrs	r3, r3, #4
 800995e:	f003 030f 	and.w	r3, r3, #15
 8009962:	490c      	ldr	r1, [pc, #48]	; (8009994 <HAL_RCC_ClockConfig+0x26c>)
 8009964:	5ccb      	ldrb	r3, [r1, r3]
 8009966:	f003 031f 	and.w	r3, r3, #31
 800996a:	fa22 f303 	lsr.w	r3, r2, r3
 800996e:	4a0a      	ldr	r2, [pc, #40]	; (8009998 <HAL_RCC_ClockConfig+0x270>)
 8009970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009972:	4b0a      	ldr	r3, [pc, #40]	; (800999c <HAL_RCC_ClockConfig+0x274>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fc ff8a 	bl	8006890 <HAL_InitTick>
 800997c:	4603      	mov	r3, r0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40022000 	.word	0x40022000
 800998c:	40021000 	.word	0x40021000
 8009990:	04c4b400 	.word	0x04c4b400
 8009994:	0801cb2c 	.word	0x0801cb2c
 8009998:	20000004 	.word	0x20000004
 800999c:	20000008 	.word	0x20000008

080099a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80099a6:	4b2c      	ldr	r3, [pc, #176]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f003 030c 	and.w	r3, r3, #12
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d102      	bne.n	80099b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80099b2:	4b2a      	ldr	r3, [pc, #168]	; (8009a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 80099b4:	613b      	str	r3, [r7, #16]
 80099b6:	e047      	b.n	8009a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80099b8:	4b27      	ldr	r3, [pc, #156]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f003 030c 	and.w	r3, r3, #12
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d102      	bne.n	80099ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80099c4:	4b26      	ldr	r3, [pc, #152]	; (8009a60 <HAL_RCC_GetSysClockFreq+0xc0>)
 80099c6:	613b      	str	r3, [r7, #16]
 80099c8:	e03e      	b.n	8009a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80099ca:	4b23      	ldr	r3, [pc, #140]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 030c 	and.w	r3, r3, #12
 80099d2:	2b0c      	cmp	r3, #12
 80099d4:	d136      	bne.n	8009a44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80099d6:	4b20      	ldr	r3, [pc, #128]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80099e0:	4b1d      	ldr	r3, [pc, #116]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	091b      	lsrs	r3, r3, #4
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	3301      	adds	r3, #1
 80099ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d10c      	bne.n	8009a0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099f4:	4a1a      	ldr	r2, [pc, #104]	; (8009a60 <HAL_RCC_GetSysClockFreq+0xc0>)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fc:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099fe:	68d2      	ldr	r2, [r2, #12]
 8009a00:	0a12      	lsrs	r2, r2, #8
 8009a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
 8009a0a:	617b      	str	r3, [r7, #20]
      break;
 8009a0c:	e00c      	b.n	8009a28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a0e:	4a13      	ldr	r2, [pc, #76]	; (8009a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a16:	4a10      	ldr	r2, [pc, #64]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a18:	68d2      	ldr	r2, [r2, #12]
 8009a1a:	0a12      	lsrs	r2, r2, #8
 8009a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a20:	fb02 f303 	mul.w	r3, r2, r3
 8009a24:	617b      	str	r3, [r7, #20]
      break;
 8009a26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a28:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	0e5b      	lsrs	r3, r3, #25
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	3301      	adds	r3, #1
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	e001      	b.n	8009a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009a48:	693b      	ldr	r3, [r7, #16]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40021000 	.word	0x40021000
 8009a5c:	00f42400 	.word	0x00f42400
 8009a60:	016e3600 	.word	0x016e3600

08009a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a68:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20000004 	.word	0x20000004

08009a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a80:	f7ff fff0 	bl	8009a64 <HAL_RCC_GetHCLKFreq>
 8009a84:	4602      	mov	r2, r0
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	4904      	ldr	r1, [pc, #16]	; (8009aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a92:	5ccb      	ldrb	r3, [r1, r3]
 8009a94:	f003 031f 	and.w	r3, r3, #31
 8009a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	0801cb3c 	.word	0x0801cb3c

08009aa8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	220f      	movs	r2, #15
 8009ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009ab8:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <HAL_RCC_GetClockConfig+0x5c>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0203 	and.w	r2, r3, #3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <HAL_RCC_GetClockConfig+0x5c>)
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <HAL_RCC_GetClockConfig+0x5c>)
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009adc:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <HAL_RCC_GetClockConfig+0x5c>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	08db      	lsrs	r3, r3, #3
 8009ae2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009aea:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <HAL_RCC_GetClockConfig+0x60>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 020f 	and.w	r2, r3, #15
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	601a      	str	r2, [r3, #0]
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40021000 	.word	0x40021000
 8009b08:	40022000 	.word	0x40022000

08009b0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b12:	4b1e      	ldr	r3, [pc, #120]	; (8009b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b1c:	4b1b      	ldr	r3, [pc, #108]	; (8009b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	091b      	lsrs	r3, r3, #4
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	3301      	adds	r3, #1
 8009b28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d10c      	bne.n	8009b4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b30:	4a17      	ldr	r2, [pc, #92]	; (8009b90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b38:	4a14      	ldr	r2, [pc, #80]	; (8009b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b3a:	68d2      	ldr	r2, [r2, #12]
 8009b3c:	0a12      	lsrs	r2, r2, #8
 8009b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b42:	fb02 f303 	mul.w	r3, r2, r3
 8009b46:	617b      	str	r3, [r7, #20]
    break;
 8009b48:	e00c      	b.n	8009b64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b4a:	4a12      	ldr	r2, [pc, #72]	; (8009b94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b52:	4a0e      	ldr	r2, [pc, #56]	; (8009b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b54:	68d2      	ldr	r2, [r2, #12]
 8009b56:	0a12      	lsrs	r2, r2, #8
 8009b58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b5c:	fb02 f303 	mul.w	r3, r2, r3
 8009b60:	617b      	str	r3, [r7, #20]
    break;
 8009b62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b64:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	0e5b      	lsrs	r3, r3, #25
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	3301      	adds	r3, #1
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009b7e:	687b      	ldr	r3, [r7, #4]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	371c      	adds	r7, #28
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	40021000 	.word	0x40021000
 8009b90:	016e3600 	.word	0x016e3600
 8009b94:	00f42400 	.word	0x00f42400

08009b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 8098 	beq.w	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bba:	4b43      	ldr	r3, [pc, #268]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10d      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bc6:	4b40      	ldr	r3, [pc, #256]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bca:	4a3f      	ldr	r2, [pc, #252]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8009bd2:	4b3d      	ldr	r3, [pc, #244]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bda:	60bb      	str	r3, [r7, #8]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bde:	2301      	movs	r3, #1
 8009be0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009be2:	4b3a      	ldr	r3, [pc, #232]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a39      	ldr	r2, [pc, #228]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bee:	f7fc ffbf 	bl	8006b70 <HAL_GetTick>
 8009bf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bf4:	e009      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bf6:	f7fc ffbb 	bl	8006b70 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d902      	bls.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009c04:	2303      	movs	r3, #3
 8009c06:	74fb      	strb	r3, [r7, #19]
        break;
 8009c08:	e005      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c0a:	4b30      	ldr	r3, [pc, #192]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0ef      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009c16:	7cfb      	ldrb	r3, [r7, #19]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d159      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009c1c:	4b2a      	ldr	r3, [pc, #168]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d01e      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d019      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c38:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c44:	4b20      	ldr	r3, [pc, #128]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c4a:	4a1f      	ldr	r2, [pc, #124]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c54:	4b1c      	ldr	r3, [pc, #112]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5a:	4a1b      	ldr	r2, [pc, #108]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c64:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d016      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c76:	f7fc ff7b 	bl	8006b70 <HAL_GetTick>
 8009c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c7c:	e00b      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c7e:	f7fc ff77 	bl	8006b70 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d902      	bls.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	74fb      	strb	r3, [r7, #19]
            break;
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9c:	f003 0302 	and.w	r3, r3, #2
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0ec      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009ca4:	7cfb      	ldrb	r3, [r7, #19]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10b      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009caa:	4b07      	ldr	r3, [pc, #28]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	4903      	ldr	r1, [pc, #12]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009cc0:	e008      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cc2:	7cfb      	ldrb	r3, [r7, #19]
 8009cc4:	74bb      	strb	r3, [r7, #18]
 8009cc6:	e005      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009cc8:	40021000 	.word	0x40021000
 8009ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd0:	7cfb      	ldrb	r3, [r7, #19]
 8009cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009cd4:	7c7b      	ldrb	r3, [r7, #17]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d105      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cda:	4baf      	ldr	r3, [pc, #700]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	4aae      	ldr	r2, [pc, #696]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cf2:	4ba9      	ldr	r3, [pc, #676]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf8:	f023 0203 	bic.w	r2, r3, #3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	49a5      	ldr	r1, [pc, #660]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d14:	4ba0      	ldr	r3, [pc, #640]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1a:	f023 020c 	bic.w	r2, r3, #12
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	499d      	ldr	r1, [pc, #628]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d36:	4b98      	ldr	r3, [pc, #608]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	4994      	ldr	r1, [pc, #592]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0308 	and.w	r3, r3, #8
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d58:	4b8f      	ldr	r3, [pc, #572]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	498c      	ldr	r1, [pc, #560]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0310 	and.w	r3, r3, #16
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d7a:	4b87      	ldr	r3, [pc, #540]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	4983      	ldr	r1, [pc, #524]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d9c:	4b7e      	ldr	r3, [pc, #504]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	497b      	ldr	r1, [pc, #492]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009dbe:	4b76      	ldr	r3, [pc, #472]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	4972      	ldr	r1, [pc, #456]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009de0:	4b6d      	ldr	r3, [pc, #436]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	496a      	ldr	r1, [pc, #424]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009df0:	4313      	orrs	r3, r2
 8009df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e02:	4b65      	ldr	r3, [pc, #404]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	4961      	ldr	r1, [pc, #388]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e24:	4b5c      	ldr	r3, [pc, #368]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e2a:	f023 0203 	bic.w	r2, r3, #3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e32:	4959      	ldr	r1, [pc, #356]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e46:	4b54      	ldr	r3, [pc, #336]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4950      	ldr	r1, [pc, #320]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d015      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e68:	4b4b      	ldr	r3, [pc, #300]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e76:	4948      	ldr	r1, [pc, #288]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e86:	d105      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e88:	4b43      	ldr	r3, [pc, #268]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	4a42      	ldr	r2, [pc, #264]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d015      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009ea0:	4b3d      	ldr	r3, [pc, #244]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	493a      	ldr	r1, [pc, #232]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ebe:	d105      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ec0:	4b35      	ldr	r3, [pc, #212]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	4a34      	ldr	r2, [pc, #208]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d015      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ed8:	4b2f      	ldr	r3, [pc, #188]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ede:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee6:	492c      	ldr	r1, [pc, #176]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ef6:	d105      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ef8:	4b27      	ldr	r3, [pc, #156]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	4a26      	ldr	r2, [pc, #152]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d015      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f10:	4b21      	ldr	r3, [pc, #132]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	491e      	ldr	r1, [pc, #120]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f20:	4313      	orrs	r3, r2
 8009f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f2e:	d105      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f30:	4b19      	ldr	r3, [pc, #100]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	4a18      	ldr	r2, [pc, #96]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d015      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f48:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f56:	4910      	ldr	r1, [pc, #64]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f66:	d105      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	4a0a      	ldr	r2, [pc, #40]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d018      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009f80:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8e:	4902      	ldr	r1, [pc, #8]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009f96:	e001      	b.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009f98:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fa4:	d105      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009fa6:	4b21      	ldr	r3, [pc, #132]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	4a20      	ldr	r2, [pc, #128]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fb0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d015      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009fbe:	4b1b      	ldr	r3, [pc, #108]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fcc:	4917      	ldr	r1, [pc, #92]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fdc:	d105      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	4a12      	ldr	r2, [pc, #72]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fe8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d015      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a004:	4909      	ldr	r1, [pc, #36]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a006:	4313      	orrs	r3, r2
 800a008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a014:	d105      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	4a04      	ldr	r2, [pc, #16]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a01c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a020:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a022:	7cbb      	ldrb	r3, [r7, #18]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	40021000 	.word	0x40021000

0800a030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e049      	b.n	800a0d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f841 	bl	800a0de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2202      	movs	r2, #2
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f000 fa60 	bl	800a534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	d001      	beq.n	800a10c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e054      	b.n	800a1b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a26      	ldr	r2, [pc, #152]	; (800a1c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d022      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a136:	d01d      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a22      	ldr	r2, [pc, #136]	; (800a1c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d018      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a21      	ldr	r2, [pc, #132]	; (800a1cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d013      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a1f      	ldr	r2, [pc, #124]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00e      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a1e      	ldr	r2, [pc, #120]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d009      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a1c      	ldr	r2, [pc, #112]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d004      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0x80>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a1b      	ldr	r2, [pc, #108]	; (800a1dc <HAL_TIM_Base_Start_IT+0xe8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d115      	bne.n	800a1a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	4b19      	ldr	r3, [pc, #100]	; (800a1e0 <HAL_TIM_Base_Start_IT+0xec>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b06      	cmp	r3, #6
 800a184:	d015      	beq.n	800a1b2 <HAL_TIM_Base_Start_IT+0xbe>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18c:	d011      	beq.n	800a1b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0201 	orr.w	r2, r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19e:	e008      	b.n	800a1b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0201 	orr.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e000      	b.n	800a1b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	40012c00 	.word	0x40012c00
 800a1c8:	40000400 	.word	0x40000400
 800a1cc:	40000800 	.word	0x40000800
 800a1d0:	40000c00 	.word	0x40000c00
 800a1d4:	40013400 	.word	0x40013400
 800a1d8:	40014000 	.word	0x40014000
 800a1dc:	40015000 	.word	0x40015000
 800a1e0:	00010007 	.word	0x00010007

0800a1e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d122      	bne.n	800a240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f003 0302 	and.w	r3, r3, #2
 800a204:	2b02      	cmp	r3, #2
 800a206:	d11b      	bne.n	800a240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f06f 0202 	mvn.w	r2, #2
 800a210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f965 	bl	800a4f6 <HAL_TIM_IC_CaptureCallback>
 800a22c:	e005      	b.n	800a23a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f957 	bl	800a4e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f968 	bl	800a50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	f003 0304 	and.w	r3, r3, #4
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d122      	bne.n	800a294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b04      	cmp	r3, #4
 800a25a:	d11b      	bne.n	800a294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f06f 0204 	mvn.w	r2, #4
 800a264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2202      	movs	r2, #2
 800a26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f93b 	bl	800a4f6 <HAL_TIM_IC_CaptureCallback>
 800a280:	e005      	b.n	800a28e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f92d 	bl	800a4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f93e 	bl	800a50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b08      	cmp	r3, #8
 800a2a0:	d122      	bne.n	800a2e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f003 0308 	and.w	r3, r3, #8
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d11b      	bne.n	800a2e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f06f 0208 	mvn.w	r2, #8
 800a2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2204      	movs	r2, #4
 800a2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f911 	bl	800a4f6 <HAL_TIM_IC_CaptureCallback>
 800a2d4:	e005      	b.n	800a2e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f903 	bl	800a4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f914 	bl	800a50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d122      	bne.n	800a33c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f003 0310 	and.w	r3, r3, #16
 800a300:	2b10      	cmp	r3, #16
 800a302:	d11b      	bne.n	800a33c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f06f 0210 	mvn.w	r2, #16
 800a30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2208      	movs	r2, #8
 800a312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f8e7 	bl	800a4f6 <HAL_TIM_IC_CaptureCallback>
 800a328:	e005      	b.n	800a336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f8d9 	bl	800a4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f8ea 	bl	800a50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b01      	cmp	r3, #1
 800a348:	d10e      	bne.n	800a368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b01      	cmp	r3, #1
 800a356:	d107      	bne.n	800a368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0201 	mvn.w	r2, #1
 800a360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7fc fa4e 	bl	8006804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b80      	cmp	r3, #128	; 0x80
 800a374:	d10e      	bne.n	800a394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a380:	2b80      	cmp	r3, #128	; 0x80
 800a382:	d107      	bne.n	800a394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f982 	bl	800a698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a2:	d10e      	bne.n	800a3c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ae:	2b80      	cmp	r3, #128	; 0x80
 800a3b0:	d107      	bne.n	800a3c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f975 	bl	800a6ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3cc:	2b40      	cmp	r3, #64	; 0x40
 800a3ce:	d10e      	bne.n	800a3ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b40      	cmp	r3, #64	; 0x40
 800a3dc:	d107      	bne.n	800a3ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f898 	bl	800a51e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	f003 0320 	and.w	r3, r3, #32
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d10e      	bne.n	800a41a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b20      	cmp	r3, #32
 800a408:	d107      	bne.n	800a41a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f06f 0220 	mvn.w	r2, #32
 800a412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f935 	bl	800a684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a428:	d10f      	bne.n	800a44a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a438:	d107      	bne.n	800a44a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f93b 	bl	800a6c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a458:	d10f      	bne.n	800a47a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a468:	d107      	bne.n	800a47a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f92d 	bl	800a6d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a488:	d10f      	bne.n	800a4aa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a498:	d107      	bne.n	800a4aa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f91f 	bl	800a6e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4b8:	d10f      	bne.n	800a4da <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4c8:	d107      	bne.n	800a4da <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f911 	bl	800a6fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4ea:	bf00      	nop
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4fe:	bf00      	nop
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a46      	ldr	r2, [pc, #280]	; (800a660 <TIM_Base_SetConfig+0x12c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d017      	beq.n	800a57c <TIM_Base_SetConfig+0x48>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a552:	d013      	beq.n	800a57c <TIM_Base_SetConfig+0x48>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a43      	ldr	r2, [pc, #268]	; (800a664 <TIM_Base_SetConfig+0x130>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00f      	beq.n	800a57c <TIM_Base_SetConfig+0x48>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a42      	ldr	r2, [pc, #264]	; (800a668 <TIM_Base_SetConfig+0x134>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00b      	beq.n	800a57c <TIM_Base_SetConfig+0x48>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a41      	ldr	r2, [pc, #260]	; (800a66c <TIM_Base_SetConfig+0x138>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d007      	beq.n	800a57c <TIM_Base_SetConfig+0x48>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a40      	ldr	r2, [pc, #256]	; (800a670 <TIM_Base_SetConfig+0x13c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d003      	beq.n	800a57c <TIM_Base_SetConfig+0x48>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a3f      	ldr	r2, [pc, #252]	; (800a674 <TIM_Base_SetConfig+0x140>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d108      	bne.n	800a58e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a33      	ldr	r2, [pc, #204]	; (800a660 <TIM_Base_SetConfig+0x12c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d023      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59c:	d01f      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a30      	ldr	r2, [pc, #192]	; (800a664 <TIM_Base_SetConfig+0x130>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d01b      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a2f      	ldr	r2, [pc, #188]	; (800a668 <TIM_Base_SetConfig+0x134>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d017      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a2e      	ldr	r2, [pc, #184]	; (800a66c <TIM_Base_SetConfig+0x138>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <TIM_Base_SetConfig+0x13c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00f      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a2d      	ldr	r2, [pc, #180]	; (800a678 <TIM_Base_SetConfig+0x144>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d00b      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a2c      	ldr	r2, [pc, #176]	; (800a67c <TIM_Base_SetConfig+0x148>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d007      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a2b      	ldr	r2, [pc, #172]	; (800a680 <TIM_Base_SetConfig+0x14c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d003      	beq.n	800a5de <TIM_Base_SetConfig+0xaa>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a26      	ldr	r2, [pc, #152]	; (800a674 <TIM_Base_SetConfig+0x140>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d108      	bne.n	800a5f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a12      	ldr	r2, [pc, #72]	; (800a660 <TIM_Base_SetConfig+0x12c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d013      	beq.n	800a644 <TIM_Base_SetConfig+0x110>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a14      	ldr	r2, [pc, #80]	; (800a670 <TIM_Base_SetConfig+0x13c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d00f      	beq.n	800a644 <TIM_Base_SetConfig+0x110>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a14      	ldr	r2, [pc, #80]	; (800a678 <TIM_Base_SetConfig+0x144>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d00b      	beq.n	800a644 <TIM_Base_SetConfig+0x110>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a13      	ldr	r2, [pc, #76]	; (800a67c <TIM_Base_SetConfig+0x148>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d007      	beq.n	800a644 <TIM_Base_SetConfig+0x110>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a12      	ldr	r2, [pc, #72]	; (800a680 <TIM_Base_SetConfig+0x14c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d003      	beq.n	800a644 <TIM_Base_SetConfig+0x110>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a0d      	ldr	r2, [pc, #52]	; (800a674 <TIM_Base_SetConfig+0x140>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d103      	bne.n	800a64c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	615a      	str	r2, [r3, #20]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	40012c00 	.word	0x40012c00
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40013400 	.word	0x40013400
 800a674:	40015000 	.word	0x40015000
 800a678:	40014000 	.word	0x40014000
 800a67c:	40014400 	.word	0x40014400
 800a680:	40014800 	.word	0x40014800

0800a684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <LL_DMA_ConfigTransfer>:
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800a720:	4a0e      	ldr	r2, [pc, #56]	; (800a75c <LL_DMA_ConfigTransfer+0x4c>)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4413      	add	r3, r2
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	4413      	add	r3, r2
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a738:	4908      	ldr	r1, [pc, #32]	; (800a75c <LL_DMA_ConfigTransfer+0x4c>)
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	440a      	add	r2, r1
 800a73e:	7812      	ldrb	r2, [r2, #0]
 800a740:	4611      	mov	r1, r2
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	440a      	add	r2, r1
 800a746:	4611      	mov	r1, r2
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	600b      	str	r3, [r1, #0]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	0801cb44 	.word	0x0801cb44

0800a760 <LL_DMA_SetDataLength>:
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800a770:	4a0d      	ldr	r2, [pc, #52]	; (800a7a8 <LL_DMA_SetDataLength+0x48>)
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	4413      	add	r3, r2
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	4413      	add	r3, r2
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	0c1b      	lsrs	r3, r3, #16
 800a782:	041b      	lsls	r3, r3, #16
 800a784:	4908      	ldr	r1, [pc, #32]	; (800a7a8 <LL_DMA_SetDataLength+0x48>)
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	440a      	add	r2, r1
 800a78a:	7812      	ldrb	r2, [r2, #0]
 800a78c:	4611      	mov	r1, r2
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	440a      	add	r2, r1
 800a792:	4611      	mov	r1, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	4313      	orrs	r3, r2
 800a798:	604b      	str	r3, [r1, #4]
}
 800a79a:	bf00      	nop
 800a79c:	371c      	adds	r7, #28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	0801cb44 	.word	0x0801cb44

0800a7ac <LL_DMA_SetMemoryAddress>:
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800a7bc:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <LL_DMA_SetMemoryAddress+0x30>)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60d3      	str	r3, [r2, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	0801cb44 	.word	0x0801cb44

0800a7e0 <LL_DMA_SetPeriphAddress>:
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800a7f0:	4a07      	ldr	r2, [pc, #28]	; (800a810 <LL_DMA_SetPeriphAddress+0x30>)
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	461a      	mov	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6093      	str	r3, [r2, #8]
}
 800a804:	bf00      	nop
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	0801cb44 	.word	0x0801cb44

0800a814 <LL_DMA_SetPeriphRequest>:
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	0a9b      	lsrs	r3, r3, #10
 800a824:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800a828:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800a82c:	00db      	lsls	r3, r3, #3
 800a82e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a83c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a852:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	430a      	orrs	r2, r1
 800a85a:	601a      	str	r2, [r3, #0]
}
 800a85c:	bf00      	nop
 800a85e:	371c      	adds	r7, #28
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800a87c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800a882:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800a888:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800a88e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800a894:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800a89a:	4313      	orrs	r3, r2
 800a89c:	461a      	mov	r2, r3
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7ff ff35 	bl	800a710 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff ff7c 	bl	800a7ac <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff ff8f 	bl	800a7e0 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff ff48 	bl	800a760 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7ff ff9b 	bl	800a814 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a93e:	b480      	push	{r7}
 800a940:	b08b      	sub	sp, #44	; 0x2c
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	fa93 f3a3 	rbit	r3, r3
 800a958:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800a964:	2320      	movs	r3, #32
 800a966:	e003      	b.n	800a970 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	fab3 f383 	clz	r3, r3
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	2103      	movs	r1, #3
 800a974:	fa01 f303 	lsl.w	r3, r1, r3
 800a978:	43db      	mvns	r3, r3
 800a97a:	401a      	ands	r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	fa93 f3a3 	rbit	r3, r3
 800a986:	61fb      	str	r3, [r7, #28]
  return result;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a992:	2320      	movs	r3, #32
 800a994:	e003      	b.n	800a99e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	fab3 f383 	clz	r3, r3
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	005b      	lsls	r3, r3, #1
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a6:	431a      	orrs	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]
}
 800a9ac:	bf00      	nop
 800a9ae:	372c      	adds	r7, #44	; 0x2c
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	43db      	mvns	r3, r3
 800a9cc:	401a      	ands	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	fb01 f303 	mul.w	r3, r1, r3
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	605a      	str	r2, [r3, #4]
}
 800a9dc:	bf00      	nop
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b08b      	sub	sp, #44	; 0x2c
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	fa93 f3a3 	rbit	r3, r3
 800aa02:	613b      	str	r3, [r7, #16]
  return result;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aa0e:	2320      	movs	r3, #32
 800aa10:	e003      	b.n	800aa1a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	fab3 f383 	clz	r3, r3
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	2103      	movs	r1, #3
 800aa1e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa22:	43db      	mvns	r3, r3
 800aa24:	401a      	ands	r2, r3
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	fa93 f3a3 	rbit	r3, r3
 800aa30:	61fb      	str	r3, [r7, #28]
  return result;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	e003      	b.n	800aa48 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	fab3 f383 	clz	r3, r3
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa50:	431a      	orrs	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800aa56:	bf00      	nop
 800aa58:	372c      	adds	r7, #44	; 0x2c
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b08b      	sub	sp, #44	; 0x2c
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	fa93 f3a3 	rbit	r3, r3
 800aa7c:	613b      	str	r3, [r7, #16]
  return result;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800aa88:	2320      	movs	r3, #32
 800aa8a:	e003      	b.n	800aa94 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	fab3 f383 	clz	r3, r3
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	2103      	movs	r1, #3
 800aa98:	fa01 f303 	lsl.w	r3, r1, r3
 800aa9c:	43db      	mvns	r3, r3
 800aa9e:	401a      	ands	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	fa93 f3a3 	rbit	r3, r3
 800aaaa:	61fb      	str	r3, [r7, #28]
  return result;
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800aab6:	2320      	movs	r3, #32
 800aab8:	e003      	b.n	800aac2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	fab3 f383 	clz	r3, r3
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	fa01 f303 	lsl.w	r3, r1, r3
 800aaca:	431a      	orrs	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	60da      	str	r2, [r3, #12]
}
 800aad0:	bf00      	nop
 800aad2:	372c      	adds	r7, #44	; 0x2c
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800aadc:	b480      	push	{r7}
 800aade:	b08b      	sub	sp, #44	; 0x2c
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6a1a      	ldr	r2, [r3, #32]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	fa93 f3a3 	rbit	r3, r3
 800aaf6:	613b      	str	r3, [r7, #16]
  return result;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ab02:	2320      	movs	r3, #32
 800ab04:	e003      	b.n	800ab0e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	fab3 f383 	clz	r3, r3
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	210f      	movs	r1, #15
 800ab12:	fa01 f303 	lsl.w	r3, r1, r3
 800ab16:	43db      	mvns	r3, r3
 800ab18:	401a      	ands	r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	fa93 f3a3 	rbit	r3, r3
 800ab24:	61fb      	str	r3, [r7, #28]
  return result;
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ab30:	2320      	movs	r3, #32
 800ab32:	e003      	b.n	800ab3c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	fab3 f383 	clz	r3, r3
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	fa01 f303 	lsl.w	r3, r1, r3
 800ab44:	431a      	orrs	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ab4a:	bf00      	nop
 800ab4c:	372c      	adds	r7, #44	; 0x2c
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b08b      	sub	sp, #44	; 0x2c
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	0a1b      	lsrs	r3, r3, #8
 800ab6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	fa93 f3a3 	rbit	r3, r3
 800ab72:	613b      	str	r3, [r7, #16]
  return result;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ab7e:	2320      	movs	r3, #32
 800ab80:	e003      	b.n	800ab8a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	fab3 f383 	clz	r3, r3
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	210f      	movs	r1, #15
 800ab8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab92:	43db      	mvns	r3, r3
 800ab94:	401a      	ands	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	0a1b      	lsrs	r3, r3, #8
 800ab9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab9c:	6a3b      	ldr	r3, [r7, #32]
 800ab9e:	fa93 f3a3 	rbit	r3, r3
 800aba2:	61fb      	str	r3, [r7, #28]
  return result;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800abae:	2320      	movs	r3, #32
 800abb0:	e003      	b.n	800abba <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	fab3 f383 	clz	r3, r3
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	fa01 f303 	lsl.w	r3, r1, r3
 800abc2:	431a      	orrs	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800abc8:	bf00      	nop
 800abca:	372c      	adds	r7, #44	; 0x2c
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	fa93 f3a3 	rbit	r3, r3
 800abea:	60fb      	str	r3, [r7, #12]
  return result;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <LL_GPIO_Init+0x26>
    return 32U;
 800abf6:	2320      	movs	r3, #32
 800abf8:	e003      	b.n	800ac02 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	fab3 f383 	clz	r3, r3
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ac04:	e048      	b.n	800ac98 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac12:	4013      	ands	r3, r2
 800ac14:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d03a      	beq.n	800ac92 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d003      	beq.n	800ac2c <LL_GPIO_Init+0x58>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d10e      	bne.n	800ac4a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	461a      	mov	r2, r3
 800ac32:	69b9      	ldr	r1, [r7, #24]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff fed7 	bl	800a9e8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	6819      	ldr	r1, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	461a      	mov	r2, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff feb7 	bl	800a9b8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	69b9      	ldr	r1, [r7, #24]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff ff05 	bl	800aa62 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d111      	bne.n	800ac84 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2bff      	cmp	r3, #255	; 0xff
 800ac64:	d807      	bhi.n	800ac76 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	69b9      	ldr	r1, [r7, #24]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff ff34 	bl	800aadc <LL_GPIO_SetAFPin_0_7>
 800ac74:	e006      	b.n	800ac84 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	69b9      	ldr	r1, [r7, #24]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff ff69 	bl	800ab56 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	69b9      	ldr	r1, [r7, #24]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fe56 	bl	800a93e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	3301      	adds	r3, #1
 800ac96:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1af      	bne.n	800ac06 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <LL_LPUART_IsEnabled>:
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d101      	bne.n	800acc8 <LL_LPUART_IsEnabled+0x18>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <LL_LPUART_IsEnabled+0x1a>
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <LL_LPUART_SetPrescaler>:
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace4:	f023 030f 	bic.w	r3, r3, #15
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	b292      	uxth	r2, r2
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <LL_LPUART_SetStopBitsLength>:
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	605a      	str	r2, [r3, #4]
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <LL_LPUART_SetHWFlowCtrl>:
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	609a      	str	r2, [r3, #8]
}
 800ad3e:	bf00      	nop
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
	...

0800ad4c <LL_LPUART_SetBaudRate>:
{
 800ad4c:	b5b0      	push	{r4, r5, r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
  if (BaudRate != 0U)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d031      	beq.n	800adc4 <LL_LPUART_SetBaudRate+0x78>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f04f 0100 	mov.w	r1, #0
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4b17      	ldr	r3, [pc, #92]	; (800adcc <LL_LPUART_SetBaudRate+0x80>)
 800ad70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	f7fa fe89 	bl	8005a90 <__aeabi_uldivmod>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4610      	mov	r0, r2
 800ad84:	4619      	mov	r1, r3
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	020b      	lsls	r3, r1, #8
 800ad90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad94:	0202      	lsls	r2, r0, #8
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	0849      	lsrs	r1, r1, #1
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	f04f 0100 	mov.w	r1, #0
 800ada0:	1814      	adds	r4, r2, r0
 800ada2:	eb43 0501 	adc.w	r5, r3, r1
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7fa fe6d 	bl	8005a90 <__aeabi_uldivmod>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4613      	mov	r3, r2
 800adbc:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	60da      	str	r2, [r3, #12]
}
 800adc4:	bf00      	nop
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bdb0      	pop	{r4, r5, r7, pc}
 800adcc:	0801cb4c 	.word	0x0801cb4c

0800add0 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff ff66 	bl	800acb0 <LL_LPUART_IsEnabled>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d136      	bne.n	800ae58 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	4b1d      	ldr	r3, [pc, #116]	; (800ae64 <LL_LPUART_Init+0x94>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	6891      	ldr	r1, [r2, #8]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	6912      	ldr	r2, [r2, #16]
 800adfa:	4311      	orrs	r1, r2
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	6952      	ldr	r2, [r2, #20]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	431a      	orrs	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ff75 	bl	800acfe <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff ff82 	bl	800ad24 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800ae20:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ae24:	f000 f8bc 	bl	800afa0 <LL_RCC_GetLPUARTClockFreq>
 800ae28:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d009      	beq.n	800ae4c <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff ff80 	bl	800ad4c <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff ff3f 	bl	800acd6 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	efffe9f3 	.word	0xefffe9f3

0800ae68 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <LL_RCC_HSI_IsReady+0x24>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae78:	d101      	bne.n	800ae7e <LL_RCC_HSI_IsReady+0x16>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <LL_RCC_HSI_IsReady+0x18>
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	40021000 	.word	0x40021000

0800ae90 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ae94:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <LL_RCC_LSE_IsReady+0x24>)
 800ae96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae9a:	f003 0302 	and.w	r3, r3, #2
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d101      	bne.n	800aea6 <LL_RCC_LSE_IsReady+0x16>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e000      	b.n	800aea8 <LL_RCC_LSE_IsReady+0x18>
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	40021000 	.word	0x40021000

0800aeb8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800aebc:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <LL_RCC_GetSysClkSource+0x18>)
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f003 030c 	and.w	r3, r3, #12
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	40021000 	.word	0x40021000

0800aed4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800aed4:	b480      	push	{r7}
 800aed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800aed8:	4b04      	ldr	r3, [pc, #16]	; (800aeec <LL_RCC_GetAHBPrescaler+0x18>)
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40021000 	.word	0x40021000

0800aef0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800aef0:	b480      	push	{r7}
 800aef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <LL_RCC_GetAPB1Prescaler+0x18>)
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	40021000 	.word	0x40021000

0800af0c <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <LL_RCC_GetLPUARTClockSource+0x20>)
 800af16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4013      	ands	r3, r2
}
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	40021000 	.word	0x40021000

0800af30 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <LL_RCC_PLL_GetMainSource+0x18>)
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f003 0303 	and.w	r3, r3, #3
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	40021000 	.word	0x40021000

0800af4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800af4c:	b480      	push	{r7}
 800af4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800af50:	4b04      	ldr	r3, [pc, #16]	; (800af64 <LL_RCC_PLL_GetN+0x18>)
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	0a1b      	lsrs	r3, r3, #8
 800af56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	40021000 	.word	0x40021000

0800af68 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <LL_RCC_PLL_GetR+0x18>)
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800af74:	4618      	mov	r0, r3
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	40021000 	.word	0x40021000

0800af84 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800af84:	b480      	push	{r7}
 800af86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800af88:	4b04      	ldr	r3, [pc, #16]	; (800af9c <LL_RCC_PLL_GetDivider+0x18>)
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800af90:	4618      	mov	r0, r3
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	40021000 	.word	0x40021000

0800afa0 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff ffad 	bl	800af0c <LL_RCC_GetLPUARTClockSource>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afb8:	d015      	beq.n	800afe6 <LL_RCC_GetLPUARTClockFreq+0x46>
 800afba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afbe:	d81b      	bhi.n	800aff8 <LL_RCC_GetLPUARTClockFreq+0x58>
 800afc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afc4:	d003      	beq.n	800afce <LL_RCC_GetLPUARTClockFreq+0x2e>
 800afc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afca:	d004      	beq.n	800afd6 <LL_RCC_GetLPUARTClockFreq+0x36>
 800afcc:	e014      	b.n	800aff8 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 800afce:	f000 f829 	bl	800b024 <RCC_GetSystemClockFreq>
 800afd2:	60f8      	str	r0, [r7, #12]
      break;
 800afd4:	e01f      	b.n	800b016 <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 800afd6:	f7ff ff47 	bl	800ae68 <LL_RCC_HSI_IsReady>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d017      	beq.n	800b010 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <LL_RCC_GetLPUARTClockFreq+0x80>)
 800afe2:	60fb      	str	r3, [r7, #12]
      }
      break;
 800afe4:	e014      	b.n	800b010 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 800afe6:	f7ff ff53 	bl	800ae90 <LL_RCC_LSE_IsReady>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d011      	beq.n	800b014 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 800aff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aff4:	60fb      	str	r3, [r7, #12]
      }
      break;
 800aff6:	e00d      	b.n	800b014 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aff8:	f000 f814 	bl	800b024 <RCC_GetSystemClockFreq>
 800affc:	4603      	mov	r3, r0
 800affe:	4618      	mov	r0, r3
 800b000:	f000 f836 	bl	800b070 <RCC_GetHCLKClockFreq>
 800b004:	4603      	mov	r3, r0
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f84a 	bl	800b0a0 <RCC_GetPCLK1ClockFreq>
 800b00c:	60f8      	str	r0, [r7, #12]
      break;
 800b00e:	e002      	b.n	800b016 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 800b010:	bf00      	nop
 800b012:	e000      	b.n	800b016 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 800b014:	bf00      	nop
  }

  return lpuart_frequency;
 800b016:	68fb      	ldr	r3, [r7, #12]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	00f42400 	.word	0x00f42400

0800b024 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b02a:	f7ff ff45 	bl	800aeb8 <LL_RCC_GetSysClkSource>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b0c      	cmp	r3, #12
 800b032:	d00c      	beq.n	800b04e <RCC_GetSystemClockFreq+0x2a>
 800b034:	2b0c      	cmp	r3, #12
 800b036:	d80e      	bhi.n	800b056 <RCC_GetSystemClockFreq+0x32>
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d002      	beq.n	800b042 <RCC_GetSystemClockFreq+0x1e>
 800b03c:	2b08      	cmp	r3, #8
 800b03e:	d003      	beq.n	800b048 <RCC_GetSystemClockFreq+0x24>
 800b040:	e009      	b.n	800b056 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <RCC_GetSystemClockFreq+0x44>)
 800b044:	607b      	str	r3, [r7, #4]
      break;
 800b046:	e009      	b.n	800b05c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b048:	4b08      	ldr	r3, [pc, #32]	; (800b06c <RCC_GetSystemClockFreq+0x48>)
 800b04a:	607b      	str	r3, [r7, #4]
      break;
 800b04c:	e006      	b.n	800b05c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800b04e:	f000 f83d 	bl	800b0cc <RCC_PLL_GetFreqDomain_SYS>
 800b052:	6078      	str	r0, [r7, #4]
      break;
 800b054:	e002      	b.n	800b05c <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800b056:	4b04      	ldr	r3, [pc, #16]	; (800b068 <RCC_GetSystemClockFreq+0x44>)
 800b058:	607b      	str	r3, [r7, #4]
      break;
 800b05a:	bf00      	nop
  }

  return frequency;
 800b05c:	687b      	ldr	r3, [r7, #4]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	00f42400 	.word	0x00f42400
 800b06c:	016e3600 	.word	0x016e3600

0800b070 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b078:	f7ff ff2c 	bl	800aed4 <LL_RCC_GetAHBPrescaler>
 800b07c:	4603      	mov	r3, r0
 800b07e:	091b      	lsrs	r3, r3, #4
 800b080:	f003 030f 	and.w	r3, r3, #15
 800b084:	4a05      	ldr	r2, [pc, #20]	; (800b09c <RCC_GetHCLKClockFreq+0x2c>)
 800b086:	5cd3      	ldrb	r3, [r2, r3]
 800b088:	f003 031f 	and.w	r3, r3, #31
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0801cb2c 	.word	0x0801cb2c

0800b0a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b0a8:	f7ff ff22 	bl	800aef0 <LL_RCC_GetAPB1Prescaler>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	4a05      	ldr	r2, [pc, #20]	; (800b0c8 <RCC_GetPCLK1ClockFreq+0x28>)
 800b0b2:	5cd3      	ldrb	r3, [r2, r3]
 800b0b4:	f003 031f 	and.w	r3, r3, #31
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0801cb3c 	.word	0x0801cb3c

0800b0cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b0d2:	f7ff ff2d 	bl	800af30 <LL_RCC_PLL_GetMainSource>
 800b0d6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d003      	beq.n	800b0e6 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d003      	beq.n	800b0ec <RCC_PLL_GetFreqDomain_SYS+0x20>
 800b0e4:	e005      	b.n	800b0f2 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b0e6:	4b11      	ldr	r3, [pc, #68]	; (800b12c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800b0e8:	607b      	str	r3, [r7, #4]
      break;
 800b0ea:	e005      	b.n	800b0f8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b0ec:	4b10      	ldr	r3, [pc, #64]	; (800b130 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800b0ee:	607b      	str	r3, [r7, #4]
      break;
 800b0f0:	e002      	b.n	800b0f8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800b0f4:	607b      	str	r3, [r7, #4]
      break;
 800b0f6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b0f8:	f7ff ff28 	bl	800af4c <LL_RCC_PLL_GetN>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	fb03 f402 	mul.w	r4, r3, r2
 800b104:	f7ff ff3e 	bl	800af84 <LL_RCC_PLL_GetDivider>
 800b108:	4603      	mov	r3, r0
 800b10a:	091b      	lsrs	r3, r3, #4
 800b10c:	3301      	adds	r3, #1
 800b10e:	fbb4 f4f3 	udiv	r4, r4, r3
 800b112:	f7ff ff29 	bl	800af68 <LL_RCC_PLL_GetR>
 800b116:	4603      	mov	r3, r0
 800b118:	0e5b      	lsrs	r3, r3, #25
 800b11a:	3301      	adds	r3, #1
 800b11c:	005b      	lsls	r3, r3, #1
 800b11e:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800b122:	4618      	mov	r0, r3
 800b124:	370c      	adds	r7, #12
 800b126:	46bd      	mov	sp, r7
 800b128:	bd90      	pop	{r4, r7, pc}
 800b12a:	bf00      	nop
 800b12c:	00f42400 	.word	0x00f42400
 800b130:	016e3600 	.word	0x016e3600

0800b134 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	601a      	str	r2, [r3, #0]
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <LL_APB1_GRP2_EnableClock>:
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800b15c:	4b08      	ldr	r3, [pc, #32]	; (800b180 <LL_APB1_GRP2_EnableClock+0x2c>)
 800b15e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b160:	4907      	ldr	r1, [pc, #28]	; (800b180 <LL_APB1_GRP2_EnableClock+0x2c>)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4313      	orrs	r3, r2
 800b166:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <LL_APB1_GRP2_EnableClock+0x2c>)
 800b16a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4013      	ands	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b172:	68fb      	ldr	r3, [r7, #12]
}
 800b174:	bf00      	nop
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	40021000 	.word	0x40021000

0800b184 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if(UCPD1 == UCPDx)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a11      	ldr	r2, [pc, #68]	; (800b1d8 <LL_UCPD_Init+0x54>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d103      	bne.n	800b19e <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800b196:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b19a:	f7ff ffdb 	bl	800b154 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff ffc8 	bl	800b134 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	4b0c      	ldr	r3, [pc, #48]	; (800b1dc <LL_UCPD_Init+0x58>)
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	6811      	ldr	r1, [r2, #0]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	6852      	ldr	r2, [r2, #4]
 800b1b4:	02d2      	lsls	r2, r2, #11
 800b1b6:	4311      	orrs	r1, r2
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	6892      	ldr	r2, [r2, #8]
 800b1bc:	0192      	lsls	r2, r2, #6
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	68d2      	ldr	r2, [r2, #12]
 800b1c4:	430a      	orrs	r2, r1
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	4000a000 	.word	0x4000a000
 800b1dc:	fff10000 	.word	0xfff10000

0800b1e0 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b1ee:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2207      	movs	r2, #7
 800b1f4:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2210      	movs	r2, #16
 800b1fa:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	220d      	movs	r2, #13
 800b200:	60da      	str	r2, [r3, #12]
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b21e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b222:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	b29a      	uxth	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b244:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b248:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b250:	b29a      	uxth	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	b29b      	uxth	r3, r3
 800b256:	43db      	mvns	r3, r3
 800b258:	b29b      	uxth	r3, r3
 800b25a:	4013      	ands	r3, r2
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b272:	b084      	sub	sp, #16
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	f107 0014 	add.w	r0, r7, #20
 800b280:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	b004      	add	sp, #16
 800b2b2:	4770      	bx	lr

0800b2b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b09b      	sub	sp, #108	; 0x6c
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	78db      	ldrb	r3, [r3, #3]
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d81f      	bhi.n	800b326 <USB_ActivateEndpoint+0x72>
 800b2e6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <USB_ActivateEndpoint+0x38>)
 800b2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ec:	0800b2fd 	.word	0x0800b2fd
 800b2f0:	0800b319 	.word	0x0800b319
 800b2f4:	0800b32f 	.word	0x0800b32f
 800b2f8:	0800b30b 	.word	0x0800b30b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b2fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b304:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800b308:	e012      	b.n	800b330 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b30a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b30e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b312:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800b316:	e00b      	b.n	800b330 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b318:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b31c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b320:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800b324:	e004      	b.n	800b330 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800b32c:	e000      	b.n	800b330 <USB_ActivateEndpoint+0x7c>
      break;
 800b32e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	441a      	add	r2, r3
 800b33a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b33e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b34e:	b29b      	uxth	r3, r3
 800b350:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	b21b      	sxth	r3, r3
 800b362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36a:	b21a      	sxth	r2, r3
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	b21b      	sxth	r3, r3
 800b372:	4313      	orrs	r3, r2
 800b374:	b21b      	sxth	r3, r3
 800b376:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	441a      	add	r2, r3
 800b384:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b38c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b398:	b29b      	uxth	r3, r3
 800b39a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	7b1b      	ldrb	r3, [r3, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f040 8149 	bne.w	800b638 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 8084 	beq.w	800b4b8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	00da      	lsls	r2, r3, #3
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3d2:	613b      	str	r3, [r7, #16]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	88db      	ldrh	r3, [r3, #6]
 800b3d8:	085b      	lsrs	r3, r3, #1
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4413      	add	r3, r2
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	81fb      	strh	r3, [r7, #14]
 800b3f2:	89fb      	ldrh	r3, [r7, #14]
 800b3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d01b      	beq.n	800b434 <USB_ActivateEndpoint+0x180>
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b40e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b412:	81bb      	strh	r3, [r7, #12]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	441a      	add	r2, r3
 800b41e:	89bb      	ldrh	r3, [r7, #12]
 800b420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b42c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b430:	b29b      	uxth	r3, r3
 800b432:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	78db      	ldrb	r3, [r3, #3]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d020      	beq.n	800b47e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	881b      	ldrh	r3, [r3, #0]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b452:	813b      	strh	r3, [r7, #8]
 800b454:	893b      	ldrh	r3, [r7, #8]
 800b456:	f083 0320 	eor.w	r3, r3, #32
 800b45a:	813b      	strh	r3, [r7, #8]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	441a      	add	r2, r3
 800b466:	893b      	ldrh	r3, [r7, #8]
 800b468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b46c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b478:	b29b      	uxth	r3, r3
 800b47a:	8013      	strh	r3, [r2, #0]
 800b47c:	e27f      	b.n	800b97e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b494:	817b      	strh	r3, [r7, #10]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	441a      	add	r2, r3
 800b4a0:	897b      	ldrh	r3, [r7, #10]
 800b4a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	8013      	strh	r3, [r2, #0]
 800b4b6:	e262      	b.n	800b97e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	4413      	add	r3, r2
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	00da      	lsls	r2, r3, #3
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	88db      	ldrh	r3, [r3, #6]
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	4413      	add	r3, r2
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	00da      	lsls	r2, r3, #3
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	4413      	add	r3, r2
 800b50a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b50e:	623b      	str	r3, [r7, #32]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d112      	bne.n	800b53e <USB_ActivateEndpoint+0x28a>
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b522:	b29a      	uxth	r2, r3
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	801a      	strh	r2, [r3, #0]
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b536:	b29a      	uxth	r2, r3
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	801a      	strh	r2, [r3, #0]
 800b53c:	e02f      	b.n	800b59e <USB_ActivateEndpoint+0x2ea>
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b3e      	cmp	r3, #62	; 0x3e
 800b544:	d813      	bhi.n	800b56e <USB_ActivateEndpoint+0x2ba>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	085b      	lsrs	r3, r3, #1
 800b54c:	663b      	str	r3, [r7, #96]	; 0x60
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <USB_ActivateEndpoint+0x2ac>
 800b55a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b55c:	3301      	adds	r3, #1
 800b55e:	663b      	str	r3, [r7, #96]	; 0x60
 800b560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b562:	b29b      	uxth	r3, r3
 800b564:	029b      	lsls	r3, r3, #10
 800b566:	b29a      	uxth	r2, r3
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e017      	b.n	800b59e <USB_ActivateEndpoint+0x2ea>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	095b      	lsrs	r3, r3, #5
 800b574:	663b      	str	r3, [r7, #96]	; 0x60
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 031f 	and.w	r3, r3, #31
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <USB_ActivateEndpoint+0x2d4>
 800b582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b584:	3b01      	subs	r3, #1
 800b586:	663b      	str	r3, [r7, #96]	; 0x60
 800b588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	029b      	lsls	r3, r3, #10
 800b58e:	b29b      	uxth	r3, r3
 800b590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b598:	b29a      	uxth	r2, r3
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	83fb      	strh	r3, [r7, #30]
 800b5ac:	8bfb      	ldrh	r3, [r7, #30]
 800b5ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01b      	beq.n	800b5ee <USB_ActivateEndpoint+0x33a>
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5cc:	83bb      	strh	r3, [r7, #28]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	441a      	add	r2, r3
 800b5d8:	8bbb      	ldrh	r3, [r7, #28]
 800b5da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b604:	837b      	strh	r3, [r7, #26]
 800b606:	8b7b      	ldrh	r3, [r7, #26]
 800b608:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b60c:	837b      	strh	r3, [r7, #26]
 800b60e:	8b7b      	ldrh	r3, [r7, #26]
 800b610:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b614:	837b      	strh	r3, [r7, #26]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	441a      	add	r2, r3
 800b620:	8b7b      	ldrh	r3, [r7, #26]
 800b622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b62a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b632:	b29b      	uxth	r3, r3
 800b634:	8013      	strh	r3, [r2, #0]
 800b636:	e1a2      	b.n	800b97e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	b29b      	uxth	r3, r3
 800b646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b64e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	441a      	add	r2, r3
 800b65c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b668:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b670:	b29b      	uxth	r3, r3
 800b672:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	65bb      	str	r3, [r7, #88]	; 0x58
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b67e:	b29b      	uxth	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b684:	4413      	add	r3, r2
 800b686:	65bb      	str	r3, [r7, #88]	; 0x58
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	00da      	lsls	r2, r3, #3
 800b68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b690:	4413      	add	r3, r2
 800b692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b696:	657b      	str	r3, [r7, #84]	; 0x54
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	891b      	ldrh	r3, [r3, #8]
 800b69c:	085b      	lsrs	r3, r3, #1
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6a6:	801a      	strh	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	653b      	str	r3, [r7, #80]	; 0x50
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b8:	4413      	add	r3, r2
 800b6ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	00da      	lsls	r2, r3, #3
 800b6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b6ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	895b      	ldrh	r3, [r3, #10]
 800b6d0:	085b      	lsrs	r3, r3, #1
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	785b      	ldrb	r3, [r3, #1]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f040 8091 	bne.w	800b808 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b6f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b6f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d01b      	beq.n	800b736 <USB_ActivateEndpoint+0x482>
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	4413      	add	r3, r2
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b714:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	441a      	add	r2, r3
 800b720:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b72a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b72e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b732:	b29b      	uxth	r3, r3
 800b734:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	873b      	strh	r3, [r7, #56]	; 0x38
 800b744:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d01b      	beq.n	800b786 <USB_ActivateEndpoint+0x4d2>
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b764:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	441a      	add	r2, r3
 800b770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b77a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b77e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b782:	b29b      	uxth	r3, r3
 800b784:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	b29b      	uxth	r3, r3
 800b794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b79e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b7a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b7a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b7a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	441a      	add	r2, r3
 800b7b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b7ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e4:	867b      	strh	r3, [r7, #50]	; 0x32
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	441a      	add	r2, r3
 800b7f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b7f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b802:	b29b      	uxth	r3, r3
 800b804:	8013      	strh	r3, [r2, #0]
 800b806:	e0ba      	b.n	800b97e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b818:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b81c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01d      	beq.n	800b860 <USB_ActivateEndpoint+0x5ac>
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	b29b      	uxth	r3, r3
 800b832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b83a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	441a      	add	r2, r3
 800b848:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b84c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d01d      	beq.n	800b8b8 <USB_ActivateEndpoint+0x604>
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b892:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	441a      	add	r2, r3
 800b8a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b8a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	78db      	ldrb	r3, [r3, #3]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d024      	beq.n	800b90a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b8da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8de:	f083 0320 	eor.w	r3, r3, #32
 800b8e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	441a      	add	r2, r3
 800b8f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b904:	b29b      	uxth	r3, r3
 800b906:	8013      	strh	r3, [r2, #0]
 800b908:	e01d      	b.n	800b946 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b91c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b920:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	441a      	add	r2, r3
 800b92e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b93a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b942:	b29b      	uxth	r3, r3
 800b944:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	b29b      	uxth	r3, r3
 800b954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b95c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	441a      	add	r2, r3
 800b968:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800b97e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b982:	4618      	mov	r0, r3
 800b984:	376c      	adds	r7, #108	; 0x6c
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop

0800b990 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b990:	b480      	push	{r7}
 800b992:	b08d      	sub	sp, #52	; 0x34
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	7b1b      	ldrb	r3, [r3, #12]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f040 808e 	bne.w	800bac0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d044      	beq.n	800ba36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	81bb      	strh	r3, [r7, #12]
 800b9ba:	89bb      	ldrh	r3, [r7, #12]
 800b9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01b      	beq.n	800b9fc <USB_DeactivateEndpoint+0x6c>
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9da:	817b      	strh	r3, [r7, #10]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	441a      	add	r2, r3
 800b9e6:	897b      	ldrh	r3, [r7, #10]
 800b9e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba12:	813b      	strh	r3, [r7, #8]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	441a      	add	r2, r3
 800ba1e:	893b      	ldrh	r3, [r7, #8]
 800ba20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	8013      	strh	r3, [r2, #0]
 800ba34:	e192      	b.n	800bd5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	827b      	strh	r3, [r7, #18]
 800ba44:	8a7b      	ldrh	r3, [r7, #18]
 800ba46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d01b      	beq.n	800ba86 <USB_DeactivateEndpoint+0xf6>
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba64:	823b      	strh	r3, [r7, #16]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	441a      	add	r2, r3
 800ba70:	8a3b      	ldrh	r3, [r7, #16]
 800ba72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba9c:	81fb      	strh	r3, [r7, #14]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	441a      	add	r2, r3
 800baa8:	89fb      	ldrh	r3, [r7, #14]
 800baaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baba:	b29b      	uxth	r3, r3
 800babc:	8013      	strh	r3, [r2, #0]
 800babe:	e14d      	b.n	800bd5c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	785b      	ldrb	r3, [r3, #1]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f040 80a5 	bne.w	800bc14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	843b      	strh	r3, [r7, #32]
 800bad8:	8c3b      	ldrh	r3, [r7, #32]
 800bada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01b      	beq.n	800bb1a <USB_DeactivateEndpoint+0x18a>
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf8:	83fb      	strh	r3, [r7, #30]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	441a      	add	r2, r3
 800bb04:	8bfb      	ldrh	r3, [r7, #30]
 800bb06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	83bb      	strh	r3, [r7, #28]
 800bb28:	8bbb      	ldrh	r3, [r7, #28]
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01b      	beq.n	800bb6a <USB_DeactivateEndpoint+0x1da>
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb48:	837b      	strh	r3, [r7, #26]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	441a      	add	r2, r3
 800bb54:	8b7b      	ldrh	r3, [r7, #26]
 800bb56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb80:	833b      	strh	r3, [r7, #24]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	441a      	add	r2, r3
 800bb8c:	8b3b      	ldrh	r3, [r7, #24]
 800bb8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbb8:	82fb      	strh	r3, [r7, #22]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	441a      	add	r2, r3
 800bbc4:	8afb      	ldrh	r3, [r7, #22]
 800bbc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbf0:	82bb      	strh	r3, [r7, #20]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	441a      	add	r2, r3
 800bbfc:	8abb      	ldrh	r3, [r7, #20]
 800bbfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	8013      	strh	r3, [r2, #0]
 800bc12:	e0a3      	b.n	800bd5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01b      	beq.n	800bc64 <USB_DeactivateEndpoint+0x2d4>
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	441a      	add	r2, r3
 800bc4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bc72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bc74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01b      	beq.n	800bcb4 <USB_DeactivateEndpoint+0x324>
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	881b      	ldrh	r3, [r3, #0]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc92:	853b      	strh	r3, [r7, #40]	; 0x28
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	441a      	add	r2, r3
 800bc9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4413      	add	r3, r2
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	441a      	add	r2, r3
 800bcd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bcd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd02:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	441a      	add	r2, r3
 800bd0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd3a:	847b      	strh	r3, [r7, #34]	; 0x22
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	441a      	add	r2, r3
 800bd46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3734      	adds	r7, #52	; 0x34
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b0cc      	sub	sp, #304	; 0x130
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	1d3b      	adds	r3, r7, #4
 800bd72:	6018      	str	r0, [r3, #0]
 800bd74:	463b      	mov	r3, r7
 800bd76:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd78:	463b      	mov	r3, r7
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	785b      	ldrb	r3, [r3, #1]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	f040 872e 	bne.w	800cbe0 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bd84:	463b      	mov	r3, r7
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699a      	ldr	r2, [r3, #24]
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d905      	bls.n	800bda0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800bd94:	463b      	mov	r3, r7
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd9e:	e004      	b.n	800bdaa <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800bda0:	463b      	mov	r3, r7
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bdaa:	463b      	mov	r3, r7
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	7b1b      	ldrb	r3, [r3, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d134      	bne.n	800be1e <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bdb4:	463b      	mov	r3, r7
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6959      	ldr	r1, [r3, #20]
 800bdba:	463b      	mov	r3, r7
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	88da      	ldrh	r2, [r3, #6]
 800bdc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	1d38      	adds	r0, r7, #4
 800bdc8:	6800      	ldr	r0, [r0, #0]
 800bdca:	f001 fbff 	bl	800d5cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdce:	f107 0310 	add.w	r3, r7, #16
 800bdd2:	1d3a      	adds	r2, r7, #4
 800bdd4:	6812      	ldr	r2, [r2, #0]
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	1d3b      	adds	r3, r7, #4
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	4619      	mov	r1, r3
 800bde4:	f107 0310 	add.w	r3, r7, #16
 800bde8:	f107 0210 	add.w	r2, r7, #16
 800bdec:	6812      	ldr	r2, [r2, #0]
 800bdee:	440a      	add	r2, r1
 800bdf0:	601a      	str	r2, [r3, #0]
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	00da      	lsls	r2, r3, #3
 800bdfa:	f107 0310 	add.w	r3, r7, #16
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4413      	add	r3, r2
 800be02:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800be06:	f107 030c 	add.w	r3, r7, #12
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be10:	b29a      	uxth	r2, r3
 800be12:	f107 030c 	add.w	r3, r7, #12
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	801a      	strh	r2, [r3, #0]
 800be1a:	f000 beac 	b.w	800cb76 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800be1e:	463b      	mov	r3, r7
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	78db      	ldrb	r3, [r3, #3]
 800be24:	2b02      	cmp	r3, #2
 800be26:	f040 838c 	bne.w	800c542 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800be2a:	463b      	mov	r3, r7
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6a1a      	ldr	r2, [r3, #32]
 800be30:	463b      	mov	r3, r7
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	429a      	cmp	r2, r3
 800be38:	f240 8330 	bls.w	800c49c <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800be3c:	1d3b      	adds	r3, r7, #4
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	463b      	mov	r3, r7
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	881b      	ldrh	r3, [r3, #0]
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800be5a:	1d3b      	adds	r3, r7, #4
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	463b      	mov	r3, r7
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	441a      	add	r2, r3
 800be68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800be6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800be78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800be80:	463b      	mov	r3, r7
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6a1a      	ldr	r2, [r3, #32]
 800be86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be8a:	1ad2      	subs	r2, r2, r3
 800be8c:	463b      	mov	r3, r7
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be92:	1d3b      	adds	r3, r7, #4
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	463b      	mov	r3, r7
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4413      	add	r3, r2
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 819e 	beq.w	800c1ea <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800beae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800beb2:	1d3a      	adds	r2, r7, #4
 800beb4:	6812      	ldr	r2, [r2, #0]
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	463b      	mov	r3, r7
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d17a      	bne.n	800bfb8 <USB_EPStartXfer+0x24e>
 800bec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bec6:	1d3a      	adds	r2, r7, #4
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	601a      	str	r2, [r3, #0]
 800becc:	1d3b      	adds	r3, r7, #4
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4619      	mov	r1, r3
 800bed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bedc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bee0:	6812      	ldr	r2, [r2, #0]
 800bee2:	440a      	add	r2, r1
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	463b      	mov	r3, r7
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	00da      	lsls	r2, r3, #3
 800beee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4413      	add	r3, r2
 800bef6:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800befa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11a      	bne.n	800bf3e <USB_EPStartXfer+0x1d4>
 800bf08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	801a      	strh	r2, [r3, #0]
 800bf20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	801a      	strh	r2, [r3, #0]
 800bf3c:	e062      	b.n	800c004 <USB_EPStartXfer+0x29a>
 800bf3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf42:	2b3e      	cmp	r3, #62	; 0x3e
 800bf44:	d819      	bhi.n	800bf7a <USB_EPStartXfer+0x210>
 800bf46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf4a:	085b      	lsrs	r3, r3, #1
 800bf4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bf50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf54:	f003 0301 	and.w	r3, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d004      	beq.n	800bf66 <USB_EPStartXfer+0x1fc>
 800bf5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf60:	3301      	adds	r3, #1
 800bf62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bf66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	029b      	lsls	r3, r3, #10
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	801a      	strh	r2, [r3, #0]
 800bf78:	e044      	b.n	800c004 <USB_EPStartXfer+0x29a>
 800bf7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf7e:	095b      	lsrs	r3, r3, #5
 800bf80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bf84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf88:	f003 031f 	and.w	r3, r3, #31
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <USB_EPStartXfer+0x230>
 800bf90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf94:	3b01      	subs	r3, #1
 800bf96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bf9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	029b      	lsls	r3, r3, #10
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	801a      	strh	r2, [r3, #0]
 800bfb6:	e025      	b.n	800c004 <USB_EPStartXfer+0x29a>
 800bfb8:	463b      	mov	r3, r7
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	785b      	ldrb	r3, [r3, #1]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d120      	bne.n	800c004 <USB_EPStartXfer+0x29a>
 800bfc2:	1d3b      	adds	r3, r7, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bfd6:	6812      	ldr	r2, [r2, #0]
 800bfd8:	440a      	add	r2, r1
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	463b      	mov	r3, r7
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	00da      	lsls	r2, r3, #3
 800bfe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4413      	add	r3, r2
 800bfec:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800bff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c004:	463b      	mov	r3, r7
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	895b      	ldrh	r3, [r3, #10]
 800c00a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c00e:	463b      	mov	r3, r7
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6959      	ldr	r1, [r3, #20]
 800c014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c01e:	1d38      	adds	r0, r7, #4
 800c020:	6800      	ldr	r0, [r0, #0]
 800c022:	f001 fad3 	bl	800d5cc <USB_WritePMA>
            ep->xfer_buff += len;
 800c026:	463b      	mov	r3, r7
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	695a      	ldr	r2, [r3, #20]
 800c02c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c030:	441a      	add	r2, r3
 800c032:	463b      	mov	r3, r7
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c038:	463b      	mov	r3, r7
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6a1a      	ldr	r2, [r3, #32]
 800c03e:	463b      	mov	r3, r7
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	429a      	cmp	r2, r3
 800c046:	d909      	bls.n	800c05c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800c048:	463b      	mov	r3, r7
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6a1a      	ldr	r2, [r3, #32]
 800c04e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c052:	1ad2      	subs	r2, r2, r3
 800c054:	463b      	mov	r3, r7
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	621a      	str	r2, [r3, #32]
 800c05a:	e008      	b.n	800c06e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800c05c:	463b      	mov	r3, r7
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800c066:	463b      	mov	r3, r7
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2200      	movs	r2, #0
 800c06c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c06e:	463b      	mov	r3, r7
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d17a      	bne.n	800c16e <USB_EPStartXfer+0x404>
 800c078:	f107 0318 	add.w	r3, r7, #24
 800c07c:	1d3a      	adds	r2, r7, #4
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	1d3b      	adds	r3, r7, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	4619      	mov	r1, r3
 800c08e:	f107 0318 	add.w	r3, r7, #24
 800c092:	f107 0218 	add.w	r2, r7, #24
 800c096:	6812      	ldr	r2, [r2, #0]
 800c098:	440a      	add	r2, r1
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	463b      	mov	r3, r7
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	00da      	lsls	r2, r3, #3
 800c0a4:	f107 0318 	add.w	r3, r7, #24
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800c0b0:	f107 0314 	add.w	r3, r7, #20
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d11a      	bne.n	800c0f4 <USB_EPStartXfer+0x38a>
 800c0be:	f107 0314 	add.w	r3, r7, #20
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	f107 0314 	add.w	r3, r7, #20
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	801a      	strh	r2, [r3, #0]
 800c0d6:	f107 0314 	add.w	r3, r7, #20
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	f107 0314 	add.w	r3, r7, #20
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	801a      	strh	r2, [r3, #0]
 800c0f2:	e067      	b.n	800c1c4 <USB_EPStartXfer+0x45a>
 800c0f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0f8:	2b3e      	cmp	r3, #62	; 0x3e
 800c0fa:	d819      	bhi.n	800c130 <USB_EPStartXfer+0x3c6>
 800c0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d004      	beq.n	800c11c <USB_EPStartXfer+0x3b2>
 800c112:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c116:	3301      	adds	r3, #1
 800c118:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c11c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c120:	b29b      	uxth	r3, r3
 800c122:	029b      	lsls	r3, r3, #10
 800c124:	b29a      	uxth	r2, r3
 800c126:	f107 0314 	add.w	r3, r7, #20
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	801a      	strh	r2, [r3, #0]
 800c12e:	e049      	b.n	800c1c4 <USB_EPStartXfer+0x45a>
 800c130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c134:	095b      	lsrs	r3, r3, #5
 800c136:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c13a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c13e:	f003 031f 	and.w	r3, r3, #31
 800c142:	2b00      	cmp	r3, #0
 800c144:	d104      	bne.n	800c150 <USB_EPStartXfer+0x3e6>
 800c146:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c14a:	3b01      	subs	r3, #1
 800c14c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c150:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c154:	b29b      	uxth	r3, r3
 800c156:	029b      	lsls	r3, r3, #10
 800c158:	b29b      	uxth	r3, r3
 800c15a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c15e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c162:	b29a      	uxth	r2, r3
 800c164:	f107 0314 	add.w	r3, r7, #20
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	801a      	strh	r2, [r3, #0]
 800c16c:	e02a      	b.n	800c1c4 <USB_EPStartXfer+0x45a>
 800c16e:	463b      	mov	r3, r7
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	785b      	ldrb	r3, [r3, #1]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d125      	bne.n	800c1c4 <USB_EPStartXfer+0x45a>
 800c178:	f107 0320 	add.w	r3, r7, #32
 800c17c:	1d3a      	adds	r2, r7, #4
 800c17e:	6812      	ldr	r2, [r2, #0]
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	1d3b      	adds	r3, r7, #4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	4619      	mov	r1, r3
 800c18e:	f107 0320 	add.w	r3, r7, #32
 800c192:	f107 0220 	add.w	r2, r7, #32
 800c196:	6812      	ldr	r2, [r2, #0]
 800c198:	440a      	add	r2, r1
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	463b      	mov	r3, r7
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	00da      	lsls	r2, r3, #3
 800c1a4:	f107 0320 	add.w	r3, r7, #32
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800c1b0:	f107 031c 	add.w	r3, r7, #28
 800c1b4:	601a      	str	r2, [r3, #0]
 800c1b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	f107 031c 	add.w	r3, r7, #28
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c1c4:	463b      	mov	r3, r7
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	891b      	ldrh	r3, [r3, #8]
 800c1ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1ce:	463b      	mov	r3, r7
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	6959      	ldr	r1, [r3, #20]
 800c1d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c1de:	1d38      	adds	r0, r7, #4
 800c1e0:	6800      	ldr	r0, [r0, #0]
 800c1e2:	f001 f9f3 	bl	800d5cc <USB_WritePMA>
 800c1e6:	f000 bcc6 	b.w	800cb76 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	785b      	ldrb	r3, [r3, #1]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d164      	bne.n	800c2be <USB_EPStartXfer+0x554>
 800c1f4:	1d3b      	adds	r3, r7, #4
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1fa:	1d3b      	adds	r3, r7, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c202:	b29b      	uxth	r3, r3
 800c204:	461a      	mov	r2, r3
 800c206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c208:	4413      	add	r3, r2
 800c20a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c20c:	463b      	mov	r3, r7
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	00da      	lsls	r2, r3, #3
 800c214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c216:	4413      	add	r3, r2
 800c218:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c21c:	647b      	str	r3, [r7, #68]	; 0x44
 800c21e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c222:	2b00      	cmp	r3, #0
 800c224:	d112      	bne.n	800c24c <USB_EPStartXfer+0x4e2>
 800c226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c230:	b29a      	uxth	r2, r3
 800c232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c234:	801a      	strh	r2, [r3, #0]
 800c236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c244:	b29a      	uxth	r2, r3
 800c246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c248:	801a      	strh	r2, [r3, #0]
 800c24a:	e057      	b.n	800c2fc <USB_EPStartXfer+0x592>
 800c24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c250:	2b3e      	cmp	r3, #62	; 0x3e
 800c252:	d817      	bhi.n	800c284 <USB_EPStartXfer+0x51a>
 800c254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c258:	085b      	lsrs	r3, r3, #1
 800c25a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c25e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d004      	beq.n	800c274 <USB_EPStartXfer+0x50a>
 800c26a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c26e:	3301      	adds	r3, #1
 800c270:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c274:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c278:	b29b      	uxth	r3, r3
 800c27a:	029b      	lsls	r3, r3, #10
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c280:	801a      	strh	r2, [r3, #0]
 800c282:	e03b      	b.n	800c2fc <USB_EPStartXfer+0x592>
 800c284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c288:	095b      	lsrs	r3, r3, #5
 800c28a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c28e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c292:	f003 031f 	and.w	r3, r3, #31
 800c296:	2b00      	cmp	r3, #0
 800c298:	d104      	bne.n	800c2a4 <USB_EPStartXfer+0x53a>
 800c29a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c2a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	029b      	lsls	r3, r3, #10
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ba:	801a      	strh	r2, [r3, #0]
 800c2bc:	e01e      	b.n	800c2fc <USB_EPStartXfer+0x592>
 800c2be:	463b      	mov	r3, r7
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	785b      	ldrb	r3, [r3, #1]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d119      	bne.n	800c2fc <USB_EPStartXfer+0x592>
 800c2c8:	1d3b      	adds	r3, r7, #4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	653b      	str	r3, [r7, #80]	; 0x50
 800c2ce:	1d3b      	adds	r3, r7, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	461a      	mov	r2, r3
 800c2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2dc:	4413      	add	r3, r2
 800c2de:	653b      	str	r3, [r7, #80]	; 0x50
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	00da      	lsls	r2, r3, #3
 800c2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c2fc:	463b      	mov	r3, r7
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	891b      	ldrh	r3, [r3, #8]
 800c302:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c306:	463b      	mov	r3, r7
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	6959      	ldr	r1, [r3, #20]
 800c30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c310:	b29b      	uxth	r3, r3
 800c312:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c316:	1d38      	adds	r0, r7, #4
 800c318:	6800      	ldr	r0, [r0, #0]
 800c31a:	f001 f957 	bl	800d5cc <USB_WritePMA>
            ep->xfer_buff += len;
 800c31e:	463b      	mov	r3, r7
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	695a      	ldr	r2, [r3, #20]
 800c324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c328:	441a      	add	r2, r3
 800c32a:	463b      	mov	r3, r7
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c330:	463b      	mov	r3, r7
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6a1a      	ldr	r2, [r3, #32]
 800c336:	463b      	mov	r3, r7
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d909      	bls.n	800c354 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800c340:	463b      	mov	r3, r7
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6a1a      	ldr	r2, [r3, #32]
 800c346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c34a:	1ad2      	subs	r2, r2, r3
 800c34c:	463b      	mov	r3, r7
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	621a      	str	r2, [r3, #32]
 800c352:	e008      	b.n	800c366 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800c354:	463b      	mov	r3, r7
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800c35e:	463b      	mov	r3, r7
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2200      	movs	r2, #0
 800c364:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c366:	1d3b      	adds	r3, r7, #4
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	643b      	str	r3, [r7, #64]	; 0x40
 800c36c:	463b      	mov	r3, r7
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	785b      	ldrb	r3, [r3, #1]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d164      	bne.n	800c440 <USB_EPStartXfer+0x6d6>
 800c376:	1d3b      	adds	r3, r7, #4
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c37c:	1d3b      	adds	r3, r7, #4
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c384:	b29b      	uxth	r3, r3
 800c386:	461a      	mov	r2, r3
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	4413      	add	r3, r2
 800c38c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c38e:	463b      	mov	r3, r7
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	00da      	lsls	r2, r3, #3
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	4413      	add	r3, r2
 800c39a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c39e:	637b      	str	r3, [r7, #52]	; 0x34
 800c3a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d112      	bne.n	800c3ce <USB_EPStartXfer+0x664>
 800c3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b6:	801a      	strh	r2, [r3, #0]
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ca:	801a      	strh	r2, [r3, #0]
 800c3cc:	e054      	b.n	800c478 <USB_EPStartXfer+0x70e>
 800c3ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3d2:	2b3e      	cmp	r3, #62	; 0x3e
 800c3d4:	d817      	bhi.n	800c406 <USB_EPStartXfer+0x69c>
 800c3d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3da:	085b      	lsrs	r3, r3, #1
 800c3dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c3e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3e4:	f003 0301 	and.w	r3, r3, #1
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <USB_EPStartXfer+0x68c>
 800c3ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c3f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	029b      	lsls	r3, r3, #10
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c402:	801a      	strh	r2, [r3, #0]
 800c404:	e038      	b.n	800c478 <USB_EPStartXfer+0x70e>
 800c406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c414:	f003 031f 	and.w	r3, r3, #31
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d104      	bne.n	800c426 <USB_EPStartXfer+0x6bc>
 800c41c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c420:	3b01      	subs	r3, #1
 800c422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	029b      	lsls	r3, r3, #10
 800c42e:	b29b      	uxth	r3, r3
 800c430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c438:	b29a      	uxth	r2, r3
 800c43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43c:	801a      	strh	r2, [r3, #0]
 800c43e:	e01b      	b.n	800c478 <USB_EPStartXfer+0x70e>
 800c440:	463b      	mov	r3, r7
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d116      	bne.n	800c478 <USB_EPStartXfer+0x70e>
 800c44a:	1d3b      	adds	r3, r7, #4
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c452:	b29b      	uxth	r3, r3
 800c454:	461a      	mov	r2, r3
 800c456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c458:	4413      	add	r3, r2
 800c45a:	643b      	str	r3, [r7, #64]	; 0x40
 800c45c:	463b      	mov	r3, r7
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	00da      	lsls	r2, r3, #3
 800c464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c466:	4413      	add	r3, r2
 800c468:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c46c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c46e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c472:	b29a      	uxth	r2, r3
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c478:	463b      	mov	r3, r7
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c482:	463b      	mov	r3, r7
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	6959      	ldr	r1, [r3, #20]
 800c488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c492:	1d38      	adds	r0, r7, #4
 800c494:	6800      	ldr	r0, [r0, #0]
 800c496:	f001 f899 	bl	800d5cc <USB_WritePMA>
 800c49a:	e36c      	b.n	800cb76 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c49c:	463b      	mov	r3, r7
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800c4a6:	1d3b      	adds	r3, r7, #4
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	463b      	mov	r3, r7
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c4c4:	1d3b      	adds	r3, r7, #4
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	463b      	mov	r3, r7
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	441a      	add	r2, r3
 800c4d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c4d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c4ea:	1d3b      	adds	r3, r7, #4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4f0:	1d3b      	adds	r3, r7, #4
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4fe:	4413      	add	r3, r2
 800c500:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c502:	463b      	mov	r3, r7
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	00da      	lsls	r2, r3, #3
 800c50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c50c:	4413      	add	r3, r2
 800c50e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c512:	65bb      	str	r3, [r7, #88]	; 0x58
 800c514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c518:	b29a      	uxth	r2, r3
 800c51a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c51c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c51e:	463b      	mov	r3, r7
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	891b      	ldrh	r3, [r3, #8]
 800c524:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c528:	463b      	mov	r3, r7
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6959      	ldr	r1, [r3, #20]
 800c52e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c532:	b29b      	uxth	r3, r3
 800c534:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c538:	1d38      	adds	r0, r7, #4
 800c53a:	6800      	ldr	r0, [r0, #0]
 800c53c:	f001 f846 	bl	800d5cc <USB_WritePMA>
 800c540:	e319      	b.n	800cb76 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800c542:	1d3b      	adds	r3, r7, #4
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	463b      	mov	r3, r7
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	b29b      	uxth	r3, r3
 800c554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c55c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800c560:	1d3b      	adds	r3, r7, #4
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	463b      	mov	r3, r7
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	441a      	add	r2, r3
 800c56e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800c572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c57a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c582:	b29b      	uxth	r3, r3
 800c584:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c586:	463b      	mov	r3, r7
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6a1a      	ldr	r2, [r3, #32]
 800c58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c590:	1ad2      	subs	r2, r2, r3
 800c592:	463b      	mov	r3, r7
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c598:	1d3b      	adds	r3, r7, #4
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	463b      	mov	r3, r7
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 8162 	beq.w	800c878 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c5b4:	1d3b      	adds	r3, r7, #4
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5bc:	463b      	mov	r3, r7
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d164      	bne.n	800c690 <USB_EPStartXfer+0x926>
 800c5c6:	1d3b      	adds	r3, r7, #4
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5cc:	1d3b      	adds	r3, r7, #4
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5da:	4413      	add	r3, r2
 800c5dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5de:	463b      	mov	r3, r7
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	00da      	lsls	r2, r3, #3
 800c5e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5ee:	677b      	str	r3, [r7, #116]	; 0x74
 800c5f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d112      	bne.n	800c61e <USB_EPStartXfer+0x8b4>
 800c5f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c602:	b29a      	uxth	r2, r3
 800c604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c606:	801a      	strh	r2, [r3, #0]
 800c608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c616:	b29a      	uxth	r2, r3
 800c618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c61a:	801a      	strh	r2, [r3, #0]
 800c61c:	e057      	b.n	800c6ce <USB_EPStartXfer+0x964>
 800c61e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c622:	2b3e      	cmp	r3, #62	; 0x3e
 800c624:	d817      	bhi.n	800c656 <USB_EPStartXfer+0x8ec>
 800c626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c62a:	085b      	lsrs	r3, r3, #1
 800c62c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <USB_EPStartXfer+0x8dc>
 800c63c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c640:	3301      	adds	r3, #1
 800c642:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c646:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	029b      	lsls	r3, r3, #10
 800c64e:	b29a      	uxth	r2, r3
 800c650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c652:	801a      	strh	r2, [r3, #0]
 800c654:	e03b      	b.n	800c6ce <USB_EPStartXfer+0x964>
 800c656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c65a:	095b      	lsrs	r3, r3, #5
 800c65c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c664:	f003 031f 	and.w	r3, r3, #31
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d104      	bne.n	800c676 <USB_EPStartXfer+0x90c>
 800c66c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c670:	3b01      	subs	r3, #1
 800c672:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c676:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	029b      	lsls	r3, r3, #10
 800c67e:	b29b      	uxth	r3, r3
 800c680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c688:	b29a      	uxth	r2, r3
 800c68a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c68c:	801a      	strh	r2, [r3, #0]
 800c68e:	e01e      	b.n	800c6ce <USB_EPStartXfer+0x964>
 800c690:	463b      	mov	r3, r7
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	785b      	ldrb	r3, [r3, #1]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d119      	bne.n	800c6ce <USB_EPStartXfer+0x964>
 800c69a:	1d3b      	adds	r3, r7, #4
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	00da      	lsls	r2, r3, #3
 800c6b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6bc:	4413      	add	r3, r2
 800c6be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c6cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c6ce:	463b      	mov	r3, r7
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	895b      	ldrh	r3, [r3, #10]
 800c6d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c6d8:	463b      	mov	r3, r7
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6959      	ldr	r1, [r3, #20]
 800c6de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c6e8:	1d38      	adds	r0, r7, #4
 800c6ea:	6800      	ldr	r0, [r0, #0]
 800c6ec:	f000 ff6e 	bl	800d5cc <USB_WritePMA>
          ep->xfer_buff += len;
 800c6f0:	463b      	mov	r3, r7
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	695a      	ldr	r2, [r3, #20]
 800c6f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6fa:	441a      	add	r2, r3
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800c702:	463b      	mov	r3, r7
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6a1a      	ldr	r2, [r3, #32]
 800c708:	463b      	mov	r3, r7
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d909      	bls.n	800c726 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800c712:	463b      	mov	r3, r7
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6a1a      	ldr	r2, [r3, #32]
 800c718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c71c:	1ad2      	subs	r2, r2, r3
 800c71e:	463b      	mov	r3, r7
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	621a      	str	r2, [r3, #32]
 800c724:	e008      	b.n	800c738 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800c726:	463b      	mov	r3, r7
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6a1b      	ldr	r3, [r3, #32]
 800c72c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800c730:	463b      	mov	r3, r7
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2200      	movs	r2, #0
 800c736:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800c738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 821a 	beq.w	800cb76 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c742:	463b      	mov	r3, r7
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d164      	bne.n	800c816 <USB_EPStartXfer+0xaac>
 800c74c:	1d3b      	adds	r3, r7, #4
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	66bb      	str	r3, [r7, #104]	; 0x68
 800c752:	1d3b      	adds	r3, r7, #4
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	461a      	mov	r2, r3
 800c75e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c760:	4413      	add	r3, r2
 800c762:	66bb      	str	r3, [r7, #104]	; 0x68
 800c764:	463b      	mov	r3, r7
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	00da      	lsls	r2, r3, #3
 800c76c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c76e:	4413      	add	r3, r2
 800c770:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c774:	667b      	str	r3, [r7, #100]	; 0x64
 800c776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d112      	bne.n	800c7a4 <USB_EPStartXfer+0xa3a>
 800c77e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	b29b      	uxth	r3, r3
 800c784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c788:	b29a      	uxth	r2, r3
 800c78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c78c:	801a      	strh	r2, [r3, #0]
 800c78e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	b29b      	uxth	r3, r3
 800c794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7a0:	801a      	strh	r2, [r3, #0]
 800c7a2:	e057      	b.n	800c854 <USB_EPStartXfer+0xaea>
 800c7a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7a8:	2b3e      	cmp	r3, #62	; 0x3e
 800c7aa:	d817      	bhi.n	800c7dc <USB_EPStartXfer+0xa72>
 800c7ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7b0:	085b      	lsrs	r3, r3, #1
 800c7b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c7b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d004      	beq.n	800c7cc <USB_EPStartXfer+0xa62>
 800c7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	029b      	lsls	r3, r3, #10
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7d8:	801a      	strh	r2, [r3, #0]
 800c7da:	e03b      	b.n	800c854 <USB_EPStartXfer+0xaea>
 800c7dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7e0:	095b      	lsrs	r3, r3, #5
 800c7e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c7e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ea:	f003 031f 	and.w	r3, r3, #31
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d104      	bne.n	800c7fc <USB_EPStartXfer+0xa92>
 800c7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c800:	b29b      	uxth	r3, r3
 800c802:	029b      	lsls	r3, r3, #10
 800c804:	b29b      	uxth	r3, r3
 800c806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c80a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c80e:	b29a      	uxth	r2, r3
 800c810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c812:	801a      	strh	r2, [r3, #0]
 800c814:	e01e      	b.n	800c854 <USB_EPStartXfer+0xaea>
 800c816:	463b      	mov	r3, r7
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	785b      	ldrb	r3, [r3, #1]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d119      	bne.n	800c854 <USB_EPStartXfer+0xaea>
 800c820:	1d3b      	adds	r3, r7, #4
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	673b      	str	r3, [r7, #112]	; 0x70
 800c826:	1d3b      	adds	r3, r7, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c82e:	b29b      	uxth	r3, r3
 800c830:	461a      	mov	r2, r3
 800c832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c834:	4413      	add	r3, r2
 800c836:	673b      	str	r3, [r7, #112]	; 0x70
 800c838:	463b      	mov	r3, r7
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	00da      	lsls	r2, r3, #3
 800c840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c842:	4413      	add	r3, r2
 800c844:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c84a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c84e:	b29a      	uxth	r2, r3
 800c850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c852:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c854:	463b      	mov	r3, r7
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	891b      	ldrh	r3, [r3, #8]
 800c85a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c85e:	463b      	mov	r3, r7
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6959      	ldr	r1, [r3, #20]
 800c864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c868:	b29b      	uxth	r3, r3
 800c86a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c86e:	1d38      	adds	r0, r7, #4
 800c870:	6800      	ldr	r0, [r0, #0]
 800c872:	f000 feab 	bl	800d5cc <USB_WritePMA>
 800c876:	e17e      	b.n	800cb76 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c878:	463b      	mov	r3, r7
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	785b      	ldrb	r3, [r3, #1]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d16f      	bne.n	800c962 <USB_EPStartXfer+0xbf8>
 800c882:	1d3b      	adds	r3, r7, #4
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c88a:	1d3b      	adds	r3, r7, #4
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c892:	b29b      	uxth	r3, r3
 800c894:	461a      	mov	r2, r3
 800c896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c89a:	4413      	add	r3, r2
 800c89c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8a0:	463b      	mov	r3, r7
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	00da      	lsls	r2, r3, #3
 800c8a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d116      	bne.n	800c8ec <USB_EPStartXfer+0xb82>
 800c8be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8d0:	801a      	strh	r2, [r3, #0]
 800c8d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8e8:	801a      	strh	r2, [r3, #0]
 800c8ea:	e05f      	b.n	800c9ac <USB_EPStartXfer+0xc42>
 800c8ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8f0:	2b3e      	cmp	r3, #62	; 0x3e
 800c8f2:	d818      	bhi.n	800c926 <USB_EPStartXfer+0xbbc>
 800c8f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8f8:	085b      	lsrs	r3, r3, #1
 800c8fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c8fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <USB_EPStartXfer+0xbaa>
 800c90a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c90e:	3301      	adds	r3, #1
 800c910:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c914:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c918:	b29b      	uxth	r3, r3
 800c91a:	029b      	lsls	r3, r3, #10
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c922:	801a      	strh	r2, [r3, #0]
 800c924:	e042      	b.n	800c9ac <USB_EPStartXfer+0xc42>
 800c926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c92a:	095b      	lsrs	r3, r3, #5
 800c92c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c934:	f003 031f 	and.w	r3, r3, #31
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d104      	bne.n	800c946 <USB_EPStartXfer+0xbdc>
 800c93c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c940:	3b01      	subs	r3, #1
 800c942:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c946:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	029b      	lsls	r3, r3, #10
 800c94e:	b29b      	uxth	r3, r3
 800c950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c958:	b29a      	uxth	r2, r3
 800c95a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c95e:	801a      	strh	r2, [r3, #0]
 800c960:	e024      	b.n	800c9ac <USB_EPStartXfer+0xc42>
 800c962:	463b      	mov	r3, r7
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	785b      	ldrb	r3, [r3, #1]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d11f      	bne.n	800c9ac <USB_EPStartXfer+0xc42>
 800c96c:	1d3b      	adds	r3, r7, #4
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c974:	1d3b      	adds	r3, r7, #4
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	461a      	mov	r2, r3
 800c980:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c984:	4413      	add	r3, r2
 800c986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c98a:	463b      	mov	r3, r7
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	00da      	lsls	r2, r3, #3
 800c992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c996:	4413      	add	r3, r2
 800c998:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c99c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	891b      	ldrh	r3, [r3, #8]
 800c9b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c9b6:	463b      	mov	r3, r7
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6959      	ldr	r1, [r3, #20]
 800c9bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800c9c6:	1d38      	adds	r0, r7, #4
 800c9c8:	6800      	ldr	r0, [r0, #0]
 800c9ca:	f000 fdff 	bl	800d5cc <USB_WritePMA>
          ep->xfer_buff += len;
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	695a      	ldr	r2, [r3, #20]
 800c9d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9d8:	441a      	add	r2, r3
 800c9da:	463b      	mov	r3, r7
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6a1a      	ldr	r2, [r3, #32]
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d909      	bls.n	800ca04 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800c9f0:	463b      	mov	r3, r7
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6a1a      	ldr	r2, [r3, #32]
 800c9f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9fa:	1ad2      	subs	r2, r2, r3
 800c9fc:	463b      	mov	r3, r7
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	621a      	str	r2, [r3, #32]
 800ca02:	e008      	b.n	800ca16 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800ca04:	463b      	mov	r3, r7
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800ca0e:	463b      	mov	r3, r7
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2200      	movs	r2, #0
 800ca14:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800ca16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 80ab 	beq.w	800cb76 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca20:	1d3b      	adds	r3, r7, #4
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca28:	463b      	mov	r3, r7
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d16f      	bne.n	800cb12 <USB_EPStartXfer+0xda8>
 800ca32:	1d3b      	adds	r3, r7, #4
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca3a:	1d3b      	adds	r3, r7, #4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	461a      	mov	r2, r3
 800ca46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca50:	463b      	mov	r3, r7
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	00da      	lsls	r2, r3, #3
 800ca58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d116      	bne.n	800ca9c <USB_EPStartXfer+0xd32>
 800ca6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca80:	801a      	strh	r2, [r3, #0]
 800ca82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca98:	801a      	strh	r2, [r3, #0]
 800ca9a:	e05b      	b.n	800cb54 <USB_EPStartXfer+0xdea>
 800ca9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caa0:	2b3e      	cmp	r3, #62	; 0x3e
 800caa2:	d818      	bhi.n	800cad6 <USB_EPStartXfer+0xd6c>
 800caa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caa8:	085b      	lsrs	r3, r3, #1
 800caaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800caae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d004      	beq.n	800cac4 <USB_EPStartXfer+0xd5a>
 800caba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cabe:	3301      	adds	r3, #1
 800cac0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cac8:	b29b      	uxth	r3, r3
 800caca:	029b      	lsls	r3, r3, #10
 800cacc:	b29a      	uxth	r2, r3
 800cace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	e03e      	b.n	800cb54 <USB_EPStartXfer+0xdea>
 800cad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cada:	095b      	lsrs	r3, r3, #5
 800cadc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cae4:	f003 031f 	and.w	r3, r3, #31
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d104      	bne.n	800caf6 <USB_EPStartXfer+0xd8c>
 800caec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caf0:	3b01      	subs	r3, #1
 800caf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800caf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	029b      	lsls	r3, r3, #10
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb0e:	801a      	strh	r2, [r3, #0]
 800cb10:	e020      	b.n	800cb54 <USB_EPStartXfer+0xdea>
 800cb12:	463b      	mov	r3, r7
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	785b      	ldrb	r3, [r3, #1]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d11b      	bne.n	800cb54 <USB_EPStartXfer+0xdea>
 800cb1c:	1d3b      	adds	r3, r7, #4
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	461a      	mov	r2, r3
 800cb28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cb32:	463b      	mov	r3, r7
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	00da      	lsls	r2, r3, #3
 800cb3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb3e:	4413      	add	r3, r2
 800cb40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cb54:	463b      	mov	r3, r7
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	895b      	ldrh	r3, [r3, #10]
 800cb5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb5e:	463b      	mov	r3, r7
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6959      	ldr	r1, [r3, #20]
 800cb64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800cb6e:	1d38      	adds	r0, r7, #4
 800cb70:	6800      	ldr	r0, [r0, #0]
 800cb72:	f000 fd2b 	bl	800d5cc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cb76:	1d3b      	adds	r3, r7, #4
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	463b      	mov	r3, r7
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f107 020a 	add.w	r2, r7, #10
 800cb8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb94:	8013      	strh	r3, [r2, #0]
 800cb96:	f107 030a 	add.w	r3, r7, #10
 800cb9a:	f107 020a 	add.w	r2, r7, #10
 800cb9e:	8812      	ldrh	r2, [r2, #0]
 800cba0:	f082 0210 	eor.w	r2, r2, #16
 800cba4:	801a      	strh	r2, [r3, #0]
 800cba6:	f107 030a 	add.w	r3, r7, #10
 800cbaa:	f107 020a 	add.w	r2, r7, #10
 800cbae:	8812      	ldrh	r2, [r2, #0]
 800cbb0:	f082 0220 	eor.w	r2, r2, #32
 800cbb4:	801a      	strh	r2, [r3, #0]
 800cbb6:	1d3b      	adds	r3, r7, #4
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	463b      	mov	r3, r7
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	441a      	add	r2, r3
 800cbc4:	f107 030a 	add.w	r3, r7, #10
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	8013      	strh	r3, [r2, #0]
 800cbde:	e3b5      	b.n	800d34c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	7b1b      	ldrb	r3, [r3, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f040 8090 	bne.w	800cd0c <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cbec:	463b      	mov	r3, r7
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	699a      	ldr	r2, [r3, #24]
 800cbf2:	463b      	mov	r3, r7
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d90e      	bls.n	800cc1a <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800cbfc:	463b      	mov	r3, r7
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800cc06:	463b      	mov	r3, r7
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	699a      	ldr	r2, [r3, #24]
 800cc0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc10:	1ad2      	subs	r2, r2, r3
 800cc12:	463b      	mov	r3, r7
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	619a      	str	r2, [r3, #24]
 800cc18:	e008      	b.n	800cc2c <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800cc1a:	463b      	mov	r3, r7
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	699b      	ldr	r3, [r3, #24]
 800cc20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800cc24:	463b      	mov	r3, r7
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cc2c:	1d3b      	adds	r3, r7, #4
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc34:	1d3b      	adds	r3, r7, #4
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	461a      	mov	r2, r3
 800cc40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cc44:	4413      	add	r3, r2
 800cc46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc4a:	463b      	mov	r3, r7
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	00da      	lsls	r2, r3, #3
 800cc52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cc56:	4413      	add	r3, r2
 800cc58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d116      	bne.n	800cc96 <USB_EPStartXfer+0xf2c>
 800cc68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc7a:	801a      	strh	r2, [r3, #0]
 800cc7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc92:	801a      	strh	r2, [r3, #0]
 800cc94:	e32c      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
 800cc96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc9a:	2b3e      	cmp	r3, #62	; 0x3e
 800cc9c:	d818      	bhi.n	800ccd0 <USB_EPStartXfer+0xf66>
 800cc9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cca2:	085b      	lsrs	r3, r3, #1
 800cca4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d004      	beq.n	800ccbe <USB_EPStartXfer+0xf54>
 800ccb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ccb8:	3301      	adds	r3, #1
 800ccba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ccbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	029b      	lsls	r3, r3, #10
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cccc:	801a      	strh	r2, [r3, #0]
 800ccce:	e30f      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
 800ccd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccd4:	095b      	lsrs	r3, r3, #5
 800ccd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ccda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccde:	f003 031f 	and.w	r3, r3, #31
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d104      	bne.n	800ccf0 <USB_EPStartXfer+0xf86>
 800cce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ccea:	3b01      	subs	r3, #1
 800ccec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ccf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	029b      	lsls	r3, r3, #10
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd08:	801a      	strh	r2, [r3, #0]
 800cd0a:	e2f1      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cd0c:	463b      	mov	r3, r7
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	78db      	ldrb	r3, [r3, #3]
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	f040 818f 	bne.w	800d036 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cd18:	463b      	mov	r3, r7
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	785b      	ldrb	r3, [r3, #1]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d175      	bne.n	800ce0e <USB_EPStartXfer+0x10a4>
 800cd22:	1d3b      	adds	r3, r7, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cd2a:	1d3b      	adds	r3, r7, #4
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	461a      	mov	r2, r3
 800cd36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cd40:	463b      	mov	r3, r7
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	00da      	lsls	r2, r3, #3
 800cd48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cd52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd56:	463b      	mov	r3, r7
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d116      	bne.n	800cd8e <USB_EPStartXfer+0x1024>
 800cd60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd72:	801a      	strh	r2, [r3, #0]
 800cd74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd8a:	801a      	strh	r2, [r3, #0]
 800cd8c:	e065      	b.n	800ce5a <USB_EPStartXfer+0x10f0>
 800cd8e:	463b      	mov	r3, r7
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	2b3e      	cmp	r3, #62	; 0x3e
 800cd96:	d81a      	bhi.n	800cdce <USB_EPStartXfer+0x1064>
 800cd98:	463b      	mov	r3, r7
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	085b      	lsrs	r3, r3, #1
 800cda0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cda4:	463b      	mov	r3, r7
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d004      	beq.n	800cdbc <USB_EPStartXfer+0x1052>
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	029b      	lsls	r3, r3, #10
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cdca:	801a      	strh	r2, [r3, #0]
 800cdcc:	e045      	b.n	800ce5a <USB_EPStartXfer+0x10f0>
 800cdce:	463b      	mov	r3, r7
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	095b      	lsrs	r3, r3, #5
 800cdd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cdda:	463b      	mov	r3, r7
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	f003 031f 	and.w	r3, r3, #31
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d104      	bne.n	800cdf2 <USB_EPStartXfer+0x1088>
 800cde8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdec:	3b01      	subs	r3, #1
 800cdee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	029b      	lsls	r3, r3, #10
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ce0a:	801a      	strh	r2, [r3, #0]
 800ce0c:	e025      	b.n	800ce5a <USB_EPStartXfer+0x10f0>
 800ce0e:	463b      	mov	r3, r7
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	785b      	ldrb	r3, [r3, #1]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d120      	bne.n	800ce5a <USB_EPStartXfer+0x10f0>
 800ce18:	1d3b      	adds	r3, r7, #4
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ce20:	1d3b      	adds	r3, r7, #4
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce30:	4413      	add	r3, r2
 800ce32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ce36:	463b      	mov	r3, r7
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	00da      	lsls	r2, r3, #3
 800ce3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce42:	4413      	add	r3, r2
 800ce44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce4c:	463b      	mov	r3, r7
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ce58:	801a      	strh	r2, [r3, #0]
 800ce5a:	1d3b      	adds	r3, r7, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce62:	463b      	mov	r3, r7
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	785b      	ldrb	r3, [r3, #1]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d175      	bne.n	800cf58 <USB_EPStartXfer+0x11ee>
 800ce6c:	1d3b      	adds	r3, r7, #4
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ce74:	1d3b      	adds	r3, r7, #4
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ce84:	4413      	add	r3, r2
 800ce86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	00da      	lsls	r2, r3, #3
 800ce92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ce96:	4413      	add	r3, r2
 800ce98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cea0:	463b      	mov	r3, r7
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d116      	bne.n	800ced8 <USB_EPStartXfer+0x116e>
 800ceaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cebc:	801a      	strh	r2, [r3, #0]
 800cebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cece:	b29a      	uxth	r2, r3
 800ced0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ced4:	801a      	strh	r2, [r3, #0]
 800ced6:	e061      	b.n	800cf9c <USB_EPStartXfer+0x1232>
 800ced8:	463b      	mov	r3, r7
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	2b3e      	cmp	r3, #62	; 0x3e
 800cee0:	d81a      	bhi.n	800cf18 <USB_EPStartXfer+0x11ae>
 800cee2:	463b      	mov	r3, r7
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	085b      	lsrs	r3, r3, #1
 800ceea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ceee:	463b      	mov	r3, r7
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	691b      	ldr	r3, [r3, #16]
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <USB_EPStartXfer+0x119c>
 800cefc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf00:	3301      	adds	r3, #1
 800cf02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	029b      	lsls	r3, r3, #10
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf14:	801a      	strh	r2, [r3, #0]
 800cf16:	e041      	b.n	800cf9c <USB_EPStartXfer+0x1232>
 800cf18:	463b      	mov	r3, r7
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	095b      	lsrs	r3, r3, #5
 800cf20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf24:	463b      	mov	r3, r7
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	f003 031f 	and.w	r3, r3, #31
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d104      	bne.n	800cf3c <USB_EPStartXfer+0x11d2>
 800cf32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf36:	3b01      	subs	r3, #1
 800cf38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	029b      	lsls	r3, r3, #10
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf54:	801a      	strh	r2, [r3, #0]
 800cf56:	e021      	b.n	800cf9c <USB_EPStartXfer+0x1232>
 800cf58:	463b      	mov	r3, r7
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	785b      	ldrb	r3, [r3, #1]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d11c      	bne.n	800cf9c <USB_EPStartXfer+0x1232>
 800cf62:	1d3b      	adds	r3, r7, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cf72:	4413      	add	r3, r2
 800cf74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf78:	463b      	mov	r3, r7
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	00da      	lsls	r2, r3, #3
 800cf80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cf84:	4413      	add	r3, r2
 800cf86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf8e:	463b      	mov	r3, r7
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cf9a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cf9c:	463b      	mov	r3, r7
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 81a4 	beq.w	800d2f0 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cfa8:	1d3b      	adds	r3, r7, #4
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	463b      	mov	r3, r7
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	881b      	ldrh	r3, [r3, #0]
 800cfb8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cfbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800cfc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d005      	beq.n	800cfd4 <USB_EPStartXfer+0x126a>
 800cfc8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800cfcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10d      	bne.n	800cff0 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cfd4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800cfd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f040 8187 	bne.w	800d2f0 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cfe2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800cfe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f040 8180 	bne.w	800d2f0 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800cff0:	1d3b      	adds	r3, r7, #4
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	463b      	mov	r3, r7
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	b29b      	uxth	r3, r3
 800d002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d00a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800d00e:	1d3b      	adds	r3, r7, #4
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	463b      	mov	r3, r7
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	441a      	add	r2, r3
 800d01c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800d020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d02c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d030:	b29b      	uxth	r3, r3
 800d032:	8013      	strh	r3, [r2, #0]
 800d034:	e15c      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d036:	463b      	mov	r3, r7
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	78db      	ldrb	r3, [r3, #3]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	f040 8155 	bne.w	800d2ec <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d042:	463b      	mov	r3, r7
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	699a      	ldr	r2, [r3, #24]
 800d048:	463b      	mov	r3, r7
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d90e      	bls.n	800d070 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800d052:	463b      	mov	r3, r7
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800d05c:	463b      	mov	r3, r7
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	699a      	ldr	r2, [r3, #24]
 800d062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	463b      	mov	r3, r7
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	619a      	str	r2, [r3, #24]
 800d06e:	e008      	b.n	800d082 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800d070:	463b      	mov	r3, r7
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800d07a:	463b      	mov	r3, r7
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2200      	movs	r2, #0
 800d080:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d082:	463b      	mov	r3, r7
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	785b      	ldrb	r3, [r3, #1]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d16f      	bne.n	800d16c <USB_EPStartXfer+0x1402>
 800d08c:	1d3b      	adds	r3, r7, #4
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d094:	1d3b      	adds	r3, r7, #4
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d0aa:	463b      	mov	r3, r7
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	00da      	lsls	r2, r3, #3
 800d0b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d0bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d0c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d116      	bne.n	800d0f6 <USB_EPStartXfer+0x138c>
 800d0c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d0da:	801a      	strh	r2, [r3, #0]
 800d0dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d0f2:	801a      	strh	r2, [r3, #0]
 800d0f4:	e05f      	b.n	800d1b6 <USB_EPStartXfer+0x144c>
 800d0f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0fa:	2b3e      	cmp	r3, #62	; 0x3e
 800d0fc:	d818      	bhi.n	800d130 <USB_EPStartXfer+0x13c6>
 800d0fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d102:	085b      	lsrs	r3, r3, #1
 800d104:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b00      	cmp	r3, #0
 800d112:	d004      	beq.n	800d11e <USB_EPStartXfer+0x13b4>
 800d114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d118:	3301      	adds	r3, #1
 800d11a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d11e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d122:	b29b      	uxth	r3, r3
 800d124:	029b      	lsls	r3, r3, #10
 800d126:	b29a      	uxth	r2, r3
 800d128:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d12c:	801a      	strh	r2, [r3, #0]
 800d12e:	e042      	b.n	800d1b6 <USB_EPStartXfer+0x144c>
 800d130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d134:	095b      	lsrs	r3, r3, #5
 800d136:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d13a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d13e:	f003 031f 	and.w	r3, r3, #31
 800d142:	2b00      	cmp	r3, #0
 800d144:	d104      	bne.n	800d150 <USB_EPStartXfer+0x13e6>
 800d146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d14a:	3b01      	subs	r3, #1
 800d14c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d154:	b29b      	uxth	r3, r3
 800d156:	029b      	lsls	r3, r3, #10
 800d158:	b29b      	uxth	r3, r3
 800d15a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d15e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d162:	b29a      	uxth	r2, r3
 800d164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d168:	801a      	strh	r2, [r3, #0]
 800d16a:	e024      	b.n	800d1b6 <USB_EPStartXfer+0x144c>
 800d16c:	463b      	mov	r3, r7
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	785b      	ldrb	r3, [r3, #1]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d11f      	bne.n	800d1b6 <USB_EPStartXfer+0x144c>
 800d176:	1d3b      	adds	r3, r7, #4
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d17e:	1d3b      	adds	r3, r7, #4
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d186:	b29b      	uxth	r3, r3
 800d188:	461a      	mov	r2, r3
 800d18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d18e:	4413      	add	r3, r2
 800d190:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d194:	463b      	mov	r3, r7
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	00da      	lsls	r2, r3, #3
 800d19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d1a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d1aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	1d3b      	adds	r3, r7, #4
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1be:	463b      	mov	r3, r7
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d16f      	bne.n	800d2a8 <USB_EPStartXfer+0x153e>
 800d1c8:	1d3b      	adds	r3, r7, #4
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d1d0:	1d3b      	adds	r3, r7, #4
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d1e6:	463b      	mov	r3, r7
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	00da      	lsls	r2, r3, #3
 800d1ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1f2:	4413      	add	r3, r2
 800d1f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d1f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d1fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d200:	2b00      	cmp	r3, #0
 800d202:	d116      	bne.n	800d232 <USB_EPStartXfer+0x14c8>
 800d204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d210:	b29a      	uxth	r2, r3
 800d212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d216:	801a      	strh	r2, [r3, #0]
 800d218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	b29b      	uxth	r3, r3
 800d220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d228:	b29a      	uxth	r2, r3
 800d22a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d22e:	801a      	strh	r2, [r3, #0]
 800d230:	e05e      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
 800d232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d236:	2b3e      	cmp	r3, #62	; 0x3e
 800d238:	d818      	bhi.n	800d26c <USB_EPStartXfer+0x1502>
 800d23a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d23e:	085b      	lsrs	r3, r3, #1
 800d240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <USB_EPStartXfer+0x14f0>
 800d250:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d254:	3301      	adds	r3, #1
 800d256:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d25a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d25e:	b29b      	uxth	r3, r3
 800d260:	029b      	lsls	r3, r3, #10
 800d262:	b29a      	uxth	r2, r3
 800d264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d268:	801a      	strh	r2, [r3, #0]
 800d26a:	e041      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
 800d26c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d270:	095b      	lsrs	r3, r3, #5
 800d272:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d27a:	f003 031f 	and.w	r3, r3, #31
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d104      	bne.n	800d28c <USB_EPStartXfer+0x1522>
 800d282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d286:	3b01      	subs	r3, #1
 800d288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d28c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d290:	b29b      	uxth	r3, r3
 800d292:	029b      	lsls	r3, r3, #10
 800d294:	b29b      	uxth	r3, r3
 800d296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d29a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2a4:	801a      	strh	r2, [r3, #0]
 800d2a6:	e023      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
 800d2a8:	463b      	mov	r3, r7
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d11e      	bne.n	800d2f0 <USB_EPStartXfer+0x1586>
 800d2b2:	1d3b      	adds	r3, r7, #4
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	461a      	mov	r2, r3
 800d2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	00da      	lsls	r2, r3, #3
 800d2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d2da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2e8:	801a      	strh	r2, [r3, #0]
 800d2ea:	e001      	b.n	800d2f0 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e02e      	b.n	800d34e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d2f0:	1d3b      	adds	r3, r7, #4
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	b29b      	uxth	r3, r3
 800d302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d30a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800d30e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d312:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d316:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800d31a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d31e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d322:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800d326:	1d3b      	adds	r3, r7, #4
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	463b      	mov	r3, r7
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	441a      	add	r2, r3
 800d334:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d33c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d348:	b29b      	uxth	r3, r3
 800d34a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	785b      	ldrb	r3, [r3, #1]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d020      	beq.n	800d3ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4413      	add	r3, r2
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	b29b      	uxth	r3, r3
 800d378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d37c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d380:	81bb      	strh	r3, [r7, #12]
 800d382:	89bb      	ldrh	r3, [r7, #12]
 800d384:	f083 0310 	eor.w	r3, r3, #16
 800d388:	81bb      	strh	r3, [r7, #12]
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	441a      	add	r2, r3
 800d394:	89bb      	ldrh	r3, [r7, #12]
 800d396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d39a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d39e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	8013      	strh	r3, [r2, #0]
 800d3aa:	e01f      	b.n	800d3ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3c2:	81fb      	strh	r3, [r7, #14]
 800d3c4:	89fb      	ldrh	r3, [r7, #14]
 800d3c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3ca:	81fb      	strh	r3, [r7, #14]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	441a      	add	r2, r3
 800d3d6:	89fb      	ldrh	r3, [r7, #14]
 800d3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b087      	sub	sp, #28
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	7b1b      	ldrb	r3, [r3, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f040 809d 	bne.w	800d548 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	785b      	ldrb	r3, [r3, #1]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d04c      	beq.n	800d4b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	823b      	strh	r3, [r7, #16]
 800d424:	8a3b      	ldrh	r3, [r7, #16]
 800d426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d01b      	beq.n	800d466 <USB_EPClearStall+0x6c>
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d444:	81fb      	strh	r3, [r7, #14]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	441a      	add	r2, r3
 800d450:	89fb      	ldrh	r3, [r7, #14]
 800d452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d45a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d45e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d462:	b29b      	uxth	r3, r3
 800d464:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	78db      	ldrb	r3, [r3, #3]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d06c      	beq.n	800d548 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4413      	add	r3, r2
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d484:	81bb      	strh	r3, [r7, #12]
 800d486:	89bb      	ldrh	r3, [r7, #12]
 800d488:	f083 0320 	eor.w	r3, r3, #32
 800d48c:	81bb      	strh	r3, [r7, #12]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	441a      	add	r2, r3
 800d498:	89bb      	ldrh	r3, [r7, #12]
 800d49a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d49e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	8013      	strh	r3, [r2, #0]
 800d4ae:	e04b      	b.n	800d548 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	82fb      	strh	r3, [r7, #22]
 800d4be:	8afb      	ldrh	r3, [r7, #22]
 800d4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01b      	beq.n	800d500 <USB_EPClearStall+0x106>
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4de:	82bb      	strh	r3, [r7, #20]
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	441a      	add	r2, r3
 800d4ea:	8abb      	ldrh	r3, [r7, #20]
 800d4ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	881b      	ldrh	r3, [r3, #0]
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d516:	827b      	strh	r3, [r7, #18]
 800d518:	8a7b      	ldrh	r3, [r7, #18]
 800d51a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d51e:	827b      	strh	r3, [r7, #18]
 800d520:	8a7b      	ldrh	r3, [r7, #18]
 800d522:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d526:	827b      	strh	r3, [r7, #18]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	441a      	add	r2, r3
 800d532:	8a7b      	ldrh	r3, [r7, #18]
 800d534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d53c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d544:	b29b      	uxth	r3, r3
 800d546:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	371c      	adds	r7, #28
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d556:	b480      	push	{r7}
 800d558:	b083      	sub	sp, #12
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d562:	78fb      	ldrb	r3, [r7, #3]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d103      	bne.n	800d570 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2280      	movs	r2, #128	; 0x80
 800d56c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d57e:	b480      	push	{r7}
 800d580:	b083      	sub	sp, #12
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d5be:	68fb      	ldr	r3, [r7, #12]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b08d      	sub	sp, #52	; 0x34
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	460b      	mov	r3, r1
 800d5dc:	80fb      	strh	r3, [r7, #6]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d5e2:	88bb      	ldrh	r3, [r7, #4]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	085b      	lsrs	r3, r3, #1
 800d5e8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d5f2:	88fa      	ldrh	r2, [r7, #6]
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d602:	e01b      	b.n	800d63c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	3301      	adds	r3, #1
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	b29b      	uxth	r3, r3
 800d616:	021b      	lsls	r3, r3, #8
 800d618:	b29b      	uxth	r3, r3
 800d61a:	461a      	mov	r2, r3
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	4313      	orrs	r3, r2
 800d620:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	b29a      	uxth	r2, r3
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62c:	3302      	adds	r3, #2
 800d62e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	3301      	adds	r3, #1
 800d634:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d638:	3b01      	subs	r3, #1
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1e0      	bne.n	800d604 <USB_WritePMA+0x38>
  }
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	3734      	adds	r7, #52	; 0x34
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d650:	b480      	push	{r7}
 800d652:	b08b      	sub	sp, #44	; 0x2c
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	4611      	mov	r1, r2
 800d65c:	461a      	mov	r2, r3
 800d65e:	460b      	mov	r3, r1
 800d660:	80fb      	strh	r3, [r7, #6]
 800d662:	4613      	mov	r3, r2
 800d664:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d666:	88bb      	ldrh	r3, [r7, #4]
 800d668:	085b      	lsrs	r3, r3, #1
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d676:	88fa      	ldrh	r2, [r7, #6]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d680:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	627b      	str	r3, [r7, #36]	; 0x24
 800d686:	e018      	b.n	800d6ba <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	881b      	ldrh	r3, [r3, #0]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	3302      	adds	r3, #2
 800d694:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	0a1b      	lsrs	r3, r3, #8
 800d6a8:	b2da      	uxtb	r2, r3
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1e3      	bne.n	800d688 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d6c0:	88bb      	ldrh	r3, [r7, #4]
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d007      	beq.n	800d6dc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800d6cc:	6a3b      	ldr	r3, [r7, #32]
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	701a      	strb	r2, [r3, #0]
  }
}
 800d6dc:	bf00      	nop
 800d6de:	372c      	adds	r7, #44	; 0x2c
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	af00      	add	r7, sp, #0
#if defined(_TRACE)
  /* initialize tracer module */
  TRACER_EMB_Init();
 800d6ec:	f00d f8a2 	bl	801a834 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 800d6f0:	2103      	movs	r1, #3
 800d6f2:	4804      	ldr	r0, [pc, #16]	; (800d704 <USBPD_TRACE_Init+0x1c>)
 800d6f4:	f7f3 fe14 	bl	8001320 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, sizeof(OverFlow_String));
 800d6f8:	2123      	movs	r1, #35	; 0x23
 800d6fa:	4803      	ldr	r0, [pc, #12]	; (800d708 <USBPD_TRACE_Init+0x20>)
 800d6fc:	f00d f91c 	bl	801a938 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif
}
 800d700:	bf00      	nop
 800d702:	bd80      	pop	{r7, pc}
 800d704:	0800d70d 	.word	0x0800d70d
 800d708:	0801cb64 	.word	0x0801cb64

0800d70c <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	603b      	str	r3, [r7, #0]
 800d714:	4603      	mov	r3, r0
 800d716:	71fb      	strb	r3, [r7, #7]
 800d718:	460b      	mov	r3, r1
 800d71a:	71bb      	strb	r3, [r7, #6]
 800d71c:	4613      	mov	r3, r2
 800d71e:	717b      	strb	r3, [r7, #5]
  uint32_t _time;
  int32_t _writepos;
  uint32_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 800d720:	f7f9 fa26 	bl	8006b70 <HAL_GetTick>
 800d724:	60f8      	str	r0, [r7, #12]

  TRACER_EMB_Lock();
 800d726:	f00d f96b 	bl	801aa00 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _writepos = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE + TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	3314      	adds	r3, #20
 800d72e:	4618      	mov	r0, r3
 800d730:	f00d fa02 	bl	801ab38 <TRACER_EMB_AllocateBufer>
 800d734:	6178      	str	r0, [r7, #20]

  /* Check allocation */
  if (_writepos  != -1)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	f000 80c9 	beq.w	800d8d2 <USBPD_TRACE_Add+0x1c6>
  {
    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800d740:	2300      	movs	r3, #0
 800d742:	613b      	str	r3, [r7, #16]
 800d744:	e00b      	b.n	800d75e <USBPD_TRACE_Add+0x52>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	21fd      	movs	r1, #253	; 0xfd
 800d74c:	4618      	mov	r0, r3
 800d74e:	f00d f8cd 	bl	801a8ec <TRACER_EMB_WriteData>
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	3301      	adds	r3, #1
 800d756:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	3301      	adds	r3, #1
 800d75c:	613b      	str	r3, [r7, #16]
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	2b03      	cmp	r3, #3
 800d762:	d9f0      	bls.n	800d746 <USBPD_TRACE_Add+0x3a>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, __TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	b29a      	uxth	r2, r3
 800d768:	79bb      	ldrb	r3, [r7, #6]
 800d76a:	3301      	adds	r3, #1
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	015b      	lsls	r3, r3, #5
 800d770:	b2db      	uxtb	r3, r3
 800d772:	f043 0312 	orr.w	r3, r3, #18
 800d776:	b2db      	uxtb	r3, r3
 800d778:	4619      	mov	r1, r3
 800d77a:	4610      	mov	r0, r2
 800d77c:	f00d f8b6 	bl	801a8ec <TRACER_EMB_WriteData>
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	3301      	adds	r3, #1
 800d784:	617b      	str	r3, [r7, #20]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	b29a      	uxth	r2, r3
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	3309      	adds	r3, #9
 800d78e:	0a1b      	lsrs	r3, r3, #8
 800d790:	b2db      	uxtb	r3, r3
 800d792:	4619      	mov	r1, r3
 800d794:	4610      	mov	r0, r2
 800d796:	f00d f8a9 	bl	801a8ec <TRACER_EMB_WriteData>
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	3301      	adds	r3, #1
 800d79e:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	6a3b      	ldr	r3, [r7, #32]
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	3309      	adds	r3, #9
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f00d f89c 	bl	801a8ec <TRACER_EMB_WriteData>
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	617b      	str	r3, [r7, #20]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	79fa      	ldrb	r2, [r7, #7]
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f00d f892 	bl	801a8ec <TRACER_EMB_WriteData>
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	617b      	str	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	b2d2      	uxtb	r2, r2
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f00d f887 	bl	801a8ec <TRACER_EMB_WriteData>
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	f00d f87b 	bl	801a8ec <TRACER_EMB_WriteData>
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	0c1b      	lsrs	r3, r3, #16
 800d804:	b2db      	uxtb	r3, r3
 800d806:	4619      	mov	r1, r3
 800d808:	4610      	mov	r0, r2
 800d80a:	f00d f86f 	bl	801a8ec <TRACER_EMB_WriteData>
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	3301      	adds	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	b29a      	uxth	r2, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	0e1b      	lsrs	r3, r3, #24
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	4619      	mov	r1, r3
 800d820:	4610      	mov	r0, r2
 800d822:	f00d f863 	bl	801a8ec <TRACER_EMB_WriteData>
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	3301      	adds	r3, #1
 800d82a:	617b      	str	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	79ba      	ldrb	r2, [r7, #6]
 800d832:	4611      	mov	r1, r2
 800d834:	4618      	mov	r0, r3
 800d836:	f00d f859 	bl	801a8ec <TRACER_EMB_WriteData>
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	3301      	adds	r3, #1
 800d83e:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	b29b      	uxth	r3, r3
 800d844:	797a      	ldrb	r2, [r7, #5]
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f00d f84f 	bl	801a8ec <TRACER_EMB_WriteData>
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	3301      	adds	r3, #1
 800d852:	617b      	str	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	b29a      	uxth	r2, r3
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	0a1b      	lsrs	r3, r3, #8
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	4619      	mov	r1, r3
 800d860:	4610      	mov	r0, r2
 800d862:	f00d f843 	bl	801a8ec <TRACER_EMB_WriteData>
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	3301      	adds	r3, #1
 800d86a:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	6a3a      	ldr	r2, [r7, #32]
 800d872:	b2d2      	uxtb	r2, r2
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f00d f838 	bl	801a8ec <TRACER_EMB_WriteData>
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	3301      	adds	r3, #1
 800d880:	617b      	str	r3, [r7, #20]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 800d882:	2300      	movs	r3, #0
 800d884:	613b      	str	r3, [r7, #16]
 800d886:	e00e      	b.n	800d8a6 <USBPD_TRACE_Add+0x19a>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	b298      	uxth	r0, r3
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	4413      	add	r3, r2
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	4619      	mov	r1, r3
 800d896:	f00d f829 	bl	801a8ec <TRACER_EMB_WriteData>
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	3301      	adds	r3, #1
 800d89e:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < Size; index++)
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	613b      	str	r3, [r7, #16]
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	6a3b      	ldr	r3, [r7, #32]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d3ec      	bcc.n	800d888 <USBPD_TRACE_Add+0x17c>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	613b      	str	r3, [r7, #16]
 800d8b2:	e00b      	b.n	800d8cc <USBPD_TRACE_Add+0x1c0>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	21a5      	movs	r1, #165	; 0xa5
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f00d f816 	bl	801a8ec <TRACER_EMB_WriteData>
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d9f0      	bls.n	800d8b4 <USBPD_TRACE_Add+0x1a8>
    }
  }

  TRACER_EMB_UnLock();
 800d8d2:	f00d f8b5 	bl	801aa40 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 800d8d6:	f00d f8d3 	bl	801aa80 <TRACER_EMB_SendData>
#else
  return;
#endif
}
 800d8da:	bf00      	nop
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <__NVIC_EnableIRQ>:
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	db0b      	blt.n	800d90e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d8f6:	79fb      	ldrb	r3, [r7, #7]
 800d8f8:	f003 021f 	and.w	r2, r3, #31
 800d8fc:	4907      	ldr	r1, [pc, #28]	; (800d91c <__NVIC_EnableIRQ+0x38>)
 800d8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d902:	095b      	lsrs	r3, r3, #5
 800d904:	2001      	movs	r0, #1
 800d906:	fa00 f202 	lsl.w	r2, r0, r2
 800d90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	e000e100 	.word	0xe000e100

0800d920 <__NVIC_SetPriority>:
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	4603      	mov	r3, r0
 800d928:	6039      	str	r1, [r7, #0]
 800d92a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d92c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d930:	2b00      	cmp	r3, #0
 800d932:	db0a      	blt.n	800d94a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	b2da      	uxtb	r2, r3
 800d938:	490c      	ldr	r1, [pc, #48]	; (800d96c <__NVIC_SetPriority+0x4c>)
 800d93a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d93e:	0112      	lsls	r2, r2, #4
 800d940:	b2d2      	uxtb	r2, r2
 800d942:	440b      	add	r3, r1
 800d944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d948:	e00a      	b.n	800d960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	4908      	ldr	r1, [pc, #32]	; (800d970 <__NVIC_SetPriority+0x50>)
 800d950:	79fb      	ldrb	r3, [r7, #7]
 800d952:	f003 030f 	and.w	r3, r3, #15
 800d956:	3b04      	subs	r3, #4
 800d958:	0112      	lsls	r2, r2, #4
 800d95a:	b2d2      	uxtb	r2, r2
 800d95c:	440b      	add	r3, r1
 800d95e:	761a      	strb	r2, [r3, #24]
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	e000e100 	.word	0xe000e100
 800d970:	e000ed00 	.word	0xe000ed00

0800d974 <LL_AHB2_GRP1_EnableClock>:
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d97c:	4b08      	ldr	r3, [pc, #32]	; (800d9a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800d97e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d980:	4907      	ldr	r1, [pc, #28]	; (800d9a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4313      	orrs	r3, r2
 800d986:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d988:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800d98a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4013      	ands	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d992:	68fb      	ldr	r3, [r7, #12]
}
 800d994:	bf00      	nop
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	40021000 	.word	0x40021000

0800d9a4 <LL_GPIO_SetPinMode>:
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b08b      	sub	sp, #44	; 0x2c
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	fa93 f3a3 	rbit	r3, r3
 800d9be:	613b      	str	r3, [r7, #16]
  return result;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800d9ca:	2320      	movs	r3, #32
 800d9cc:	e003      	b.n	800d9d6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	fab3 f383 	clz	r3, r3
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	2103      	movs	r1, #3
 800d9da:	fa01 f303 	lsl.w	r3, r1, r3
 800d9de:	43db      	mvns	r3, r3
 800d9e0:	401a      	ands	r2, r3
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	fa93 f3a3 	rbit	r3, r3
 800d9ec:	61fb      	str	r3, [r7, #28]
  return result;
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800d9f8:	2320      	movs	r3, #32
 800d9fa:	e003      	b.n	800da04 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	fab3 f383 	clz	r3, r3
 800da02:	b2db      	uxtb	r3, r3
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	fa01 f303 	lsl.w	r3, r1, r3
 800da0c:	431a      	orrs	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	601a      	str	r2, [r3, #0]
}
 800da12:	bf00      	nop
 800da14:	372c      	adds	r7, #44	; 0x2c
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr

0800da1e <LL_GPIO_SetPinPull>:
{
 800da1e:	b480      	push	{r7}
 800da20:	b08b      	sub	sp, #44	; 0x2c
 800da22:	af00      	add	r7, sp, #0
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	60b9      	str	r1, [r7, #8]
 800da28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68da      	ldr	r2, [r3, #12]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	fa93 f3a3 	rbit	r3, r3
 800da38:	613b      	str	r3, [r7, #16]
  return result;
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d101      	bne.n	800da48 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800da44:	2320      	movs	r3, #32
 800da46:	e003      	b.n	800da50 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	fab3 f383 	clz	r3, r3
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	005b      	lsls	r3, r3, #1
 800da52:	2103      	movs	r1, #3
 800da54:	fa01 f303 	lsl.w	r3, r1, r3
 800da58:	43db      	mvns	r3, r3
 800da5a:	401a      	ands	r2, r3
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da60:	6a3b      	ldr	r3, [r7, #32]
 800da62:	fa93 f3a3 	rbit	r3, r3
 800da66:	61fb      	str	r3, [r7, #28]
  return result;
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800da72:	2320      	movs	r3, #32
 800da74:	e003      	b.n	800da7e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	fab3 f383 	clz	r3, r3
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	6879      	ldr	r1, [r7, #4]
 800da82:	fa01 f303 	lsl.w	r3, r1, r3
 800da86:	431a      	orrs	r2, r3
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	60da      	str	r2, [r3, #12]
}
 800da8c:	bf00      	nop
 800da8e:	372c      	adds	r7, #44	; 0x2c
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <LL_UCPD_Enable>:
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	601a      	str	r2, [r3, #0]
}
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800daca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	431a      	orrs	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	601a      	str	r2, [r3, #0]
}
 800dad6:	bf00      	nop
 800dad8:	370c      	adds	r7, #12
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800dae2:	b480      	push	{r7}
 800dae4:	b083      	sub	sp, #12
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	431a      	orrs	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	60da      	str	r2, [r3, #12]
}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	611a      	str	r2, [r3, #16]
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	611a      	str	r2, [r3, #16]
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800db48:	b480      	push	{r7}
 800db4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800db4c:	4b05      	ldr	r3, [pc, #20]	; (800db64 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	4a04      	ldr	r2, [pc, #16]	; (800db64 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800db52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db56:	6093      	str	r3, [r2, #8]
}
 800db58:	bf00      	nop
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40007000 	.word	0x40007000

0800db68 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800db68:	b590      	push	{r4, r7, lr}
 800db6a:	b08b      	sub	sp, #44	; 0x2c
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	607a      	str	r2, [r7, #4]
 800db72:	603b      	str	r3, [r7, #0]
 800db74:	4603      	mov	r3, r0
 800db76:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800db78:	7bfa      	ldrb	r2, [r7, #15]
 800db7a:	4613      	mov	r3, r2
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	4413      	add	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4a66      	ldr	r2, [pc, #408]	; (800dd1c <CAD_Init+0x1b4>)
 800db84:	4413      	add	r3, r2
 800db86:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800db88:	7bfa      	ldrb	r2, [r7, #15]
 800db8a:	4965      	ldr	r1, [pc, #404]	; (800dd20 <CAD_Init+0x1b8>)
 800db8c:	4613      	mov	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	1a9b      	subs	r3, r3, r2
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	440b      	add	r3, r1
 800db96:	3310      	adds	r3, #16
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800db9c:	7bfa      	ldrb	r2, [r7, #15]
 800db9e:	4960      	ldr	r1, [pc, #384]	; (800dd20 <CAD_Init+0x1b8>)
 800dba0:	4613      	mov	r3, r2
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	1a9b      	subs	r3, r3, r2
 800dba6:	00db      	lsls	r3, r3, #3
 800dba8:	440b      	add	r3, r1
 800dbaa:	330c      	adds	r3, #12
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800dbb0:	7bfa      	ldrb	r2, [r7, #15]
 800dbb2:	495b      	ldr	r1, [pc, #364]	; (800dd20 <CAD_Init+0x1b8>)
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	1a9b      	subs	r3, r3, r2
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	440b      	add	r3, r1
 800dbbe:	330c      	adds	r3, #12
 800dbc0:	6819      	ldr	r1, [r3, #0]
 800dbc2:	7bfa      	ldrb	r2, [r7, #15]
 800dbc4:	4856      	ldr	r0, [pc, #344]	; (800dd20 <CAD_Init+0x1b8>)
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	1a9b      	subs	r3, r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	4403      	add	r3, r0
 800dbd0:	3310      	adds	r3, #16
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	794b      	ldrb	r3, [r1, #5]
 800dbd6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dbda:	b2d9      	uxtb	r1, r3
 800dbdc:	7893      	ldrb	r3, [r2, #2]
 800dbde:	f361 0301 	bfi	r3, r1, #0, #2
 800dbe2:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800dbe4:	7bfa      	ldrb	r2, [r7, #15]
 800dbe6:	494e      	ldr	r1, [pc, #312]	; (800dd20 <CAD_Init+0x1b8>)
 800dbe8:	4613      	mov	r3, r2
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	1a9b      	subs	r3, r3, r2
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	440b      	add	r3, r1
 800dbf2:	3310      	adds	r3, #16
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	7893      	ldrb	r3, [r2, #2]
 800dbf8:	f36f 0383 	bfc	r3, #2, #2
 800dbfc:	7093      	strb	r3, [r2, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800dbfe:	220c      	movs	r2, #12
 800dc00:	2100      	movs	r1, #0
 800dc02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc04:	f00d fe5e 	bl	801b8c4 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800dc08:	7bfa      	ldrb	r2, [r7, #15]
 800dc0a:	4945      	ldr	r1, [pc, #276]	; (800dd20 <CAD_Init+0x1b8>)
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	1a9b      	subs	r3, r3, r2
 800dc12:	00db      	lsls	r3, r3, #3
 800dc14:	440b      	add	r3, r1
 800dc16:	332c      	adds	r3, #44	; 0x2c
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800dc1c:	7bfc      	ldrb	r4, [r7, #15]
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 fbe1 	bl	800e3e8 <USBPD_HW_GetUSPDInstance>
 800dc26:	4602      	mov	r2, r0
 800dc28:	493d      	ldr	r1, [pc, #244]	; (800dd20 <CAD_Init+0x1b8>)
 800dc2a:	4623      	mov	r3, r4
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	1b1b      	subs	r3, r3, r4
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	440b      	add	r3, r1
 800dc34:	601a      	str	r2, [r3, #0]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800dc36:	f107 0314 	add.w	r3, r7, #20
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fd fad0 	bl	800b1e0 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800dc40:	7bfa      	ldrb	r2, [r7, #15]
 800dc42:	4937      	ldr	r1, [pc, #220]	; (800dd20 <CAD_Init+0x1b8>)
 800dc44:	4613      	mov	r3, r2
 800dc46:	00db      	lsls	r3, r3, #3
 800dc48:	1a9b      	subs	r3, r3, r2
 800dc4a:	00db      	lsls	r3, r3, #3
 800dc4c:	440b      	add	r3, r1
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f107 0214 	add.w	r2, r7, #20
 800dc54:	4611      	mov	r1, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fd fa94 	bl	800b184 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 | LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
 800dc5c:	7bfa      	ldrb	r2, [r7, #15]
 800dc5e:	4930      	ldr	r1, [pc, #192]	; (800dd20 <CAD_Init+0x1b8>)
 800dc60:	4613      	mov	r3, r2
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	1a9b      	subs	r3, r3, r2
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	440b      	add	r3, r1
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff ff21 	bl	800dab8 <LL_UCPD_SetRxOrderSet>
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800dc76:	7bfa      	ldrb	r2, [r7, #15]
 800dc78:	4929      	ldr	r1, [pc, #164]	; (800dd20 <CAD_Init+0x1b8>)
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	00db      	lsls	r3, r3, #3
 800dc7e:	1a9b      	subs	r3, r3, r2
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	440b      	add	r3, r1
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff ff29 	bl	800dae2 <LL_UCPD_SetccEnable>

#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 800dc90:	f7ff ff5a 	bl	800db48 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 800dc94:	2002      	movs	r0, #2
 800dc96:	f7ff fe6d 	bl	800d974 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 800dc9a:	2203      	movs	r2, #3
 800dc9c:	2140      	movs	r1, #64	; 0x40
 800dc9e:	4821      	ldr	r0, [pc, #132]	; (800dd24 <CAD_Init+0x1bc>)
 800dca0:	f7ff fe80 	bl	800d9a4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 800dca4:	2203      	movs	r2, #3
 800dca6:	2110      	movs	r1, #16
 800dca8:	481e      	ldr	r0, [pc, #120]	; (800dd24 <CAD_Init+0x1bc>)
 800dcaa:	f7ff fe7b 	bl	800d9a4 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800dcae:	2200      	movs	r2, #0
 800dcb0:	2140      	movs	r1, #64	; 0x40
 800dcb2:	481c      	ldr	r0, [pc, #112]	; (800dd24 <CAD_Init+0x1bc>)
 800dcb4:	f7ff feb3 	bl	800da1e <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2110      	movs	r1, #16
 800dcbc:	4819      	ldr	r0, [pc, #100]	; (800dd24 <CAD_Init+0x1bc>)
 800dcbe:	f7ff feae 	bl	800da1e <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f008 fae1 	bl	801628c <BSP_USBPD_PWR_Init>

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800dcca:	7bfa      	ldrb	r2, [r7, #15]
 800dccc:	4914      	ldr	r1, [pc, #80]	; (800dd20 <CAD_Init+0x1b8>)
 800dcce:	4613      	mov	r3, r2
 800dcd0:	00db      	lsls	r3, r3, #3
 800dcd2:	1a9b      	subs	r3, r3, r2
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	440b      	add	r3, r1
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff fedc 	bl	800da98 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f001 fc1c 	bl	800f520 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcea:	4a0f      	ldr	r2, [pc, #60]	; (800dd28 <CAD_Init+0x1c0>)
 800dcec:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800dcee:	7bfa      	ldrb	r2, [r7, #15]
 800dcf0:	490b      	ldr	r1, [pc, #44]	; (800dd20 <CAD_Init+0x1b8>)
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	00db      	lsls	r3, r3, #3
 800dcf6:	1a9b      	subs	r3, r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	440b      	add	r3, r1
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	795b      	ldrb	r3, [r3, #5]
 800dd02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dd06:	b2d9      	uxtb	r1, r3
 800dd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd0a:	7853      	ldrb	r3, [r2, #1]
 800dd0c:	f361 13c7 	bfi	r3, r1, #7, #1
 800dd10:	7053      	strb	r3, [r2, #1]
      _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
    }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800dd12:	bf00      	nop
 800dd14:	372c      	adds	r7, #44	; 0x2c
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd90      	pop	{r4, r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20000388 	.word	0x20000388
 800dd20:	20003048 	.word	0x20003048
 800dd24:	48000400 	.word	0x48000400
 800dd28:	0800de05 	.word	0x0800de05

0800dd2c <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	4603      	mov	r3, r0
 800dd34:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f001 fc83 	bl	800f644 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800dd3e:	79fa      	ldrb	r2, [r7, #7]
 800dd40:	490b      	ldr	r1, [pc, #44]	; (800dd70 <CAD_Enter_ErrorRecovery+0x44>)
 800dd42:	4613      	mov	r3, r2
 800dd44:	005b      	lsls	r3, r3, #1
 800dd46:	4413      	add	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	18ca      	adds	r2, r1, r3
 800dd4c:	7813      	ldrb	r3, [r2, #0]
 800dd4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd52:	7013      	strb	r3, [r2, #0]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800dd54:	79fa      	ldrb	r2, [r7, #7]
 800dd56:	4907      	ldr	r1, [pc, #28]	; (800dd74 <CAD_Enter_ErrorRecovery+0x48>)
 800dd58:	4613      	mov	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	00db      	lsls	r3, r3, #3
 800dd60:	440b      	add	r3, r1
 800dd62:	332c      	adds	r3, #44	; 0x2c
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4798      	blx	r3
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	20000388 	.word	0x20000388
 800dd74:	20003048 	.word	0x20003048

0800dd78 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	6039      	str	r1, [r7, #0]
 800dd82:	71fb      	strb	r3, [r7, #7]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800dd84:	79fa      	ldrb	r2, [r7, #7]
 800dd86:	4915      	ldr	r1, [pc, #84]	; (800dddc <CAD_SRC_Set_ResistorRp+0x64>)
 800dd88:	4613      	mov	r3, r2
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	1a9b      	subs	r3, r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	440b      	add	r3, r1
 800dd92:	3310      	adds	r3, #16
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	f003 0303 	and.w	r3, r3, #3
 800dd9c:	b2d9      	uxtb	r1, r3
 800dd9e:	7893      	ldrb	r3, [r2, #2]
 800dda0:	f361 0301 	bfi	r3, r1, #0, #2
 800dda4:	7093      	strb	r3, [r2, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800dda6:	79fa      	ldrb	r2, [r7, #7]
 800dda8:	490d      	ldr	r1, [pc, #52]	; (800dde0 <CAD_SRC_Set_ResistorRp+0x68>)
 800ddaa:	4613      	mov	r3, r2
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	4413      	add	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	18ca      	adds	r2, r1, r3
 800ddb4:	7853      	ldrb	r3, [r2, #1]
 800ddb6:	f043 0301 	orr.w	r3, r3, #1
 800ddba:	7053      	strb	r3, [r2, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ddbc:	79fa      	ldrb	r2, [r7, #7]
 800ddbe:	4907      	ldr	r1, [pc, #28]	; (800dddc <CAD_SRC_Set_ResistorRp+0x64>)
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	1a9b      	subs	r3, r3, r2
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	440b      	add	r3, r1
 800ddca:	332c      	adds	r3, #44	; 0x2c
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4798      	blx	r3
  return 0;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20003048 	.word	0x20003048
 800dde0:	20000388 	.word	0x20000388

0800dde4 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	6039      	str	r1, [r7, #0]
 800ddee:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff ffbf 	bl	800dd78 <CAD_SRC_Set_ResistorRp>
 800ddfa:	4603      	mov	r3, r0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800de12:	7bfa      	ldrb	r2, [r7, #15]
 800de14:	4613      	mov	r3, r2
 800de16:	005b      	lsls	r3, r3, #1
 800de18:	4413      	add	r3, r2
 800de1a:	009b      	lsls	r3, r3, #2
 800de1c:	4a17      	ldr	r2, [pc, #92]	; (800de7c <CAD_StateMachine_SNK+0x78>)
 800de1e:	4413      	add	r3, r2
 800de20:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800de22:	2302      	movs	r3, #2
 800de24:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
   BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	785b      	ldrb	r3, [r3, #1]
 800de2a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	2b03      	cmp	r3, #3
 800de32:	d014      	beq.n	800de5e <CAD_StateMachine_SNK+0x5a>
 800de34:	2b03      	cmp	r3, #3
 800de36:	dc1a      	bgt.n	800de6e <CAD_StateMachine_SNK+0x6a>
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d002      	beq.n	800de42 <CAD_StateMachine_SNK+0x3e>
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	d006      	beq.n	800de4e <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

  default:
    {
      break;
 800de40:	e015      	b.n	800de6e <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	4618      	mov	r0, r3
 800de46:	f000 f985 	bl	800e154 <ManageStateDetached_SNK>
 800de4a:	6178      	str	r0, [r7, #20]
      break;
 800de4c:	e010      	b.n	800de70 <CAD_StateMachine_SNK+0x6c>
    _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	68b9      	ldr	r1, [r7, #8]
 800de54:	4618      	mov	r0, r3
 800de56:	f000 f9c7 	bl	800e1e8 <ManageStateAttachedWait_SNK>
 800de5a:	6178      	str	r0, [r7, #20]
    break;
 800de5c:	e008      	b.n	800de70 <CAD_StateMachine_SNK+0x6c>
    _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	68b9      	ldr	r1, [r7, #8]
 800de64:	4618      	mov	r0, r3
 800de66:	f000 fa41 	bl	800e2ec <ManageStateAttached_SNK>
 800de6a:	6178      	str	r0, [r7, #20]
    break;
 800de6c:	e000      	b.n	800de70 <CAD_StateMachine_SNK+0x6c>
      break;
 800de6e:	bf00      	nop
     BSP_USBPD_PWR_VCCSetState(PortNum, 0);
     break;
    }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800de70:	697b      	ldr	r3, [r7, #20]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	20000388 	.word	0x20000388

0800de80 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af02      	add	r7, sp, #8
 800de86:	4603      	mov	r3, r0
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800de8e:	7bfa      	ldrb	r2, [r7, #15]
 800de90:	4613      	mov	r3, r2
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	4413      	add	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4a6a      	ldr	r2, [pc, #424]	; (800e044 <CAD_StateMachine+0x1c4>)
 800de9a:	4413      	add	r3, r2
 800de9c:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800de9e:	2302      	movs	r3, #2
 800dea0:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2200      	movs	r2, #0
 800dea6:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800dea8:	7bfa      	ldrb	r2, [r7, #15]
 800deaa:	4967      	ldr	r1, [pc, #412]	; (800e048 <CAD_StateMachine+0x1c8>)
 800deac:	4613      	mov	r3, r2
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	1a9b      	subs	r3, r3, r2
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	440b      	add	r3, r1
 800deb6:	3310      	adds	r3, #16
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	f003 0310 	and.w	r3, r3, #16
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <CAD_StateMachine+0x4a>
  {
    return _timing;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	e0b7      	b.n	800e03a <CAD_StateMachine+0x1ba>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d017      	beq.n	800df08 <CAD_StateMachine+0x88>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	7813      	ldrb	r3, [r2, #0]
 800dedc:	f36f 13c7 	bfc	r3, #7, #1
 800dee0:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800dee2:	693a      	ldr	r2, [r7, #16]
 800dee4:	7853      	ldrb	r3, [r2, #1]
 800dee6:	210c      	movs	r1, #12
 800dee8:	f361 0345 	bfi	r3, r1, #1, #5
 800deec:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	785b      	ldrb	r3, [r3, #1]
 800def2:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800def6:	b2db      	uxtb	r3, r3
 800def8:	461a      	mov	r2, r3
 800defa:	7bf9      	ldrb	r1, [r7, #15]
 800defc:	2300      	movs	r3, #0
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	2300      	movs	r3, #0
 800df02:	2005      	movs	r0, #5
 800df04:	f7ff fc02 	bl	800d70c <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch(_handle->cstate)
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	785b      	ldrb	r3, [r3, #1]
 800df0c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b0d      	cmp	r3, #13
 800df14:	d051      	beq.n	800dfba <CAD_StateMachine+0x13a>
 800df16:	2b0d      	cmp	r3, #13
 800df18:	dc62      	bgt.n	800dfe0 <CAD_StateMachine+0x160>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <CAD_StateMachine+0xa4>
 800df1e:	2b0c      	cmp	r3, #12
 800df20:	d024      	beq.n	800df6c <CAD_StateMachine+0xec>
 800df22:	e05d      	b.n	800dfe0 <CAD_StateMachine+0x160>
  {
  case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800df24:	7bfa      	ldrb	r2, [r7, #15]
 800df26:	4948      	ldr	r1, [pc, #288]	; (800e048 <CAD_StateMachine+0x1c8>)
 800df28:	4613      	mov	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	1a9b      	subs	r3, r3, r2
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	440b      	add	r3, r1
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff fde7 	bl	800db08 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800df3a:	7bfa      	ldrb	r2, [r7, #15]
 800df3c:	4942      	ldr	r1, [pc, #264]	; (800e048 <CAD_StateMachine+0x1c8>)
 800df3e:	4613      	mov	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	1a9b      	subs	r3, r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	440b      	add	r3, r1
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7ff fdec 	bl	800db28 <LL_UCPD_EnableIT_TypeCEventCC1>
#endif /* !_LOW_POWER */
      UCPD_INSTANCE0_ENABLEIRQ;
 800df50:	2104      	movs	r1, #4
 800df52:	203f      	movs	r0, #63	; 0x3f
 800df54:	f7ff fce4 	bl	800d920 <__NVIC_SetPriority>
 800df58:	203f      	movs	r0, #63	; 0x3f
 800df5a:	f7ff fcc3 	bl	800d8e4 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	7853      	ldrb	r3, [r2, #1]
 800df62:	2101      	movs	r1, #1
 800df64:	f361 0345 	bfi	r3, r1, #1, #5
 800df68:	7053      	strb	r3, [r2, #1]
      break;
 800df6a:	e042      	b.n	800dff2 <CAD_StateMachine+0x172>

  case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
 800df6e:	4618      	mov	r0, r3
 800df70:	f001 fb68 	bl	800f644 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800df74:	7bfa      	ldrb	r2, [r7, #15]
 800df76:	4934      	ldr	r1, [pc, #208]	; (800e048 <CAD_StateMachine+0x1c8>)
 800df78:	4613      	mov	r3, r2
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	1a9b      	subs	r3, r3, r2
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	440b      	add	r3, r1
 800df82:	3334      	adds	r3, #52	; 0x34
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	7813      	ldrb	r3, [r2, #0]
 800df92:	f36f 0301 	bfc	r3, #0, #2
 800df96:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2201      	movs	r2, #1
 800df9c:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800df9e:	f7f8 fde7 	bl	8006b70 <HAL_GetTick>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800dfa8:	231a      	movs	r3, #26
 800dfaa:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800dfac:	693a      	ldr	r2, [r7, #16]
 800dfae:	7853      	ldrb	r3, [r2, #1]
 800dfb0:	210d      	movs	r1, #13
 800dfb2:	f361 0345 	bfi	r3, r1, #1, #5
 800dfb6:	7053      	strb	r3, [r2, #1]
      break;
 800dfb8:	e01b      	b.n	800dff2 <CAD_StateMachine+0x172>
    }

  case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800dfba:	f7f8 fdd9 	bl	8006b70 <HAL_GetTick>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b1a      	cmp	r3, #26
 800dfc8:	d912      	bls.n	800dff0 <CAD_StateMachine+0x170>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK)
        {
          USBPDM1_AssertRd(PortNum);
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f001 faa7 	bl	800f520 <USBPDM1_AssertRd>
#endif /* _SNK */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	7853      	ldrb	r3, [r2, #1]
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	f361 0345 	bfi	r3, r1, #1, #5
 800dfdc:	7053      	strb	r3, [r2, #1]
      }
      break;
 800dfde:	e007      	b.n	800dff0 <CAD_StateMachine+0x170>
    }

  default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	7bf8      	ldrb	r0, [r7, #15]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	4798      	blx	r3
 800dfec:	6178      	str	r0, [r7, #20]
      break;
 800dfee:	e000      	b.n	800dff2 <CAD_StateMachine+0x172>
      break;
 800dff0:	bf00      	nop
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	785b      	ldrb	r3, [r3, #1]
 800dff6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	789b      	ldrb	r3, [r3, #2]
 800e000:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e004:	b2db      	uxtb	r3, r3
 800e006:	429a      	cmp	r2, r3
 800e008:	d016      	beq.n	800e038 <CAD_StateMachine+0x1b8>
  {
    _handle->pstate = _handle->cstate;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	785b      	ldrb	r3, [r3, #1]
 800e00e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e012:	b2d9      	uxtb	r1, r3
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	7893      	ldrb	r3, [r2, #2]
 800e018:	f361 0345 	bfi	r3, r1, #1, #5
 800e01c:	7093      	strb	r3, [r2, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	785b      	ldrb	r3, [r3, #1]
 800e022:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e026:	b2db      	uxtb	r3, r3
 800e028:	461a      	mov	r2, r3
 800e02a:	7bf9      	ldrb	r1, [r7, #15]
 800e02c:	2300      	movs	r3, #0
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	2300      	movs	r3, #0
 800e032:	2005      	movs	r0, #5
 800e034:	f7ff fb6a 	bl	800d70c <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800e038:	697b      	ldr	r3, [r7, #20]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3718      	adds	r7, #24
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20000388 	.word	0x20000388
 800e048:	20003048 	.word	0x20003048

0800e04c <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b087      	sub	sp, #28
 800e050:	af00      	add	r7, sp, #0
 800e052:	4603      	mov	r3, r0
 800e054:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e056:	79fa      	ldrb	r2, [r7, #7]
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4a3a      	ldr	r2, [pc, #232]	; (800e14c <CAD_Check_HW_SNK+0x100>)
 800e062:	4413      	add	r3, r2
 800e064:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800e066:	79fa      	ldrb	r2, [r7, #7]
 800e068:	4939      	ldr	r1, [pc, #228]	; (800e150 <CAD_Check_HW_SNK+0x104>)
 800e06a:	4613      	mov	r3, r2
 800e06c:	00db      	lsls	r3, r3, #3
 800e06e:	1a9b      	subs	r3, r3, r2
 800e070:	00db      	lsls	r3, r3, #3
 800e072:	440b      	add	r3, r1
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e07c:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800e07e:	79fa      	ldrb	r2, [r7, #7]
 800e080:	4933      	ldr	r1, [pc, #204]	; (800e150 <CAD_Check_HW_SNK+0x104>)
 800e082:	4613      	mov	r3, r2
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	1a9b      	subs	r3, r3, r2
 800e088:	00db      	lsls	r3, r3, #3
 800e08a:	440b      	add	r3, r1
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e094:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	7813      	ldrb	r3, [r2, #0]
 800e09a:	f36f 0301 	bfc	r3, #0, #2
 800e09e:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	7813      	ldrb	r3, [r2, #0]
 800e0a4:	f36f 0384 	bfc	r3, #2, #3
 800e0a8:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d021      	beq.n	800e0f4 <CAD_Check_HW_SNK+0xa8>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d11e      	bne.n	800e0f4 <CAD_Check_HW_SNK+0xa8>
  {
      _handle->CurrentHWcondition = HW_Attachment;
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	7813      	ldrb	r3, [r2, #0]
 800e0ba:	2101      	movs	r1, #1
 800e0bc:	f361 0384 	bfi	r3, r1, #2, #3
 800e0c0:	7013      	strb	r3, [r2, #0]
      _handle->cc = CC1;
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	7813      	ldrb	r3, [r2, #0]
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	f361 0301 	bfi	r3, r1, #0, #2
 800e0cc:	7013      	strb	r3, [r2, #0]
      Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	0c18      	lsrs	r0, r3, #16
 800e0d2:	79fa      	ldrb	r2, [r7, #7]
 800e0d4:	491e      	ldr	r1, [pc, #120]	; (800e150 <CAD_Check_HW_SNK+0x104>)
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	00db      	lsls	r3, r3, #3
 800e0da:	1a9b      	subs	r3, r3, r2
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	440b      	add	r3, r1
 800e0e0:	3310      	adds	r3, #16
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	f003 0303 	and.w	r3, r3, #3
 800e0ea:	b2d9      	uxtb	r1, r3
 800e0ec:	7893      	ldrb	r3, [r2, #2]
 800e0ee:	f361 0383 	bfi	r3, r1, #2, #2
 800e0f2:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d121      	bne.n	800e13e <CAD_Check_HW_SNK+0xf2>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d01e      	beq.n	800e13e <CAD_Check_HW_SNK+0xf2>
  {
      _handle->CurrentHWcondition = HW_Attachment;
 800e100:	697a      	ldr	r2, [r7, #20]
 800e102:	7813      	ldrb	r3, [r2, #0]
 800e104:	2101      	movs	r1, #1
 800e106:	f361 0384 	bfi	r3, r1, #2, #3
 800e10a:	7013      	strb	r3, [r2, #0]
      _handle->cc = CC2;
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	7813      	ldrb	r3, [r2, #0]
 800e110:	2102      	movs	r1, #2
 800e112:	f361 0301 	bfi	r3, r1, #0, #2
 800e116:	7013      	strb	r3, [r2, #0]
      Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	0c98      	lsrs	r0, r3, #18
 800e11c:	79fa      	ldrb	r2, [r7, #7]
 800e11e:	490c      	ldr	r1, [pc, #48]	; (800e150 <CAD_Check_HW_SNK+0x104>)
 800e120:	4613      	mov	r3, r2
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	1a9b      	subs	r3, r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	3310      	adds	r3, #16
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	4603      	mov	r3, r0
 800e130:	f003 0303 	and.w	r3, r3, #3
 800e134:	b2d9      	uxtb	r1, r3
 800e136:	7893      	ldrb	r3, [r2, #2]
 800e138:	f361 0383 	bfi	r3, r1, #2, #2
 800e13c:	7093      	strb	r3, [r2, #2]
  }
}
 800e13e:	bf00      	nop
 800e140:	371c      	adds	r7, #28
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	20000388 	.word	0x20000388
 800e150:	20003048 	.word	0x20003048

0800e154 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e15e:	79fa      	ldrb	r2, [r7, #7]
 800e160:	4613      	mov	r3, r2
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	4413      	add	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	4a1e      	ldr	r2, [pc, #120]	; (800e1e4 <ManageStateDetached_SNK+0x90>)
 800e16a:	4413      	add	r3, r2
 800e16c:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e16e:	2302      	movs	r3, #2
 800e170:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800e172:	79fb      	ldrb	r3, [r7, #7]
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff ff69 	bl	800e04c <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	f003 031c 	and.w	r3, r3, #28
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d103      	bne.n	800e190 <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800e188:	f04f 33ff 	mov.w	r3, #4294967295
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	e023      	b.n	800e1d8 <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800e190:	f7f8 fcee 	bl	8006b70 <HAL_GetTick>
 800e194:	4602      	mov	r2, r0
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	7853      	ldrb	r3, [r2, #1]
 800e19e:	2102      	movs	r1, #2
 800e1a0:	f361 0345 	bfi	r3, r1, #1, #5
 800e1a4:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	f7f8 fcee 	bl	8006b88 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff ff4c 	bl	800e04c <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	f003 031c 	and.w	r3, r3, #28
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	7853      	ldrb	r3, [r2, #1]
 800e1c6:	2101      	movs	r1, #1
 800e1c8:	f361 0345 	bfi	r3, r1, #1, #5
 800e1cc:	7053      	strb	r3, [r2, #1]
 800e1ce:	e003      	b.n	800e1d8 <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f008 f86e 	bl	80162b4 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	20000388 	.word	0x20000388

0800e1e8 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b088      	sub	sp, #32
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
 800e1f4:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e1f6:	7bfa      	ldrb	r2, [r7, #15]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	4413      	add	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4a39      	ldr	r2, [pc, #228]	; (800e2e8 <ManageStateAttachedWait_SNK+0x100>)
 800e202:	4413      	add	r3, r2
 800e204:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e206:	2302      	movs	r3, #2
 800e208:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800e20a:	f7f8 fcb1 	bl	8006b70 <HAL_GetTick>
 800e20e:	4602      	mov	r2, r0
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800e218:	7bfb      	ldrb	r3, [r7, #15]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff ff16 	bl	800e04c <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	f003 031c 	and.w	r3, r3, #28
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	2b04      	cmp	r3, #4
 800e22c:	d12c      	bne.n	800e288 <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b78      	cmp	r3, #120	; 0x78
 800e232:	d923      	bls.n	800e27c <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	2101      	movs	r1, #1
 800e238:	4618      	mov	r0, r3
 800e23a:	f007 ffeb 	bl	8016214 <USBPD_PWR_IF_GetVBUSStatus>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b01      	cmp	r3, #1
 800e242:	d11b      	bne.n	800e27c <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	461a      	mov	r2, r3
 800e250:	7bfb      	ldrb	r3, [r7, #15]
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f001 fa4f 	bl	800f6f8 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800e25a:	69ba      	ldr	r2, [r7, #24]
 800e25c:	7853      	ldrb	r3, [r2, #1]
 800e25e:	2103      	movs	r1, #3
 800e260:	f361 0345 	bfi	r3, r1, #1, #5
 800e264:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2202      	movs	r2, #2
 800e26a:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e274:	b2db      	uxtb	r3, r3
 800e276:	461a      	mov	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800e27c:	69ba      	ldr	r2, [r7, #24]
 800e27e:	7813      	ldrb	r3, [r2, #0]
 800e280:	f36f 1345 	bfc	r3, #5, #1
 800e284:	7013      	strb	r3, [r2, #0]
 800e286:	e02a      	b.n	800e2de <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	f003 0320 	and.w	r3, r3, #32
 800e290:	b2db      	uxtb	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10c      	bne.n	800e2b0 <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800e296:	f7f8 fc6b 	bl	8006b70 <HAL_GetTick>
 800e29a:	4602      	mov	r2, r0
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	7813      	ldrb	r3, [r2, #0]
 800e2a4:	f043 0320 	orr.w	r3, r3, #32
 800e2a8:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800e2aa:	230c      	movs	r3, #12
 800e2ac:	61fb      	str	r3, [r7, #28]
 800e2ae:	e016      	b.n	800e2de <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800e2b0:	f7f8 fc5e 	bl	8006b70 <HAL_GetTick>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	2b0c      	cmp	r3, #12
 800e2be:	d90e      	bls.n	800e2de <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	7813      	ldrb	r3, [r2, #0]
 800e2c4:	f36f 1345 	bfc	r3, #5, #1
 800e2c8:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800e2ca:	69ba      	ldr	r2, [r7, #24]
 800e2cc:	7853      	ldrb	r3, [r2, #1]
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	f361 0345 	bfi	r3, r1, #1, #5
 800e2d4:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f008 f809 	bl	80162f0 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800e2de:	69fb      	ldr	r3, [r7, #28]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20000388 	.word	0x20000388

0800e2ec <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e2fa:	7bfa      	ldrb	r2, [r7, #15]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4a2a      	ldr	r2, [pc, #168]	; (800e3b0 <ManageStateAttached_SNK+0xc4>)
 800e306:	4413      	add	r3, r2
 800e308:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e30a:	2302      	movs	r3, #2
 800e30c:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800e30e:	2300      	movs	r3, #0
 800e310:	617b      	str	r3, [r7, #20]
  CLEAR_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);

  for(int32_t index=0; index < CAD_DELAY_READ_CC_STATUS; index++){ __DSB();};
#endif

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800e312:	7bfa      	ldrb	r2, [r7, #15]
 800e314:	4927      	ldr	r1, [pc, #156]	; (800e3b4 <ManageStateAttached_SNK+0xc8>)
 800e316:	4613      	mov	r3, r2
 800e318:	00db      	lsls	r3, r3, #3
 800e31a:	1a9b      	subs	r3, r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	440b      	add	r3, r1
 800e320:	3334      	adds	r3, #52	; 0x34
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d10b      	bne.n	800e340 <ManageStateAttached_SNK+0x54>
 800e328:	7bfa      	ldrb	r2, [r7, #15]
 800e32a:	4922      	ldr	r1, [pc, #136]	; (800e3b4 <ManageStateAttached_SNK+0xc8>)
 800e32c:	4613      	mov	r3, r2
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	1a9b      	subs	r3, r3, r2
 800e332:	00db      	lsls	r3, r3, #3
 800e334:	440b      	add	r3, r1
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	695b      	ldr	r3, [r3, #20]
 800e33a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e33e:	e00a      	b.n	800e356 <ManageStateAttached_SNK+0x6a>
 800e340:	7bfa      	ldrb	r2, [r7, #15]
 800e342:	491c      	ldr	r1, [pc, #112]	; (800e3b4 <ManageStateAttached_SNK+0xc8>)
 800e344:	4613      	mov	r3, r2
 800e346:	00db      	lsls	r3, r3, #3
 800e348:	1a9b      	subs	r3, r3, r2
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	440b      	add	r3, r1
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e356:	613b      	str	r3, [r7, #16]
  if((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
 800e358:	7bfb      	ldrb	r3, [r7, #15]
 800e35a:	2102      	movs	r1, #2
 800e35c:	4618      	mov	r0, r3
 800e35e:	f007 ff59 	bl	8016214 <USBPD_PWR_IF_GetVBUSStatus>
 800e362:	4603      	mov	r3, r0
 800e364:	2b01      	cmp	r3, #1
 800e366:	d11b      	bne.n	800e3a0 <ManageStateAttached_SNK+0xb4>
    &&
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d117      	bne.n	800e3a0 <ManageStateAttached_SNK+0xb4>
     (comp == ccx)                                                            /* confirm that there is no RP */
    )
  {
    HW_SignalDetachment(PortNum);
 800e370:	7bfb      	ldrb	r3, [r7, #15]
 800e372:	4618      	mov	r0, r3
 800e374:	f001 fb0c 	bl	800f990 <HW_SignalDetachment>
    /* restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	7813      	ldrb	r3, [r2, #0]
 800e37c:	f36f 0384 	bfc	r3, #2, #3
 800e380:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800e382:	69ba      	ldr	r2, [r7, #24]
 800e384:	7853      	ldrb	r3, [r2, #1]
 800e386:	2101      	movs	r1, #1
 800e388:	f361 0345 	bfi	r3, r1, #1, #5
 800e38c:	7053      	strb	r3, [r2, #1]
    if(USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	2201      	movs	r2, #1
 800e392:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800e39a:	2300      	movs	r3, #0
 800e39c:	61fb      	str	r3, [r7, #28]
 800e39e:	e001      	b.n	800e3a4 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800e3a0:	230a      	movs	r3, #10
 800e3a2:	61fb      	str	r3, [r7, #28]
  }

  return _timing;
 800e3a4:	69fb      	ldr	r3, [r7, #28]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3720      	adds	r7, #32
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20000388 	.word	0x20000388
 800e3b4:	20003048 	.word	0x20003048

0800e3b8 <LL_AHB1_GRP1_EnableClock>:
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800e3c0:	4b08      	ldr	r3, [pc, #32]	; (800e3e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800e3c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3c4:	4907      	ldr	r1, [pc, #28]	; (800e3e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800e3cc:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800e3ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
}
 800e3d8:	bf00      	nop
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	40021000 	.word	0x40021000

0800e3e8 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 800e3f2:	4b03      	ldr	r3, [pc, #12]	; (800e400 <USBPD_HW_GetUSPDInstance+0x18>)
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	370c      	adds	r7, #12
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	4000a000 	.word	0x4000a000

0800e404 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08e      	sub	sp, #56	; 0x38
 800e408:	af00      	add	r7, sp, #0
 800e40a:	4603      	mov	r3, r0
 800e40c:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800e40e:	f107 030c 	add.w	r3, r7, #12
 800e412:	4618      	mov	r0, r3
 800e414:	f7fc fa68 	bl	800a8e8 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800e418:	2300      	movs	r3, #0
 800e41a:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800e424:	2380      	movs	r3, #128	; 0x80
 800e426:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800e428:	2300      	movs	r3, #0
 800e42a:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800e42c:	2300      	movs	r3, #0
 800e42e:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800e434:	2300      	movs	r3, #0
 800e436:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800e438:	2300      	movs	r3, #0
 800e43a:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800e43c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e440:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800e442:	2001      	movs	r0, #1
 800e444:	f7ff ffb8 	bl	800e3b8 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800e448:	2372      	movs	r3, #114	; 0x72
 800e44a:	633b      	str	r3, [r7, #48]	; 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	461a      	mov	r2, r3
 800e452:	2100      	movs	r1, #0
 800e454:	4803      	ldr	r0, [pc, #12]	; (800e464 <USBPD_HW_Init_DMARxInstance+0x60>)
 800e456:	f7fc fa07 	bl	800a868 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800e45a:	4b03      	ldr	r3, [pc, #12]	; (800e468 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3738      	adds	r7, #56	; 0x38
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	40020000 	.word	0x40020000
 800e468:	40020008 	.word	0x40020008

0800e46c <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	4603      	mov	r3, r0
 800e474:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 800e476:	bf00      	nop
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
	...

0800e484 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08e      	sub	sp, #56	; 0x38
 800e488:	af00      	add	r7, sp, #0
 800e48a:	4603      	mov	r3, r0
 800e48c:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800e48e:	f107 030c 	add.w	r3, r7, #12
 800e492:	4618      	mov	r0, r3
 800e494:	f7fc fa28 	bl	800a8e8 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800e498:	2310      	movs	r3, #16
 800e49a:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800e49c:	2300      	movs	r3, #0
 800e49e:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800e4a4:	2380      	movs	r3, #128	; 0x80
 800e4a6:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800e4bc:	2001      	movs	r0, #1
 800e4be:	f7ff ff7b 	bl	800e3b8 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800e4c2:	2373      	movs	r3, #115	; 0x73
 800e4c4:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800e4c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4ca:	637b      	str	r3, [r7, #52]	; 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800e4cc:	f107 030c 	add.w	r3, r7, #12
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	4803      	ldr	r0, [pc, #12]	; (800e4e4 <USBPD_HW_Init_DMATxInstance+0x60>)
 800e4d6:	f7fc f9c7 	bl	800a868 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800e4da:	4b03      	ldr	r3, [pc, #12]	; (800e4e8 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3738      	adds	r7, #56	; 0x38
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	40020000 	.word	0x40020000
 800e4e8:	4002001c 	.word	0x4002001c

0800e4ec <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800e502:	b480      	push	{r7}
 800e504:	b083      	sub	sp, #12
 800e506:	af00      	add	r7, sp, #0
 800e508:	4603      	mov	r3, r0
 800e50a:	460a      	mov	r2, r1
 800e50c:	71fb      	strb	r3, [r7, #7]
 800e50e:	4613      	mov	r3, r2
 800e510:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX2 PB0 (CC2) */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 800e512:	bf00      	nop
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <LL_UCPD_ClearFlag_FRS>:
  * @rmtoll ICR          FRSEVTIE         LL_UCPD_ClearFlag_FRS
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_FRS(UCPD_TypeDef *UCPDx)
{
 800e51e:	b480      	push	{r7}
 800e520:	b083      	sub	sp, #12
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_FRSEVTCF);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	619a      	str	r2, [r3, #24]
}
 800e532:	bf00      	nop
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800e53e:	b480      	push	{r7}
 800e540:	b083      	sub	sp, #12
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	699b      	ldr	r3, [r3, #24]
 800e54a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	619a      	str	r2, [r3, #24]
}
 800e552:	bf00      	nop
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr

0800e55e <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800e55e:	b480      	push	{r7}
 800e560:	b083      	sub	sp, #12
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	699b      	ldr	r3, [r3, #24]
 800e56a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	619a      	str	r2, [r3, #24]
}
 800e572:	bf00      	nop
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	619a      	str	r2, [r3, #24]
}
 800e592:	bf00      	nop
 800e594:	370c      	adds	r7, #12
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr

0800e59e <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800e59e:	b480      	push	{r7}
 800e5a0:	b083      	sub	sp, #12
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	699b      	ldr	r3, [r3, #24]
 800e5aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	619a      	str	r2, [r3, #24]
}
 800e5b2:	bf00      	nop
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800e5be:	b480      	push	{r7}
 800e5c0:	b083      	sub	sp, #12
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	619a      	str	r2, [r3, #24]
}
 800e5d2:	bf00      	nop
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	619a      	str	r2, [r3, #24]
}
 800e5f2:	bf00      	nop
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	619a      	str	r2, [r3, #24]
}
 800e612:	bf00      	nop
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr

0800e61e <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800e61e:	b480      	push	{r7}
 800e620:	b083      	sub	sp, #12
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	f043 0220 	orr.w	r2, r3, #32
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	619a      	str	r2, [r3, #24]
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800e63e:	b480      	push	{r7}
 800e640:	b083      	sub	sp, #12
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	699b      	ldr	r3, [r3, #24]
 800e64a:	f043 0210 	orr.w	r2, r3, #16
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	619a      	str	r2, [r3, #24]
}
 800e652:	bf00      	nop
 800e654:	370c      	adds	r7, #12
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr

0800e65e <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800e65e:	b480      	push	{r7}
 800e660:	b083      	sub	sp, #12
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	f043 0208 	orr.w	r2, r3, #8
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	619a      	str	r2, [r3, #24]
}
 800e672:	bf00      	nop
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800e67e:	b480      	push	{r7}
 800e680:	b083      	sub	sp, #12
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	f043 0204 	orr.w	r2, r3, #4
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	619a      	str	r2, [r3, #24]
}
 800e692:	bf00      	nop
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	f043 0202 	orr.w	r2, r3, #2
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	619a      	str	r2, [r3, #24]
}
 800e6b2:	bf00      	nop
 800e6b4:	370c      	adds	r7, #12
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr

0800e6be <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f000 f802 	bl	800e6cc <PORTx_IRQHandler>
}
 800e6c8:	bf00      	nop
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800e6d6:	79fa      	ldrb	r2, [r7, #7]
 800e6d8:	497c      	ldr	r1, [pc, #496]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e6da:	4613      	mov	r3, r2
 800e6dc:	00db      	lsls	r3, r3, #3
 800e6de:	1a9b      	subs	r3, r3, r2
 800e6e0:	00db      	lsls	r3, r3, #3
 800e6e2:	440b      	add	r3, r1
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	613b      	str	r3, [r7, #16]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	695b      	ldr	r3, [r3, #20]
 800e6ec:	60fb      	str	r3, [r7, #12]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	691a      	ldr	r2, [r3, #16]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 81ad 	beq.w	800ea56 <PORTx_IRQHandler+0x38a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f003 0302 	and.w	r3, r3, #2
 800e702:	2b00      	cmp	r3, #0
 800e704:	d026      	beq.n	800e754 <PORTx_IRQHandler+0x88>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800e706:	6938      	ldr	r0, [r7, #16]
 800e708:	f7ff ffc9 	bl	800e69e <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e70c:	79fa      	ldrb	r2, [r7, #7]
 800e70e:	496f      	ldr	r1, [pc, #444]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e710:	4613      	mov	r3, r2
 800e712:	00db      	lsls	r3, r3, #3
 800e714:	1a9b      	subs	r3, r3, r2
 800e716:	00db      	lsls	r3, r3, #3
 800e718:	440b      	add	r3, r1
 800e71a:	3304      	adds	r3, #4
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	79fa      	ldrb	r2, [r7, #7]
 800e722:	486a      	ldr	r0, [pc, #424]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e724:	4613      	mov	r3, r2
 800e726:	00db      	lsls	r3, r3, #3
 800e728:	1a9b      	subs	r3, r3, r2
 800e72a:	00db      	lsls	r3, r3, #3
 800e72c:	4403      	add	r3, r0
 800e72e:	3304      	adds	r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f021 0201 	bic.w	r2, r1, #1
 800e736:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800e738:	79fa      	ldrb	r2, [r7, #7]
 800e73a:	4964      	ldr	r1, [pc, #400]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e73c:	4613      	mov	r3, r2
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	1a9b      	subs	r3, r3, r2
 800e742:	00db      	lsls	r3, r3, #3
 800e744:	440b      	add	r3, r1
 800e746:	3314      	adds	r3, #20
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	79fa      	ldrb	r2, [r7, #7]
 800e74c:	2101      	movs	r1, #1
 800e74e:	4610      	mov	r0, r2
 800e750:	4798      	blx	r3
      return;
 800e752:	e180      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f003 0304 	and.w	r3, r3, #4
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d026      	beq.n	800e7ac <PORTx_IRQHandler+0xe0>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800e75e:	6938      	ldr	r0, [r7, #16]
 800e760:	f7ff ff8d 	bl	800e67e <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e764:	79fa      	ldrb	r2, [r7, #7]
 800e766:	4959      	ldr	r1, [pc, #356]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e768:	4613      	mov	r3, r2
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	1a9b      	subs	r3, r3, r2
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	440b      	add	r3, r1
 800e772:	3304      	adds	r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6819      	ldr	r1, [r3, #0]
 800e778:	79fa      	ldrb	r2, [r7, #7]
 800e77a:	4854      	ldr	r0, [pc, #336]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e77c:	4613      	mov	r3, r2
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	1a9b      	subs	r3, r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4403      	add	r3, r0
 800e786:	3304      	adds	r3, #4
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f021 0201 	bic.w	r2, r1, #1
 800e78e:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800e790:	79fa      	ldrb	r2, [r7, #7]
 800e792:	494e      	ldr	r1, [pc, #312]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e794:	4613      	mov	r3, r2
 800e796:	00db      	lsls	r3, r3, #3
 800e798:	1a9b      	subs	r3, r3, r2
 800e79a:	00db      	lsls	r3, r3, #3
 800e79c:	440b      	add	r3, r1
 800e79e:	3314      	adds	r3, #20
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	79fa      	ldrb	r2, [r7, #7]
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4610      	mov	r0, r2
 800e7a8:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum?LPM_PE_0:LPM_PE_1,UTIL_LPM_ENABLE);
#endif
      return;
 800e7aa:	e154      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f003 0308 	and.w	r3, r3, #8
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d026      	beq.n	800e804 <PORTx_IRQHandler+0x138>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800e7b6:	6938      	ldr	r0, [r7, #16]
 800e7b8:	f7ff ff51 	bl	800e65e <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e7bc:	79fa      	ldrb	r2, [r7, #7]
 800e7be:	4943      	ldr	r1, [pc, #268]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	00db      	lsls	r3, r3, #3
 800e7c4:	1a9b      	subs	r3, r3, r2
 800e7c6:	00db      	lsls	r3, r3, #3
 800e7c8:	440b      	add	r3, r1
 800e7ca:	3304      	adds	r3, #4
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	6819      	ldr	r1, [r3, #0]
 800e7d0:	79fa      	ldrb	r2, [r7, #7]
 800e7d2:	483e      	ldr	r0, [pc, #248]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	1a9b      	subs	r3, r3, r2
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	4403      	add	r3, r0
 800e7de:	3304      	adds	r3, #4
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f021 0201 	bic.w	r2, r1, #1
 800e7e6:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800e7e8:	79fa      	ldrb	r2, [r7, #7]
 800e7ea:	4938      	ldr	r1, [pc, #224]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	1a9b      	subs	r3, r3, r2
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	440b      	add	r3, r1
 800e7f6:	3314      	adds	r3, #20
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	79fa      	ldrb	r2, [r7, #7]
 800e7fc:	2102      	movs	r1, #2
 800e7fe:	4610      	mov	r0, r2
 800e800:	4798      	blx	r3
      return;
 800e802:	e128      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* HRSTDISC : the sent of the hrad reset has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f003 0310 	and.w	r3, r3, #16
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <PORTx_IRQHandler+0x14a>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800e80e:	6938      	ldr	r0, [r7, #16]
 800e810:	f7ff ff15 	bl	800e63e <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800e814:	e11f      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f003 0320 	and.w	r3, r3, #32
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d010      	beq.n	800e842 <PORTx_IRQHandler+0x176>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800e820:	6938      	ldr	r0, [r7, #16]
 800e822:	f7ff fefc 	bl	800e61e <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e826:	79fa      	ldrb	r2, [r7, #7]
 800e828:	4928      	ldr	r1, [pc, #160]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e82a:	4613      	mov	r3, r2
 800e82c:	00db      	lsls	r3, r3, #3
 800e82e:	1a9b      	subs	r3, r3, r2
 800e830:	00db      	lsls	r3, r3, #3
 800e832:	440b      	add	r3, r1
 800e834:	3324      	adds	r3, #36	; 0x24
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	79fa      	ldrb	r2, [r7, #7]
 800e83a:	2105      	movs	r1, #5
 800e83c:	4610      	mov	r0, r2
 800e83e:	4798      	blx	r3
      return;
 800e840:	e109      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <PORTx_IRQHandler+0x188>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800e84c:	6938      	ldr	r0, [r7, #16]
 800e84e:	f7ff fed6 	bl	800e5fe <LL_UCPD_ClearFlag_TxUND>
      return;
 800e852:	e100      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d014      	beq.n	800e888 <PORTx_IRQHandler+0x1bc>
    {
      if(LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e862:	2b05      	cmp	r3, #5
 800e864:	d10c      	bne.n	800e880 <PORTx_IRQHandler+0x1b4>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800e866:	79fa      	ldrb	r2, [r7, #7]
 800e868:	4918      	ldr	r1, [pc, #96]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e86a:	4613      	mov	r3, r2
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	1a9b      	subs	r3, r3, r2
 800e870:	00db      	lsls	r3, r3, #3
 800e872:	440b      	add	r3, r1
 800e874:	331c      	adds	r3, #28
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	79fa      	ldrb	r2, [r7, #7]
 800e87a:	2106      	movs	r1, #6
 800e87c:	4610      	mov	r0, r2
 800e87e:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800e880:	6938      	ldr	r0, [r7, #16]
 800e882:	f7ff feac 	bl	800e5de <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum?LPM_PE_0:LPM_PE_1,UTIL_LPM_DISABLE);
#endif
      return;
 800e886:	e0e6      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d010      	beq.n	800e8b4 <PORTx_IRQHandler+0x1e8>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e892:	79fa      	ldrb	r2, [r7, #7]
 800e894:	490d      	ldr	r1, [pc, #52]	; (800e8cc <PORTx_IRQHandler+0x200>)
 800e896:	4613      	mov	r3, r2
 800e898:	00db      	lsls	r3, r3, #3
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	440b      	add	r3, r1
 800e8a0:	331c      	adds	r3, #28
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	79fa      	ldrb	r2, [r7, #7]
 800e8a6:	2105      	movs	r1, #5
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800e8ac:	6938      	ldr	r0, [r7, #16]
 800e8ae:	f7ff fe86 	bl	800e5be <LL_UCPD_ClearFlag_RxHRST>
      return;
 800e8b2:	e0d0      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00a      	beq.n	800e8d4 <PORTx_IRQHandler+0x208>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag = 1;
 800e8be:	4b04      	ldr	r3, [pc, #16]	; (800e8d0 <PORTx_IRQHandler+0x204>)
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800e8c4:	6938      	ldr	r0, [r7, #16]
 800e8c6:	f7ff fe6a 	bl	800e59e <LL_UCPD_ClearFlag_RxOvr>
      return;
 800e8ca:	e0c4      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
 800e8cc:	20003048 	.word	0x20003048
 800e8d0:	20000394 	.word	0x20000394
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d06b      	beq.n	800e9b6 <PORTx_IRQHandler+0x2ea>
    {
      /* for DMA mode add a control to check if the number of data received is corresponding with the number of
         data receive by USBPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800e8de:	6938      	ldr	r0, [r7, #16]
 800e8e0:	f7ff fe4d 	bl	800e57e <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e8e4:	79fa      	ldrb	r2, [r7, #7]
 800e8e6:	495d      	ldr	r1, [pc, #372]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	1a9b      	subs	r3, r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	440b      	add	r3, r1
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6819      	ldr	r1, [r3, #0]
 800e8f8:	79fa      	ldrb	r2, [r7, #7]
 800e8fa:	4858      	ldr	r0, [pc, #352]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	1a9b      	subs	r3, r3, r2
 800e902:	00db      	lsls	r3, r3, #3
 800e904:	4403      	add	r3, r0
 800e906:	3308      	adds	r3, #8
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f021 0201 	bic.w	r2, r1, #1
 800e90e:	601a      	str	r2, [r3, #0]

#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum?LPM_PE_0:LPM_PE_1, UTIL_LPM_ENABLE);
#endif

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e916:	2b00      	cmp	r3, #0
 800e918:	d113      	bne.n	800e942 <PORTx_IRQHandler+0x276>
 800e91a:	4b51      	ldr	r3, [pc, #324]	; (800ea60 <PORTx_IRQHandler+0x394>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10f      	bne.n	800e942 <PORTx_IRQHandler+0x276>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800e922:	79fa      	ldrb	r2, [r7, #7]
 800e924:	494d      	ldr	r1, [pc, #308]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e926:	4613      	mov	r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	1a9b      	subs	r3, r3, r2
 800e92c:	00db      	lsls	r3, r3, #3
 800e92e:	440b      	add	r3, r1
 800e930:	3320      	adds	r3, #32
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	693a      	ldr	r2, [r7, #16]
 800e936:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e938:	f002 0107 	and.w	r1, r2, #7
 800e93c:	79fa      	ldrb	r2, [r7, #7]
 800e93e:	4610      	mov	r0, r2
 800e940:	4798      	blx	r3
      }
      ovrflag = 0;
 800e942:	4b47      	ldr	r3, [pc, #284]	; (800ea60 <PORTx_IRQHandler+0x394>)
 800e944:	2200      	movs	r2, #0
 800e946:	701a      	strb	r2, [r3, #0]

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800e948:	79fa      	ldrb	r2, [r7, #7]
 800e94a:	4944      	ldr	r1, [pc, #272]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e94c:	4613      	mov	r3, r2
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	1a9b      	subs	r3, r3, r2
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	440b      	add	r3, r1
 800e956:	3330      	adds	r3, #48	; 0x30
 800e958:	6818      	ldr	r0, [r3, #0]
 800e95a:	79fa      	ldrb	r2, [r7, #7]
 800e95c:	493f      	ldr	r1, [pc, #252]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e95e:	4613      	mov	r3, r2
 800e960:	00db      	lsls	r3, r3, #3
 800e962:	1a9b      	subs	r3, r3, r2
 800e964:	00db      	lsls	r3, r3, #3
 800e966:	440b      	add	r3, r1
 800e968:	3308      	adds	r3, #8
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4602      	mov	r2, r0
 800e96e:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800e970:	79fa      	ldrb	r2, [r7, #7]
 800e972:	493a      	ldr	r1, [pc, #232]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e974:	4613      	mov	r3, r2
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	1a9b      	subs	r3, r3, r2
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	440b      	add	r3, r1
 800e97e:	3308      	adds	r3, #8
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f44f 7284 	mov.w	r2, #264	; 0x108
 800e986:	605a      	str	r2, [r3, #4]

      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e988:	79fa      	ldrb	r2, [r7, #7]
 800e98a:	4934      	ldr	r1, [pc, #208]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e98c:	4613      	mov	r3, r2
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	1a9b      	subs	r3, r3, r2
 800e992:	00db      	lsls	r3, r3, #3
 800e994:	440b      	add	r3, r1
 800e996:	3308      	adds	r3, #8
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	6819      	ldr	r1, [r3, #0]
 800e99c:	79fa      	ldrb	r2, [r7, #7]
 800e99e:	482f      	ldr	r0, [pc, #188]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	00db      	lsls	r3, r3, #3
 800e9a4:	1a9b      	subs	r3, r3, r2
 800e9a6:	00db      	lsls	r3, r3, #3
 800e9a8:	4403      	add	r3, r0
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f041 0201 	orr.w	r2, r1, #1
 800e9b2:	601a      	str	r2, [r3, #0]
      return;
 800e9b4:	e04f      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1)) || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d104      	bne.n	800e9ca <PORTx_IRQHandler+0x2fe>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d010      	beq.n	800e9ec <PORTx_IRQHandler+0x320>
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800e9ca:	6938      	ldr	r0, [r7, #16]
 800e9cc:	f7ff fdc7 	bl	800e55e <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800e9d0:	6938      	ldr	r0, [r7, #16]
 800e9d2:	f7ff fdb4 	bl	800e53e <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800e9d6:	79fa      	ldrb	r2, [r7, #7]
 800e9d8:	4920      	ldr	r1, [pc, #128]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800e9da:	4613      	mov	r3, r2
 800e9dc:	00db      	lsls	r3, r3, #3
 800e9de:	1a9b      	subs	r3, r3, r2
 800e9e0:	00db      	lsls	r3, r3, #3
 800e9e2:	440b      	add	r3, r1
 800e9e4:	332c      	adds	r3, #44	; 0x2c
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800e9ea:	e034      	b.n	800ea56 <PORTx_IRQHandler+0x38a>
    }

    /* check FRSEVTIE */
    if (UCPD_SR_FRSEVT == (_interrupt & UCPD_SR_FRSEVT))
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d02f      	beq.n	800ea56 <PORTx_IRQHandler+0x38a>
    {
      LL_UCPD_ClearFlag_FRS(hucpd);
 800e9f6:	6938      	ldr	r0, [r7, #16]
 800e9f8:	f7ff fd91 	bl	800e51e <LL_UCPD_ClearFlag_FRS>
      if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800e9fc:	79fa      	ldrb	r2, [r7, #7]
 800e9fe:	4917      	ldr	r1, [pc, #92]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800ea00:	4613      	mov	r3, r2
 800ea02:	00db      	lsls	r3, r3, #3
 800ea04:	1a9b      	subs	r3, r3, r2
 800ea06:	00db      	lsls	r3, r3, #3
 800ea08:	440b      	add	r3, r1
 800ea0a:	3310      	adds	r3, #16
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	f003 0304 	and.w	r3, r3, #4
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d11d      	bne.n	800ea56 <PORTx_IRQHandler+0x38a>
      {
        /* Confirm the FRS by checking if an RP is always present on the current CC line
           we should wait min 6us to refresh the type C state machine */
        for(uint32_t delay=0; delay < 30; delay++){ __DSB(); }       
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	617b      	str	r3, [r7, #20]
 800ea1e:	e005      	b.n	800ea2c <PORTx_IRQHandler+0x360>
  __ASM volatile ("dsb 0xF":::"memory");
 800ea20:	f3bf 8f4f 	dsb	sy
}
 800ea24:	bf00      	nop
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	2b1d      	cmp	r3, #29
 800ea30:	d9f6      	bls.n	800ea20 <PORTx_IRQHandler+0x354>
        
        if (0 != (hucpd->SR & (UCPD_SR_TYPEC_VSTATE_CC1 | UCPD_SR_TYPEC_VSTATE_CC2)))
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	695b      	ldr	r3, [r3, #20]
 800ea36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00b      	beq.n	800ea56 <PORTx_IRQHandler+0x38a>
        {
          Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception(PortNum);
 800ea3e:	79fa      	ldrb	r2, [r7, #7]
 800ea40:	4906      	ldr	r1, [pc, #24]	; (800ea5c <PORTx_IRQHandler+0x390>)
 800ea42:	4613      	mov	r3, r2
 800ea44:	00db      	lsls	r3, r3, #3
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	00db      	lsls	r3, r3, #3
 800ea4a:	440b      	add	r3, r1
 800ea4c:	3328      	adds	r3, #40	; 0x28
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	79fa      	ldrb	r2, [r7, #7]
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
        }
      }
    }
  }
}
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20003048 	.word	0x20003048
 800ea60:	20000394 	.word	0x20000394

0800ea64 <USBPD_PHY_Init>:
  * @param  PowerRole     Power Role of the board.
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer, USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	607a      	str	r2, [r7, #4]
 800ea6e:	603b      	str	r3, [r7, #0]
 800ea70:	4603      	mov	r3, r0
 800ea72:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800ea74:	7bfa      	ldrb	r2, [r7, #15]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	6919      	ldr	r1, [r3, #16]
 800ea7a:	482d      	ldr	r0, [pc, #180]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	1a9b      	subs	r3, r3, r2
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	4403      	add	r3, r0
 800ea86:	3314      	adds	r3, #20
 800ea88:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800ea8a:	7bfa      	ldrb	r2, [r7, #15]
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	68d9      	ldr	r1, [r3, #12]
 800ea90:	4827      	ldr	r0, [pc, #156]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800ea92:	4613      	mov	r3, r2
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	1a9b      	subs	r3, r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	4403      	add	r3, r0
 800ea9c:	3318      	adds	r3, #24
 800ea9e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800eaa0:	7bfa      	ldrb	r2, [r7, #15]
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	6859      	ldr	r1, [r3, #4]
 800eaa6:	4822      	ldr	r0, [pc, #136]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	00db      	lsls	r3, r3, #3
 800eaac:	1a9b      	subs	r3, r3, r2
 800eaae:	00db      	lsls	r3, r3, #3
 800eab0:	4403      	add	r3, r0
 800eab2:	331c      	adds	r3, #28
 800eab4:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800eab6:	7bfa      	ldrb	r2, [r7, #15]
 800eab8:	491d      	ldr	r1, [pc, #116]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800eaba:	4613      	mov	r3, r2
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	1a9b      	subs	r3, r3, r2
 800eac0:	00db      	lsls	r3, r3, #3
 800eac2:	440b      	add	r3, r1
 800eac4:	3320      	adds	r3, #32
 800eac6:	4a1b      	ldr	r2, [pc, #108]	; (800eb34 <USBPD_PHY_Init+0xd0>)
 800eac8:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800eaca:	7bfa      	ldrb	r2, [r7, #15]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	6899      	ldr	r1, [r3, #8]
 800ead0:	4817      	ldr	r0, [pc, #92]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800ead2:	4613      	mov	r3, r2
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	1a9b      	subs	r3, r3, r2
 800ead8:	00db      	lsls	r3, r3, #3
 800eada:	4403      	add	r3, r0
 800eadc:	3324      	adds	r3, #36	; 0x24
 800eade:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800eae0:	7bfa      	ldrb	r2, [r7, #15]
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	6959      	ldr	r1, [r3, #20]
 800eae6:	4812      	ldr	r0, [pc, #72]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800eae8:	4613      	mov	r3, r2
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	1a9b      	subs	r3, r3, r2
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	4403      	add	r3, r0
 800eaf2:	3328      	adds	r3, #40	; 0x28
 800eaf4:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800eaf6:	7bfa      	ldrb	r2, [r7, #15]
 800eaf8:	490d      	ldr	r1, [pc, #52]	; (800eb30 <USBPD_PHY_Init+0xcc>)
 800eafa:	4613      	mov	r3, r2
 800eafc:	00db      	lsls	r3, r3, #3
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	00db      	lsls	r3, r3, #3
 800eb02:	440b      	add	r3, r1
 800eb04:	3330      	adds	r3, #48	; 0x30
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	4a0a      	ldr	r2, [pc, #40]	; (800eb38 <USBPD_PHY_Init+0xd4>)
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	4413      	add	r3, r2
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800eb16:	7bfb      	ldrb	r3, [r7, #15]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	6812      	ldr	r2, [r2, #0]
 800eb1c:	4906      	ldr	r1, [pc, #24]	; (800eb38 <USBPD_PHY_Init+0xd4>)
 800eb1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	20003048 	.word	0x20003048
 800eb34:	0800ece5 	.word	0x0800ece5
 800eb38:	20000398 	.word	0x20000398

0800eb3c <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 800eb46:	f240 3389 	movw	r3, #905	; 0x389
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	370c      	adds	r7, #12
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr

0800eb56 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800eb56:	b480      	push	{r7}
 800eb58:	b083      	sub	sp, #12
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	71fb      	strb	r3, [r7, #7]
  return 30u;
 800eb60:	231e      	movs	r3, #30
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	4603      	mov	r3, r0
 800eb76:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <USBPD_PHY_ResetRequest>:
  * @param  PortNum   Number of the port
  * @param  Type      Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	460a      	mov	r2, r1
 800eb8e:	71fb      	strb	r3, [r7, #7]
 800eb90:	4613      	mov	r3, r2
 800eb92:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800eb94:	79b9      	ldrb	r1, [r7, #6]
 800eb96:	79f8      	ldrb	r0, [r7, #7]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f000 f805 	bl	800ebaa <USBPD_PHY_SendMessage>
 800eba0:	4603      	mov	r3, r0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b082      	sub	sp, #8
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	603a      	str	r2, [r7, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	71fb      	strb	r3, [r7, #7]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	71bb      	strb	r3, [r7, #6]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800ebc0:	88bb      	ldrh	r3, [r7, #4]
 800ebc2:	79b9      	ldrb	r1, [r7, #6]
 800ebc4:	79f8      	ldrb	r0, [r7, #7]
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	f000 fafa 	bl	800f1c0 <USBPD_HW_IF_SendBuffer>
 800ebcc:	4603      	mov	r3, r0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b082      	sub	sp, #8
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	4603      	mov	r3, r0
 800ebde:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800ebe0:	79fb      	ldrb	r3, [r7, #7]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 fbd8 	bl	800f398 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	460a      	mov	r2, r1
 800ebfc:	71fb      	strb	r3, [r7, #7]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800ec02:	79bb      	ldrb	r3, [r7, #6]
 800ec04:	2b07      	cmp	r3, #7
 800ec06:	d103      	bne.n	800ec10 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800ec08:	79fb      	ldrb	r3, [r7, #7]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 faa0 	bl	800f150 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	4603      	mov	r3, r0
 800ec22:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800ec24:	79fb      	ldrb	r3, [r7, #7]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f000 ff1e 	bl	800fa68 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800ec2c:	bf00      	nop
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800ec3e:	79fb      	ldrb	r3, [r7, #7]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 ff29 	bl	800fa98 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	4603      	mov	r3, r0
 800ec58:	6039      	str	r1, [r7, #0]
 800ec5a:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	4a05      	ldr	r2, [pc, #20]	; (800ec74 <USBPD_PHY_SOPSupported+0x24>)
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	4413      	add	r3, r2
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	605a      	str	r2, [r3, #4]
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr
 800ec74:	20000398 	.word	0x20000398

0800ec78 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	4603      	mov	r3, r0
 800ec80:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800ec82:	79fb      	ldrb	r3, [r7, #7]
 800ec84:	4618      	mov	r0, r3
 800ec86:	f000 ff1f 	bl	800fac8 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800ec8a:	4603      	mov	r3, r0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBPD_PHY_FastRoleSwapSignalling>:
 * @brief  function to generate an FRS signalling
 * @param  PortNum  Number of the port.
 * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800ec9e:	79fb      	ldrb	r3, [r7, #7]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 ff51 	bl	800fb48 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800eca6:	bf00      	nop
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b082      	sub	sp, #8
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 800ecb8:	79fb      	ldrb	r3, [r7, #7]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 fcf0 	bl	800f6a0 <USBPD_HW_IF_EnableRX>
}
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f000 fcf9 	bl	800f6cc <USBPD_HW_IF_DisableRX>
}
 800ecda:	bf00      	nop
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
	...

0800ece4 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	6039      	str	r1, [r7, #0]
 800ecee:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] = { USBPD_SOPTYPE_SOP,              USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
 800ecf0:	4a28      	ldr	r2, [pc, #160]	; (800ed94 <PHY_Rx_Completed+0xb0>)
 800ecf2:	f107 0308 	add.w	r3, r7, #8
 800ecf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecfa:	6018      	str	r0, [r3, #0]
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	8019      	strh	r1, [r3, #0]
                                                  USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
                                                };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800ed00:	f107 0208 	add.w	r2, r7, #8
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	4413      	add	r3, r2
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	73fb      	strb	r3, [r7, #15]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	2b04      	cmp	r3, #4
 800ed10:	dc02      	bgt.n	800ed18 <PHY_Rx_Completed+0x34>
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	da19      	bge.n	800ed4a <PHY_Rx_Completed+0x66>
        USBPD_TRACE_Add( USBPD_TRACE_PHY_NOTFRWD,PortNum, _msgtype, Ports[PortNum].ptr_RxBuff, 2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif
      break;
    default :
      break;
 800ed16:	e034      	b.n	800ed82 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 800ed18:	2b06      	cmp	r3, #6
 800ed1a:	d132      	bne.n	800ed82 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	4a1e      	ldr	r2, [pc, #120]	; (800ed98 <PHY_Rx_Completed+0xb4>)
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	4413      	add	r3, r2
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	f003 031e 	and.w	r3, r3, #30
 800ed2a:	2b1e      	cmp	r3, #30
 800ed2c:	d12b      	bne.n	800ed86 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800ed2e:	79fa      	ldrb	r2, [r7, #7]
 800ed30:	491a      	ldr	r1, [pc, #104]	; (800ed9c <PHY_Rx_Completed+0xb8>)
 800ed32:	4613      	mov	r3, r2
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	1a9b      	subs	r3, r3, r2
 800ed38:	00db      	lsls	r3, r3, #3
 800ed3a:	440b      	add	r3, r1
 800ed3c:	331c      	adds	r3, #28
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	79fa      	ldrb	r2, [r7, #7]
 800ed42:	2106      	movs	r1, #6
 800ed44:	4610      	mov	r0, r2
 800ed46:	4798      	blx	r3
      break;
 800ed48:	e01d      	b.n	800ed86 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	4618      	mov	r0, r3
 800ed56:	79fb      	ldrb	r3, [r7, #7]
 800ed58:	4a0f      	ldr	r2, [pc, #60]	; (800ed98 <PHY_Rx_Completed+0xb4>)
 800ed5a:	00db      	lsls	r3, r3, #3
 800ed5c:	4413      	add	r3, r2
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	7bfa      	ldrb	r2, [r7, #15]
 800ed62:	2101      	movs	r1, #1
 800ed64:	fa01 f202 	lsl.w	r2, r1, r2
 800ed68:	b2d2      	uxtb	r2, r2
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	4298      	cmp	r0, r3
 800ed6e:	d10c      	bne.n	800ed8a <PHY_Rx_Completed+0xa6>
         PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	4a09      	ldr	r2, [pc, #36]	; (800ed98 <PHY_Rx_Completed+0xb4>)
 800ed74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed78:	7bf9      	ldrb	r1, [r7, #15]
 800ed7a:	79fa      	ldrb	r2, [r7, #7]
 800ed7c:	4610      	mov	r0, r2
 800ed7e:	4798      	blx	r3
      break;
 800ed80:	e003      	b.n	800ed8a <PHY_Rx_Completed+0xa6>
      break;
 800ed82:	bf00      	nop
 800ed84:	e002      	b.n	800ed8c <PHY_Rx_Completed+0xa8>
      break;
 800ed86:	bf00      	nop
 800ed88:	e000      	b.n	800ed8c <PHY_Rx_Completed+0xa8>
      break;
 800ed8a:	bf00      	nop
  }
}
 800ed8c:	bf00      	nop
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	0801c238 	.word	0x0801c238
 800ed98:	20000398 	.word	0x20000398
 800ed9c:	20003048 	.word	0x20003048

0800eda0 <LL_AHB1_GRP1_EnableClock>:
{
 800eda0:	b480      	push	{r7}
 800eda2:	b085      	sub	sp, #20
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800eda8:	4b08      	ldr	r3, [pc, #32]	; (800edcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800edaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edac:	4907      	ldr	r1, [pc, #28]	; (800edcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800edb4:	4b05      	ldr	r3, [pc, #20]	; (800edcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800edb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4013      	ands	r3, r2
 800edbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800edbe:	68fb      	ldr	r3, [r7, #12]
}
 800edc0:	bf00      	nop
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	40021000 	.word	0x40021000

0800edd0 <LL_APB1_GRP1_EnableClock>:
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800edd8:	4b08      	ldr	r3, [pc, #32]	; (800edfc <LL_APB1_GRP1_EnableClock+0x2c>)
 800edda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eddc:	4907      	ldr	r1, [pc, #28]	; (800edfc <LL_APB1_GRP1_EnableClock+0x2c>)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ede4:	4b05      	ldr	r3, [pc, #20]	; (800edfc <LL_APB1_GRP1_EnableClock+0x2c>)
 800ede6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4013      	ands	r3, r2
 800edec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800edee:	68fb      	ldr	r3, [r7, #12]
}
 800edf0:	bf00      	nop
 800edf2:	3714      	adds	r7, #20
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	40021000 	.word	0x40021000

0800ee00 <LL_UCPD_Enable>:
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	601a      	str	r2, [r3, #0]
}
 800ee14:	bf00      	nop
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <LL_UCPD_Disable>:
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	601a      	str	r2, [r3, #0]
}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	60da      	str	r2, [r3, #12]
}
 800ee54:	bf00      	nop
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	60da      	str	r2, [r3, #12]
}
 800ee74:	bf00      	nop
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	60da      	str	r2, [r3, #12]
}
 800ee94:	bf00      	nop
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	60da      	str	r2, [r3, #12]
}
 800eeb4:	bf00      	nop
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <LL_UCPD_SignalFRSTX>:
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	60da      	str	r2, [r3, #12]
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <LL_UCPD_FRSDetectionEnable>:
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	60da      	str	r2, [r3, #12]
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <LL_UCPD_SetccEnable>:
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	431a      	orrs	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	60da      	str	r2, [r3, #12]
}
 800ef1a:	bf00      	nop
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <LL_UCPD_SetSNKRole>:
{
 800ef26:	b480      	push	{r7}
 800ef28:	b083      	sub	sp, #12
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	60da      	str	r2, [r3, #12]
}
 800ef3a:	bf00      	nop
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr

0800ef46 <LL_UCPD_SetSRCRole>:
{
 800ef46:	b480      	push	{r7}
 800ef48:	b083      	sub	sp, #12
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]
}
 800ef5a:	bf00      	nop
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <LL_UCPD_SetRpResistor>:
{
 800ef66:	b480      	push	{r7}
 800ef68:	b083      	sub	sp, #12
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
 800ef6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	431a      	orrs	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60da      	str	r2, [r3, #12]
}
 800ef80:	bf00      	nop
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <LL_UCPD_SetCCPin>:
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	431a      	orrs	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	60da      	str	r2, [r3, #12]
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <LL_UCPD_RxEnable>:
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	f043 0220 	orr.w	r2, r3, #32
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	60da      	str	r2, [r3, #12]
}
 800efc6:	bf00      	nop
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <LL_UCPD_RxDisable>:
{
 800efd2:	b480      	push	{r7}
 800efd4:	b083      	sub	sp, #12
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	f023 0220 	bic.w	r2, r3, #32
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	60da      	str	r2, [r3, #12]
}
 800efe6:	bf00      	nop
 800efe8:	370c      	adds	r7, #12
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr

0800eff2 <LL_UCPD_SetRxMode>:
{
 800eff2:	b480      	push	{r7}
 800eff4:	b083      	sub	sp, #12
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	f023 0210 	bic.w	r2, r3, #16
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	431a      	orrs	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	60da      	str	r2, [r3, #12]
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <LL_UCPD_SendHardReset>:
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	f043 0208 	orr.w	r2, r3, #8
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	60da      	str	r2, [r3, #12]
}
 800f02c:	bf00      	nop
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <LL_UCPD_SendMessage>:
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	f043 0204 	orr.w	r2, r3, #4
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	60da      	str	r2, [r3, #12]
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <LL_UCPD_SetTxMode>:
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	f023 0203 	bic.w	r2, r3, #3
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	431a      	orrs	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	60da      	str	r2, [r3, #12]
}
 800f072:	bf00      	nop
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800f07e:	b480      	push	{r7}
 800f080:	b083      	sub	sp, #12
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	601a      	str	r2, [r3, #0]
}
 800f092:	bf00      	nop
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800f09e:	b480      	push	{r7}
 800f0a0:	b083      	sub	sp, #12
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	601a      	str	r2, [r3, #0]
}
 800f0b2:	bf00      	nop
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	601a      	str	r2, [r3, #0]
}
 800f0d2:	bf00      	nop
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
}
 800f0f2:	bf00      	nop
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	61da      	str	r2, [r3, #28]
}
 800f10e:	bf00      	nop
 800f110:	370c      	adds	r7, #12
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800f11a:	b480      	push	{r7}
 800f11c:	b083      	sub	sp, #12
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
 800f122:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	621a      	str	r2, [r3, #32]
}
 800f12a:	bf00      	nop
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800f13a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f13e:	f7ff fe47 	bl	800edd0 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800f142:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f146:	f7ff fe2b 	bl	800eda0 <LL_AHB1_GRP1_EnableClock>
}
 800f14a:	bf00      	nop
 800f14c:	bd80      	pop	{r7, pc}
	...

0800f150 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800f15a:	79fa      	ldrb	r2, [r7, #7]
 800f15c:	4917      	ldr	r1, [pc, #92]	; (800f1bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f15e:	4613      	mov	r3, r2
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	1a9b      	subs	r3, r3, r2
 800f164:	00db      	lsls	r3, r3, #3
 800f166:	440b      	add	r3, r1
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	f023 0307 	bic.w	r3, r3, #7
 800f170:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800f172:	79fa      	ldrb	r2, [r7, #7]
 800f174:	4911      	ldr	r1, [pc, #68]	; (800f1bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f176:	4613      	mov	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	1a9b      	subs	r3, r3, r2
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	440b      	add	r3, r1
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff fe4c 	bl	800ee20 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800f188:	79fa      	ldrb	r2, [r7, #7]
 800f18a:	490c      	ldr	r1, [pc, #48]	; (800f1bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f18c:	4613      	mov	r3, r2
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	1a9b      	subs	r3, r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	440b      	add	r3, r1
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7ff fe31 	bl	800ee00 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800f19e:	79fa      	ldrb	r2, [r7, #7]
 800f1a0:	4906      	ldr	r1, [pc, #24]	; (800f1bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	1a9b      	subs	r3, r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	440b      	add	r3, r1
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	60da      	str	r2, [r3, #12]
}
 800f1b2:	bf00      	nop
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20003048 	.word	0x20003048

0800f1c0 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60ba      	str	r2, [r7, #8]
 800f1c8:	607b      	str	r3, [r7, #4]
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73fb      	strb	r3, [r7, #15]
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75fb      	strb	r3, [r7, #23]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
 800f1d8:	2b05      	cmp	r3, #5
 800f1da:	d10b      	bne.n	800f1f4 <USBPD_HW_IF_SendBuffer+0x34>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800f1dc:	7bfa      	ldrb	r2, [r7, #15]
 800f1de:	496a      	ldr	r1, [pc, #424]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	440b      	add	r3, r1
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff ff13 	bl	800f018 <LL_UCPD_SendHardReset>
 800f1f2:	e0c3      	b.n	800f37c <USBPD_HW_IF_SendBuffer+0x1bc>
  }
  else
  {
    switch (Type)
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
 800f1f6:	2b07      	cmp	r3, #7
 800f1f8:	d877      	bhi.n	800f2ea <USBPD_HW_IF_SendBuffer+0x12a>
 800f1fa:	a201      	add	r2, pc, #4	; (adr r2, 800f200 <USBPD_HW_IF_SendBuffer+0x40>)
 800f1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f200:	0800f221 	.word	0x0800f221
 800f204:	0800f253 	.word	0x0800f253
 800f208:	0800f285 	.word	0x0800f285
 800f20c:	0800f2eb 	.word	0x0800f2eb
 800f210:	0800f2eb 	.word	0x0800f2eb
 800f214:	0800f2eb 	.word	0x0800f2eb
 800f218:	0800f2b7 	.word	0x0800f2b7
 800f21c:	0800f2d1 	.word	0x0800f2d1
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800f220:	7bfa      	ldrb	r2, [r7, #15]
 800f222:	4959      	ldr	r1, [pc, #356]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f224:	4613      	mov	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	1a9b      	subs	r3, r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	440b      	add	r3, r1
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4956      	ldr	r1, [pc, #344]	; (800f38c <USBPD_HW_IF_SendBuffer+0x1cc>)
 800f232:	4618      	mov	r0, r3
 800f234:	f7ff ff63 	bl	800f0fe <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800f238:	7bfa      	ldrb	r2, [r7, #15]
 800f23a:	4953      	ldr	r1, [pc, #332]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f23c:	4613      	mov	r3, r2
 800f23e:	00db      	lsls	r3, r3, #3
 800f240:	1a9b      	subs	r3, r3, r2
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	440b      	add	r3, r1
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2100      	movs	r1, #0
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff ff04 	bl	800f058 <LL_UCPD_SetTxMode>
        break;
 800f250:	e04e      	b.n	800f2f0 <USBPD_HW_IF_SendBuffer+0x130>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800f252:	7bfa      	ldrb	r2, [r7, #15]
 800f254:	494c      	ldr	r1, [pc, #304]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f256:	4613      	mov	r3, r2
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	1a9b      	subs	r3, r3, r2
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	440b      	add	r3, r1
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	494b      	ldr	r1, [pc, #300]	; (800f390 <USBPD_HW_IF_SendBuffer+0x1d0>)
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff ff4a 	bl	800f0fe <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800f26a:	7bfa      	ldrb	r2, [r7, #15]
 800f26c:	4946      	ldr	r1, [pc, #280]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f26e:	4613      	mov	r3, r2
 800f270:	00db      	lsls	r3, r3, #3
 800f272:	1a9b      	subs	r3, r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	440b      	add	r3, r1
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2100      	movs	r1, #0
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7ff feeb 	bl	800f058 <LL_UCPD_SetTxMode>
        break;
 800f282:	e035      	b.n	800f2f0 <USBPD_HW_IF_SendBuffer+0x130>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800f284:	7bfa      	ldrb	r2, [r7, #15]
 800f286:	4940      	ldr	r1, [pc, #256]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f288:	4613      	mov	r3, r2
 800f28a:	00db      	lsls	r3, r3, #3
 800f28c:	1a9b      	subs	r3, r3, r2
 800f28e:	00db      	lsls	r3, r3, #3
 800f290:	440b      	add	r3, r1
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	493f      	ldr	r1, [pc, #252]	; (800f394 <USBPD_HW_IF_SendBuffer+0x1d4>)
 800f296:	4618      	mov	r0, r3
 800f298:	f7ff ff31 	bl	800f0fe <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800f29c:	7bfa      	ldrb	r2, [r7, #15]
 800f29e:	493a      	ldr	r1, [pc, #232]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	00db      	lsls	r3, r3, #3
 800f2a4:	1a9b      	subs	r3, r3, r2
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	440b      	add	r3, r1
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7ff fed2 	bl	800f058 <LL_UCPD_SetTxMode>
        break;
 800f2b4:	e01c      	b.n	800f2f0 <USBPD_HW_IF_SendBuffer+0x130>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800f2b6:	7bfa      	ldrb	r2, [r7, #15]
 800f2b8:	4933      	ldr	r1, [pc, #204]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	1a9b      	subs	r3, r3, r2
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	440b      	add	r3, r1
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff fec5 	bl	800f058 <LL_UCPD_SetTxMode>
        break;
 800f2ce:	e00f      	b.n	800f2f0 <USBPD_HW_IF_SendBuffer+0x130>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800f2d0:	7bfa      	ldrb	r2, [r7, #15]
 800f2d2:	492d      	ldr	r1, [pc, #180]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	1a9b      	subs	r3, r3, r2
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	440b      	add	r3, r1
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2102      	movs	r1, #2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff feb8 	bl	800f058 <LL_UCPD_SetTxMode>
        break;
 800f2e8:	e002      	b.n	800f2f0 <USBPD_HW_IF_SendBuffer+0x130>
      }
      default :
        _status = USBPD_ERROR;
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	75fb      	strb	r3, [r7, #23]
        break;
 800f2ee:	bf00      	nop
    }

    if (USBPD_OK == _status)
 800f2f0:	7dfb      	ldrb	r3, [r7, #23]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d142      	bne.n	800f37c <USBPD_HW_IF_SendBuffer+0x1bc>
    {
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum?LPM_PE_0:LPM_PE_1, UTIL_LPM_DISABLE);
#endif
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800f2f6:	7bfa      	ldrb	r2, [r7, #15]
 800f2f8:	4923      	ldr	r1, [pc, #140]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	00db      	lsls	r3, r3, #3
 800f2fe:	1a9b      	subs	r3, r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	440b      	add	r3, r1
 800f304:	3304      	adds	r3, #4
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800f30c:	7bfa      	ldrb	r2, [r7, #15]
 800f30e:	491e      	ldr	r1, [pc, #120]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f310:	4613      	mov	r3, r2
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	1a9b      	subs	r3, r3, r2
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	440b      	add	r3, r1
 800f31a:	3304      	adds	r3, #4
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 800f322:	7bfa      	ldrb	r2, [r7, #15]
 800f324:	4918      	ldr	r1, [pc, #96]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f326:	4613      	mov	r3, r2
 800f328:	00db      	lsls	r3, r3, #3
 800f32a:	1a9b      	subs	r3, r3, r2
 800f32c:	00db      	lsls	r3, r3, #3
 800f32e:	440b      	add	r3, r1
 800f330:	3304      	adds	r3, #4
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6819      	ldr	r1, [r3, #0]
 800f336:	7bfa      	ldrb	r2, [r7, #15]
 800f338:	4813      	ldr	r0, [pc, #76]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f33a:	4613      	mov	r3, r2
 800f33c:	00db      	lsls	r3, r3, #3
 800f33e:	1a9b      	subs	r3, r3, r2
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	4403      	add	r3, r0
 800f344:	3304      	adds	r3, #4
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f041 0201 	orr.w	r2, r1, #1
 800f34c:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800f34e:	7bfa      	ldrb	r2, [r7, #15]
 800f350:	490d      	ldr	r1, [pc, #52]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f352:	4613      	mov	r3, r2
 800f354:	00db      	lsls	r3, r3, #3
 800f356:	1a9b      	subs	r3, r3, r2
 800f358:	00db      	lsls	r3, r3, #3
 800f35a:	440b      	add	r3, r1
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff feda 	bl	800f11a <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800f366:	7bfa      	ldrb	r2, [r7, #15]
 800f368:	4907      	ldr	r1, [pc, #28]	; (800f388 <USBPD_HW_IF_SendBuffer+0x1c8>)
 800f36a:	4613      	mov	r3, r2
 800f36c:	00db      	lsls	r3, r3, #3
 800f36e:	1a9b      	subs	r3, r3, r2
 800f370:	00db      	lsls	r3, r3, #3
 800f372:	440b      	add	r3, r1
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fe5e 	bl	800f038 <LL_UCPD_SendMessage>
    }
  }
  return _status;
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	20003048 	.word	0x20003048
 800f38c:	0008e318 	.word	0x0008e318
 800f390:	00031b18 	.word	0x00031b18
 800f394:	000360d8 	.word	0x000360d8

0800f398 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800f3a2:	79fa      	ldrb	r2, [r7, #7]
 800f3a4:	490c      	ldr	r1, [pc, #48]	; (800f3d8 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	00db      	lsls	r3, r3, #3
 800f3aa:	1a9b      	subs	r3, r3, r2
 800f3ac:	00db      	lsls	r3, r3, #3
 800f3ae:	440b      	add	r3, r1
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2102      	movs	r1, #2
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7ff fe4f 	bl	800f058 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800f3ba:	79fa      	ldrb	r2, [r7, #7]
 800f3bc:	4906      	ldr	r1, [pc, #24]	; (800f3d8 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 800f3be:	4613      	mov	r3, r2
 800f3c0:	00db      	lsls	r3, r3, #3
 800f3c2:	1a9b      	subs	r3, r3, r2
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	440b      	add	r3, r1
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fe34 	bl	800f038 <LL_UCPD_SendMessage>
}
 800f3d0:	bf00      	nop
 800f3d2:	3708      	adds	r7, #8
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	20003048 	.word	0x20003048

0800f3dc <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 800f3e6:	79fa      	ldrb	r2, [r7, #7]
 800f3e8:	4946      	ldr	r1, [pc, #280]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	1a9b      	subs	r3, r3, r2
 800f3f0:	00db      	lsls	r3, r3, #3
 800f3f2:	440b      	add	r3, r1
 800f3f4:	3310      	adds	r3, #16
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	789b      	ldrb	r3, [r3, #2]
 800f3fa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b02      	cmp	r3, #2
 800f402:	d021      	beq.n	800f448 <USBPDM1_AssertRp+0x6c>
 800f404:	2b02      	cmp	r3, #2
 800f406:	dc2d      	bgt.n	800f464 <USBPDM1_AssertRp+0x88>
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d002      	beq.n	800f412 <USBPDM1_AssertRp+0x36>
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d00d      	beq.n	800f42c <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800f410:	e028      	b.n	800f464 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800f412:	79fa      	ldrb	r2, [r7, #7]
 800f414:	493b      	ldr	r1, [pc, #236]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f416:	4613      	mov	r3, r2
 800f418:	00db      	lsls	r3, r3, #3
 800f41a:	1a9b      	subs	r3, r3, r2
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	440b      	add	r3, r1
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2180      	movs	r1, #128	; 0x80
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff fd9e 	bl	800ef66 <LL_UCPD_SetRpResistor>
      break;
 800f42a:	e01c      	b.n	800f466 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800f42c:	79fa      	ldrb	r2, [r7, #7]
 800f42e:	4935      	ldr	r1, [pc, #212]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f430:	4613      	mov	r3, r2
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	1a9b      	subs	r3, r3, r2
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	440b      	add	r3, r1
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f440:	4618      	mov	r0, r3
 800f442:	f7ff fd90 	bl	800ef66 <LL_UCPD_SetRpResistor>
      break;
 800f446:	e00e      	b.n	800f466 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800f448:	79fa      	ldrb	r2, [r7, #7]
 800f44a:	492e      	ldr	r1, [pc, #184]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f44c:	4613      	mov	r3, r2
 800f44e:	00db      	lsls	r3, r3, #3
 800f450:	1a9b      	subs	r3, r3, r2
 800f452:	00db      	lsls	r3, r3, #3
 800f454:	440b      	add	r3, r1
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7ff fd82 	bl	800ef66 <LL_UCPD_SetRpResistor>
      break;
 800f462:	e000      	b.n	800f466 <USBPDM1_AssertRp+0x8a>
      break;
 800f464:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f466:	79fa      	ldrb	r2, [r7, #7]
 800f468:	4926      	ldr	r1, [pc, #152]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f46a:	4613      	mov	r3, r2
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	1a9b      	subs	r3, r3, r2
 800f470:	00db      	lsls	r3, r3, #3
 800f472:	440b      	add	r3, r1
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2100      	movs	r1, #0
 800f478:	4618      	mov	r0, r3
 800f47a:	f7ff fd41 	bl	800ef00 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800f47e:	79fa      	ldrb	r2, [r7, #7]
 800f480:	4920      	ldr	r1, [pc, #128]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f482:	4613      	mov	r3, r2
 800f484:	00db      	lsls	r3, r3, #3
 800f486:	1a9b      	subs	r3, r3, r2
 800f488:	00db      	lsls	r3, r3, #3
 800f48a:	440b      	add	r3, r1
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4618      	mov	r0, r3
 800f490:	f7ff fd59 	bl	800ef46 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800f494:	79fa      	ldrb	r2, [r7, #7]
 800f496:	491b      	ldr	r1, [pc, #108]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f498:	4613      	mov	r3, r2
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	1a9b      	subs	r3, r3, r2
 800f49e:	00db      	lsls	r3, r3, #3
 800f4a0:	440b      	add	r3, r1
 800f4a2:	3334      	adds	r3, #52	; 0x34
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10d      	bne.n	800f4c6 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f4aa:	79fa      	ldrb	r2, [r7, #7]
 800f4ac:	4915      	ldr	r1, [pc, #84]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	00db      	lsls	r3, r3, #3
 800f4b2:	1a9b      	subs	r3, r3, r2
 800f4b4:	00db      	lsls	r3, r3, #3
 800f4b6:	440b      	add	r3, r1
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7ff fd1e 	bl	800ef00 <LL_UCPD_SetccEnable>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
  }
}
 800f4c4:	e01a      	b.n	800f4fc <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f4c6:	79fa      	ldrb	r2, [r7, #7]
 800f4c8:	490e      	ldr	r1, [pc, #56]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	00db      	lsls	r3, r3, #3
 800f4ce:	1a9b      	subs	r3, r3, r2
 800f4d0:	00db      	lsls	r3, r3, #3
 800f4d2:	440b      	add	r3, r1
 800f4d4:	6818      	ldr	r0, [r3, #0]
 800f4d6:	79fa      	ldrb	r2, [r7, #7]
 800f4d8:	490a      	ldr	r1, [pc, #40]	; (800f504 <USBPDM1_AssertRp+0x128>)
 800f4da:	4613      	mov	r3, r2
 800f4dc:	00db      	lsls	r3, r3, #3
 800f4de:	1a9b      	subs	r3, r3, r2
 800f4e0:	00db      	lsls	r3, r3, #3
 800f4e2:	440b      	add	r3, r1
 800f4e4:	3334      	adds	r3, #52	; 0x34
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d102      	bne.n	800f4f2 <USBPDM1_AssertRp+0x116>
 800f4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f0:	e001      	b.n	800f4f6 <USBPDM1_AssertRp+0x11a>
 800f4f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	f7ff fd02 	bl	800ef00 <LL_UCPD_SetccEnable>
}
 800f4fc:	bf00      	nop
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	20003048 	.word	0x20003048

0800f508 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f512:	bf00      	nop
 800f514:	370c      	adds	r7, #12
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
	...

0800f520 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	4603      	mov	r3, r0
 800f528:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800f52a:	79fa      	ldrb	r2, [r7, #7]
 800f52c:	493e      	ldr	r1, [pc, #248]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f52e:	4613      	mov	r3, r2
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	1a9b      	subs	r3, r3, r2
 800f534:	00db      	lsls	r3, r3, #3
 800f536:	440b      	add	r3, r1
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff fc90 	bl	800ee60 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800f540:	79fa      	ldrb	r2, [r7, #7]
 800f542:	4939      	ldr	r1, [pc, #228]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f544:	4613      	mov	r3, r2
 800f546:	00db      	lsls	r3, r3, #3
 800f548:	1a9b      	subs	r3, r3, r2
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	440b      	add	r3, r1
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4618      	mov	r0, r3
 800f552:	f7ff fca5 	bl	800eea0 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f556:	79fa      	ldrb	r2, [r7, #7]
 800f558:	4933      	ldr	r1, [pc, #204]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f55a:	4613      	mov	r3, r2
 800f55c:	00db      	lsls	r3, r3, #3
 800f55e:	1a9b      	subs	r3, r3, r2
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	440b      	add	r3, r1
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2100      	movs	r1, #0
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff fcc9 	bl	800ef00 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800f56e:	79fa      	ldrb	r2, [r7, #7]
 800f570:	492d      	ldr	r1, [pc, #180]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f572:	4613      	mov	r3, r2
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	1a9b      	subs	r3, r3, r2
 800f578:	00db      	lsls	r3, r3, #3
 800f57a:	440b      	add	r3, r1
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff fcd1 	bl	800ef26 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800f584:	79fa      	ldrb	r2, [r7, #7]
 800f586:	4928      	ldr	r1, [pc, #160]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f588:	4613      	mov	r3, r2
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	1a9b      	subs	r3, r3, r2
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	440b      	add	r3, r1
 800f592:	3334      	adds	r3, #52	; 0x34
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10d      	bne.n	800f5b6 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f59a:	79fa      	ldrb	r2, [r7, #7]
 800f59c:	4922      	ldr	r1, [pc, #136]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f59e:	4613      	mov	r3, r2
 800f5a0:	00db      	lsls	r3, r3, #3
 800f5a2:	1a9b      	subs	r3, r3, r2
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	440b      	add	r3, r1
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7ff fca6 	bl	800ef00 <LL_UCPD_SetccEnable>
 800f5b4:	e01a      	b.n	800f5ec <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f5b6:	79fa      	ldrb	r2, [r7, #7]
 800f5b8:	491b      	ldr	r1, [pc, #108]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	1a9b      	subs	r3, r3, r2
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	440b      	add	r3, r1
 800f5c4:	6818      	ldr	r0, [r3, #0]
 800f5c6:	79fa      	ldrb	r2, [r7, #7]
 800f5c8:	4917      	ldr	r1, [pc, #92]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	00db      	lsls	r3, r3, #3
 800f5ce:	1a9b      	subs	r3, r3, r2
 800f5d0:	00db      	lsls	r3, r3, #3
 800f5d2:	440b      	add	r3, r1
 800f5d4:	3334      	adds	r3, #52	; 0x34
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d102      	bne.n	800f5e2 <USBPDM1_AssertRd+0xc2>
 800f5dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5e0:	e001      	b.n	800f5e6 <USBPDM1_AssertRd+0xc6>
 800f5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f7ff fc8a 	bl	800ef00 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 800f5ec:	2001      	movs	r0, #1
 800f5ee:	f7f7 facb 	bl	8006b88 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800f5f2:	79fa      	ldrb	r2, [r7, #7]
 800f5f4:	490c      	ldr	r1, [pc, #48]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	00db      	lsls	r3, r3, #3
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	00db      	lsls	r3, r3, #3
 800f5fe:	440b      	add	r3, r1
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4618      	mov	r0, r3
 800f604:	f7ff fc1c 	bl	800ee40 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800f608:	79fa      	ldrb	r2, [r7, #7]
 800f60a:	4907      	ldr	r1, [pc, #28]	; (800f628 <USBPDM1_AssertRd+0x108>)
 800f60c:	4613      	mov	r3, r2
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	1a9b      	subs	r3, r3, r2
 800f612:	00db      	lsls	r3, r3, #3
 800f614:	440b      	add	r3, r1
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7ff fc31 	bl	800ee80 <LL_UCPD_TypeCDetectionCC1Enable>
#endif
}
 800f61e:	bf00      	nop
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	20003048 	.word	0x20003048

0800f62c <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	4603      	mov	r3, r0
 800f634:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f636:	bf00      	nop
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
	...

0800f644 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800f64e:	79fa      	ldrb	r2, [r7, #7]
 800f650:	4912      	ldr	r1, [pc, #72]	; (800f69c <USBPDM1_EnterErrorRecovery+0x58>)
 800f652:	4613      	mov	r3, r2
 800f654:	00db      	lsls	r3, r3, #3
 800f656:	1a9b      	subs	r3, r3, r2
 800f658:	00db      	lsls	r3, r3, #3
 800f65a:	440b      	add	r3, r1
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff fc71 	bl	800ef46 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800f664:	79fa      	ldrb	r2, [r7, #7]
 800f666:	490d      	ldr	r1, [pc, #52]	; (800f69c <USBPDM1_EnterErrorRecovery+0x58>)
 800f668:	4613      	mov	r3, r2
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	1a9b      	subs	r3, r3, r2
 800f66e:	00db      	lsls	r3, r3, #3
 800f670:	440b      	add	r3, r1
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2100      	movs	r1, #0
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff fc75 	bl	800ef66 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f67c:	79fa      	ldrb	r2, [r7, #7]
 800f67e:	4907      	ldr	r1, [pc, #28]	; (800f69c <USBPDM1_EnterErrorRecovery+0x58>)
 800f680:	4613      	mov	r3, r2
 800f682:	00db      	lsls	r3, r3, #3
 800f684:	1a9b      	subs	r3, r3, r2
 800f686:	00db      	lsls	r3, r3, #3
 800f688:	440b      	add	r3, r1
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7ff fca0 	bl	800efd2 <LL_UCPD_RxDisable>
}
 800f692:	bf00      	nop
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	20003048 	.word	0x20003048

0800f6a0 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800f6aa:	79fa      	ldrb	r2, [r7, #7]
 800f6ac:	4906      	ldr	r1, [pc, #24]	; (800f6c8 <USBPD_HW_IF_EnableRX+0x28>)
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	00db      	lsls	r3, r3, #3
 800f6b2:	1a9b      	subs	r3, r3, r2
 800f6b4:	00db      	lsls	r3, r3, #3
 800f6b6:	440b      	add	r3, r1
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff fc79 	bl	800efb2 <LL_UCPD_RxEnable>
}
 800f6c0:	bf00      	nop
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	20003048 	.word	0x20003048

0800f6cc <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f6d6:	79fa      	ldrb	r2, [r7, #7]
 800f6d8:	4906      	ldr	r1, [pc, #24]	; (800f6f4 <USBPD_HW_IF_DisableRX+0x28>)
 800f6da:	4613      	mov	r3, r2
 800f6dc:	00db      	lsls	r3, r3, #3
 800f6de:	1a9b      	subs	r3, r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	440b      	add	r3, r1
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff fc73 	bl	800efd2 <LL_UCPD_RxDisable>
}
 800f6ec:	bf00      	nop
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	20003048 	.word	0x20003048

0800f6f8 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800f6f8:	b590      	push	{r4, r7, lr}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	6039      	str	r1, [r7, #0]
 800f702:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800f704:	f000 fc46 	bl	800ff94 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800f708:	79fc      	ldrb	r4, [r7, #7]
 800f70a:	79fb      	ldrb	r3, [r7, #7]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fe feb9 	bl	800e484 <USBPD_HW_Init_DMATxInstance>
 800f712:	4602      	mov	r2, r0
 800f714:	499d      	ldr	r1, [pc, #628]	; (800f98c <HW_SignalAttachement+0x294>)
 800f716:	4623      	mov	r3, r4
 800f718:	00db      	lsls	r3, r3, #3
 800f71a:	1b1b      	subs	r3, r3, r4
 800f71c:	00db      	lsls	r3, r3, #3
 800f71e:	440b      	add	r3, r1
 800f720:	3304      	adds	r3, #4
 800f722:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800f724:	79fc      	ldrb	r4, [r7, #7]
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fe fe6b 	bl	800e404 <USBPD_HW_Init_DMARxInstance>
 800f72e:	4602      	mov	r2, r0
 800f730:	4996      	ldr	r1, [pc, #600]	; (800f98c <HW_SignalAttachement+0x294>)
 800f732:	4623      	mov	r3, r4
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	1b1b      	subs	r3, r3, r4
 800f738:	00db      	lsls	r3, r3, #3
 800f73a:	440b      	add	r3, r1
 800f73c:	3308      	adds	r3, #8
 800f73e:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800f740:	79fa      	ldrb	r2, [r7, #7]
 800f742:	4992      	ldr	r1, [pc, #584]	; (800f98c <HW_SignalAttachement+0x294>)
 800f744:	4613      	mov	r3, r2
 800f746:	00db      	lsls	r3, r3, #3
 800f748:	1a9b      	subs	r3, r3, r2
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	440b      	add	r3, r1
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	3330      	adds	r3, #48	; 0x30
 800f752:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800f754:	79fa      	ldrb	r2, [r7, #7]
 800f756:	498d      	ldr	r1, [pc, #564]	; (800f98c <HW_SignalAttachement+0x294>)
 800f758:	4613      	mov	r3, r2
 800f75a:	00db      	lsls	r3, r3, #3
 800f75c:	1a9b      	subs	r3, r3, r2
 800f75e:	00db      	lsls	r3, r3, #3
 800f760:	440b      	add	r3, r1
 800f762:	3308      	adds	r3, #8
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	68fa      	ldr	r2, [r7, #12]
 800f768:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800f76a:	79fa      	ldrb	r2, [r7, #7]
 800f76c:	4987      	ldr	r1, [pc, #540]	; (800f98c <HW_SignalAttachement+0x294>)
 800f76e:	4613      	mov	r3, r2
 800f770:	00db      	lsls	r3, r3, #3
 800f772:	1a9b      	subs	r3, r3, r2
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	440b      	add	r3, r1
 800f778:	3330      	adds	r3, #48	; 0x30
 800f77a:	6818      	ldr	r0, [r3, #0]
 800f77c:	79fa      	ldrb	r2, [r7, #7]
 800f77e:	4983      	ldr	r1, [pc, #524]	; (800f98c <HW_SignalAttachement+0x294>)
 800f780:	4613      	mov	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	1a9b      	subs	r3, r3, r2
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	440b      	add	r3, r1
 800f78a:	3308      	adds	r3, #8
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	4602      	mov	r2, r0
 800f790:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800f792:	79fa      	ldrb	r2, [r7, #7]
 800f794:	497d      	ldr	r1, [pc, #500]	; (800f98c <HW_SignalAttachement+0x294>)
 800f796:	4613      	mov	r3, r2
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	00db      	lsls	r3, r3, #3
 800f79e:	440b      	add	r3, r1
 800f7a0:	3308      	adds	r3, #8
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f44f 7284 	mov.w	r2, #264	; 0x108
 800f7a8:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800f7aa:	79fa      	ldrb	r2, [r7, #7]
 800f7ac:	4977      	ldr	r1, [pc, #476]	; (800f98c <HW_SignalAttachement+0x294>)
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	00db      	lsls	r3, r3, #3
 800f7b2:	1a9b      	subs	r3, r3, r2
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	440b      	add	r3, r1
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6819      	ldr	r1, [r3, #0]
 800f7be:	79fa      	ldrb	r2, [r7, #7]
 800f7c0:	4872      	ldr	r0, [pc, #456]	; (800f98c <HW_SignalAttachement+0x294>)
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	1a9b      	subs	r3, r3, r2
 800f7c8:	00db      	lsls	r3, r3, #3
 800f7ca:	4403      	add	r3, r0
 800f7cc:	3308      	adds	r3, #8
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f041 0201 	orr.w	r2, r1, #1
 800f7d4:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800f7d6:	79fa      	ldrb	r2, [r7, #7]
 800f7d8:	496c      	ldr	r1, [pc, #432]	; (800f98c <HW_SignalAttachement+0x294>)
 800f7da:	4613      	mov	r3, r2
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	1a9b      	subs	r3, r3, r2
 800f7e0:	00db      	lsls	r3, r3, #3
 800f7e2:	440b      	add	r3, r1
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	3324      	adds	r3, #36	; 0x24
 800f7e8:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800f7ea:	79fa      	ldrb	r2, [r7, #7]
 800f7ec:	4967      	ldr	r1, [pc, #412]	; (800f98c <HW_SignalAttachement+0x294>)
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	00db      	lsls	r3, r3, #3
 800f7f2:	1a9b      	subs	r3, r3, r2
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	440b      	add	r3, r1
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	609a      	str	r2, [r3, #8]

  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE | UCPD_IMR_TXMSGABTIE |\
                        UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE    | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800f800:	79fa      	ldrb	r2, [r7, #7]
 800f802:	4962      	ldr	r1, [pc, #392]	; (800f98c <HW_SignalAttachement+0x294>)
 800f804:	4613      	mov	r3, r2
 800f806:	00db      	lsls	r3, r3, #3
 800f808:	1a9b      	subs	r3, r3, r2
 800f80a:	00db      	lsls	r3, r3, #3
 800f80c:	440b      	add	r3, r1
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	6919      	ldr	r1, [r3, #16]
 800f812:	79fa      	ldrb	r2, [r7, #7]
 800f814:	485d      	ldr	r0, [pc, #372]	; (800f98c <HW_SignalAttachement+0x294>)
 800f816:	4613      	mov	r3, r2
 800f818:	00db      	lsls	r3, r3, #3
 800f81a:	1a9b      	subs	r3, r3, r2
 800f81c:	00db      	lsls	r3, r3, #3
 800f81e:	4403      	add	r3, r0
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	f441 53f3 	orr.w	r3, r1, #7776	; 0x1e60
 800f826:	f043 031e 	orr.w	r3, r3, #30
 800f82a:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800f82c:	79fa      	ldrb	r2, [r7, #7]
 800f82e:	4957      	ldr	r1, [pc, #348]	; (800f98c <HW_SignalAttachement+0x294>)
 800f830:	4613      	mov	r3, r2
 800f832:	00db      	lsls	r3, r3, #3
 800f834:	1a9b      	subs	r3, r3, r2
 800f836:	00db      	lsls	r3, r3, #3
 800f838:	440b      	add	r3, r1
 800f83a:	3334      	adds	r3, #52	; 0x34
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800f840:	79fa      	ldrb	r2, [r7, #7]
 800f842:	4952      	ldr	r1, [pc, #328]	; (800f98c <HW_SignalAttachement+0x294>)
 800f844:	4613      	mov	r3, r2
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	1a9b      	subs	r3, r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	440b      	add	r3, r1
 800f84e:	6818      	ldr	r0, [r3, #0]
 800f850:	79fa      	ldrb	r2, [r7, #7]
 800f852:	494e      	ldr	r1, [pc, #312]	; (800f98c <HW_SignalAttachement+0x294>)
 800f854:	4613      	mov	r3, r2
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	1a9b      	subs	r3, r3, r2
 800f85a:	00db      	lsls	r3, r3, #3
 800f85c:	440b      	add	r3, r1
 800f85e:	3334      	adds	r3, #52	; 0x34
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d101      	bne.n	800f86a <HW_SignalAttachement+0x172>
 800f866:	2300      	movs	r3, #0
 800f868:	e000      	b.n	800f86c <HW_SignalAttachement+0x174>
 800f86a:	2340      	movs	r3, #64	; 0x40
 800f86c:	4619      	mov	r1, r3
 800f86e:	f7ff fb8d 	bl	800ef8c <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f872:	79fa      	ldrb	r2, [r7, #7]
 800f874:	4945      	ldr	r1, [pc, #276]	; (800f98c <HW_SignalAttachement+0x294>)
 800f876:	4613      	mov	r3, r2
 800f878:	00db      	lsls	r3, r3, #3
 800f87a:	1a9b      	subs	r3, r3, r2
 800f87c:	00db      	lsls	r3, r3, #3
 800f87e:	440b      	add	r3, r1
 800f880:	330c      	adds	r3, #12
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	7a1b      	ldrb	r3, [r3, #8]
 800f886:	f003 0302 	and.w	r3, r3, #2
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d031      	beq.n	800f8f4 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800f890:	79fa      	ldrb	r2, [r7, #7]
 800f892:	493e      	ldr	r1, [pc, #248]	; (800f98c <HW_SignalAttachement+0x294>)
 800f894:	4613      	mov	r3, r2
 800f896:	00db      	lsls	r3, r3, #3
 800f898:	1a9b      	subs	r3, r3, r2
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	440b      	add	r3, r1
 800f89e:	3334      	adds	r3, #52	; 0x34
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d101      	bne.n	800f8aa <HW_SignalAttachement+0x1b2>
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	e000      	b.n	800f8ac <HW_SignalAttachement+0x1b4>
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	79fb      	ldrb	r3, [r7, #7]
 800f8ae:	4611      	mov	r1, r2
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7fe fe26 	bl	800e502 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800f8b6:	79fa      	ldrb	r2, [r7, #7]
 800f8b8:	4934      	ldr	r1, [pc, #208]	; (800f98c <HW_SignalAttachement+0x294>)
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	00db      	lsls	r3, r3, #3
 800f8be:	1a9b      	subs	r3, r3, r2
 800f8c0:	00db      	lsls	r3, r3, #3
 800f8c2:	440b      	add	r3, r1
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff fb0a 	bl	800eee0 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800f8cc:	79fa      	ldrb	r2, [r7, #7]
 800f8ce:	492f      	ldr	r1, [pc, #188]	; (800f98c <HW_SignalAttachement+0x294>)
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	00db      	lsls	r3, r3, #3
 800f8d4:	1a9b      	subs	r3, r3, r2
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	440b      	add	r3, r1
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	6919      	ldr	r1, [r3, #16]
 800f8de:	79fa      	ldrb	r2, [r7, #7]
 800f8e0:	482a      	ldr	r0, [pc, #168]	; (800f98c <HW_SignalAttachement+0x294>)
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	1a9b      	subs	r3, r3, r2
 800f8e8:	00db      	lsls	r3, r3, #3
 800f8ea:	4403      	add	r3, r0
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
 800f8f2:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  (Ports[PortNum].CCx == CC1) ? LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1) : LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800f8f4:	79fa      	ldrb	r2, [r7, #7]
 800f8f6:	4925      	ldr	r1, [pc, #148]	; (800f98c <HW_SignalAttachement+0x294>)
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	00db      	lsls	r3, r3, #3
 800f8fc:	1a9b      	subs	r3, r3, r2
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	440b      	add	r3, r1
 800f902:	3334      	adds	r3, #52	; 0x34
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d10d      	bne.n	800f926 <HW_SignalAttachement+0x22e>
 800f90a:	79fa      	ldrb	r2, [r7, #7]
 800f90c:	491f      	ldr	r1, [pc, #124]	; (800f98c <HW_SignalAttachement+0x294>)
 800f90e:	4613      	mov	r3, r2
 800f910:	00db      	lsls	r3, r3, #3
 800f912:	1a9b      	subs	r3, r3, r2
 800f914:	00db      	lsls	r3, r3, #3
 800f916:	440b      	add	r3, r1
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f91e:	4618      	mov	r0, r3
 800f920:	f7ff faee 	bl	800ef00 <LL_UCPD_SetccEnable>
 800f924:	e00c      	b.n	800f940 <HW_SignalAttachement+0x248>
 800f926:	79fa      	ldrb	r2, [r7, #7]
 800f928:	4918      	ldr	r1, [pc, #96]	; (800f98c <HW_SignalAttachement+0x294>)
 800f92a:	4613      	mov	r3, r2
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	1a9b      	subs	r3, r3, r2
 800f930:	00db      	lsls	r3, r3, #3
 800f932:	440b      	add	r3, r1
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff fae0 	bl	800ef00 <LL_UCPD_SetccEnable>

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800f940:	79fa      	ldrb	r2, [r7, #7]
 800f942:	4912      	ldr	r1, [pc, #72]	; (800f98c <HW_SignalAttachement+0x294>)
 800f944:	4613      	mov	r3, r2
 800f946:	00db      	lsls	r3, r3, #3
 800f948:	1a9b      	subs	r3, r3, r2
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	440b      	add	r3, r1
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2100      	movs	r1, #0
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fb4d 	bl	800eff2 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800f958:	79fa      	ldrb	r2, [r7, #7]
 800f95a:	490c      	ldr	r1, [pc, #48]	; (800f98c <HW_SignalAttachement+0x294>)
 800f95c:	4613      	mov	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	1a9b      	subs	r3, r3, r2
 800f962:	00db      	lsls	r3, r3, #3
 800f964:	440b      	add	r3, r1
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff fb88 	bl	800f07e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800f96e:	79fa      	ldrb	r2, [r7, #7]
 800f970:	4906      	ldr	r1, [pc, #24]	; (800f98c <HW_SignalAttachement+0x294>)
 800f972:	4613      	mov	r3, r2
 800f974:	00db      	lsls	r3, r3, #3
 800f976:	1a9b      	subs	r3, r3, r2
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	440b      	add	r3, r1
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4618      	mov	r0, r3
 800f980:	f7ff fb9d 	bl	800f0be <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800f984:	bf00      	nop
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd90      	pop	{r4, r7, pc}
 800f98c:	20003048 	.word	0x20003048

0800f990 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	4603      	mov	r3, r0
 800f998:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800f99a:	79fa      	ldrb	r2, [r7, #7]
 800f99c:	4931      	ldr	r1, [pc, #196]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800f99e:	4613      	mov	r3, r2
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	1a9b      	subs	r3, r3, r2
 800f9a4:	00db      	lsls	r3, r3, #3
 800f9a6:	440b      	add	r3, r1
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff fb77 	bl	800f09e <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800f9b0:	79fa      	ldrb	r2, [r7, #7]
 800f9b2:	492c      	ldr	r1, [pc, #176]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	00db      	lsls	r3, r3, #3
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	00db      	lsls	r3, r3, #3
 800f9bc:	440b      	add	r3, r1
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff fb8c 	bl	800f0de <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f9c6:	79fa      	ldrb	r2, [r7, #7]
 800f9c8:	4926      	ldr	r1, [pc, #152]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	00db      	lsls	r3, r3, #3
 800f9ce:	1a9b      	subs	r3, r3, r2
 800f9d0:	00db      	lsls	r3, r3, #3
 800f9d2:	440b      	add	r3, r1
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff fafb 	bl	800efd2 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800f9dc:	79fa      	ldrb	r2, [r7, #7]
 800f9de:	4921      	ldr	r1, [pc, #132]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	00db      	lsls	r3, r3, #3
 800f9e4:	1a9b      	subs	r3, r3, r2
 800f9e6:	00db      	lsls	r3, r3, #3
 800f9e8:	440b      	add	r3, r1
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f9f0:	611a      	str	r2, [r3, #16]
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800f9f2:	79fb      	ldrb	r3, [r7, #7]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fe fd79 	bl	800e4ec <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800f9fa:	79fb      	ldrb	r3, [r7, #7]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe fd35 	bl	800e46c <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800fa02:	79fa      	ldrb	r2, [r7, #7]
 800fa04:	4917      	ldr	r1, [pc, #92]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800fa06:	4613      	mov	r3, r2
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	1a9b      	subs	r3, r3, r2
 800fa0c:	00db      	lsls	r3, r3, #3
 800fa0e:	440b      	add	r3, r1
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fa72 	bl	800ef00 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800fa1c:	79fa      	ldrb	r2, [r7, #7]
 800fa1e:	4911      	ldr	r1, [pc, #68]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800fa20:	4613      	mov	r3, r2
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	1a9b      	subs	r3, r3, r2
 800fa26:	00db      	lsls	r3, r3, #3
 800fa28:	440b      	add	r3, r1
 800fa2a:	3310      	adds	r3, #16
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	f003 0304 	and.w	r3, r3, #4
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d103      	bne.n	800fa42 <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f006 fc57 	bl	80162f0 <BSP_USBPD_PWR_VBUSDeInit>
  }
#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 800fa42:	79fa      	ldrb	r2, [r7, #7]
 800fa44:	4907      	ldr	r1, [pc, #28]	; (800fa64 <HW_SignalDetachment+0xd4>)
 800fa46:	4613      	mov	r3, r2
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	1a9b      	subs	r3, r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	440b      	add	r3, r1
 800fa50:	3334      	adds	r3, #52	; 0x34
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800fa56:	f000 fb21 	bl	801009c <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800fa5a:	bf00      	nop
 800fa5c:	3708      	adds	r7, #8
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	20003048 	.word	0x20003048

0800fa68 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800fa72:	79fa      	ldrb	r2, [r7, #7]
 800fa74:	4907      	ldr	r1, [pc, #28]	; (800fa94 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 800fa76:	4613      	mov	r3, r2
 800fa78:	00db      	lsls	r3, r3, #3
 800fa7a:	1a9b      	subs	r3, r3, r2
 800fa7c:	00db      	lsls	r3, r3, #3
 800fa7e:	440b      	add	r3, r1
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7ff fa6d 	bl	800ef66 <LL_UCPD_SetRpResistor>
}
 800fa8c:	bf00      	nop
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	20003048 	.word	0x20003048

0800fa98 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4603      	mov	r3, r0
 800faa0:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800faa2:	79fa      	ldrb	r2, [r7, #7]
 800faa4:	4907      	ldr	r1, [pc, #28]	; (800fac4 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 800faa6:	4613      	mov	r3, r2
 800faa8:	00db      	lsls	r3, r3, #3
 800faaa:	1a9b      	subs	r3, r3, r2
 800faac:	00db      	lsls	r3, r3, #3
 800faae:	440b      	add	r3, r1
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7ff fa55 	bl	800ef66 <LL_UCPD_SetRpResistor>
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	20003048 	.word	0x20003048

0800fac8 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	4603      	mov	r3, r0
 800fad0:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].CCx)
 800fad2:	79fa      	ldrb	r2, [r7, #7]
 800fad4:	491b      	ldr	r1, [pc, #108]	; (800fb44 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 800fad6:	4613      	mov	r3, r2
 800fad8:	00db      	lsls	r3, r3, #3
 800fada:	1a9b      	subs	r3, r3, r2
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	3334      	adds	r3, #52	; 0x34
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d002      	beq.n	800faee <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d010      	beq.n	800fb0e <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800faec:	e022      	b.n	800fb34 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800faee:	79fa      	ldrb	r2, [r7, #7]
 800faf0:	4914      	ldr	r1, [pc, #80]	; (800fb44 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 800faf2:	4613      	mov	r3, r2
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	1a9b      	subs	r3, r3, r2
 800faf8:	00db      	lsls	r3, r3, #3
 800fafa:	440b      	add	r3, r1
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fb04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fb08:	d111      	bne.n	800fb2e <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e013      	b.n	800fb36 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800fb0e:	79fa      	ldrb	r2, [r7, #7]
 800fb10:	490c      	ldr	r1, [pc, #48]	; (800fb44 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 800fb12:	4613      	mov	r3, r2
 800fb14:	00db      	lsls	r3, r3, #3
 800fb16:	1a9b      	subs	r3, r3, r2
 800fb18:	00db      	lsls	r3, r3, #3
 800fb1a:	440b      	add	r3, r1
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	695b      	ldr	r3, [r3, #20]
 800fb20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800fb24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800fb28:	d103      	bne.n	800fb32 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e003      	b.n	800fb36 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 800fb2e:	bf00      	nop
 800fb30:	e000      	b.n	800fb34 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 800fb32:	bf00      	nop
  }

  return USBPD_FALSE;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	20003048 	.word	0x20003048

0800fb48 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 800fb52:	79fa      	ldrb	r2, [r7, #7]
 800fb54:	4906      	ldr	r1, [pc, #24]	; (800fb70 <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 800fb56:	4613      	mov	r3, r2
 800fb58:	00db      	lsls	r3, r3, #3
 800fb5a:	1a9b      	subs	r3, r3, r2
 800fb5c:	00db      	lsls	r3, r3, #3
 800fb5e:	440b      	add	r3, r1
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff f9ac 	bl	800eec0 <LL_UCPD_SignalFRSTX>
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	20003048 	.word	0x20003048

0800fb74 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800fb7e:	79fb      	ldrb	r3, [r7, #7]
 800fb80:	f107 020c 	add.w	r2, r7, #12
 800fb84:	4611      	mov	r1, r2
 800fb86:	4618      	mov	r0, r3
 800fb88:	f006 fbc6 	bl	8016318 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	b29b      	uxth	r3, r3
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	4603      	mov	r3, r0
 800fba0:	71fb      	strb	r3, [r7, #7]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	f107 020c 	add.w	r2, r7, #12
 800fba8:	4611      	mov	r1, r2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f006 fbd4 	bl	8016358 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	b21b      	sxth	r3, r3
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800fbc4:	4b08      	ldr	r3, [pc, #32]	; (800fbe8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800fbc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fbc8:	4907      	ldr	r1, [pc, #28]	; (800fbe8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800fbd0:	4b05      	ldr	r3, [pc, #20]	; (800fbe8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800fbd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4013      	ands	r3, r2
 800fbd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fbda:	68fb      	ldr	r3, [r7, #12]
}
 800fbdc:	bf00      	nop
 800fbde:	3714      	adds	r7, #20
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr
 800fbe8:	40021000 	.word	0x40021000

0800fbec <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800fbf4:	4b06      	ldr	r3, [pc, #24]	; (800fc10 <LL_APB2_GRP1_DisableClock+0x24>)
 800fbf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	43db      	mvns	r3, r3
 800fbfc:	4904      	ldr	r1, [pc, #16]	; (800fc10 <LL_APB2_GRP1_DisableClock+0x24>)
 800fbfe:	4013      	ands	r3, r2
 800fc00:	660b      	str	r3, [r1, #96]	; 0x60
}
 800fc02:	bf00      	nop
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	40021000 	.word	0x40021000

0800fc14 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f043 0201 	orr.w	r2, r3, #1
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	601a      	str	r2, [r3, #0]
}
 800fc28:	bf00      	nop
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	431a      	orrs	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	601a      	str	r2, [r3, #0]
}
 800fc4e:	bf00      	nop
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr

0800fc5a <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800fc5a:	b480      	push	{r7}
 800fc5c:	b083      	sub	sp, #12
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fc6a:	bf00      	nop
 800fc6c:	370c      	adds	r7, #12
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr

0800fc76 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 800fc76:	b480      	push	{r7}
 800fc78:	b083      	sub	sp, #12
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b083      	sub	sp, #12
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800fc9e:	bf00      	nop
 800fca0:	370c      	adds	r7, #12
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
	...

0800fcac <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d02e      	beq.n	800fd1c <LL_TIM_OC_SetMode+0x70>
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	2b04      	cmp	r3, #4
 800fcc2:	d029      	beq.n	800fd18 <LL_TIM_OC_SetMode+0x6c>
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2b10      	cmp	r3, #16
 800fcc8:	d024      	beq.n	800fd14 <LL_TIM_OC_SetMode+0x68>
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	2b40      	cmp	r3, #64	; 0x40
 800fcce:	d01f      	beq.n	800fd10 <LL_TIM_OC_SetMode+0x64>
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcd6:	d019      	beq.n	800fd0c <LL_TIM_OC_SetMode+0x60>
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcde:	d013      	beq.n	800fd08 <LL_TIM_OC_SetMode+0x5c>
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fce6:	d00d      	beq.n	800fd04 <LL_TIM_OC_SetMode+0x58>
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fcee:	d007      	beq.n	800fd00 <LL_TIM_OC_SetMode+0x54>
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcf6:	d101      	bne.n	800fcfc <LL_TIM_OC_SetMode+0x50>
 800fcf8:	2308      	movs	r3, #8
 800fcfa:	e010      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fcfc:	2309      	movs	r3, #9
 800fcfe:	e00e      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd00:	2307      	movs	r3, #7
 800fd02:	e00c      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd04:	2306      	movs	r3, #6
 800fd06:	e00a      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd08:	2305      	movs	r3, #5
 800fd0a:	e008      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd0c:	2304      	movs	r3, #4
 800fd0e:	e006      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd10:	2303      	movs	r3, #3
 800fd12:	e004      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd14:	2302      	movs	r3, #2
 800fd16:	e002      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e000      	b.n	800fd1e <LL_TIM_OC_SetMode+0x72>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3318      	adds	r3, #24
 800fd24:	4619      	mov	r1, r3
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
 800fd28:	4a0e      	ldr	r2, [pc, #56]	; (800fd64 <LL_TIM_OC_SetMode+0xb8>)
 800fd2a:	5cd3      	ldrb	r3, [r2, r3]
 800fd2c:	440b      	add	r3, r1
 800fd2e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	490c      	ldr	r1, [pc, #48]	; (800fd68 <LL_TIM_OC_SetMode+0xbc>)
 800fd38:	5ccb      	ldrb	r3, [r1, r3]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	4b0b      	ldr	r3, [pc, #44]	; (800fd6c <LL_TIM_OC_SetMode+0xc0>)
 800fd3e:	408b      	lsls	r3, r1
 800fd40:	43db      	mvns	r3, r3
 800fd42:	401a      	ands	r2, r3
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
 800fd46:	4908      	ldr	r1, [pc, #32]	; (800fd68 <LL_TIM_OC_SetMode+0xbc>)
 800fd48:	5ccb      	ldrb	r3, [r1, r3]
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	408b      	lsls	r3, r1
 800fd50:	431a      	orrs	r2, r3
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	601a      	str	r2, [r3, #0]
}
 800fd56:	bf00      	nop
 800fd58:	371c      	adds	r7, #28
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	0801cb88 	.word	0x0801cb88
 800fd68:	0801cb94 	.word	0x0801cb94
 800fd6c:	00010073 	.word	0x00010073

0800fd70 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b087      	sub	sp, #28
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d02e      	beq.n	800fde0 <LL_TIM_OC_SetPolarity+0x70>
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b04      	cmp	r3, #4
 800fd86:	d029      	beq.n	800fddc <LL_TIM_OC_SetPolarity+0x6c>
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	2b10      	cmp	r3, #16
 800fd8c:	d024      	beq.n	800fdd8 <LL_TIM_OC_SetPolarity+0x68>
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2b40      	cmp	r3, #64	; 0x40
 800fd92:	d01f      	beq.n	800fdd4 <LL_TIM_OC_SetPolarity+0x64>
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd9a:	d019      	beq.n	800fdd0 <LL_TIM_OC_SetPolarity+0x60>
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fda2:	d013      	beq.n	800fdcc <LL_TIM_OC_SetPolarity+0x5c>
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdaa:	d00d      	beq.n	800fdc8 <LL_TIM_OC_SetPolarity+0x58>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdb2:	d007      	beq.n	800fdc4 <LL_TIM_OC_SetPolarity+0x54>
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdba:	d101      	bne.n	800fdc0 <LL_TIM_OC_SetPolarity+0x50>
 800fdbc:	2308      	movs	r3, #8
 800fdbe:	e010      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdc0:	2309      	movs	r3, #9
 800fdc2:	e00e      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdc4:	2307      	movs	r3, #7
 800fdc6:	e00c      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdc8:	2306      	movs	r3, #6
 800fdca:	e00a      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdcc:	2305      	movs	r3, #5
 800fdce:	e008      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdd0:	2304      	movs	r3, #4
 800fdd2:	e006      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	e004      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fdd8:	2302      	movs	r3, #2
 800fdda:	e002      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fddc:	2301      	movs	r3, #1
 800fdde:	e000      	b.n	800fde2 <LL_TIM_OC_SetPolarity+0x72>
 800fde0:	2300      	movs	r3, #0
 800fde2:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6a1a      	ldr	r2, [r3, #32]
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
 800fdea:	490b      	ldr	r1, [pc, #44]	; (800fe18 <LL_TIM_OC_SetPolarity+0xa8>)
 800fdec:	5ccb      	ldrb	r3, [r1, r3]
 800fdee:	4619      	mov	r1, r3
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	408b      	lsls	r3, r1
 800fdf4:	43db      	mvns	r3, r3
 800fdf6:	401a      	ands	r2, r3
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	4907      	ldr	r1, [pc, #28]	; (800fe18 <LL_TIM_OC_SetPolarity+0xa8>)
 800fdfc:	5ccb      	ldrb	r3, [r1, r3]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	408b      	lsls	r3, r1
 800fe04:	431a      	orrs	r2, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	621a      	str	r2, [r3, #32]
}
 800fe0a:	bf00      	nop
 800fe0c:	371c      	adds	r7, #28
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	0801cba0 	.word	0x0801cba0

0800fe1c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	683a      	ldr	r2, [r7, #0]
 800fe62:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fe64:	bf00      	nop
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	683a      	ldr	r2, [r7, #0]
 800fe7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f06f 0202 	mvn.w	r2, #2
 800fe9a:	611a      	str	r2, [r3, #16]
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	691b      	ldr	r3, [r3, #16]
 800feb4:	f003 0302 	and.w	r3, r3, #2
 800feb8:	2b02      	cmp	r3, #2
 800feba:	d101      	bne.n	800fec0 <LL_TIM_IsActiveFlag_CC1+0x18>
 800febc:	2301      	movs	r3, #1
 800febe:	e000      	b.n	800fec2 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f06f 0204 	mvn.w	r2, #4
 800fedc:	611a      	str	r2, [r3, #16]
}
 800fede:	bf00      	nop
 800fee0:	370c      	adds	r7, #12
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 800feea:	b480      	push	{r7}
 800feec:	b083      	sub	sp, #12
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	f003 0304 	and.w	r3, r3, #4
 800fefa:	2b04      	cmp	r3, #4
 800fefc:	d101      	bne.n	800ff02 <LL_TIM_IsActiveFlag_CC2+0x18>
 800fefe:	2301      	movs	r3, #1
 800ff00:	e000      	b.n	800ff04 <LL_TIM_IsActiveFlag_CC2+0x1a>
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f06f 0208 	mvn.w	r2, #8
 800ff1e:	611a      	str	r2, [r3, #16]
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	f003 0308 	and.w	r3, r3, #8
 800ff3c:	2b08      	cmp	r3, #8
 800ff3e:	d101      	bne.n	800ff44 <LL_TIM_IsActiveFlag_CC3+0x18>
 800ff40:	2301      	movs	r3, #1
 800ff42:	e000      	b.n	800ff46 <LL_TIM_IsActiveFlag_CC3+0x1a>
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr

0800ff52 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 800ff52:	b480      	push	{r7}
 800ff54:	b083      	sub	sp, #12
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f06f 0210 	mvn.w	r2, #16
 800ff60:	611a      	str	r2, [r3, #16]
}
 800ff62:	bf00      	nop
 800ff64:	370c      	adds	r7, #12
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr

0800ff6e <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
{
 800ff6e:	b480      	push	{r7}
 800ff70:	b083      	sub	sp, #12
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	691b      	ldr	r3, [r3, #16]
 800ff7a:	f003 0310 	and.w	r3, r3, #16
 800ff7e:	2b10      	cmp	r3, #16
 800ff80:	d101      	bne.n	800ff86 <LL_TIM_IsActiveFlag_CC4+0x18>
 800ff82:	2301      	movs	r3, #1
 800ff84:	e000      	b.n	800ff88 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 800ff94:	b598      	push	{r3, r4, r7, lr}
 800ff96:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 800ff98:	4b3b      	ldr	r3, [pc, #236]	; (8010088 <USBPD_TIM_Init+0xf4>)
 800ff9a:	f993 3000 	ldrsb.w	r3, [r3]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d166      	bne.n	8010070 <USBPD_TIM_Init+0xdc>
  {
    TIMX_CLK_ENABLE;
 800ffa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ffa6:	f7ff fe09 	bl	800fbbc <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 800ffaa:	2100      	movs	r1, #0
 800ffac:	4837      	ldr	r0, [pc, #220]	; (801008c <USBPD_TIM_Init+0xf8>)
 800ffae:	f7ff fe41 	bl	800fc34 <LL_TIM_SetCounterMode>
    
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 800ffb2:	4b37      	ldr	r3, [pc, #220]	; (8010090 <USBPD_TIM_Init+0xfc>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a37      	ldr	r2, [pc, #220]	; (8010094 <USBPD_TIM_Init+0x100>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d907      	bls.n	800ffcc <USBPD_TIM_Init+0x38>
 800ffbc:	4b34      	ldr	r3, [pc, #208]	; (8010090 <USBPD_TIM_Init+0xfc>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4a35      	ldr	r2, [pc, #212]	; (8010098 <USBPD_TIM_Init+0x104>)
 800ffc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ffc6:	0c9b      	lsrs	r3, r3, #18
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	e000      	b.n	800ffce <USBPD_TIM_Init+0x3a>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4619      	mov	r1, r3
 800ffd0:	482e      	ldr	r0, [pc, #184]	; (801008c <USBPD_TIM_Init+0xf8>)
 800ffd2:	f7ff fe42 	bl	800fc5a <LL_TIM_SetPrescaler>
    
    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 800ffd6:	4b2e      	ldr	r3, [pc, #184]	; (8010090 <USBPD_TIM_Init+0xfc>)
 800ffd8:	681c      	ldr	r4, [r3, #0]
 800ffda:	482c      	ldr	r0, [pc, #176]	; (801008c <USBPD_TIM_Init+0xf8>)
 800ffdc:	f7ff fe4b 	bl	800fc76 <LL_TIM_GetPrescaler>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	fbb4 f3f3 	udiv	r3, r4, r3
 800ffe8:	2b63      	cmp	r3, #99	; 0x63
 800ffea:	d90d      	bls.n	8010008 <USBPD_TIM_Init+0x74>
 800ffec:	4b28      	ldr	r3, [pc, #160]	; (8010090 <USBPD_TIM_Init+0xfc>)
 800ffee:	681c      	ldr	r4, [r3, #0]
 800fff0:	4826      	ldr	r0, [pc, #152]	; (801008c <USBPD_TIM_Init+0xf8>)
 800fff2:	f7ff fe40 	bl	800fc76 <LL_TIM_GetPrescaler>
 800fff6:	4603      	mov	r3, r0
 800fff8:	3301      	adds	r3, #1
 800fffa:	2264      	movs	r2, #100	; 0x64
 800fffc:	fb02 f303 	mul.w	r3, r2, r3
 8010000:	fbb4 f3f3 	udiv	r3, r4, r3
 8010004:	3b01      	subs	r3, #1
 8010006:	e000      	b.n	801000a <USBPD_TIM_Init+0x76>
 8010008:	2300      	movs	r3, #0
 801000a:	4619      	mov	r1, r3
 801000c:	481f      	ldr	r0, [pc, #124]	; (801008c <USBPD_TIM_Init+0xf8>)
 801000e:	f7ff fe3e 	bl	800fc8e <LL_TIM_SetAutoReload>
    
    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8010012:	2230      	movs	r2, #48	; 0x30
 8010014:	2101      	movs	r1, #1
 8010016:	481d      	ldr	r0, [pc, #116]	; (801008c <USBPD_TIM_Init+0xf8>)
 8010018:	f7ff fe48 	bl	800fcac <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 801001c:	2230      	movs	r2, #48	; 0x30
 801001e:	2110      	movs	r1, #16
 8010020:	481a      	ldr	r0, [pc, #104]	; (801008c <USBPD_TIM_Init+0xf8>)
 8010022:	f7ff fe43 	bl	800fcac <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8010026:	2230      	movs	r2, #48	; 0x30
 8010028:	f44f 7180 	mov.w	r1, #256	; 0x100
 801002c:	4817      	ldr	r0, [pc, #92]	; (801008c <USBPD_TIM_Init+0xf8>)
 801002e:	f7ff fe3d 	bl	800fcac <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8010032:	2230      	movs	r2, #48	; 0x30
 8010034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010038:	4814      	ldr	r0, [pc, #80]	; (801008c <USBPD_TIM_Init+0xf8>)
 801003a:	f7ff fe37 	bl	800fcac <LL_TIM_OC_SetMode>
    
    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 801003e:	2200      	movs	r2, #0
 8010040:	2101      	movs	r1, #1
 8010042:	4812      	ldr	r0, [pc, #72]	; (801008c <USBPD_TIM_Init+0xf8>)
 8010044:	f7ff fe94 	bl	800fd70 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8010048:	2200      	movs	r2, #0
 801004a:	2110      	movs	r1, #16
 801004c:	480f      	ldr	r0, [pc, #60]	; (801008c <USBPD_TIM_Init+0xf8>)
 801004e:	f7ff fe8f 	bl	800fd70 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8010052:	2200      	movs	r2, #0
 8010054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010058:	480c      	ldr	r0, [pc, #48]	; (801008c <USBPD_TIM_Init+0xf8>)
 801005a:	f7ff fe89 	bl	800fd70 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 801005e:	2200      	movs	r2, #0
 8010060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010064:	4809      	ldr	r0, [pc, #36]	; (801008c <USBPD_TIM_Init+0xf8>)
 8010066:	f7ff fe83 	bl	800fd70 <LL_TIM_OC_SetPolarity>
    
    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801006a:	4808      	ldr	r0, [pc, #32]	; (801008c <USBPD_TIM_Init+0xf8>)
 801006c:	f7ff fdd2 	bl	800fc14 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8010070:	4b05      	ldr	r3, [pc, #20]	; (8010088 <USBPD_TIM_Init+0xf4>)
 8010072:	f993 3000 	ldrsb.w	r3, [r3]
 8010076:	b2db      	uxtb	r3, r3
 8010078:	3301      	adds	r3, #1
 801007a:	b2db      	uxtb	r3, r3
 801007c:	b25a      	sxtb	r2, r3
 801007e:	4b02      	ldr	r3, [pc, #8]	; (8010088 <USBPD_TIM_Init+0xf4>)
 8010080:	701a      	strb	r2, [r3, #0]
}
 8010082:	bf00      	nop
 8010084:	bd98      	pop	{r3, r4, r7, pc}
 8010086:	bf00      	nop
 8010088:	200003a0 	.word	0x200003a0
 801008c:	40012c00 	.word	0x40012c00
 8010090:	20000004 	.word	0x20000004
 8010094:	000f423f 	.word	0x000f423f
 8010098:	431bde83 	.word	0x431bde83

0801009c <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0
  timer_initcounter--;
 80100a0:	4b09      	ldr	r3, [pc, #36]	; (80100c8 <USBPD_TIM_DeInit+0x2c>)
 80100a2:	f993 3000 	ldrsb.w	r3, [r3]
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	3b01      	subs	r3, #1
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	b25a      	sxtb	r2, r3
 80100ae:	4b06      	ldr	r3, [pc, #24]	; (80100c8 <USBPD_TIM_DeInit+0x2c>)
 80100b0:	701a      	strb	r2, [r3, #0]
  if(0 == timer_initcounter)
 80100b2:	4b05      	ldr	r3, [pc, #20]	; (80100c8 <USBPD_TIM_DeInit+0x2c>)
 80100b4:	f993 3000 	ldrsb.w	r3, [r3]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d103      	bne.n	80100c4 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 80100bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80100c0:	f7ff fd94 	bl	800fbec <LL_APB2_GRP1_DisableClock>
  }
}
 80100c4:	bf00      	nop
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	200003a0 	.word	0x200003a0

080100cc <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	6039      	str	r1, [r7, #0]
 80100d6:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	2b03      	cmp	r3, #3
 80100dc:	d85e      	bhi.n	801019c <USBPD_TIM_Start+0xd0>
 80100de:	a201      	add	r2, pc, #4	; (adr r2, 80100e4 <USBPD_TIM_Start+0x18>)
 80100e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e4:	080100f5 	.word	0x080100f5
 80100e8:	0801011f 	.word	0x0801011f
 80100ec:	08010149 	.word	0x08010149
 80100f0:	08010173 	.word	0x08010173
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 80100f4:	4b2c      	ldr	r3, [pc, #176]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 80100f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	441a      	add	r2, r3
 80100fc:	4b2b      	ldr	r3, [pc, #172]	; (80101ac <USBPD_TIM_Start+0xe0>)
 80100fe:	fba3 1302 	umull	r1, r3, r3, r2
 8010102:	0b5b      	lsrs	r3, r3, #13
 8010104:	f242 7110 	movw	r1, #10000	; 0x2710
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	4619      	mov	r1, r3
 8010110:	4825      	ldr	r0, [pc, #148]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010112:	f7ff fe83 	bl	800fe1c <LL_TIM_OC_SetCompareCH1>
 8010116:	4824      	ldr	r0, [pc, #144]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010118:	f7ff feb8 	bl	800fe8c <LL_TIM_ClearFlag_CC1>
      break;
 801011c:	e03f      	b.n	801019e <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 801011e:	4b22      	ldr	r3, [pc, #136]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	441a      	add	r2, r3
 8010126:	4b21      	ldr	r3, [pc, #132]	; (80101ac <USBPD_TIM_Start+0xe0>)
 8010128:	fba3 1302 	umull	r1, r3, r3, r2
 801012c:	0b5b      	lsrs	r3, r3, #13
 801012e:	f242 7110 	movw	r1, #10000	; 0x2710
 8010132:	fb01 f303 	mul.w	r3, r1, r3
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	4619      	mov	r1, r3
 801013a:	481b      	ldr	r0, [pc, #108]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 801013c:	f7ff fe7c 	bl	800fe38 <LL_TIM_OC_SetCompareCH2>
 8010140:	4819      	ldr	r0, [pc, #100]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010142:	f7ff fec4 	bl	800fece <LL_TIM_ClearFlag_CC2>
      break;
 8010146:	e02a      	b.n	801019e <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8010148:	4b17      	ldr	r3, [pc, #92]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 801014a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	441a      	add	r2, r3
 8010150:	4b16      	ldr	r3, [pc, #88]	; (80101ac <USBPD_TIM_Start+0xe0>)
 8010152:	fba3 1302 	umull	r1, r3, r3, r2
 8010156:	0b5b      	lsrs	r3, r3, #13
 8010158:	f242 7110 	movw	r1, #10000	; 0x2710
 801015c:	fb01 f303 	mul.w	r3, r1, r3
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	4619      	mov	r1, r3
 8010164:	4810      	ldr	r0, [pc, #64]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010166:	f7ff fe75 	bl	800fe54 <LL_TIM_OC_SetCompareCH3>
 801016a:	480f      	ldr	r0, [pc, #60]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 801016c:	f7ff fed0 	bl	800ff10 <LL_TIM_ClearFlag_CC3>
      break;
 8010170:	e015      	b.n	801019e <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8010172:	4b0d      	ldr	r3, [pc, #52]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	441a      	add	r2, r3
 801017a:	4b0c      	ldr	r3, [pc, #48]	; (80101ac <USBPD_TIM_Start+0xe0>)
 801017c:	fba3 1302 	umull	r1, r3, r3, r2
 8010180:	0b5b      	lsrs	r3, r3, #13
 8010182:	f242 7110 	movw	r1, #10000	; 0x2710
 8010186:	fb01 f303 	mul.w	r3, r1, r3
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	4619      	mov	r1, r3
 801018e:	4806      	ldr	r0, [pc, #24]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010190:	f7ff fe6e 	bl	800fe70 <LL_TIM_OC_SetCompareCH4>
 8010194:	4804      	ldr	r0, [pc, #16]	; (80101a8 <USBPD_TIM_Start+0xdc>)
 8010196:	f7ff fedc 	bl	800ff52 <LL_TIM_ClearFlag_CC4>
      break;
 801019a:	e000      	b.n	801019e <USBPD_TIM_Start+0xd2>
    default:
      break;
 801019c:	bf00      	nop
  }
}
 801019e:	bf00      	nop
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	40012c00 	.word	0x40012c00
 80101ac:	d1b71759 	.word	0xd1b71759

080101b0 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 80101ba:	2301      	movs	r3, #1
 80101bc:	60fb      	str	r3, [r7, #12]
  switch (Id)
 80101be:	79fb      	ldrb	r3, [r7, #7]
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d81f      	bhi.n	8010204 <USBPD_TIM_IsExpired+0x54>
 80101c4:	a201      	add	r2, pc, #4	; (adr r2, 80101cc <USBPD_TIM_IsExpired+0x1c>)
 80101c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ca:	bf00      	nop
 80101cc:	080101dd 	.word	0x080101dd
 80101d0:	080101e7 	.word	0x080101e7
 80101d4:	080101f1 	.word	0x080101f1
 80101d8:	080101fb 	.word	0x080101fb
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 80101dc:	480c      	ldr	r0, [pc, #48]	; (8010210 <USBPD_TIM_IsExpired+0x60>)
 80101de:	f7ff fe63 	bl	800fea8 <LL_TIM_IsActiveFlag_CC1>
 80101e2:	60f8      	str	r0, [r7, #12]
      break;
 80101e4:	e00f      	b.n	8010206 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 80101e6:	480a      	ldr	r0, [pc, #40]	; (8010210 <USBPD_TIM_IsExpired+0x60>)
 80101e8:	f7ff fe7f 	bl	800feea <LL_TIM_IsActiveFlag_CC2>
 80101ec:	60f8      	str	r0, [r7, #12]
      break;
 80101ee:	e00a      	b.n	8010206 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 80101f0:	4807      	ldr	r0, [pc, #28]	; (8010210 <USBPD_TIM_IsExpired+0x60>)
 80101f2:	f7ff fe9b 	bl	800ff2c <LL_TIM_IsActiveFlag_CC3>
 80101f6:	60f8      	str	r0, [r7, #12]
      break;
 80101f8:	e005      	b.n	8010206 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 80101fa:	4805      	ldr	r0, [pc, #20]	; (8010210 <USBPD_TIM_IsExpired+0x60>)
 80101fc:	f7ff feb7 	bl	800ff6e <LL_TIM_IsActiveFlag_CC4>
 8010200:	60f8      	str	r0, [r7, #12]
      break;
 8010202:	e000      	b.n	8010206 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8010204:	bf00      	nop
  }
  return _expired;
 8010206:	68fb      	ldr	r3, [r7, #12]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	40012c00 	.word	0x40012c00

08010214 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010220:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010224:	f006 fd68 	bl	8016cf8 <USBD_static_malloc>
 8010228:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d105      	bne.n	801023c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010238:	2302      	movs	r3, #2
 801023a:	e066      	b.n	801030a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	7c1b      	ldrb	r3, [r3, #16]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d119      	bne.n	8010280 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801024c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010250:	2202      	movs	r2, #2
 8010252:	2181      	movs	r1, #129	; 0x81
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f006 fbf4 	bl	8016a42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2201      	movs	r2, #1
 801025e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010264:	2202      	movs	r2, #2
 8010266:	2101      	movs	r1, #1
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f006 fbea 	bl	8016a42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2201      	movs	r2, #1
 8010272:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2210      	movs	r2, #16
 801027a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801027e:	e016      	b.n	80102ae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010280:	2340      	movs	r3, #64	; 0x40
 8010282:	2202      	movs	r2, #2
 8010284:	2181      	movs	r1, #129	; 0x81
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f006 fbdb 	bl	8016a42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010292:	2340      	movs	r3, #64	; 0x40
 8010294:	2202      	movs	r2, #2
 8010296:	2101      	movs	r1, #1
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f006 fbd2 	bl	8016a42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2210      	movs	r2, #16
 80102aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80102ae:	2308      	movs	r3, #8
 80102b0:	2203      	movs	r2, #3
 80102b2:	2182      	movs	r1, #130	; 0x82
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f006 fbc4 	bl	8016a42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2201      	movs	r2, #1
 80102be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	7c1b      	ldrb	r3, [r3, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d109      	bne.n	80102f8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102ee:	2101      	movs	r1, #1
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f006 fc96 	bl	8016c22 <USBD_LL_PrepareReceive>
 80102f6:	e007      	b.n	8010308 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102fe:	2340      	movs	r3, #64	; 0x40
 8010300:	2101      	movs	r1, #1
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f006 fc8d 	bl	8016c22 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b082      	sub	sp, #8
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
 801031a:	460b      	mov	r3, r1
 801031c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801031e:	2181      	movs	r1, #129	; 0x81
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f006 fbb4 	bl	8016a8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801032c:	2101      	movs	r1, #1
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f006 fbad 	bl	8016a8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801033c:	2182      	movs	r1, #130	; 0x82
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f006 fba5 	bl	8016a8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00e      	beq.n	801037c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801036e:	4618      	mov	r0, r3
 8010370:	f006 fcd0 	bl	8016d14 <USBD_static_free>
    pdev->pClassData = NULL;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3708      	adds	r7, #8
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
	...

08010388 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010398:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801039a:	2300      	movs	r3, #0
 801039c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801039e:	2300      	movs	r3, #0
 80103a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80103a2:	2300      	movs	r3, #0
 80103a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d101      	bne.n	80103b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80103ac:	2303      	movs	r3, #3
 80103ae:	e0af      	b.n	8010510 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d03f      	beq.n	801043c <USBD_CDC_Setup+0xb4>
 80103bc:	2b20      	cmp	r3, #32
 80103be:	f040 809f 	bne.w	8010500 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	88db      	ldrh	r3, [r3, #6]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d02e      	beq.n	8010428 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	b25b      	sxtb	r3, r3
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	da16      	bge.n	8010402 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	683a      	ldr	r2, [r7, #0]
 80103de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80103e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80103e2:	683a      	ldr	r2, [r7, #0]
 80103e4:	88d2      	ldrh	r2, [r2, #6]
 80103e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	88db      	ldrh	r3, [r3, #6]
 80103ec:	2b07      	cmp	r3, #7
 80103ee:	bf28      	it	cs
 80103f0:	2307      	movcs	r3, #7
 80103f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	89fa      	ldrh	r2, [r7, #14]
 80103f8:	4619      	mov	r1, r3
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f001 facf 	bl	801199e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010400:	e085      	b.n	801050e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	785a      	ldrb	r2, [r3, #1]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	88db      	ldrh	r3, [r3, #6]
 8010410:	b2da      	uxtb	r2, r3
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010418:	6939      	ldr	r1, [r7, #16]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	88db      	ldrh	r3, [r3, #6]
 801041e:	461a      	mov	r2, r3
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f001 fae8 	bl	80119f6 <USBD_CtlPrepareRx>
      break;
 8010426:	e072      	b.n	801050e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801042e:	689b      	ldr	r3, [r3, #8]
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	7850      	ldrb	r0, [r2, #1]
 8010434:	2200      	movs	r2, #0
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	4798      	blx	r3
      break;
 801043a:	e068      	b.n	801050e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	785b      	ldrb	r3, [r3, #1]
 8010440:	2b0b      	cmp	r3, #11
 8010442:	d852      	bhi.n	80104ea <USBD_CDC_Setup+0x162>
 8010444:	a201      	add	r2, pc, #4	; (adr r2, 801044c <USBD_CDC_Setup+0xc4>)
 8010446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801044a:	bf00      	nop
 801044c:	0801047d 	.word	0x0801047d
 8010450:	080104f9 	.word	0x080104f9
 8010454:	080104eb 	.word	0x080104eb
 8010458:	080104eb 	.word	0x080104eb
 801045c:	080104eb 	.word	0x080104eb
 8010460:	080104eb 	.word	0x080104eb
 8010464:	080104eb 	.word	0x080104eb
 8010468:	080104eb 	.word	0x080104eb
 801046c:	080104eb 	.word	0x080104eb
 8010470:	080104eb 	.word	0x080104eb
 8010474:	080104a7 	.word	0x080104a7
 8010478:	080104d1 	.word	0x080104d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010482:	b2db      	uxtb	r3, r3
 8010484:	2b03      	cmp	r3, #3
 8010486:	d107      	bne.n	8010498 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010488:	f107 030a 	add.w	r3, r7, #10
 801048c:	2202      	movs	r2, #2
 801048e:	4619      	mov	r1, r3
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f001 fa84 	bl	801199e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010496:	e032      	b.n	80104fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f001 fa0e 	bl	80118bc <USBD_CtlError>
            ret = USBD_FAIL;
 80104a0:	2303      	movs	r3, #3
 80104a2:	75fb      	strb	r3, [r7, #23]
          break;
 80104a4:	e02b      	b.n	80104fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	2b03      	cmp	r3, #3
 80104b0:	d107      	bne.n	80104c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80104b2:	f107 030d 	add.w	r3, r7, #13
 80104b6:	2201      	movs	r2, #1
 80104b8:	4619      	mov	r1, r3
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f001 fa6f 	bl	801199e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80104c0:	e01d      	b.n	80104fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80104c2:	6839      	ldr	r1, [r7, #0]
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f001 f9f9 	bl	80118bc <USBD_CtlError>
            ret = USBD_FAIL;
 80104ca:	2303      	movs	r3, #3
 80104cc:	75fb      	strb	r3, [r7, #23]
          break;
 80104ce:	e016      	b.n	80104fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	2b03      	cmp	r3, #3
 80104da:	d00f      	beq.n	80104fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80104dc:	6839      	ldr	r1, [r7, #0]
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f001 f9ec 	bl	80118bc <USBD_CtlError>
            ret = USBD_FAIL;
 80104e4:	2303      	movs	r3, #3
 80104e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80104e8:	e008      	b.n	80104fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f001 f9e5 	bl	80118bc <USBD_CtlError>
          ret = USBD_FAIL;
 80104f2:	2303      	movs	r3, #3
 80104f4:	75fb      	strb	r3, [r7, #23]
          break;
 80104f6:	e002      	b.n	80104fe <USBD_CDC_Setup+0x176>
          break;
 80104f8:	bf00      	nop
 80104fa:	e008      	b.n	801050e <USBD_CDC_Setup+0x186>
          break;
 80104fc:	bf00      	nop
      }
      break;
 80104fe:	e006      	b.n	801050e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f001 f9da 	bl	80118bc <USBD_CtlError>
      ret = USBD_FAIL;
 8010508:	2303      	movs	r3, #3
 801050a:	75fb      	strb	r3, [r7, #23]
      break;
 801050c:	bf00      	nop
  }

  return (uint8_t)ret;
 801050e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	460b      	mov	r3, r1
 8010522:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801052a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010536:	2303      	movs	r3, #3
 8010538:	e04f      	b.n	80105da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010540:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010542:	78fa      	ldrb	r2, [r7, #3]
 8010544:	6879      	ldr	r1, [r7, #4]
 8010546:	4613      	mov	r3, r2
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	4413      	add	r3, r2
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	440b      	add	r3, r1
 8010550:	3318      	adds	r3, #24
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d029      	beq.n	80105ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010558:	78fa      	ldrb	r2, [r7, #3]
 801055a:	6879      	ldr	r1, [r7, #4]
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	440b      	add	r3, r1
 8010566:	3318      	adds	r3, #24
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	78f9      	ldrb	r1, [r7, #3]
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	460b      	mov	r3, r1
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	440b      	add	r3, r1
 8010574:	00db      	lsls	r3, r3, #3
 8010576:	4403      	add	r3, r0
 8010578:	3338      	adds	r3, #56	; 0x38
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010580:	fb03 f301 	mul.w	r3, r3, r1
 8010584:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010586:	2b00      	cmp	r3, #0
 8010588:	d110      	bne.n	80105ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801058a:	78fa      	ldrb	r2, [r7, #3]
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	4613      	mov	r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	4413      	add	r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	440b      	add	r3, r1
 8010598:	3318      	adds	r3, #24
 801059a:	2200      	movs	r2, #0
 801059c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801059e:	78f9      	ldrb	r1, [r7, #3]
 80105a0:	2300      	movs	r3, #0
 80105a2:	2200      	movs	r2, #0
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f006 fb1b 	bl	8016be0 <USBD_LL_Transmit>
 80105aa:	e015      	b.n	80105d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	2200      	movs	r2, #0
 80105b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00b      	beq.n	80105d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	68ba      	ldr	r2, [r7, #8]
 80105ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80105d4:	78fa      	ldrb	r2, [r7, #3]
 80105d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b084      	sub	sp, #16
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	460b      	mov	r3, r1
 80105ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d101      	bne.n	8010604 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010600:	2303      	movs	r3, #3
 8010602:	e015      	b.n	8010630 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010604:	78fb      	ldrb	r3, [r7, #3]
 8010606:	4619      	mov	r1, r3
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f006 fb2b 	bl	8016c64 <USBD_LL_GetRxDataSize>
 801060e:	4602      	mov	r2, r0
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801062a:	4611      	mov	r1, r2
 801062c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801062e:	2300      	movs	r3, #0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010646:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801064e:	2303      	movs	r3, #3
 8010650:	e01b      	b.n	801068a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d015      	beq.n	8010688 <USBD_CDC_EP0_RxReady+0x50>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010662:	2bff      	cmp	r3, #255	; 0xff
 8010664:	d010      	beq.n	8010688 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	68fa      	ldr	r2, [r7, #12]
 8010670:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010674:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010676:	68fa      	ldr	r2, [r7, #12]
 8010678:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801067c:	b292      	uxth	r2, r2
 801067e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	22ff      	movs	r2, #255	; 0xff
 8010684:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010688:	2300      	movs	r3, #0
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
	...

08010694 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2243      	movs	r2, #67	; 0x43
 80106a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80106a2:	4b03      	ldr	r3, [pc, #12]	; (80106b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	200000b8 	.word	0x200000b8

080106b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b083      	sub	sp, #12
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2243      	movs	r2, #67	; 0x43
 80106c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80106c2:	4b03      	ldr	r3, [pc, #12]	; (80106d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr
 80106d0:	20000074 	.word	0x20000074

080106d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2243      	movs	r2, #67	; 0x43
 80106e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80106e2:	4b03      	ldr	r3, [pc, #12]	; (80106f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr
 80106f0:	200000fc 	.word	0x200000fc

080106f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	220a      	movs	r2, #10
 8010700:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010702:	4b03      	ldr	r3, [pc, #12]	; (8010710 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr
 8010710:	20000030 	.word	0x20000030

08010714 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010724:	2303      	movs	r3, #3
 8010726:	e004      	b.n	8010732 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	683a      	ldr	r2, [r7, #0]
 801072c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801073e:	b480      	push	{r7}
 8010740:	b087      	sub	sp, #28
 8010742:	af00      	add	r7, sp, #0
 8010744:	60f8      	str	r0, [r7, #12]
 8010746:	60b9      	str	r1, [r7, #8]
 8010748:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010750:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d101      	bne.n	801075c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010758:	2303      	movs	r3, #3
 801075a:	e008      	b.n	801076e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801076c:	2300      	movs	r3, #0
}
 801076e:	4618      	mov	r0, r3
 8010770:	371c      	adds	r7, #28
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801077a:	b480      	push	{r7}
 801077c:	b085      	sub	sp, #20
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801078a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010792:	2303      	movs	r3, #3
 8010794:	e004      	b.n	80107a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	683a      	ldr	r2, [r7, #0]
 801079a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3714      	adds	r7, #20
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80107bc:	2301      	movs	r3, #1
 80107be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d101      	bne.n	80107ce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80107ca:	2303      	movs	r3, #3
 80107cc:	e01a      	b.n	8010804 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d114      	bne.n	8010802 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	2201      	movs	r2, #1
 80107dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80107f6:	2181      	movs	r1, #129	; 0x81
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f006 f9f1 	bl	8016be0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80107fe:	2300      	movs	r3, #0
 8010800:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010802:	7bfb      	ldrb	r3, [r7, #15]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3710      	adds	r7, #16
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801081a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010826:	2303      	movs	r3, #3
 8010828:	e016      	b.n	8010858 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	7c1b      	ldrb	r3, [r3, #16]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d109      	bne.n	8010846 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010838:	f44f 7300 	mov.w	r3, #512	; 0x200
 801083c:	2101      	movs	r1, #1
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f006 f9ef 	bl	8016c22 <USBD_LL_PrepareReceive>
 8010844:	e007      	b.n	8010856 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801084c:	2340      	movs	r3, #64	; 0x40
 801084e:	2101      	movs	r1, #1
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f006 f9e6 	bl	8016c22 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	4613      	mov	r3, r2
 801086c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010874:	2303      	movs	r3, #3
 8010876:	e01f      	b.n	80108b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2200      	movs	r2, #0
 801088c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d003      	beq.n	801089e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2201      	movs	r2, #1
 80108a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	79fa      	ldrb	r2, [r7, #7]
 80108aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f006 f84d 	bl	801694c <USBD_LL_Init>
 80108b2:	4603      	mov	r3, r0
 80108b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80108b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3718      	adds	r7, #24
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80108ca:	2300      	movs	r3, #0
 80108cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d101      	bne.n	80108d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80108d4:	2303      	movs	r3, #3
 80108d6:	e016      	b.n	8010906 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	683a      	ldr	r2, [r7, #0]
 80108dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00b      	beq.n	8010904 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f4:	f107 020e 	add.w	r2, r7, #14
 80108f8:	4610      	mov	r0, r2
 80108fa:	4798      	blx	r3
 80108fc:	4602      	mov	r2, r0
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b082      	sub	sp, #8
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f006 f878 	bl	8016a0c <USBD_LL_Start>
 801091c:	4603      	mov	r3, r0
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010926:	b480      	push	{r7}
 8010928:	b083      	sub	sp, #12
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	460b      	mov	r3, r1
 8010946:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010948:	2303      	movs	r3, #3
 801094a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010952:	2b00      	cmp	r3, #0
 8010954:	d009      	beq.n	801096a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	78fa      	ldrb	r2, [r7, #3]
 8010960:	4611      	mov	r1, r2
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	4798      	blx	r3
 8010966:	4603      	mov	r3, r0
 8010968:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801096a:	7bfb      	ldrb	r3, [r7, #15]
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	460b      	mov	r3, r1
 801097e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010986:	2b00      	cmp	r3, #0
 8010988:	d007      	beq.n	801099a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	78fa      	ldrb	r2, [r7, #3]
 8010994:	4611      	mov	r1, r2
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	4798      	blx	r3
  }

  return USBD_OK;
 801099a:	2300      	movs	r3, #0
}
 801099c:	4618      	mov	r0, r3
 801099e:	3708      	adds	r7, #8
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 ff46 	bl	8011848 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80109ca:	461a      	mov	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80109d8:	f003 031f 	and.w	r3, r3, #31
 80109dc:	2b02      	cmp	r3, #2
 80109de:	d01a      	beq.n	8010a16 <USBD_LL_SetupStage+0x72>
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d822      	bhi.n	8010a2a <USBD_LL_SetupStage+0x86>
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <USBD_LL_SetupStage+0x4a>
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d00a      	beq.n	8010a02 <USBD_LL_SetupStage+0x5e>
 80109ec:	e01d      	b.n	8010a2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f9ee 	bl	8010dd8 <USBD_StdDevReq>
 80109fc:	4603      	mov	r3, r0
 80109fe:	73fb      	strb	r3, [r7, #15]
      break;
 8010a00:	e020      	b.n	8010a44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a08:	4619      	mov	r1, r3
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fa52 	bl	8010eb4 <USBD_StdItfReq>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]
      break;
 8010a14:	e016      	b.n	8010a44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fa91 	bl	8010f46 <USBD_StdEPReq>
 8010a24:	4603      	mov	r3, r0
 8010a26:	73fb      	strb	r3, [r7, #15]
      break;
 8010a28:	e00c      	b.n	8010a44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010a30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	4619      	mov	r1, r3
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f006 f847 	bl	8016acc <USBD_LL_StallEP>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	73fb      	strb	r3, [r7, #15]
      break;
 8010a42:	bf00      	nop
  }

  return ret;
 8010a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b086      	sub	sp, #24
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	460b      	mov	r3, r1
 8010a58:	607a      	str	r2, [r7, #4]
 8010a5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010a5c:	7afb      	ldrb	r3, [r7, #11]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d138      	bne.n	8010ad4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010a68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010a70:	2b03      	cmp	r3, #3
 8010a72:	d14a      	bne.n	8010b0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	689a      	ldr	r2, [r3, #8]
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d913      	bls.n	8010aa8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	689a      	ldr	r2, [r3, #8]
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	1ad2      	subs	r2, r2, r3
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	68da      	ldr	r2, [r3, #12]
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	4293      	cmp	r3, r2
 8010a98:	bf28      	it	cs
 8010a9a:	4613      	movcs	r3, r2
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6879      	ldr	r1, [r7, #4]
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 ffc5 	bl	8011a30 <USBD_CtlContinueRx>
 8010aa6:	e030      	b.n	8010b0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b03      	cmp	r3, #3
 8010ab2:	d10b      	bne.n	8010acc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aba:	691b      	ldr	r3, [r3, #16]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d005      	beq.n	8010acc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ac6:	691b      	ldr	r3, [r3, #16]
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 ffc0 	bl	8011a52 <USBD_CtlSendStatus>
 8010ad2:	e01a      	b.n	8010b0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	2b03      	cmp	r3, #3
 8010ade:	d114      	bne.n	8010b0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ae6:	699b      	ldr	r3, [r3, #24]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00e      	beq.n	8010b0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010af2:	699b      	ldr	r3, [r3, #24]
 8010af4:	7afa      	ldrb	r2, [r7, #11]
 8010af6:	4611      	mov	r1, r2
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	4798      	blx	r3
 8010afc:	4603      	mov	r3, r0
 8010afe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010b00:	7dfb      	ldrb	r3, [r7, #23]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010b06:	7dfb      	ldrb	r3, [r7, #23]
 8010b08:	e000      	b.n	8010b0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3718      	adds	r7, #24
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	607a      	str	r2, [r7, #4]
 8010b20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b22:	7afb      	ldrb	r3, [r7, #11]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d16b      	bne.n	8010c00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	3314      	adds	r3, #20
 8010b2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b34:	2b02      	cmp	r3, #2
 8010b36:	d156      	bne.n	8010be6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	689a      	ldr	r2, [r3, #8]
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d914      	bls.n	8010b6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	689a      	ldr	r2, [r3, #8]
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	1ad2      	subs	r2, r2, r3
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	689b      	ldr	r3, [r3, #8]
 8010b56:	461a      	mov	r2, r3
 8010b58:	6879      	ldr	r1, [r7, #4]
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f000 ff3a 	bl	80119d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b60:	2300      	movs	r3, #0
 8010b62:	2200      	movs	r2, #0
 8010b64:	2100      	movs	r1, #0
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f006 f85b 	bl	8016c22 <USBD_LL_PrepareReceive>
 8010b6c:	e03b      	b.n	8010be6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	68da      	ldr	r2, [r3, #12]
 8010b72:	693b      	ldr	r3, [r7, #16]
 8010b74:	689b      	ldr	r3, [r3, #8]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d11c      	bne.n	8010bb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d316      	bcc.n	8010bb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d20f      	bcs.n	8010bb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010b94:	2200      	movs	r2, #0
 8010b96:	2100      	movs	r1, #0
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f000 ff1b 	bl	80119d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	2200      	movs	r2, #0
 8010baa:	2100      	movs	r1, #0
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f006 f838 	bl	8016c22 <USBD_LL_PrepareReceive>
 8010bb2:	e018      	b.n	8010be6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d10b      	bne.n	8010bd8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bd8:	2180      	movs	r1, #128	; 0x80
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f005 ff76 	bl	8016acc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f000 ff49 	bl	8011a78 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d122      	bne.n	8010c36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f7ff fe98 	bl	8010926 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010bfe:	e01a      	b.n	8010c36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b03      	cmp	r3, #3
 8010c0a:	d114      	bne.n	8010c36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c12:	695b      	ldr	r3, [r3, #20]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d00e      	beq.n	8010c36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c1e:	695b      	ldr	r3, [r3, #20]
 8010c20:	7afa      	ldrb	r2, [r7, #11]
 8010c22:	4611      	mov	r1, r2
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	4798      	blx	r3
 8010c28:	4603      	mov	r3, r0
 8010c2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c2c:	7dfb      	ldrb	r3, [r7, #23]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d001      	beq.n	8010c36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010c32:	7dfb      	ldrb	r3, [r7, #23]
 8010c34:	e000      	b.n	8010c38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010c36:	2300      	movs	r3, #0
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3718      	adds	r7, #24
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d101      	bne.n	8010c74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010c70:	2303      	movs	r3, #3
 8010c72:	e02f      	b.n	8010cd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d00f      	beq.n	8010c9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d009      	beq.n	8010c9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	6852      	ldr	r2, [r2, #4]
 8010c96:	b2d2      	uxtb	r2, r2
 8010c98:	4611      	mov	r1, r2
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010c9e:	2340      	movs	r3, #64	; 0x40
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f005 fecc 	bl	8016a42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2201      	movs	r2, #1
 8010cae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2240      	movs	r2, #64	; 0x40
 8010cb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cba:	2340      	movs	r3, #64	; 0x40
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	2180      	movs	r1, #128	; 0x80
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f005 febe 	bl	8016a42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2240      	movs	r2, #64	; 0x40
 8010cd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	78fa      	ldrb	r2, [r7, #3]
 8010cec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	370c      	adds	r7, #12
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr

08010cfc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2204      	movs	r2, #4
 8010d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010d1a:	2300      	movs	r3, #0
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	2b04      	cmp	r3, #4
 8010d3a:	d106      	bne.n	8010d4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	e012      	b.n	8010d94 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d10b      	bne.n	8010d92 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d80:	69db      	ldr	r3, [r3, #28]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d005      	beq.n	8010d92 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010d92:	2300      	movs	r3, #0
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	3301      	adds	r3, #1
 8010db2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010dba:	8a3b      	ldrh	r3, [r7, #16]
 8010dbc:	021b      	lsls	r3, r3, #8
 8010dbe:	b21a      	sxth	r2, r3
 8010dc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	b21b      	sxth	r3, r3
 8010dc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010dca:	89fb      	ldrh	r3, [r7, #14]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	371c      	adds	r7, #28
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr

08010dd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010de2:	2300      	movs	r3, #0
 8010de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010dee:	2b40      	cmp	r3, #64	; 0x40
 8010df0:	d005      	beq.n	8010dfe <USBD_StdDevReq+0x26>
 8010df2:	2b40      	cmp	r3, #64	; 0x40
 8010df4:	d853      	bhi.n	8010e9e <USBD_StdDevReq+0xc6>
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00b      	beq.n	8010e12 <USBD_StdDevReq+0x3a>
 8010dfa:	2b20      	cmp	r3, #32
 8010dfc:	d14f      	bne.n	8010e9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	4798      	blx	r3
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8010e10:	e04a      	b.n	8010ea8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	785b      	ldrb	r3, [r3, #1]
 8010e16:	2b09      	cmp	r3, #9
 8010e18:	d83b      	bhi.n	8010e92 <USBD_StdDevReq+0xba>
 8010e1a:	a201      	add	r2, pc, #4	; (adr r2, 8010e20 <USBD_StdDevReq+0x48>)
 8010e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e20:	08010e75 	.word	0x08010e75
 8010e24:	08010e89 	.word	0x08010e89
 8010e28:	08010e93 	.word	0x08010e93
 8010e2c:	08010e7f 	.word	0x08010e7f
 8010e30:	08010e93 	.word	0x08010e93
 8010e34:	08010e53 	.word	0x08010e53
 8010e38:	08010e49 	.word	0x08010e49
 8010e3c:	08010e93 	.word	0x08010e93
 8010e40:	08010e6b 	.word	0x08010e6b
 8010e44:	08010e5d 	.word	0x08010e5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010e48:	6839      	ldr	r1, [r7, #0]
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 f9de 	bl	801120c <USBD_GetDescriptor>
          break;
 8010e50:	e024      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 fb6d 	bl	8011534 <USBD_SetAddress>
          break;
 8010e5a:	e01f      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010e5c:	6839      	ldr	r1, [r7, #0]
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 fbac 	bl	80115bc <USBD_SetConfig>
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]
          break;
 8010e68:	e018      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010e6a:	6839      	ldr	r1, [r7, #0]
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 fc4b 	bl	8011708 <USBD_GetConfig>
          break;
 8010e72:	e013      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010e74:	6839      	ldr	r1, [r7, #0]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 fc7c 	bl	8011774 <USBD_GetStatus>
          break;
 8010e7c:	e00e      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f000 fcab 	bl	80117dc <USBD_SetFeature>
          break;
 8010e86:	e009      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010e88:	6839      	ldr	r1, [r7, #0]
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fcba 	bl	8011804 <USBD_ClrFeature>
          break;
 8010e90:	e004      	b.n	8010e9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fd11 	bl	80118bc <USBD_CtlError>
          break;
 8010e9a:	bf00      	nop
      }
      break;
 8010e9c:	e004      	b.n	8010ea8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010e9e:	6839      	ldr	r1, [r7, #0]
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fd0b 	bl	80118bc <USBD_CtlError>
      break;
 8010ea6:	bf00      	nop
  }

  return ret;
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop

08010eb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010eca:	2b40      	cmp	r3, #64	; 0x40
 8010ecc:	d005      	beq.n	8010eda <USBD_StdItfReq+0x26>
 8010ece:	2b40      	cmp	r3, #64	; 0x40
 8010ed0:	d82f      	bhi.n	8010f32 <USBD_StdItfReq+0x7e>
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <USBD_StdItfReq+0x26>
 8010ed6:	2b20      	cmp	r3, #32
 8010ed8:	d12b      	bne.n	8010f32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	d81d      	bhi.n	8010f24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	889b      	ldrh	r3, [r3, #4]
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d813      	bhi.n	8010f1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	4798      	blx	r3
 8010f00:	4603      	mov	r3, r0
 8010f02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	88db      	ldrh	r3, [r3, #6]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d110      	bne.n	8010f2e <USBD_StdItfReq+0x7a>
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d10d      	bne.n	8010f2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 fd9d 	bl	8011a52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010f18:	e009      	b.n	8010f2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010f1a:	6839      	ldr	r1, [r7, #0]
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f000 fccd 	bl	80118bc <USBD_CtlError>
          break;
 8010f22:	e004      	b.n	8010f2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010f24:	6839      	ldr	r1, [r7, #0]
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 fcc8 	bl	80118bc <USBD_CtlError>
          break;
 8010f2c:	e000      	b.n	8010f30 <USBD_StdItfReq+0x7c>
          break;
 8010f2e:	bf00      	nop
      }
      break;
 8010f30:	e004      	b.n	8010f3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010f32:	6839      	ldr	r1, [r7, #0]
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 fcc1 	bl	80118bc <USBD_CtlError>
      break;
 8010f3a:	bf00      	nop
  }

  return ret;
 8010f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010f50:	2300      	movs	r3, #0
 8010f52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	889b      	ldrh	r3, [r3, #4]
 8010f58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f62:	2b40      	cmp	r3, #64	; 0x40
 8010f64:	d007      	beq.n	8010f76 <USBD_StdEPReq+0x30>
 8010f66:	2b40      	cmp	r3, #64	; 0x40
 8010f68:	f200 8145 	bhi.w	80111f6 <USBD_StdEPReq+0x2b0>
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00c      	beq.n	8010f8a <USBD_StdEPReq+0x44>
 8010f70:	2b20      	cmp	r3, #32
 8010f72:	f040 8140 	bne.w	80111f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	4798      	blx	r3
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]
      break;
 8010f88:	e13a      	b.n	8011200 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	785b      	ldrb	r3, [r3, #1]
 8010f8e:	2b03      	cmp	r3, #3
 8010f90:	d007      	beq.n	8010fa2 <USBD_StdEPReq+0x5c>
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	f300 8129 	bgt.w	80111ea <USBD_StdEPReq+0x2a4>
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d07f      	beq.n	801109c <USBD_StdEPReq+0x156>
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d03c      	beq.n	801101a <USBD_StdEPReq+0xd4>
 8010fa0:	e123      	b.n	80111ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	2b02      	cmp	r3, #2
 8010fac:	d002      	beq.n	8010fb4 <USBD_StdEPReq+0x6e>
 8010fae:	2b03      	cmp	r3, #3
 8010fb0:	d016      	beq.n	8010fe0 <USBD_StdEPReq+0x9a>
 8010fb2:	e02c      	b.n	801100e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010fb4:	7bbb      	ldrb	r3, [r7, #14]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00d      	beq.n	8010fd6 <USBD_StdEPReq+0x90>
 8010fba:	7bbb      	ldrb	r3, [r7, #14]
 8010fbc:	2b80      	cmp	r3, #128	; 0x80
 8010fbe:	d00a      	beq.n	8010fd6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010fc0:	7bbb      	ldrb	r3, [r7, #14]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f005 fd81 	bl	8016acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010fca:	2180      	movs	r1, #128	; 0x80
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f005 fd7d 	bl	8016acc <USBD_LL_StallEP>
 8010fd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010fd4:	e020      	b.n	8011018 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fc6f 	bl	80118bc <USBD_CtlError>
              break;
 8010fde:	e01b      	b.n	8011018 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	885b      	ldrh	r3, [r3, #2]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d10e      	bne.n	8011006 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010fe8:	7bbb      	ldrb	r3, [r7, #14]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00b      	beq.n	8011006 <USBD_StdEPReq+0xc0>
 8010fee:	7bbb      	ldrb	r3, [r7, #14]
 8010ff0:	2b80      	cmp	r3, #128	; 0x80
 8010ff2:	d008      	beq.n	8011006 <USBD_StdEPReq+0xc0>
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	88db      	ldrh	r3, [r3, #6]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d104      	bne.n	8011006 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ffc:	7bbb      	ldrb	r3, [r7, #14]
 8010ffe:	4619      	mov	r1, r3
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f005 fd63 	bl	8016acc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fd23 	bl	8011a52 <USBD_CtlSendStatus>

              break;
 801100c:	e004      	b.n	8011018 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801100e:	6839      	ldr	r1, [r7, #0]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 fc53 	bl	80118bc <USBD_CtlError>
              break;
 8011016:	bf00      	nop
          }
          break;
 8011018:	e0ec      	b.n	80111f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b02      	cmp	r3, #2
 8011024:	d002      	beq.n	801102c <USBD_StdEPReq+0xe6>
 8011026:	2b03      	cmp	r3, #3
 8011028:	d016      	beq.n	8011058 <USBD_StdEPReq+0x112>
 801102a:	e030      	b.n	801108e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801102c:	7bbb      	ldrb	r3, [r7, #14]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00d      	beq.n	801104e <USBD_StdEPReq+0x108>
 8011032:	7bbb      	ldrb	r3, [r7, #14]
 8011034:	2b80      	cmp	r3, #128	; 0x80
 8011036:	d00a      	beq.n	801104e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011038:	7bbb      	ldrb	r3, [r7, #14]
 801103a:	4619      	mov	r1, r3
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f005 fd45 	bl	8016acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011042:	2180      	movs	r1, #128	; 0x80
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f005 fd41 	bl	8016acc <USBD_LL_StallEP>
 801104a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801104c:	e025      	b.n	801109a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801104e:	6839      	ldr	r1, [r7, #0]
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 fc33 	bl	80118bc <USBD_CtlError>
              break;
 8011056:	e020      	b.n	801109a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	885b      	ldrh	r3, [r3, #2]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d11b      	bne.n	8011098 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011060:	7bbb      	ldrb	r3, [r7, #14]
 8011062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011066:	2b00      	cmp	r3, #0
 8011068:	d004      	beq.n	8011074 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801106a:	7bbb      	ldrb	r3, [r7, #14]
 801106c:	4619      	mov	r1, r3
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f005 fd4b 	bl	8016b0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fcec 	bl	8011a52 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011080:	689b      	ldr	r3, [r3, #8]
 8011082:	6839      	ldr	r1, [r7, #0]
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	4798      	blx	r3
 8011088:	4603      	mov	r3, r0
 801108a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801108c:	e004      	b.n	8011098 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801108e:	6839      	ldr	r1, [r7, #0]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 fc13 	bl	80118bc <USBD_CtlError>
              break;
 8011096:	e000      	b.n	801109a <USBD_StdEPReq+0x154>
              break;
 8011098:	bf00      	nop
          }
          break;
 801109a:	e0ab      	b.n	80111f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	2b02      	cmp	r3, #2
 80110a6:	d002      	beq.n	80110ae <USBD_StdEPReq+0x168>
 80110a8:	2b03      	cmp	r3, #3
 80110aa:	d032      	beq.n	8011112 <USBD_StdEPReq+0x1cc>
 80110ac:	e097      	b.n	80111de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80110ae:	7bbb      	ldrb	r3, [r7, #14]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d007      	beq.n	80110c4 <USBD_StdEPReq+0x17e>
 80110b4:	7bbb      	ldrb	r3, [r7, #14]
 80110b6:	2b80      	cmp	r3, #128	; 0x80
 80110b8:	d004      	beq.n	80110c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fbfd 	bl	80118bc <USBD_CtlError>
                break;
 80110c2:	e091      	b.n	80111e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80110c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	da0b      	bge.n	80110e4 <USBD_StdEPReq+0x19e>
 80110cc:	7bbb      	ldrb	r3, [r7, #14]
 80110ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110d2:	4613      	mov	r3, r2
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	4413      	add	r3, r2
 80110d8:	009b      	lsls	r3, r3, #2
 80110da:	3310      	adds	r3, #16
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	4413      	add	r3, r2
 80110e0:	3304      	adds	r3, #4
 80110e2:	e00b      	b.n	80110fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80110e4:	7bbb      	ldrb	r3, [r7, #14]
 80110e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80110ea:	4613      	mov	r3, r2
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	4413      	add	r3, r2
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	4413      	add	r3, r2
 80110fa:	3304      	adds	r3, #4
 80110fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	2200      	movs	r2, #0
 8011102:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	2202      	movs	r2, #2
 8011108:	4619      	mov	r1, r3
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fc47 	bl	801199e <USBD_CtlSendData>
              break;
 8011110:	e06a      	b.n	80111e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011116:	2b00      	cmp	r3, #0
 8011118:	da11      	bge.n	801113e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801111a:	7bbb      	ldrb	r3, [r7, #14]
 801111c:	f003 020f 	and.w	r2, r3, #15
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	4613      	mov	r3, r2
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4413      	add	r3, r2
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	440b      	add	r3, r1
 801112c:	3324      	adds	r3, #36	; 0x24
 801112e:	881b      	ldrh	r3, [r3, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d117      	bne.n	8011164 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011134:	6839      	ldr	r1, [r7, #0]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 fbc0 	bl	80118bc <USBD_CtlError>
                  break;
 801113c:	e054      	b.n	80111e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801113e:	7bbb      	ldrb	r3, [r7, #14]
 8011140:	f003 020f 	and.w	r2, r3, #15
 8011144:	6879      	ldr	r1, [r7, #4]
 8011146:	4613      	mov	r3, r2
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	440b      	add	r3, r1
 8011150:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d104      	bne.n	8011164 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fbad 	bl	80118bc <USBD_CtlError>
                  break;
 8011162:	e041      	b.n	80111e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011168:	2b00      	cmp	r3, #0
 801116a:	da0b      	bge.n	8011184 <USBD_StdEPReq+0x23e>
 801116c:	7bbb      	ldrb	r3, [r7, #14]
 801116e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011172:	4613      	mov	r3, r2
 8011174:	009b      	lsls	r3, r3, #2
 8011176:	4413      	add	r3, r2
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	3310      	adds	r3, #16
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	4413      	add	r3, r2
 8011180:	3304      	adds	r3, #4
 8011182:	e00b      	b.n	801119c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011184:	7bbb      	ldrb	r3, [r7, #14]
 8011186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801118a:	4613      	mov	r3, r2
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	4413      	add	r3, r2
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	4413      	add	r3, r2
 801119a:	3304      	adds	r3, #4
 801119c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801119e:	7bbb      	ldrb	r3, [r7, #14]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d002      	beq.n	80111aa <USBD_StdEPReq+0x264>
 80111a4:	7bbb      	ldrb	r3, [r7, #14]
 80111a6:	2b80      	cmp	r3, #128	; 0x80
 80111a8:	d103      	bne.n	80111b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2200      	movs	r2, #0
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	e00e      	b.n	80111d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	4619      	mov	r1, r3
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f005 fcc6 	bl	8016b48 <USBD_LL_IsStallEP>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d003      	beq.n	80111ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	2201      	movs	r2, #1
 80111c6:	601a      	str	r2, [r3, #0]
 80111c8:	e002      	b.n	80111d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2200      	movs	r2, #0
 80111ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2202      	movs	r2, #2
 80111d4:	4619      	mov	r1, r3
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 fbe1 	bl	801199e <USBD_CtlSendData>
              break;
 80111dc:	e004      	b.n	80111e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80111de:	6839      	ldr	r1, [r7, #0]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 fb6b 	bl	80118bc <USBD_CtlError>
              break;
 80111e6:	bf00      	nop
          }
          break;
 80111e8:	e004      	b.n	80111f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 fb65 	bl	80118bc <USBD_CtlError>
          break;
 80111f2:	bf00      	nop
      }
      break;
 80111f4:	e004      	b.n	8011200 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80111f6:	6839      	ldr	r1, [r7, #0]
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f000 fb5f 	bl	80118bc <USBD_CtlError>
      break;
 80111fe:	bf00      	nop
  }

  return ret;
 8011200:	7bfb      	ldrb	r3, [r7, #15]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3710      	adds	r7, #16
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
	...

0801120c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011216:	2300      	movs	r3, #0
 8011218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801121a:	2300      	movs	r3, #0
 801121c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801121e:	2300      	movs	r3, #0
 8011220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	885b      	ldrh	r3, [r3, #2]
 8011226:	0a1b      	lsrs	r3, r3, #8
 8011228:	b29b      	uxth	r3, r3
 801122a:	3b01      	subs	r3, #1
 801122c:	2b0e      	cmp	r3, #14
 801122e:	f200 8152 	bhi.w	80114d6 <USBD_GetDescriptor+0x2ca>
 8011232:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <USBD_GetDescriptor+0x2c>)
 8011234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011238:	080112a9 	.word	0x080112a9
 801123c:	080112c1 	.word	0x080112c1
 8011240:	08011301 	.word	0x08011301
 8011244:	080114d7 	.word	0x080114d7
 8011248:	080114d7 	.word	0x080114d7
 801124c:	08011477 	.word	0x08011477
 8011250:	080114a3 	.word	0x080114a3
 8011254:	080114d7 	.word	0x080114d7
 8011258:	080114d7 	.word	0x080114d7
 801125c:	080114d7 	.word	0x080114d7
 8011260:	080114d7 	.word	0x080114d7
 8011264:	080114d7 	.word	0x080114d7
 8011268:	080114d7 	.word	0x080114d7
 801126c:	080114d7 	.word	0x080114d7
 8011270:	08011275 	.word	0x08011275
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801127a:	69db      	ldr	r3, [r3, #28]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d00b      	beq.n	8011298 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011286:	69db      	ldr	r3, [r3, #28]
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	7c12      	ldrb	r2, [r2, #16]
 801128c:	f107 0108 	add.w	r1, r7, #8
 8011290:	4610      	mov	r0, r2
 8011292:	4798      	blx	r3
 8011294:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011296:	e126      	b.n	80114e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 fb0e 	bl	80118bc <USBD_CtlError>
        err++;
 80112a0:	7afb      	ldrb	r3, [r7, #11]
 80112a2:	3301      	adds	r3, #1
 80112a4:	72fb      	strb	r3, [r7, #11]
      break;
 80112a6:	e11e      	b.n	80114e6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	7c12      	ldrb	r2, [r2, #16]
 80112b4:	f107 0108 	add.w	r1, r7, #8
 80112b8:	4610      	mov	r0, r2
 80112ba:	4798      	blx	r3
 80112bc:	60f8      	str	r0, [r7, #12]
      break;
 80112be:	e112      	b.n	80114e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	7c1b      	ldrb	r3, [r3, #16]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d10d      	bne.n	80112e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112d0:	f107 0208 	add.w	r2, r7, #8
 80112d4:	4610      	mov	r0, r2
 80112d6:	4798      	blx	r3
 80112d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	3301      	adds	r3, #1
 80112de:	2202      	movs	r2, #2
 80112e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80112e2:	e100      	b.n	80114e6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ec:	f107 0208 	add.w	r2, r7, #8
 80112f0:	4610      	mov	r0, r2
 80112f2:	4798      	blx	r3
 80112f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	3301      	adds	r3, #1
 80112fa:	2202      	movs	r2, #2
 80112fc:	701a      	strb	r2, [r3, #0]
      break;
 80112fe:	e0f2      	b.n	80114e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	885b      	ldrh	r3, [r3, #2]
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b05      	cmp	r3, #5
 8011308:	f200 80ac 	bhi.w	8011464 <USBD_GetDescriptor+0x258>
 801130c:	a201      	add	r2, pc, #4	; (adr r2, 8011314 <USBD_GetDescriptor+0x108>)
 801130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011312:	bf00      	nop
 8011314:	0801132d 	.word	0x0801132d
 8011318:	08011361 	.word	0x08011361
 801131c:	08011395 	.word	0x08011395
 8011320:	080113c9 	.word	0x080113c9
 8011324:	080113fd 	.word	0x080113fd
 8011328:	08011431 	.word	0x08011431
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d00b      	beq.n	8011350 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	7c12      	ldrb	r2, [r2, #16]
 8011344:	f107 0108 	add.w	r1, r7, #8
 8011348:	4610      	mov	r0, r2
 801134a:	4798      	blx	r3
 801134c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801134e:	e091      	b.n	8011474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011350:	6839      	ldr	r1, [r7, #0]
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 fab2 	bl	80118bc <USBD_CtlError>
            err++;
 8011358:	7afb      	ldrb	r3, [r7, #11]
 801135a:	3301      	adds	r3, #1
 801135c:	72fb      	strb	r3, [r7, #11]
          break;
 801135e:	e089      	b.n	8011474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00b      	beq.n	8011384 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	7c12      	ldrb	r2, [r2, #16]
 8011378:	f107 0108 	add.w	r1, r7, #8
 801137c:	4610      	mov	r0, r2
 801137e:	4798      	blx	r3
 8011380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011382:	e077      	b.n	8011474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011384:	6839      	ldr	r1, [r7, #0]
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f000 fa98 	bl	80118bc <USBD_CtlError>
            err++;
 801138c:	7afb      	ldrb	r3, [r7, #11]
 801138e:	3301      	adds	r3, #1
 8011390:	72fb      	strb	r3, [r7, #11]
          break;
 8011392:	e06f      	b.n	8011474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d00b      	beq.n	80113b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	7c12      	ldrb	r2, [r2, #16]
 80113ac:	f107 0108 	add.w	r1, r7, #8
 80113b0:	4610      	mov	r0, r2
 80113b2:	4798      	blx	r3
 80113b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80113b6:	e05d      	b.n	8011474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80113b8:	6839      	ldr	r1, [r7, #0]
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 fa7e 	bl	80118bc <USBD_CtlError>
            err++;
 80113c0:	7afb      	ldrb	r3, [r7, #11]
 80113c2:	3301      	adds	r3, #1
 80113c4:	72fb      	strb	r3, [r7, #11]
          break;
 80113c6:	e055      	b.n	8011474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d00b      	beq.n	80113ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113da:	691b      	ldr	r3, [r3, #16]
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	7c12      	ldrb	r2, [r2, #16]
 80113e0:	f107 0108 	add.w	r1, r7, #8
 80113e4:	4610      	mov	r0, r2
 80113e6:	4798      	blx	r3
 80113e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80113ea:	e043      	b.n	8011474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80113ec:	6839      	ldr	r1, [r7, #0]
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f000 fa64 	bl	80118bc <USBD_CtlError>
            err++;
 80113f4:	7afb      	ldrb	r3, [r7, #11]
 80113f6:	3301      	adds	r3, #1
 80113f8:	72fb      	strb	r3, [r7, #11]
          break;
 80113fa:	e03b      	b.n	8011474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00b      	beq.n	8011420 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801140e:	695b      	ldr	r3, [r3, #20]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	7c12      	ldrb	r2, [r2, #16]
 8011414:	f107 0108 	add.w	r1, r7, #8
 8011418:	4610      	mov	r0, r2
 801141a:	4798      	blx	r3
 801141c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801141e:	e029      	b.n	8011474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011420:	6839      	ldr	r1, [r7, #0]
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 fa4a 	bl	80118bc <USBD_CtlError>
            err++;
 8011428:	7afb      	ldrb	r3, [r7, #11]
 801142a:	3301      	adds	r3, #1
 801142c:	72fb      	strb	r3, [r7, #11]
          break;
 801142e:	e021      	b.n	8011474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011436:	699b      	ldr	r3, [r3, #24]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00b      	beq.n	8011454 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011442:	699b      	ldr	r3, [r3, #24]
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	7c12      	ldrb	r2, [r2, #16]
 8011448:	f107 0108 	add.w	r1, r7, #8
 801144c:	4610      	mov	r0, r2
 801144e:	4798      	blx	r3
 8011450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011452:	e00f      	b.n	8011474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011454:	6839      	ldr	r1, [r7, #0]
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 fa30 	bl	80118bc <USBD_CtlError>
            err++;
 801145c:	7afb      	ldrb	r3, [r7, #11]
 801145e:	3301      	adds	r3, #1
 8011460:	72fb      	strb	r3, [r7, #11]
          break;
 8011462:	e007      	b.n	8011474 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011464:	6839      	ldr	r1, [r7, #0]
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 fa28 	bl	80118bc <USBD_CtlError>
          err++;
 801146c:	7afb      	ldrb	r3, [r7, #11]
 801146e:	3301      	adds	r3, #1
 8011470:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011472:	bf00      	nop
      }
      break;
 8011474:	e037      	b.n	80114e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	7c1b      	ldrb	r3, [r3, #16]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011486:	f107 0208 	add.w	r2, r7, #8
 801148a:	4610      	mov	r0, r2
 801148c:	4798      	blx	r3
 801148e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011490:	e029      	b.n	80114e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011492:	6839      	ldr	r1, [r7, #0]
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 fa11 	bl	80118bc <USBD_CtlError>
        err++;
 801149a:	7afb      	ldrb	r3, [r7, #11]
 801149c:	3301      	adds	r3, #1
 801149e:	72fb      	strb	r3, [r7, #11]
      break;
 80114a0:	e021      	b.n	80114e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	7c1b      	ldrb	r3, [r3, #16]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10d      	bne.n	80114c6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b2:	f107 0208 	add.w	r2, r7, #8
 80114b6:	4610      	mov	r0, r2
 80114b8:	4798      	blx	r3
 80114ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3301      	adds	r3, #1
 80114c0:	2207      	movs	r2, #7
 80114c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80114c4:	e00f      	b.n	80114e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80114c6:	6839      	ldr	r1, [r7, #0]
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f000 f9f7 	bl	80118bc <USBD_CtlError>
        err++;
 80114ce:	7afb      	ldrb	r3, [r7, #11]
 80114d0:	3301      	adds	r3, #1
 80114d2:	72fb      	strb	r3, [r7, #11]
      break;
 80114d4:	e007      	b.n	80114e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80114d6:	6839      	ldr	r1, [r7, #0]
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 f9ef 	bl	80118bc <USBD_CtlError>
      err++;
 80114de:	7afb      	ldrb	r3, [r7, #11]
 80114e0:	3301      	adds	r3, #1
 80114e2:	72fb      	strb	r3, [r7, #11]
      break;
 80114e4:	bf00      	nop
  }

  if (err != 0U)
 80114e6:	7afb      	ldrb	r3, [r7, #11]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d11e      	bne.n	801152a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	88db      	ldrh	r3, [r3, #6]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d016      	beq.n	8011522 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80114f4:	893b      	ldrh	r3, [r7, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00e      	beq.n	8011518 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	88da      	ldrh	r2, [r3, #6]
 80114fe:	893b      	ldrh	r3, [r7, #8]
 8011500:	4293      	cmp	r3, r2
 8011502:	bf28      	it	cs
 8011504:	4613      	movcs	r3, r2
 8011506:	b29b      	uxth	r3, r3
 8011508:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801150a:	893b      	ldrh	r3, [r7, #8]
 801150c:	461a      	mov	r2, r3
 801150e:	68f9      	ldr	r1, [r7, #12]
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f000 fa44 	bl	801199e <USBD_CtlSendData>
 8011516:	e009      	b.n	801152c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011518:	6839      	ldr	r1, [r7, #0]
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f9ce 	bl	80118bc <USBD_CtlError>
 8011520:	e004      	b.n	801152c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 fa95 	bl	8011a52 <USBD_CtlSendStatus>
 8011528:	e000      	b.n	801152c <USBD_GetDescriptor+0x320>
    return;
 801152a:	bf00      	nop
  }
}
 801152c:	3710      	adds	r7, #16
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop

08011534 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	889b      	ldrh	r3, [r3, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d131      	bne.n	80115aa <USBD_SetAddress+0x76>
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	88db      	ldrh	r3, [r3, #6]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d12d      	bne.n	80115aa <USBD_SetAddress+0x76>
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	885b      	ldrh	r3, [r3, #2]
 8011552:	2b7f      	cmp	r3, #127	; 0x7f
 8011554:	d829      	bhi.n	80115aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	885b      	ldrh	r3, [r3, #2]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011560:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011568:	b2db      	uxtb	r3, r3
 801156a:	2b03      	cmp	r3, #3
 801156c:	d104      	bne.n	8011578 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801156e:	6839      	ldr	r1, [r7, #0]
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f000 f9a3 	bl	80118bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011576:	e01d      	b.n	80115b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	7bfa      	ldrb	r2, [r7, #15]
 801157c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f005 fb0c 	bl	8016ba2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 fa61 	bl	8011a52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011590:	7bfb      	ldrb	r3, [r7, #15]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d004      	beq.n	80115a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2202      	movs	r2, #2
 801159a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801159e:	e009      	b.n	80115b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2201      	movs	r2, #1
 80115a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115a8:	e004      	b.n	80115b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80115aa:	6839      	ldr	r1, [r7, #0]
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 f985 	bl	80118bc <USBD_CtlError>
  }
}
 80115b2:	bf00      	nop
 80115b4:	bf00      	nop
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	885b      	ldrh	r3, [r3, #2]
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	4b4c      	ldr	r3, [pc, #304]	; (8011704 <USBD_SetConfig+0x148>)
 80115d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80115d4:	4b4b      	ldr	r3, [pc, #300]	; (8011704 <USBD_SetConfig+0x148>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d905      	bls.n	80115e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80115dc:	6839      	ldr	r1, [r7, #0]
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f96c 	bl	80118bc <USBD_CtlError>
    return USBD_FAIL;
 80115e4:	2303      	movs	r3, #3
 80115e6:	e088      	b.n	80116fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	2b02      	cmp	r3, #2
 80115f2:	d002      	beq.n	80115fa <USBD_SetConfig+0x3e>
 80115f4:	2b03      	cmp	r3, #3
 80115f6:	d025      	beq.n	8011644 <USBD_SetConfig+0x88>
 80115f8:	e071      	b.n	80116de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80115fa:	4b42      	ldr	r3, [pc, #264]	; (8011704 <USBD_SetConfig+0x148>)
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d01c      	beq.n	801163c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011602:	4b40      	ldr	r3, [pc, #256]	; (8011704 <USBD_SetConfig+0x148>)
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	461a      	mov	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801160c:	4b3d      	ldr	r3, [pc, #244]	; (8011704 <USBD_SetConfig+0x148>)
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7ff f992 	bl	801093c <USBD_SetClassConfig>
 8011618:	4603      	mov	r3, r0
 801161a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801161c:	7bfb      	ldrb	r3, [r7, #15]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d004      	beq.n	801162c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011622:	6839      	ldr	r1, [r7, #0]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 f949 	bl	80118bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801162a:	e065      	b.n	80116f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 fa10 	bl	8011a52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2203      	movs	r2, #3
 8011636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801163a:	e05d      	b.n	80116f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 fa08 	bl	8011a52 <USBD_CtlSendStatus>
      break;
 8011642:	e059      	b.n	80116f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011644:	4b2f      	ldr	r3, [pc, #188]	; (8011704 <USBD_SetConfig+0x148>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d112      	bne.n	8011672 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2202      	movs	r2, #2
 8011650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011654:	4b2b      	ldr	r3, [pc, #172]	; (8011704 <USBD_SetConfig+0x148>)
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	461a      	mov	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801165e:	4b29      	ldr	r3, [pc, #164]	; (8011704 <USBD_SetConfig+0x148>)
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	4619      	mov	r1, r3
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff f985 	bl	8010974 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f000 f9f1 	bl	8011a52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011670:	e042      	b.n	80116f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011672:	4b24      	ldr	r3, [pc, #144]	; (8011704 <USBD_SetConfig+0x148>)
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	461a      	mov	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	429a      	cmp	r2, r3
 801167e:	d02a      	beq.n	80116d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	b2db      	uxtb	r3, r3
 8011686:	4619      	mov	r1, r3
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7ff f973 	bl	8010974 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801168e:	4b1d      	ldr	r3, [pc, #116]	; (8011704 <USBD_SetConfig+0x148>)
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	461a      	mov	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011698:	4b1a      	ldr	r3, [pc, #104]	; (8011704 <USBD_SetConfig+0x148>)
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	4619      	mov	r1, r3
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f7ff f94c 	bl	801093c <USBD_SetClassConfig>
 80116a4:	4603      	mov	r3, r0
 80116a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00f      	beq.n	80116ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80116ae:	6839      	ldr	r1, [r7, #0]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 f903 	bl	80118bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	4619      	mov	r1, r3
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7ff f958 	bl	8010974 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2202      	movs	r2, #2
 80116c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80116cc:	e014      	b.n	80116f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f9bf 	bl	8011a52 <USBD_CtlSendStatus>
      break;
 80116d4:	e010      	b.n	80116f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 f9bb 	bl	8011a52 <USBD_CtlSendStatus>
      break;
 80116dc:	e00c      	b.n	80116f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80116de:	6839      	ldr	r1, [r7, #0]
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f000 f8eb 	bl	80118bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80116e6:	4b07      	ldr	r3, [pc, #28]	; (8011704 <USBD_SetConfig+0x148>)
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	4619      	mov	r1, r3
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f7ff f941 	bl	8010974 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80116f2:	2303      	movs	r3, #3
 80116f4:	73fb      	strb	r3, [r7, #15]
      break;
 80116f6:	bf00      	nop
  }

  return ret;
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	200003a1 	.word	0x200003a1

08011708 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	88db      	ldrh	r3, [r3, #6]
 8011716:	2b01      	cmp	r3, #1
 8011718:	d004      	beq.n	8011724 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801171a:	6839      	ldr	r1, [r7, #0]
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f000 f8cd 	bl	80118bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011722:	e023      	b.n	801176c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801172a:	b2db      	uxtb	r3, r3
 801172c:	2b02      	cmp	r3, #2
 801172e:	dc02      	bgt.n	8011736 <USBD_GetConfig+0x2e>
 8011730:	2b00      	cmp	r3, #0
 8011732:	dc03      	bgt.n	801173c <USBD_GetConfig+0x34>
 8011734:	e015      	b.n	8011762 <USBD_GetConfig+0x5a>
 8011736:	2b03      	cmp	r3, #3
 8011738:	d00b      	beq.n	8011752 <USBD_GetConfig+0x4a>
 801173a:	e012      	b.n	8011762 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3308      	adds	r3, #8
 8011746:	2201      	movs	r2, #1
 8011748:	4619      	mov	r1, r3
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f000 f927 	bl	801199e <USBD_CtlSendData>
        break;
 8011750:	e00c      	b.n	801176c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	3304      	adds	r3, #4
 8011756:	2201      	movs	r2, #1
 8011758:	4619      	mov	r1, r3
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 f91f 	bl	801199e <USBD_CtlSendData>
        break;
 8011760:	e004      	b.n	801176c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011762:	6839      	ldr	r1, [r7, #0]
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 f8a9 	bl	80118bc <USBD_CtlError>
        break;
 801176a:	bf00      	nop
}
 801176c:	bf00      	nop
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011784:	b2db      	uxtb	r3, r3
 8011786:	3b01      	subs	r3, #1
 8011788:	2b02      	cmp	r3, #2
 801178a:	d81e      	bhi.n	80117ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	88db      	ldrh	r3, [r3, #6]
 8011790:	2b02      	cmp	r3, #2
 8011792:	d004      	beq.n	801179e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011794:	6839      	ldr	r1, [r7, #0]
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 f890 	bl	80118bc <USBD_CtlError>
        break;
 801179c:	e01a      	b.n	80117d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2201      	movs	r2, #1
 80117a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d005      	beq.n	80117ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	f043 0202 	orr.w	r2, r3, #2
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	330c      	adds	r3, #12
 80117be:	2202      	movs	r2, #2
 80117c0:	4619      	mov	r1, r3
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 f8eb 	bl	801199e <USBD_CtlSendData>
      break;
 80117c8:	e004      	b.n	80117d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80117ca:	6839      	ldr	r1, [r7, #0]
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 f875 	bl	80118bc <USBD_CtlError>
      break;
 80117d2:	bf00      	nop
  }
}
 80117d4:	bf00      	nop
 80117d6:	3708      	adds	r7, #8
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	885b      	ldrh	r3, [r3, #2]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d106      	bne.n	80117fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2201      	movs	r2, #1
 80117f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 f92b 	bl	8011a52 <USBD_CtlSendStatus>
  }
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011814:	b2db      	uxtb	r3, r3
 8011816:	3b01      	subs	r3, #1
 8011818:	2b02      	cmp	r3, #2
 801181a:	d80b      	bhi.n	8011834 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	885b      	ldrh	r3, [r3, #2]
 8011820:	2b01      	cmp	r3, #1
 8011822:	d10c      	bne.n	801183e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2200      	movs	r2, #0
 8011828:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 f910 	bl	8011a52 <USBD_CtlSendStatus>
      }
      break;
 8011832:	e004      	b.n	801183e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011834:	6839      	ldr	r1, [r7, #0]
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f840 	bl	80118bc <USBD_CtlError>
      break;
 801183c:	e000      	b.n	8011840 <USBD_ClrFeature+0x3c>
      break;
 801183e:	bf00      	nop
  }
}
 8011840:	bf00      	nop
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	781a      	ldrb	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	3301      	adds	r3, #1
 8011862:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	781a      	ldrb	r2, [r3, #0]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	3301      	adds	r3, #1
 8011870:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f7ff fa92 	bl	8010d9c <SWAPBYTE>
 8011878:	4603      	mov	r3, r0
 801187a:	461a      	mov	r2, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	3301      	adds	r3, #1
 8011884:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	3301      	adds	r3, #1
 801188a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f7ff fa85 	bl	8010d9c <SWAPBYTE>
 8011892:	4603      	mov	r3, r0
 8011894:	461a      	mov	r2, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	3301      	adds	r3, #1
 801189e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	3301      	adds	r3, #1
 80118a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f7ff fa78 	bl	8010d9c <SWAPBYTE>
 80118ac:	4603      	mov	r3, r0
 80118ae:	461a      	mov	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	80da      	strh	r2, [r3, #6]
}
 80118b4:	bf00      	nop
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80118c6:	2180      	movs	r1, #128	; 0x80
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f005 f8ff 	bl	8016acc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80118ce:	2100      	movs	r1, #0
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f005 f8fb 	bl	8016acc <USBD_LL_StallEP>
}
 80118d6:	bf00      	nop
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b086      	sub	sp, #24
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	60f8      	str	r0, [r7, #12]
 80118e6:	60b9      	str	r1, [r7, #8]
 80118e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80118ea:	2300      	movs	r3, #0
 80118ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d036      	beq.n	8011962 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80118f8:	6938      	ldr	r0, [r7, #16]
 80118fa:	f000 f836 	bl	801196a <USBD_GetLen>
 80118fe:	4603      	mov	r3, r0
 8011900:	3301      	adds	r3, #1
 8011902:	b29b      	uxth	r3, r3
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	b29a      	uxth	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801190c:	7dfb      	ldrb	r3, [r7, #23]
 801190e:	68ba      	ldr	r2, [r7, #8]
 8011910:	4413      	add	r3, r2
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	7812      	ldrb	r2, [r2, #0]
 8011916:	701a      	strb	r2, [r3, #0]
  idx++;
 8011918:	7dfb      	ldrb	r3, [r7, #23]
 801191a:	3301      	adds	r3, #1
 801191c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801191e:	7dfb      	ldrb	r3, [r7, #23]
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	4413      	add	r3, r2
 8011924:	2203      	movs	r2, #3
 8011926:	701a      	strb	r2, [r3, #0]
  idx++;
 8011928:	7dfb      	ldrb	r3, [r7, #23]
 801192a:	3301      	adds	r3, #1
 801192c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801192e:	e013      	b.n	8011958 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011930:	7dfb      	ldrb	r3, [r7, #23]
 8011932:	68ba      	ldr	r2, [r7, #8]
 8011934:	4413      	add	r3, r2
 8011936:	693a      	ldr	r2, [r7, #16]
 8011938:	7812      	ldrb	r2, [r2, #0]
 801193a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	3301      	adds	r3, #1
 8011940:	613b      	str	r3, [r7, #16]
    idx++;
 8011942:	7dfb      	ldrb	r3, [r7, #23]
 8011944:	3301      	adds	r3, #1
 8011946:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011948:	7dfb      	ldrb	r3, [r7, #23]
 801194a:	68ba      	ldr	r2, [r7, #8]
 801194c:	4413      	add	r3, r2
 801194e:	2200      	movs	r2, #0
 8011950:	701a      	strb	r2, [r3, #0]
    idx++;
 8011952:	7dfb      	ldrb	r3, [r7, #23]
 8011954:	3301      	adds	r3, #1
 8011956:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d1e7      	bne.n	8011930 <USBD_GetString+0x52>
 8011960:	e000      	b.n	8011964 <USBD_GetString+0x86>
    return;
 8011962:	bf00      	nop
  }
}
 8011964:	3718      	adds	r7, #24
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}

0801196a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801196a:	b480      	push	{r7}
 801196c:	b085      	sub	sp, #20
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011972:	2300      	movs	r3, #0
 8011974:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801197a:	e005      	b.n	8011988 <USBD_GetLen+0x1e>
  {
    len++;
 801197c:	7bfb      	ldrb	r3, [r7, #15]
 801197e:	3301      	adds	r3, #1
 8011980:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	3301      	adds	r3, #1
 8011986:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1f5      	bne.n	801197c <USBD_GetLen+0x12>
  }

  return len;
 8011990:	7bfb      	ldrb	r3, [r7, #15]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3714      	adds	r7, #20
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr

0801199e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	60f8      	str	r0, [r7, #12]
 80119a6:	60b9      	str	r1, [r7, #8]
 80119a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2202      	movs	r2, #2
 80119ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	68ba      	ldr	r2, [r7, #8]
 80119c2:	2100      	movs	r1, #0
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f005 f90b 	bl	8016be0 <USBD_LL_Transmit>

  return USBD_OK;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	2100      	movs	r1, #0
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f005 f8fa 	bl	8016be0 <USBD_LL_Transmit>

  return USBD_OK;
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	60f8      	str	r0, [r7, #12]
 80119fe:	60b9      	str	r1, [r7, #8]
 8011a00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2203      	movs	r2, #3
 8011a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	2100      	movs	r1, #0
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f005 f8fe 	bl	8016c22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a26:	2300      	movs	r3, #0
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	2100      	movs	r1, #0
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f005 f8ed 	bl	8016c22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3710      	adds	r7, #16
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011a62:	2300      	movs	r3, #0
 8011a64:	2200      	movs	r2, #0
 8011a66:	2100      	movs	r1, #0
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f005 f8b9 	bl	8016be0 <USBD_LL_Transmit>

  return USBD_OK;
 8011a6e:	2300      	movs	r3, #0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2205      	movs	r2, #5
 8011a84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a88:	2300      	movs	r3, #0
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f005 f8c7 	bl	8016c22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
	...

08011aa0 <__NVIC_SetPriority>:
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	6039      	str	r1, [r7, #0]
 8011aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	db0a      	blt.n	8011aca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	490c      	ldr	r1, [pc, #48]	; (8011aec <__NVIC_SetPriority+0x4c>)
 8011aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011abe:	0112      	lsls	r2, r2, #4
 8011ac0:	b2d2      	uxtb	r2, r2
 8011ac2:	440b      	add	r3, r1
 8011ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011ac8:	e00a      	b.n	8011ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	b2da      	uxtb	r2, r3
 8011ace:	4908      	ldr	r1, [pc, #32]	; (8011af0 <__NVIC_SetPriority+0x50>)
 8011ad0:	79fb      	ldrb	r3, [r7, #7]
 8011ad2:	f003 030f 	and.w	r3, r3, #15
 8011ad6:	3b04      	subs	r3, #4
 8011ad8:	0112      	lsls	r2, r2, #4
 8011ada:	b2d2      	uxtb	r2, r2
 8011adc:	440b      	add	r3, r1
 8011ade:	761a      	strb	r2, [r3, #24]
}
 8011ae0:	bf00      	nop
 8011ae2:	370c      	adds	r7, #12
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr
 8011aec:	e000e100 	.word	0xe000e100
 8011af0:	e000ed00 	.word	0xe000ed00

08011af4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011af4:	b580      	push	{r7, lr}
 8011af6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011af8:	4b05      	ldr	r3, [pc, #20]	; (8011b10 <SysTick_Handler+0x1c>)
 8011afa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011afc:	f002 f818 	bl	8013b30 <xTaskGetSchedulerState>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d001      	beq.n	8011b0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011b06:	f002 fdff 	bl	8014708 <xPortSysTickHandler>
  }
}
 8011b0a:	bf00      	nop
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	e000e010 	.word	0xe000e010

08011b14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011b14:	b580      	push	{r7, lr}
 8011b16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011b18:	2100      	movs	r1, #0
 8011b1a:	f06f 0004 	mvn.w	r0, #4
 8011b1e:	f7ff ffbf 	bl	8011aa0 <__NVIC_SetPriority>
#endif
}
 8011b22:	bf00      	nop
 8011b24:	bd80      	pop	{r7, pc}
	...

08011b28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b2e:	f3ef 8305 	mrs	r3, IPSR
 8011b32:	603b      	str	r3, [r7, #0]
  return(result);
 8011b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d003      	beq.n	8011b42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011b3a:	f06f 0305 	mvn.w	r3, #5
 8011b3e:	607b      	str	r3, [r7, #4]
 8011b40:	e00c      	b.n	8011b5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011b42:	4b0a      	ldr	r3, [pc, #40]	; (8011b6c <osKernelInitialize+0x44>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d105      	bne.n	8011b56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011b4a:	4b08      	ldr	r3, [pc, #32]	; (8011b6c <osKernelInitialize+0x44>)
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011b50:	2300      	movs	r3, #0
 8011b52:	607b      	str	r3, [r7, #4]
 8011b54:	e002      	b.n	8011b5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011b56:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011b5c:	687b      	ldr	r3, [r7, #4]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	200003a4 	.word	0x200003a4

08011b70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b76:	f3ef 8305 	mrs	r3, IPSR
 8011b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8011b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d003      	beq.n	8011b8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011b82:	f06f 0305 	mvn.w	r3, #5
 8011b86:	607b      	str	r3, [r7, #4]
 8011b88:	e010      	b.n	8011bac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011b8a:	4b0b      	ldr	r3, [pc, #44]	; (8011bb8 <osKernelStart+0x48>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d109      	bne.n	8011ba6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011b92:	f7ff ffbf 	bl	8011b14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011b96:	4b08      	ldr	r3, [pc, #32]	; (8011bb8 <osKernelStart+0x48>)
 8011b98:	2202      	movs	r2, #2
 8011b9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011b9c:	f001 fb6c 	bl	8013278 <vTaskStartScheduler>
      stat = osOK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	607b      	str	r3, [r7, #4]
 8011ba4:	e002      	b.n	8011bac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8011baa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011bac:	687b      	ldr	r3, [r7, #4]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	200003a4 	.word	0x200003a4

08011bbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b08e      	sub	sp, #56	; 0x38
 8011bc0:	af04      	add	r7, sp, #16
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bcc:	f3ef 8305 	mrs	r3, IPSR
 8011bd0:	617b      	str	r3, [r7, #20]
  return(result);
 8011bd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d17e      	bne.n	8011cd6 <osThreadNew+0x11a>
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d07b      	beq.n	8011cd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011bde:	2380      	movs	r3, #128	; 0x80
 8011be0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011be2:	2318      	movs	r3, #24
 8011be4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011bea:	f04f 33ff 	mov.w	r3, #4294967295
 8011bee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d045      	beq.n	8011c82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <osThreadNew+0x48>
        name = attr->name;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	699b      	ldr	r3, [r3, #24]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d002      	beq.n	8011c12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	699b      	ldr	r3, [r3, #24]
 8011c10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d008      	beq.n	8011c2a <osThreadNew+0x6e>
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	2b38      	cmp	r3, #56	; 0x38
 8011c1c:	d805      	bhi.n	8011c2a <osThreadNew+0x6e>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	f003 0301 	and.w	r3, r3, #1
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d001      	beq.n	8011c2e <osThreadNew+0x72>
        return (NULL);
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	e054      	b.n	8011cd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	695b      	ldr	r3, [r3, #20]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d003      	beq.n	8011c3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	695b      	ldr	r3, [r3, #20]
 8011c3a:	089b      	lsrs	r3, r3, #2
 8011c3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d00e      	beq.n	8011c64 <osThreadNew+0xa8>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	2bbb      	cmp	r3, #187	; 0xbb
 8011c4c:	d90a      	bls.n	8011c64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d006      	beq.n	8011c64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	695b      	ldr	r3, [r3, #20]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d002      	beq.n	8011c64 <osThreadNew+0xa8>
        mem = 1;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	61bb      	str	r3, [r7, #24]
 8011c62:	e010      	b.n	8011c86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	689b      	ldr	r3, [r3, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10c      	bne.n	8011c86 <osThreadNew+0xca>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d108      	bne.n	8011c86 <osThreadNew+0xca>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	691b      	ldr	r3, [r3, #16]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d104      	bne.n	8011c86 <osThreadNew+0xca>
          mem = 0;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	61bb      	str	r3, [r7, #24]
 8011c80:	e001      	b.n	8011c86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d110      	bne.n	8011cae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c94:	9202      	str	r2, [sp, #8]
 8011c96:	9301      	str	r3, [sp, #4]
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	6a3a      	ldr	r2, [r7, #32]
 8011ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f001 f824 	bl	8012cf0 <xTaskCreateStatic>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	613b      	str	r3, [r7, #16]
 8011cac:	e013      	b.n	8011cd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d110      	bne.n	8011cd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011cb4:	6a3b      	ldr	r3, [r7, #32]
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	f107 0310 	add.w	r3, r7, #16
 8011cbc:	9301      	str	r3, [sp, #4]
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f001 f86f 	bl	8012daa <xTaskCreate>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d001      	beq.n	8011cd6 <osThreadNew+0x11a>
            hTask = NULL;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011cd6:	693b      	ldr	r3, [r7, #16]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3728      	adds	r7, #40	; 0x28
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cec:	f3ef 8305 	mrs	r3, IPSR
 8011cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8011cf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d003      	beq.n	8011d00 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011cf8:	f06f 0305 	mvn.w	r3, #5
 8011cfc:	617b      	str	r3, [r7, #20]
 8011cfe:	e017      	b.n	8011d30 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d103      	bne.n	8011d0e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8011d06:	f06f 0303 	mvn.w	r3, #3
 8011d0a:	617b      	str	r3, [r7, #20]
 8011d0c:	e010      	b.n	8011d30 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8011d0e:	6938      	ldr	r0, [r7, #16]
 8011d10:	f001 fa4c 	bl	80131ac <eTaskGetState>
 8011d14:	4603      	mov	r3, r0
 8011d16:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d005      	beq.n	8011d2a <osThreadTerminate+0x4a>
      stat = osOK;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8011d22:	6938      	ldr	r0, [r7, #16]
 8011d24:	f001 f99c 	bl	8013060 <vTaskDelete>
 8011d28:	e002      	b.n	8011d30 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8011d2a:	f06f 0302 	mvn.w	r3, #2
 8011d2e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8011d30:	697b      	ldr	r3, [r7, #20]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3718      	adds	r7, #24
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b084      	sub	sp, #16
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d42:	f3ef 8305 	mrs	r3, IPSR
 8011d46:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d003      	beq.n	8011d56 <osDelay+0x1c>
    stat = osErrorISR;
 8011d4e:	f06f 0305 	mvn.w	r3, #5
 8011d52:	60fb      	str	r3, [r7, #12]
 8011d54:	e007      	b.n	8011d66 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d002      	beq.n	8011d66 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f001 f9ef 	bl	8013144 <vTaskDelay>
    }
  }

  return (stat);
 8011d66:	68fb      	ldr	r3, [r7, #12]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b08a      	sub	sp, #40	; 0x28
 8011d74:	af02      	add	r7, sp, #8
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d80:	f3ef 8305 	mrs	r3, IPSR
 8011d84:	613b      	str	r3, [r7, #16]
  return(result);
 8011d86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d15f      	bne.n	8011e4c <osMessageQueueNew+0xdc>
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d05c      	beq.n	8011e4c <osMessageQueueNew+0xdc>
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d059      	beq.n	8011e4c <osMessageQueueNew+0xdc>
    mem = -1;
 8011d98:	f04f 33ff 	mov.w	r3, #4294967295
 8011d9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d029      	beq.n	8011df8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	689b      	ldr	r3, [r3, #8]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d012      	beq.n	8011dd2 <osMessageQueueNew+0x62>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	2b4f      	cmp	r3, #79	; 0x4f
 8011db2:	d90e      	bls.n	8011dd2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d00a      	beq.n	8011dd2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	695a      	ldr	r2, [r3, #20]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	68b9      	ldr	r1, [r7, #8]
 8011dc4:	fb01 f303 	mul.w	r3, r1, r3
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d302      	bcc.n	8011dd2 <osMessageQueueNew+0x62>
        mem = 1;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	61bb      	str	r3, [r7, #24]
 8011dd0:	e014      	b.n	8011dfc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d110      	bne.n	8011dfc <osMessageQueueNew+0x8c>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d10c      	bne.n	8011dfc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d108      	bne.n	8011dfc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	695b      	ldr	r3, [r3, #20]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d104      	bne.n	8011dfc <osMessageQueueNew+0x8c>
          mem = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	61bb      	str	r3, [r7, #24]
 8011df6:	e001      	b.n	8011dfc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d10b      	bne.n	8011e1a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	691a      	ldr	r2, [r3, #16]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	689b      	ldr	r3, [r3, #8]
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	9100      	str	r1, [sp, #0]
 8011e0e:	68b9      	ldr	r1, [r7, #8]
 8011e10:	68f8      	ldr	r0, [r7, #12]
 8011e12:	f000 fa2f 	bl	8012274 <xQueueGenericCreateStatic>
 8011e16:	61f8      	str	r0, [r7, #28]
 8011e18:	e008      	b.n	8011e2c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d105      	bne.n	8011e2c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011e20:	2200      	movs	r2, #0
 8011e22:	68b9      	ldr	r1, [r7, #8]
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f000 fa9d 	bl	8012364 <xQueueGenericCreate>
 8011e2a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00c      	beq.n	8011e4c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d003      	beq.n	8011e40 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	617b      	str	r3, [r7, #20]
 8011e3e:	e001      	b.n	8011e44 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011e40:	2300      	movs	r3, #0
 8011e42:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011e44:	6979      	ldr	r1, [r7, #20]
 8011e46:	69f8      	ldr	r0, [r7, #28]
 8011e48:	f000 fef4 	bl	8012c34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011e4c:	69fb      	ldr	r3, [r7, #28]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3720      	adds	r7, #32
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
	...

08011e58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b088      	sub	sp, #32
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	603b      	str	r3, [r7, #0]
 8011e64:	4613      	mov	r3, r2
 8011e66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e70:	f3ef 8305 	mrs	r3, IPSR
 8011e74:	617b      	str	r3, [r7, #20]
  return(result);
 8011e76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d028      	beq.n	8011ece <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d005      	beq.n	8011e8e <osMessageQueuePut+0x36>
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d002      	beq.n	8011e8e <osMessageQueuePut+0x36>
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d003      	beq.n	8011e96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011e8e:	f06f 0303 	mvn.w	r3, #3
 8011e92:	61fb      	str	r3, [r7, #28]
 8011e94:	e038      	b.n	8011f08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011e96:	2300      	movs	r3, #0
 8011e98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011e9a:	f107 0210 	add.w	r2, r7, #16
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	68b9      	ldr	r1, [r7, #8]
 8011ea2:	69b8      	ldr	r0, [r7, #24]
 8011ea4:	f000 fbba 	bl	801261c <xQueueGenericSendFromISR>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d003      	beq.n	8011eb6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011eae:	f06f 0302 	mvn.w	r3, #2
 8011eb2:	61fb      	str	r3, [r7, #28]
 8011eb4:	e028      	b.n	8011f08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d025      	beq.n	8011f08 <osMessageQueuePut+0xb0>
 8011ebc:	4b15      	ldr	r3, [pc, #84]	; (8011f14 <osMessageQueuePut+0xbc>)
 8011ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ec2:	601a      	str	r2, [r3, #0]
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	f3bf 8f6f 	isb	sy
 8011ecc:	e01c      	b.n	8011f08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <osMessageQueuePut+0x82>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d103      	bne.n	8011ee2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011eda:	f06f 0303 	mvn.w	r3, #3
 8011ede:	61fb      	str	r3, [r7, #28]
 8011ee0:	e012      	b.n	8011f08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	683a      	ldr	r2, [r7, #0]
 8011ee6:	68b9      	ldr	r1, [r7, #8]
 8011ee8:	69b8      	ldr	r0, [r7, #24]
 8011eea:	f000 fa99 	bl	8012420 <xQueueGenericSend>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d009      	beq.n	8011f08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d003      	beq.n	8011f02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011efa:	f06f 0301 	mvn.w	r3, #1
 8011efe:	61fb      	str	r3, [r7, #28]
 8011f00:	e002      	b.n	8011f08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011f02:	f06f 0302 	mvn.w	r3, #2
 8011f06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011f08:	69fb      	ldr	r3, [r7, #28]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3720      	adds	r7, #32
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	e000ed04 	.word	0xe000ed04

08011f18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b088      	sub	sp, #32
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
 8011f24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f2e:	f3ef 8305 	mrs	r3, IPSR
 8011f32:	617b      	str	r3, [r7, #20]
  return(result);
 8011f34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d028      	beq.n	8011f8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d005      	beq.n	8011f4c <osMessageQueueGet+0x34>
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <osMessageQueueGet+0x34>
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d003      	beq.n	8011f54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011f4c:	f06f 0303 	mvn.w	r3, #3
 8011f50:	61fb      	str	r3, [r7, #28]
 8011f52:	e037      	b.n	8011fc4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011f54:	2300      	movs	r3, #0
 8011f56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011f58:	f107 0310 	add.w	r3, r7, #16
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	68b9      	ldr	r1, [r7, #8]
 8011f60:	69b8      	ldr	r0, [r7, #24]
 8011f62:	f000 fcd7 	bl	8012914 <xQueueReceiveFromISR>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d003      	beq.n	8011f74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011f6c:	f06f 0302 	mvn.w	r3, #2
 8011f70:	61fb      	str	r3, [r7, #28]
 8011f72:	e027      	b.n	8011fc4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d024      	beq.n	8011fc4 <osMessageQueueGet+0xac>
 8011f7a:	4b15      	ldr	r3, [pc, #84]	; (8011fd0 <osMessageQueueGet+0xb8>)
 8011f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f80:	601a      	str	r2, [r3, #0]
 8011f82:	f3bf 8f4f 	dsb	sy
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	e01b      	b.n	8011fc4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d002      	beq.n	8011f98 <osMessageQueueGet+0x80>
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d103      	bne.n	8011fa0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011f98:	f06f 0303 	mvn.w	r3, #3
 8011f9c:	61fb      	str	r3, [r7, #28]
 8011f9e:	e011      	b.n	8011fc4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011fa0:	683a      	ldr	r2, [r7, #0]
 8011fa2:	68b9      	ldr	r1, [r7, #8]
 8011fa4:	69b8      	ldr	r0, [r7, #24]
 8011fa6:	f000 fbd5 	bl	8012754 <xQueueReceive>
 8011faa:	4603      	mov	r3, r0
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d009      	beq.n	8011fc4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d003      	beq.n	8011fbe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011fb6:	f06f 0301 	mvn.w	r3, #1
 8011fba:	61fb      	str	r3, [r7, #28]
 8011fbc:	e002      	b.n	8011fc4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011fbe:	f06f 0302 	mvn.w	r3, #2
 8011fc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011fc4:	69fb      	ldr	r3, [r7, #28]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3720      	adds	r7, #32
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	e000ed04 	.word	0xe000ed04

08011fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011fd4:	b480      	push	{r7}
 8011fd6:	b085      	sub	sp, #20
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	4a07      	ldr	r2, [pc, #28]	; (8012000 <vApplicationGetIdleTaskMemory+0x2c>)
 8011fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	4a06      	ldr	r2, [pc, #24]	; (8012004 <vApplicationGetIdleTaskMemory+0x30>)
 8011fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2280      	movs	r2, #128	; 0x80
 8011ff0:	601a      	str	r2, [r3, #0]
}
 8011ff2:	bf00      	nop
 8011ff4:	3714      	adds	r7, #20
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	200003a8 	.word	0x200003a8
 8012004:	20000464 	.word	0x20000464

08012008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012008:	b480      	push	{r7}
 801200a:	b085      	sub	sp, #20
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	4a07      	ldr	r2, [pc, #28]	; (8012034 <vApplicationGetTimerTaskMemory+0x2c>)
 8012018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	4a06      	ldr	r2, [pc, #24]	; (8012038 <vApplicationGetTimerTaskMemory+0x30>)
 801201e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012026:	601a      	str	r2, [r3, #0]
}
 8012028:	bf00      	nop
 801202a:	3714      	adds	r7, #20
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr
 8012034:	20000664 	.word	0x20000664
 8012038:	20000720 	.word	0x20000720

0801203c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801203c:	b480      	push	{r7}
 801203e:	b083      	sub	sp, #12
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f103 0208 	add.w	r2, r3, #8
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f04f 32ff 	mov.w	r2, #4294967295
 8012054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f103 0208 	add.w	r2, r3, #8
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f103 0208 	add.w	r2, r3, #8
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012070:	bf00      	nop
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr

0801207c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801208a:	bf00      	nop
 801208c:	370c      	adds	r7, #12
 801208e:	46bd      	mov	sp, r7
 8012090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012094:	4770      	bx	lr

08012096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012096:	b480      	push	{r7}
 8012098:	b085      	sub	sp, #20
 801209a:	af00      	add	r7, sp, #0
 801209c:	6078      	str	r0, [r7, #4]
 801209e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	68fa      	ldr	r2, [r7, #12]
 80120aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	689a      	ldr	r2, [r3, #8]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	683a      	ldr	r2, [r7, #0]
 80120ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	683a      	ldr	r2, [r7, #0]
 80120c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	1c5a      	adds	r2, r3, #1
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	601a      	str	r2, [r3, #0]
}
 80120d2:	bf00      	nop
 80120d4:	3714      	adds	r7, #20
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80120de:	b480      	push	{r7}
 80120e0:	b085      	sub	sp, #20
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f4:	d103      	bne.n	80120fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	e00c      	b.n	8012118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3308      	adds	r3, #8
 8012102:	60fb      	str	r3, [r7, #12]
 8012104:	e002      	b.n	801210c <vListInsert+0x2e>
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	60fb      	str	r3, [r7, #12]
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	429a      	cmp	r2, r3
 8012116:	d2f6      	bcs.n	8012106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	685a      	ldr	r2, [r3, #4]
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	683a      	ldr	r2, [r7, #0]
 8012126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	683a      	ldr	r2, [r7, #0]
 8012132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	1c5a      	adds	r2, r3, #1
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	601a      	str	r2, [r3, #0]
}
 8012144:	bf00      	nop
 8012146:	3714      	adds	r7, #20
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	691b      	ldr	r3, [r3, #16]
 801215c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	6892      	ldr	r2, [r2, #8]
 8012166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	6852      	ldr	r2, [r2, #4]
 8012170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	429a      	cmp	r2, r3
 801217a:	d103      	bne.n	8012184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	689a      	ldr	r2, [r3, #8]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	1e5a      	subs	r2, r3, #1
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
}
 8012198:	4618      	mov	r0, r3
 801219a:	3714      	adds	r7, #20
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d10a      	bne.n	80121ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80121b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121bc:	f383 8811 	msr	BASEPRI, r3
 80121c0:	f3bf 8f6f 	isb	sy
 80121c4:	f3bf 8f4f 	dsb	sy
 80121c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80121ca:	bf00      	nop
 80121cc:	e7fe      	b.n	80121cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80121ce:	f002 fa09 	bl	80145e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121da:	68f9      	ldr	r1, [r7, #12]
 80121dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80121de:	fb01 f303 	mul.w	r3, r1, r3
 80121e2:	441a      	add	r2, r3
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2200      	movs	r2, #0
 80121ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121fe:	3b01      	subs	r3, #1
 8012200:	68f9      	ldr	r1, [r7, #12]
 8012202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012204:	fb01 f303 	mul.w	r3, r1, r3
 8012208:	441a      	add	r2, r3
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	22ff      	movs	r2, #255	; 0xff
 8012212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	22ff      	movs	r2, #255	; 0xff
 801221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d114      	bne.n	801224e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	691b      	ldr	r3, [r3, #16]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d01a      	beq.n	8012262 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3310      	adds	r3, #16
 8012230:	4618      	mov	r0, r3
 8012232:	f001 fabb 	bl	80137ac <xTaskRemoveFromEventList>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d012      	beq.n	8012262 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801223c:	4b0c      	ldr	r3, [pc, #48]	; (8012270 <xQueueGenericReset+0xcc>)
 801223e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012242:	601a      	str	r2, [r3, #0]
 8012244:	f3bf 8f4f 	dsb	sy
 8012248:	f3bf 8f6f 	isb	sy
 801224c:	e009      	b.n	8012262 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	3310      	adds	r3, #16
 8012252:	4618      	mov	r0, r3
 8012254:	f7ff fef2 	bl	801203c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	3324      	adds	r3, #36	; 0x24
 801225c:	4618      	mov	r0, r3
 801225e:	f7ff feed 	bl	801203c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012262:	f002 f9ef 	bl	8014644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012266:	2301      	movs	r3, #1
}
 8012268:	4618      	mov	r0, r3
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	e000ed04 	.word	0xe000ed04

08012274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012274:	b580      	push	{r7, lr}
 8012276:	b08e      	sub	sp, #56	; 0x38
 8012278:	af02      	add	r7, sp, #8
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
 8012280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d10a      	bne.n	801229e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012288:	f04f 0330 	mov.w	r3, #48	; 0x30
 801228c:	f383 8811 	msr	BASEPRI, r3
 8012290:	f3bf 8f6f 	isb	sy
 8012294:	f3bf 8f4f 	dsb	sy
 8012298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801229a:	bf00      	nop
 801229c:	e7fe      	b.n	801229c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d10a      	bne.n	80122ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80122a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122a8:	f383 8811 	msr	BASEPRI, r3
 80122ac:	f3bf 8f6f 	isb	sy
 80122b0:	f3bf 8f4f 	dsb	sy
 80122b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80122b6:	bf00      	nop
 80122b8:	e7fe      	b.n	80122b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <xQueueGenericCreateStatic+0x52>
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <xQueueGenericCreateStatic+0x56>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e000      	b.n	80122cc <xQueueGenericCreateStatic+0x58>
 80122ca:	2300      	movs	r3, #0
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10a      	bne.n	80122e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80122d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	623b      	str	r3, [r7, #32]
}
 80122e2:	bf00      	nop
 80122e4:	e7fe      	b.n	80122e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d102      	bne.n	80122f2 <xQueueGenericCreateStatic+0x7e>
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d101      	bne.n	80122f6 <xQueueGenericCreateStatic+0x82>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <xQueueGenericCreateStatic+0x84>
 80122f6:	2300      	movs	r3, #0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d10a      	bne.n	8012312 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80122fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012300:	f383 8811 	msr	BASEPRI, r3
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	61fb      	str	r3, [r7, #28]
}
 801230e:	bf00      	nop
 8012310:	e7fe      	b.n	8012310 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012312:	2350      	movs	r3, #80	; 0x50
 8012314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b50      	cmp	r3, #80	; 0x50
 801231a:	d00a      	beq.n	8012332 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801231c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	61bb      	str	r3, [r7, #24]
}
 801232e:	bf00      	nop
 8012330:	e7fe      	b.n	8012330 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012332:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00d      	beq.n	801235a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012340:	2201      	movs	r2, #1
 8012342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012346:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	9300      	str	r3, [sp, #0]
 801234e:	4613      	mov	r3, r2
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	68b9      	ldr	r1, [r7, #8]
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f000 f83f 	bl	80123d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801235c:	4618      	mov	r0, r3
 801235e:	3730      	adds	r7, #48	; 0x30
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012364:	b580      	push	{r7, lr}
 8012366:	b08a      	sub	sp, #40	; 0x28
 8012368:	af02      	add	r7, sp, #8
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	4613      	mov	r3, r2
 8012370:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d10a      	bne.n	801238e <xQueueGenericCreate+0x2a>
	__asm volatile
 8012378:	f04f 0330 	mov.w	r3, #48	; 0x30
 801237c:	f383 8811 	msr	BASEPRI, r3
 8012380:	f3bf 8f6f 	isb	sy
 8012384:	f3bf 8f4f 	dsb	sy
 8012388:	613b      	str	r3, [r7, #16]
}
 801238a:	bf00      	nop
 801238c:	e7fe      	b.n	801238c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	fb02 f303 	mul.w	r3, r2, r3
 8012396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	3350      	adds	r3, #80	; 0x50
 801239c:	4618      	mov	r0, r3
 801239e:	f002 fa43 	bl	8014828 <pvPortMalloc>
 80123a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d011      	beq.n	80123ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80123aa:	69bb      	ldr	r3, [r7, #24]
 80123ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	3350      	adds	r3, #80	; 0x50
 80123b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80123b4:	69bb      	ldr	r3, [r7, #24]
 80123b6:	2200      	movs	r2, #0
 80123b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80123bc:	79fa      	ldrb	r2, [r7, #7]
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	4613      	mov	r3, r2
 80123c4:	697a      	ldr	r2, [r7, #20]
 80123c6:	68b9      	ldr	r1, [r7, #8]
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f000 f805 	bl	80123d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80123ce:	69bb      	ldr	r3, [r7, #24]
	}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3720      	adds	r7, #32
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d103      	bne.n	80123f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	69ba      	ldr	r2, [r7, #24]
 80123f0:	601a      	str	r2, [r3, #0]
 80123f2:	e002      	b.n	80123fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80123fa:	69bb      	ldr	r3, [r7, #24]
 80123fc:	68fa      	ldr	r2, [r7, #12]
 80123fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	68ba      	ldr	r2, [r7, #8]
 8012404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012406:	2101      	movs	r1, #1
 8012408:	69b8      	ldr	r0, [r7, #24]
 801240a:	f7ff fecb 	bl	80121a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	78fa      	ldrb	r2, [r7, #3]
 8012412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012416:	bf00      	nop
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
	...

08012420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b08e      	sub	sp, #56	; 0x38
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
 801242c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801242e:	2300      	movs	r3, #0
 8012430:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	2b00      	cmp	r3, #0
 801243a:	d10a      	bne.n	8012452 <xQueueGenericSend+0x32>
	__asm volatile
 801243c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801244e:	bf00      	nop
 8012450:	e7fe      	b.n	8012450 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d103      	bne.n	8012460 <xQueueGenericSend+0x40>
 8012458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245c:	2b00      	cmp	r3, #0
 801245e:	d101      	bne.n	8012464 <xQueueGenericSend+0x44>
 8012460:	2301      	movs	r3, #1
 8012462:	e000      	b.n	8012466 <xQueueGenericSend+0x46>
 8012464:	2300      	movs	r3, #0
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10a      	bne.n	8012480 <xQueueGenericSend+0x60>
	__asm volatile
 801246a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801246e:	f383 8811 	msr	BASEPRI, r3
 8012472:	f3bf 8f6f 	isb	sy
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801247c:	bf00      	nop
 801247e:	e7fe      	b.n	801247e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	2b02      	cmp	r3, #2
 8012484:	d103      	bne.n	801248e <xQueueGenericSend+0x6e>
 8012486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801248a:	2b01      	cmp	r3, #1
 801248c:	d101      	bne.n	8012492 <xQueueGenericSend+0x72>
 801248e:	2301      	movs	r3, #1
 8012490:	e000      	b.n	8012494 <xQueueGenericSend+0x74>
 8012492:	2300      	movs	r3, #0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d10a      	bne.n	80124ae <xQueueGenericSend+0x8e>
	__asm volatile
 8012498:	f04f 0330 	mov.w	r3, #48	; 0x30
 801249c:	f383 8811 	msr	BASEPRI, r3
 80124a0:	f3bf 8f6f 	isb	sy
 80124a4:	f3bf 8f4f 	dsb	sy
 80124a8:	623b      	str	r3, [r7, #32]
}
 80124aa:	bf00      	nop
 80124ac:	e7fe      	b.n	80124ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124ae:	f001 fb3f 	bl	8013b30 <xTaskGetSchedulerState>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d102      	bne.n	80124be <xQueueGenericSend+0x9e>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d101      	bne.n	80124c2 <xQueueGenericSend+0xa2>
 80124be:	2301      	movs	r3, #1
 80124c0:	e000      	b.n	80124c4 <xQueueGenericSend+0xa4>
 80124c2:	2300      	movs	r3, #0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10a      	bne.n	80124de <xQueueGenericSend+0xbe>
	__asm volatile
 80124c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124cc:	f383 8811 	msr	BASEPRI, r3
 80124d0:	f3bf 8f6f 	isb	sy
 80124d4:	f3bf 8f4f 	dsb	sy
 80124d8:	61fb      	str	r3, [r7, #28]
}
 80124da:	bf00      	nop
 80124dc:	e7fe      	b.n	80124dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124de:	f002 f881 	bl	80145e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d302      	bcc.n	80124f4 <xQueueGenericSend+0xd4>
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d129      	bne.n	8012548 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124f4:	683a      	ldr	r2, [r7, #0]
 80124f6:	68b9      	ldr	r1, [r7, #8]
 80124f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124fa:	f000 fa8b 	bl	8012a14 <prvCopyDataToQueue>
 80124fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012504:	2b00      	cmp	r3, #0
 8012506:	d010      	beq.n	801252a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250a:	3324      	adds	r3, #36	; 0x24
 801250c:	4618      	mov	r0, r3
 801250e:	f001 f94d 	bl	80137ac <xTaskRemoveFromEventList>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d013      	beq.n	8012540 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012518:	4b3f      	ldr	r3, [pc, #252]	; (8012618 <xQueueGenericSend+0x1f8>)
 801251a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801251e:	601a      	str	r2, [r3, #0]
 8012520:	f3bf 8f4f 	dsb	sy
 8012524:	f3bf 8f6f 	isb	sy
 8012528:	e00a      	b.n	8012540 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252c:	2b00      	cmp	r3, #0
 801252e:	d007      	beq.n	8012540 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012530:	4b39      	ldr	r3, [pc, #228]	; (8012618 <xQueueGenericSend+0x1f8>)
 8012532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012536:	601a      	str	r2, [r3, #0]
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012540:	f002 f880 	bl	8014644 <vPortExitCritical>
				return pdPASS;
 8012544:	2301      	movs	r3, #1
 8012546:	e063      	b.n	8012610 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d103      	bne.n	8012556 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801254e:	f002 f879 	bl	8014644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012552:	2300      	movs	r3, #0
 8012554:	e05c      	b.n	8012610 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012558:	2b00      	cmp	r3, #0
 801255a:	d106      	bne.n	801256a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801255c:	f107 0314 	add.w	r3, r7, #20
 8012560:	4618      	mov	r0, r3
 8012562:	f001 f987 	bl	8013874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012566:	2301      	movs	r3, #1
 8012568:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801256a:	f002 f86b 	bl	8014644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801256e:	f000 fef3 	bl	8013358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012572:	f002 f837 	bl	80145e4 <vPortEnterCritical>
 8012576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801257c:	b25b      	sxtb	r3, r3
 801257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012582:	d103      	bne.n	801258c <xQueueGenericSend+0x16c>
 8012584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012586:	2200      	movs	r2, #0
 8012588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012592:	b25b      	sxtb	r3, r3
 8012594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012598:	d103      	bne.n	80125a2 <xQueueGenericSend+0x182>
 801259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259c:	2200      	movs	r2, #0
 801259e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80125a2:	f002 f84f 	bl	8014644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125a6:	1d3a      	adds	r2, r7, #4
 80125a8:	f107 0314 	add.w	r3, r7, #20
 80125ac:	4611      	mov	r1, r2
 80125ae:	4618      	mov	r0, r3
 80125b0:	f001 f976 	bl	80138a0 <xTaskCheckForTimeOut>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d124      	bne.n	8012604 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80125ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125bc:	f000 fb22 	bl	8012c04 <prvIsQueueFull>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d018      	beq.n	80125f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80125c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c8:	3310      	adds	r3, #16
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	4611      	mov	r1, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f001 f89c 	bl	801370c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80125d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125d6:	f000 faad 	bl	8012b34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80125da:	f000 fecb 	bl	8013374 <xTaskResumeAll>
 80125de:	4603      	mov	r3, r0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	f47f af7c 	bne.w	80124de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80125e6:	4b0c      	ldr	r3, [pc, #48]	; (8012618 <xQueueGenericSend+0x1f8>)
 80125e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125ec:	601a      	str	r2, [r3, #0]
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	e772      	b.n	80124de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80125f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125fa:	f000 fa9b 	bl	8012b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125fe:	f000 feb9 	bl	8013374 <xTaskResumeAll>
 8012602:	e76c      	b.n	80124de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012606:	f000 fa95 	bl	8012b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801260a:	f000 feb3 	bl	8013374 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801260e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012610:	4618      	mov	r0, r3
 8012612:	3738      	adds	r7, #56	; 0x38
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	e000ed04 	.word	0xe000ed04

0801261c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b090      	sub	sp, #64	; 0x40
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012630:	2b00      	cmp	r3, #0
 8012632:	d10a      	bne.n	801264a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012634:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012638:	f383 8811 	msr	BASEPRI, r3
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	f3bf 8f4f 	dsb	sy
 8012644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012646:	bf00      	nop
 8012648:	e7fe      	b.n	8012648 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d103      	bne.n	8012658 <xQueueGenericSendFromISR+0x3c>
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <xQueueGenericSendFromISR+0x40>
 8012658:	2301      	movs	r3, #1
 801265a:	e000      	b.n	801265e <xQueueGenericSendFromISR+0x42>
 801265c:	2300      	movs	r3, #0
 801265e:	2b00      	cmp	r3, #0
 8012660:	d10a      	bne.n	8012678 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012662:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012666:	f383 8811 	msr	BASEPRI, r3
 801266a:	f3bf 8f6f 	isb	sy
 801266e:	f3bf 8f4f 	dsb	sy
 8012672:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012674:	bf00      	nop
 8012676:	e7fe      	b.n	8012676 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	2b02      	cmp	r3, #2
 801267c:	d103      	bne.n	8012686 <xQueueGenericSendFromISR+0x6a>
 801267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012682:	2b01      	cmp	r3, #1
 8012684:	d101      	bne.n	801268a <xQueueGenericSendFromISR+0x6e>
 8012686:	2301      	movs	r3, #1
 8012688:	e000      	b.n	801268c <xQueueGenericSendFromISR+0x70>
 801268a:	2300      	movs	r3, #0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d10a      	bne.n	80126a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012690:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012694:	f383 8811 	msr	BASEPRI, r3
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	623b      	str	r3, [r7, #32]
}
 80126a2:	bf00      	nop
 80126a4:	e7fe      	b.n	80126a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126a6:	f002 f87f 	bl	80147a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80126aa:	f3ef 8211 	mrs	r2, BASEPRI
 80126ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	61fa      	str	r2, [r7, #28]
 80126c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80126c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80126c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d302      	bcc.n	80126d8 <xQueueGenericSendFromISR+0xbc>
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	2b02      	cmp	r3, #2
 80126d6:	d12f      	bne.n	8012738 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126e8:	683a      	ldr	r2, [r7, #0]
 80126ea:	68b9      	ldr	r1, [r7, #8]
 80126ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126ee:	f000 f991 	bl	8012a14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80126f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80126f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126fa:	d112      	bne.n	8012722 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012700:	2b00      	cmp	r3, #0
 8012702:	d016      	beq.n	8012732 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012706:	3324      	adds	r3, #36	; 0x24
 8012708:	4618      	mov	r0, r3
 801270a:	f001 f84f 	bl	80137ac <xTaskRemoveFromEventList>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00e      	beq.n	8012732 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00b      	beq.n	8012732 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2201      	movs	r2, #1
 801271e:	601a      	str	r2, [r3, #0]
 8012720:	e007      	b.n	8012732 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012726:	3301      	adds	r3, #1
 8012728:	b2db      	uxtb	r3, r3
 801272a:	b25a      	sxtb	r2, r3
 801272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012732:	2301      	movs	r3, #1
 8012734:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012736:	e001      	b.n	801273c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012738:	2300      	movs	r3, #0
 801273a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801273e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012746:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801274a:	4618      	mov	r0, r3
 801274c:	3740      	adds	r7, #64	; 0x40
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
	...

08012754 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b08c      	sub	sp, #48	; 0x30
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012760:	2300      	movs	r3, #0
 8012762:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10a      	bne.n	8012784 <xQueueReceive+0x30>
	__asm volatile
 801276e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012772:	f383 8811 	msr	BASEPRI, r3
 8012776:	f3bf 8f6f 	isb	sy
 801277a:	f3bf 8f4f 	dsb	sy
 801277e:	623b      	str	r3, [r7, #32]
}
 8012780:	bf00      	nop
 8012782:	e7fe      	b.n	8012782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d103      	bne.n	8012792 <xQueueReceive+0x3e>
 801278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801278e:	2b00      	cmp	r3, #0
 8012790:	d101      	bne.n	8012796 <xQueueReceive+0x42>
 8012792:	2301      	movs	r3, #1
 8012794:	e000      	b.n	8012798 <xQueueReceive+0x44>
 8012796:	2300      	movs	r3, #0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d10a      	bne.n	80127b2 <xQueueReceive+0x5e>
	__asm volatile
 801279c:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127a0:	f383 8811 	msr	BASEPRI, r3
 80127a4:	f3bf 8f6f 	isb	sy
 80127a8:	f3bf 8f4f 	dsb	sy
 80127ac:	61fb      	str	r3, [r7, #28]
}
 80127ae:	bf00      	nop
 80127b0:	e7fe      	b.n	80127b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127b2:	f001 f9bd 	bl	8013b30 <xTaskGetSchedulerState>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d102      	bne.n	80127c2 <xQueueReceive+0x6e>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d101      	bne.n	80127c6 <xQueueReceive+0x72>
 80127c2:	2301      	movs	r3, #1
 80127c4:	e000      	b.n	80127c8 <xQueueReceive+0x74>
 80127c6:	2300      	movs	r3, #0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d10a      	bne.n	80127e2 <xQueueReceive+0x8e>
	__asm volatile
 80127cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127d0:	f383 8811 	msr	BASEPRI, r3
 80127d4:	f3bf 8f6f 	isb	sy
 80127d8:	f3bf 8f4f 	dsb	sy
 80127dc:	61bb      	str	r3, [r7, #24]
}
 80127de:	bf00      	nop
 80127e0:	e7fe      	b.n	80127e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80127e2:	f001 feff 	bl	80145e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80127ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d01f      	beq.n	8012832 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80127f2:	68b9      	ldr	r1, [r7, #8]
 80127f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f6:	f000 f977 	bl	8012ae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80127fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fc:	1e5a      	subs	r2, r3, #1
 80127fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012800:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012804:	691b      	ldr	r3, [r3, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00f      	beq.n	801282a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	3310      	adds	r3, #16
 801280e:	4618      	mov	r0, r3
 8012810:	f000 ffcc 	bl	80137ac <xTaskRemoveFromEventList>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d007      	beq.n	801282a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801281a:	4b3d      	ldr	r3, [pc, #244]	; (8012910 <xQueueReceive+0x1bc>)
 801281c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	f3bf 8f4f 	dsb	sy
 8012826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801282a:	f001 ff0b 	bl	8014644 <vPortExitCritical>
				return pdPASS;
 801282e:	2301      	movs	r3, #1
 8012830:	e069      	b.n	8012906 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d103      	bne.n	8012840 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012838:	f001 ff04 	bl	8014644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801283c:	2300      	movs	r3, #0
 801283e:	e062      	b.n	8012906 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	2b00      	cmp	r3, #0
 8012844:	d106      	bne.n	8012854 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012846:	f107 0310 	add.w	r3, r7, #16
 801284a:	4618      	mov	r0, r3
 801284c:	f001 f812 	bl	8013874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012850:	2301      	movs	r3, #1
 8012852:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012854:	f001 fef6 	bl	8014644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012858:	f000 fd7e 	bl	8013358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801285c:	f001 fec2 	bl	80145e4 <vPortEnterCritical>
 8012860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012866:	b25b      	sxtb	r3, r3
 8012868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801286c:	d103      	bne.n	8012876 <xQueueReceive+0x122>
 801286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012870:	2200      	movs	r2, #0
 8012872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801287c:	b25b      	sxtb	r3, r3
 801287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012882:	d103      	bne.n	801288c <xQueueReceive+0x138>
 8012884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012886:	2200      	movs	r2, #0
 8012888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801288c:	f001 feda 	bl	8014644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012890:	1d3a      	adds	r2, r7, #4
 8012892:	f107 0310 	add.w	r3, r7, #16
 8012896:	4611      	mov	r1, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f001 f801 	bl	80138a0 <xTaskCheckForTimeOut>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d123      	bne.n	80128ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128a6:	f000 f997 	bl	8012bd8 <prvIsQueueEmpty>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d017      	beq.n	80128e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80128b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b2:	3324      	adds	r3, #36	; 0x24
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	4611      	mov	r1, r2
 80128b8:	4618      	mov	r0, r3
 80128ba:	f000 ff27 	bl	801370c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80128be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128c0:	f000 f938 	bl	8012b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80128c4:	f000 fd56 	bl	8013374 <xTaskResumeAll>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d189      	bne.n	80127e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80128ce:	4b10      	ldr	r3, [pc, #64]	; (8012910 <xQueueReceive+0x1bc>)
 80128d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128d4:	601a      	str	r2, [r3, #0]
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	e780      	b.n	80127e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80128e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128e2:	f000 f927 	bl	8012b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80128e6:	f000 fd45 	bl	8013374 <xTaskResumeAll>
 80128ea:	e77a      	b.n	80127e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80128ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128ee:	f000 f921 	bl	8012b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80128f2:	f000 fd3f 	bl	8013374 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128f8:	f000 f96e 	bl	8012bd8 <prvIsQueueEmpty>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	f43f af6f 	beq.w	80127e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012906:	4618      	mov	r0, r3
 8012908:	3730      	adds	r7, #48	; 0x30
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	e000ed04 	.word	0xe000ed04

08012914 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b08e      	sub	sp, #56	; 0x38
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	60b9      	str	r1, [r7, #8]
 801291e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012926:	2b00      	cmp	r3, #0
 8012928:	d10a      	bne.n	8012940 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801292a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801292e:	f383 8811 	msr	BASEPRI, r3
 8012932:	f3bf 8f6f 	isb	sy
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	623b      	str	r3, [r7, #32]
}
 801293c:	bf00      	nop
 801293e:	e7fe      	b.n	801293e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d103      	bne.n	801294e <xQueueReceiveFromISR+0x3a>
 8012946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801294a:	2b00      	cmp	r3, #0
 801294c:	d101      	bne.n	8012952 <xQueueReceiveFromISR+0x3e>
 801294e:	2301      	movs	r3, #1
 8012950:	e000      	b.n	8012954 <xQueueReceiveFromISR+0x40>
 8012952:	2300      	movs	r3, #0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d10a      	bne.n	801296e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012958:	f04f 0330 	mov.w	r3, #48	; 0x30
 801295c:	f383 8811 	msr	BASEPRI, r3
 8012960:	f3bf 8f6f 	isb	sy
 8012964:	f3bf 8f4f 	dsb	sy
 8012968:	61fb      	str	r3, [r7, #28]
}
 801296a:	bf00      	nop
 801296c:	e7fe      	b.n	801296c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801296e:	f001 ff1b 	bl	80147a8 <vPortValidateInterruptPriority>
	__asm volatile
 8012972:	f3ef 8211 	mrs	r2, BASEPRI
 8012976:	f04f 0330 	mov.w	r3, #48	; 0x30
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	61ba      	str	r2, [r7, #24]
 8012988:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801298a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801298c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012992:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012996:	2b00      	cmp	r3, #0
 8012998:	d02f      	beq.n	80129fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80129a4:	68b9      	ldr	r1, [r7, #8]
 80129a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129a8:	f000 f89e 	bl	8012ae8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80129ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ae:	1e5a      	subs	r2, r3, #1
 80129b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80129b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80129b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129bc:	d112      	bne.n	80129e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c0:	691b      	ldr	r3, [r3, #16]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d016      	beq.n	80129f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c8:	3310      	adds	r3, #16
 80129ca:	4618      	mov	r0, r3
 80129cc:	f000 feee 	bl	80137ac <xTaskRemoveFromEventList>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d00e      	beq.n	80129f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d00b      	beq.n	80129f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2201      	movs	r2, #1
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	e007      	b.n	80129f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80129e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129e8:	3301      	adds	r3, #1
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	b25a      	sxtb	r2, r3
 80129ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80129f4:	2301      	movs	r3, #1
 80129f6:	637b      	str	r3, [r7, #52]	; 0x34
 80129f8:	e001      	b.n	80129fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80129fa:	2300      	movs	r3, #0
 80129fc:	637b      	str	r3, [r7, #52]	; 0x34
 80129fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	f383 8811 	msr	BASEPRI, r3
}
 8012a08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3738      	adds	r7, #56	; 0x38
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012a20:	2300      	movs	r3, #0
 8012a22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d10d      	bne.n	8012a4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d14d      	bne.n	8012ad6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	689b      	ldr	r3, [r3, #8]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f001 f894 	bl	8013b6c <xTaskPriorityDisinherit>
 8012a44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	609a      	str	r2, [r3, #8]
 8012a4c:	e043      	b.n	8012ad6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d119      	bne.n	8012a88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	6858      	ldr	r0, [r3, #4]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	68b9      	ldr	r1, [r7, #8]
 8012a60:	f008 ff22 	bl	801b8a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	685a      	ldr	r2, [r3, #4]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a6c:	441a      	add	r2, r3
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	685a      	ldr	r2, [r3, #4]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d32b      	bcc.n	8012ad6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	605a      	str	r2, [r3, #4]
 8012a86:	e026      	b.n	8012ad6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	68d8      	ldr	r0, [r3, #12]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a90:	461a      	mov	r2, r3
 8012a92:	68b9      	ldr	r1, [r7, #8]
 8012a94:	f008 ff08 	bl	801b8a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	68da      	ldr	r2, [r3, #12]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aa0:	425b      	negs	r3, r3
 8012aa2:	441a      	add	r2, r3
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	68da      	ldr	r2, [r3, #12]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d207      	bcs.n	8012ac4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	689a      	ldr	r2, [r3, #8]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012abc:	425b      	negs	r3, r3
 8012abe:	441a      	add	r2, r3
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2b02      	cmp	r3, #2
 8012ac8:	d105      	bne.n	8012ad6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d002      	beq.n	8012ad6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	3b01      	subs	r3, #1
 8012ad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	1c5a      	adds	r2, r3, #1
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012ade:	697b      	ldr	r3, [r7, #20]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d018      	beq.n	8012b2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	68da      	ldr	r2, [r3, #12]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b02:	441a      	add	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	68da      	ldr	r2, [r3, #12]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d303      	bcc.n	8012b1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	68d9      	ldr	r1, [r3, #12]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b24:	461a      	mov	r2, r3
 8012b26:	6838      	ldr	r0, [r7, #0]
 8012b28:	f008 febe 	bl	801b8a8 <memcpy>
	}
}
 8012b2c:	bf00      	nop
 8012b2e:	3708      	adds	r7, #8
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012b3c:	f001 fd52 	bl	80145e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b48:	e011      	b.n	8012b6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d012      	beq.n	8012b78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	3324      	adds	r3, #36	; 0x24
 8012b56:	4618      	mov	r0, r3
 8012b58:	f000 fe28 	bl	80137ac <xTaskRemoveFromEventList>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d001      	beq.n	8012b66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012b62:	f000 feff 	bl	8013964 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012b66:	7bfb      	ldrb	r3, [r7, #15]
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	dce9      	bgt.n	8012b4a <prvUnlockQueue+0x16>
 8012b76:	e000      	b.n	8012b7a <prvUnlockQueue+0x46>
					break;
 8012b78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	22ff      	movs	r2, #255	; 0xff
 8012b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012b82:	f001 fd5f 	bl	8014644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012b86:	f001 fd2d 	bl	80145e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012b92:	e011      	b.n	8012bb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	691b      	ldr	r3, [r3, #16]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d012      	beq.n	8012bc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	3310      	adds	r3, #16
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f000 fe03 	bl	80137ac <xTaskRemoveFromEventList>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d001      	beq.n	8012bb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012bac:	f000 feda 	bl	8013964 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012bb0:	7bbb      	ldrb	r3, [r7, #14]
 8012bb2:	3b01      	subs	r3, #1
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	dce9      	bgt.n	8012b94 <prvUnlockQueue+0x60>
 8012bc0:	e000      	b.n	8012bc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012bc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	22ff      	movs	r2, #255	; 0xff
 8012bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012bcc:	f001 fd3a 	bl	8014644 <vPortExitCritical>
}
 8012bd0:	bf00      	nop
 8012bd2:	3710      	adds	r7, #16
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012be0:	f001 fd00 	bl	80145e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d102      	bne.n	8012bf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012bec:	2301      	movs	r3, #1
 8012bee:	60fb      	str	r3, [r7, #12]
 8012bf0:	e001      	b.n	8012bf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012bf6:	f001 fd25 	bl	8014644 <vPortExitCritical>

	return xReturn;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c0c:	f001 fcea 	bl	80145e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d102      	bne.n	8012c22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	60fb      	str	r3, [r7, #12]
 8012c20:	e001      	b.n	8012c26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012c22:	2300      	movs	r3, #0
 8012c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c26:	f001 fd0d 	bl	8014644 <vPortExitCritical>

	return xReturn;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c3e:	2300      	movs	r3, #0
 8012c40:	60fb      	str	r3, [r7, #12]
 8012c42:	e014      	b.n	8012c6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012c44:	4a0f      	ldr	r2, [pc, #60]	; (8012c84 <vQueueAddToRegistry+0x50>)
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d10b      	bne.n	8012c68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012c50:	490c      	ldr	r1, [pc, #48]	; (8012c84 <vQueueAddToRegistry+0x50>)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	683a      	ldr	r2, [r7, #0]
 8012c56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012c5a:	4a0a      	ldr	r2, [pc, #40]	; (8012c84 <vQueueAddToRegistry+0x50>)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	00db      	lsls	r3, r3, #3
 8012c60:	4413      	add	r3, r2
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012c66:	e006      	b.n	8012c76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	60fb      	str	r3, [r7, #12]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	2b07      	cmp	r3, #7
 8012c72:	d9e7      	bls.n	8012c44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012c74:	bf00      	nop
 8012c76:	bf00      	nop
 8012c78:	3714      	adds	r7, #20
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr
 8012c82:	bf00      	nop
 8012c84:	20003080 	.word	0x20003080

08012c88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b086      	sub	sp, #24
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012c98:	f001 fca4 	bl	80145e4 <vPortEnterCritical>
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ca2:	b25b      	sxtb	r3, r3
 8012ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ca8:	d103      	bne.n	8012cb2 <vQueueWaitForMessageRestricted+0x2a>
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cb8:	b25b      	sxtb	r3, r3
 8012cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cbe:	d103      	bne.n	8012cc8 <vQueueWaitForMessageRestricted+0x40>
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cc8:	f001 fcbc 	bl	8014644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d106      	bne.n	8012ce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	3324      	adds	r3, #36	; 0x24
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	68b9      	ldr	r1, [r7, #8]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f000 fd39 	bl	8013754 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012ce2:	6978      	ldr	r0, [r7, #20]
 8012ce4:	f7ff ff26 	bl	8012b34 <prvUnlockQueue>
	}
 8012ce8:	bf00      	nop
 8012cea:	3718      	adds	r7, #24
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b08e      	sub	sp, #56	; 0x38
 8012cf4:	af04      	add	r7, sp, #16
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d10a      	bne.n	8012d1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012d04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d08:	f383 8811 	msr	BASEPRI, r3
 8012d0c:	f3bf 8f6f 	isb	sy
 8012d10:	f3bf 8f4f 	dsb	sy
 8012d14:	623b      	str	r3, [r7, #32]
}
 8012d16:	bf00      	nop
 8012d18:	e7fe      	b.n	8012d18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d10a      	bne.n	8012d36 <xTaskCreateStatic+0x46>
	__asm volatile
 8012d20:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	61fb      	str	r3, [r7, #28]
}
 8012d32:	bf00      	nop
 8012d34:	e7fe      	b.n	8012d34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012d36:	23bc      	movs	r3, #188	; 0xbc
 8012d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	2bbc      	cmp	r3, #188	; 0xbc
 8012d3e:	d00a      	beq.n	8012d56 <xTaskCreateStatic+0x66>
	__asm volatile
 8012d40:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d44:	f383 8811 	msr	BASEPRI, r3
 8012d48:	f3bf 8f6f 	isb	sy
 8012d4c:	f3bf 8f4f 	dsb	sy
 8012d50:	61bb      	str	r3, [r7, #24]
}
 8012d52:	bf00      	nop
 8012d54:	e7fe      	b.n	8012d54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012d56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d01e      	beq.n	8012d9c <xTaskCreateStatic+0xac>
 8012d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d01b      	beq.n	8012d9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d70:	2202      	movs	r2, #2
 8012d72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012d76:	2300      	movs	r3, #0
 8012d78:	9303      	str	r3, [sp, #12]
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	9302      	str	r3, [sp, #8]
 8012d7e:	f107 0314 	add.w	r3, r7, #20
 8012d82:	9301      	str	r3, [sp, #4]
 8012d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d86:	9300      	str	r3, [sp, #0]
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	68b9      	ldr	r1, [r7, #8]
 8012d8e:	68f8      	ldr	r0, [r7, #12]
 8012d90:	f000 f850 	bl	8012e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d96:	f000 f8f3 	bl	8012f80 <prvAddNewTaskToReadyList>
 8012d9a:	e001      	b.n	8012da0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012da0:	697b      	ldr	r3, [r7, #20]
	}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3728      	adds	r7, #40	; 0x28
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}

08012daa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b08c      	sub	sp, #48	; 0x30
 8012dae:	af04      	add	r7, sp, #16
 8012db0:	60f8      	str	r0, [r7, #12]
 8012db2:	60b9      	str	r1, [r7, #8]
 8012db4:	603b      	str	r3, [r7, #0]
 8012db6:	4613      	mov	r3, r2
 8012db8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012dba:	88fb      	ldrh	r3, [r7, #6]
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f001 fd32 	bl	8014828 <pvPortMalloc>
 8012dc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d00e      	beq.n	8012dea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012dcc:	20bc      	movs	r0, #188	; 0xbc
 8012dce:	f001 fd2b 	bl	8014828 <pvPortMalloc>
 8012dd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d003      	beq.n	8012de2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	697a      	ldr	r2, [r7, #20]
 8012dde:	631a      	str	r2, [r3, #48]	; 0x30
 8012de0:	e005      	b.n	8012dee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012de2:	6978      	ldr	r0, [r7, #20]
 8012de4:	f001 fdec 	bl	80149c0 <vPortFree>
 8012de8:	e001      	b.n	8012dee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012dea:	2300      	movs	r3, #0
 8012dec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d017      	beq.n	8012e24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012dfc:	88fa      	ldrh	r2, [r7, #6]
 8012dfe:	2300      	movs	r3, #0
 8012e00:	9303      	str	r3, [sp, #12]
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	9302      	str	r3, [sp, #8]
 8012e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e08:	9301      	str	r3, [sp, #4]
 8012e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	68b9      	ldr	r1, [r7, #8]
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f000 f80e 	bl	8012e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e18:	69f8      	ldr	r0, [r7, #28]
 8012e1a:	f000 f8b1 	bl	8012f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012e1e:	2301      	movs	r3, #1
 8012e20:	61bb      	str	r3, [r7, #24]
 8012e22:	e002      	b.n	8012e2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012e24:	f04f 33ff 	mov.w	r3, #4294967295
 8012e28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3720      	adds	r7, #32
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b088      	sub	sp, #32
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	607a      	str	r2, [r7, #4]
 8012e40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	009b      	lsls	r3, r3, #2
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	21a5      	movs	r1, #165	; 0xa5
 8012e4e:	f008 fd39 	bl	801b8c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012e5c:	3b01      	subs	r3, #1
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	4413      	add	r3, r2
 8012e62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	f023 0307 	bic.w	r3, r3, #7
 8012e6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	f003 0307 	and.w	r3, r3, #7
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00a      	beq.n	8012e8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8012e76:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e7a:	f383 8811 	msr	BASEPRI, r3
 8012e7e:	f3bf 8f6f 	isb	sy
 8012e82:	f3bf 8f4f 	dsb	sy
 8012e86:	617b      	str	r3, [r7, #20]
}
 8012e88:	bf00      	nop
 8012e8a:	e7fe      	b.n	8012e8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d01f      	beq.n	8012ed2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012e92:	2300      	movs	r3, #0
 8012e94:	61fb      	str	r3, [r7, #28]
 8012e96:	e012      	b.n	8012ebe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012e98:	68ba      	ldr	r2, [r7, #8]
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	7819      	ldrb	r1, [r3, #0]
 8012ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	3334      	adds	r3, #52	; 0x34
 8012ea8:	460a      	mov	r2, r1
 8012eaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d006      	beq.n	8012ec6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	61fb      	str	r3, [r7, #28]
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	2b0f      	cmp	r3, #15
 8012ec2:	d9e9      	bls.n	8012e98 <prvInitialiseNewTask+0x64>
 8012ec4:	e000      	b.n	8012ec8 <prvInitialiseNewTask+0x94>
			{
				break;
 8012ec6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012ed0:	e003      	b.n	8012eda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012edc:	2b37      	cmp	r3, #55	; 0x37
 8012ede:	d901      	bls.n	8012ee4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012ee0:	2337      	movs	r3, #55	; 0x37
 8012ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ee8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef8:	3304      	adds	r3, #4
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7ff f8be 	bl	801207c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f02:	3318      	adds	r3, #24
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7ff f8b9 	bl	801207c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f22:	2200      	movs	r2, #0
 8012f24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f32:	3354      	adds	r3, #84	; 0x54
 8012f34:	2260      	movs	r2, #96	; 0x60
 8012f36:	2100      	movs	r1, #0
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f008 fcc3 	bl	801b8c4 <memset>
 8012f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f40:	4a0c      	ldr	r2, [pc, #48]	; (8012f74 <prvInitialiseNewTask+0x140>)
 8012f42:	659a      	str	r2, [r3, #88]	; 0x58
 8012f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f46:	4a0c      	ldr	r2, [pc, #48]	; (8012f78 <prvInitialiseNewTask+0x144>)
 8012f48:	65da      	str	r2, [r3, #92]	; 0x5c
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	4a0b      	ldr	r2, [pc, #44]	; (8012f7c <prvInitialiseNewTask+0x148>)
 8012f4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012f50:	683a      	ldr	r2, [r7, #0]
 8012f52:	68f9      	ldr	r1, [r7, #12]
 8012f54:	69b8      	ldr	r0, [r7, #24]
 8012f56:	f001 fa19 	bl	801438c <pxPortInitialiseStack>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d002      	beq.n	8012f6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f6c:	bf00      	nop
 8012f6e:	3720      	adds	r7, #32
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	0801cc1c 	.word	0x0801cc1c
 8012f78:	0801cc3c 	.word	0x0801cc3c
 8012f7c:	0801cbfc 	.word	0x0801cbfc

08012f80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012f88:	f001 fb2c 	bl	80145e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012f8c:	4b2d      	ldr	r3, [pc, #180]	; (8013044 <prvAddNewTaskToReadyList+0xc4>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	3301      	adds	r3, #1
 8012f92:	4a2c      	ldr	r2, [pc, #176]	; (8013044 <prvAddNewTaskToReadyList+0xc4>)
 8012f94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012f96:	4b2c      	ldr	r3, [pc, #176]	; (8013048 <prvAddNewTaskToReadyList+0xc8>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d109      	bne.n	8012fb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012f9e:	4a2a      	ldr	r2, [pc, #168]	; (8013048 <prvAddNewTaskToReadyList+0xc8>)
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012fa4:	4b27      	ldr	r3, [pc, #156]	; (8013044 <prvAddNewTaskToReadyList+0xc4>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d110      	bne.n	8012fce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012fac:	f000 fcfe 	bl	80139ac <prvInitialiseTaskLists>
 8012fb0:	e00d      	b.n	8012fce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012fb2:	4b26      	ldr	r3, [pc, #152]	; (801304c <prvAddNewTaskToReadyList+0xcc>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d109      	bne.n	8012fce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012fba:	4b23      	ldr	r3, [pc, #140]	; (8013048 <prvAddNewTaskToReadyList+0xc8>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d802      	bhi.n	8012fce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012fc8:	4a1f      	ldr	r2, [pc, #124]	; (8013048 <prvAddNewTaskToReadyList+0xc8>)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012fce:	4b20      	ldr	r3, [pc, #128]	; (8013050 <prvAddNewTaskToReadyList+0xd0>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	4a1e      	ldr	r2, [pc, #120]	; (8013050 <prvAddNewTaskToReadyList+0xd0>)
 8012fd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012fd8:	4b1d      	ldr	r3, [pc, #116]	; (8013050 <prvAddNewTaskToReadyList+0xd0>)
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fe4:	4b1b      	ldr	r3, [pc, #108]	; (8013054 <prvAddNewTaskToReadyList+0xd4>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d903      	bls.n	8012ff4 <prvAddNewTaskToReadyList+0x74>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff0:	4a18      	ldr	r2, [pc, #96]	; (8013054 <prvAddNewTaskToReadyList+0xd4>)
 8012ff2:	6013      	str	r3, [r2, #0]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	4413      	add	r3, r2
 8012ffe:	009b      	lsls	r3, r3, #2
 8013000:	4a15      	ldr	r2, [pc, #84]	; (8013058 <prvAddNewTaskToReadyList+0xd8>)
 8013002:	441a      	add	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	3304      	adds	r3, #4
 8013008:	4619      	mov	r1, r3
 801300a:	4610      	mov	r0, r2
 801300c:	f7ff f843 	bl	8012096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013010:	f001 fb18 	bl	8014644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013014:	4b0d      	ldr	r3, [pc, #52]	; (801304c <prvAddNewTaskToReadyList+0xcc>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00e      	beq.n	801303a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801301c:	4b0a      	ldr	r3, [pc, #40]	; (8013048 <prvAddNewTaskToReadyList+0xc8>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013026:	429a      	cmp	r2, r3
 8013028:	d207      	bcs.n	801303a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801302a:	4b0c      	ldr	r3, [pc, #48]	; (801305c <prvAddNewTaskToReadyList+0xdc>)
 801302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013030:	601a      	str	r2, [r3, #0]
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	20000ff4 	.word	0x20000ff4
 8013048:	20000b20 	.word	0x20000b20
 801304c:	20001000 	.word	0x20001000
 8013050:	20001010 	.word	0x20001010
 8013054:	20000ffc 	.word	0x20000ffc
 8013058:	20000b24 	.word	0x20000b24
 801305c:	e000ed04 	.word	0xe000ed04

08013060 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013068:	f001 fabc 	bl	80145e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d102      	bne.n	8013078 <vTaskDelete+0x18>
 8013072:	4b2c      	ldr	r3, [pc, #176]	; (8013124 <vTaskDelete+0xc4>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	e000      	b.n	801307a <vTaskDelete+0x1a>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	3304      	adds	r3, #4
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff f865 	bl	8012150 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801308a:	2b00      	cmp	r3, #0
 801308c:	d004      	beq.n	8013098 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	3318      	adds	r3, #24
 8013092:	4618      	mov	r0, r3
 8013094:	f7ff f85c 	bl	8012150 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013098:	4b23      	ldr	r3, [pc, #140]	; (8013128 <vTaskDelete+0xc8>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	3301      	adds	r3, #1
 801309e:	4a22      	ldr	r2, [pc, #136]	; (8013128 <vTaskDelete+0xc8>)
 80130a0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80130a2:	4b20      	ldr	r3, [pc, #128]	; (8013124 <vTaskDelete+0xc4>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	68fa      	ldr	r2, [r7, #12]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d10b      	bne.n	80130c4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	3304      	adds	r3, #4
 80130b0:	4619      	mov	r1, r3
 80130b2:	481e      	ldr	r0, [pc, #120]	; (801312c <vTaskDelete+0xcc>)
 80130b4:	f7fe ffef 	bl	8012096 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80130b8:	4b1d      	ldr	r3, [pc, #116]	; (8013130 <vTaskDelete+0xd0>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	3301      	adds	r3, #1
 80130be:	4a1c      	ldr	r2, [pc, #112]	; (8013130 <vTaskDelete+0xd0>)
 80130c0:	6013      	str	r3, [r2, #0]
 80130c2:	e009      	b.n	80130d8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80130c4:	4b1b      	ldr	r3, [pc, #108]	; (8013134 <vTaskDelete+0xd4>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	3b01      	subs	r3, #1
 80130ca:	4a1a      	ldr	r2, [pc, #104]	; (8013134 <vTaskDelete+0xd4>)
 80130cc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f000 fcda 	bl	8013a88 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80130d4:	f000 fd0c 	bl	8013af0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80130d8:	f001 fab4 	bl	8014644 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80130dc:	4b16      	ldr	r3, [pc, #88]	; (8013138 <vTaskDelete+0xd8>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d01b      	beq.n	801311c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80130e4:	4b0f      	ldr	r3, [pc, #60]	; (8013124 <vTaskDelete+0xc4>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	68fa      	ldr	r2, [r7, #12]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d116      	bne.n	801311c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80130ee:	4b13      	ldr	r3, [pc, #76]	; (801313c <vTaskDelete+0xdc>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00a      	beq.n	801310c <vTaskDelete+0xac>
	__asm volatile
 80130f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130fa:	f383 8811 	msr	BASEPRI, r3
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	f3bf 8f4f 	dsb	sy
 8013106:	60bb      	str	r3, [r7, #8]
}
 8013108:	bf00      	nop
 801310a:	e7fe      	b.n	801310a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801310c:	4b0c      	ldr	r3, [pc, #48]	; (8013140 <vTaskDelete+0xe0>)
 801310e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013112:	601a      	str	r2, [r3, #0]
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801311c:	bf00      	nop
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	20000b20 	.word	0x20000b20
 8013128:	20001010 	.word	0x20001010
 801312c:	20000fc8 	.word	0x20000fc8
 8013130:	20000fdc 	.word	0x20000fdc
 8013134:	20000ff4 	.word	0x20000ff4
 8013138:	20001000 	.word	0x20001000
 801313c:	2000101c 	.word	0x2000101c
 8013140:	e000ed04 	.word	0xe000ed04

08013144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013144:	b580      	push	{r7, lr}
 8013146:	b084      	sub	sp, #16
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801314c:	2300      	movs	r3, #0
 801314e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d017      	beq.n	8013186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013156:	4b13      	ldr	r3, [pc, #76]	; (80131a4 <vTaskDelay+0x60>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d00a      	beq.n	8013174 <vTaskDelay+0x30>
	__asm volatile
 801315e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013162:	f383 8811 	msr	BASEPRI, r3
 8013166:	f3bf 8f6f 	isb	sy
 801316a:	f3bf 8f4f 	dsb	sy
 801316e:	60bb      	str	r3, [r7, #8]
}
 8013170:	bf00      	nop
 8013172:	e7fe      	b.n	8013172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013174:	f000 f8f0 	bl	8013358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013178:	2100      	movs	r1, #0
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f000 fd64 	bl	8013c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013180:	f000 f8f8 	bl	8013374 <xTaskResumeAll>
 8013184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d107      	bne.n	801319c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801318c:	4b06      	ldr	r3, [pc, #24]	; (80131a8 <vTaskDelay+0x64>)
 801318e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013192:	601a      	str	r2, [r3, #0]
 8013194:	f3bf 8f4f 	dsb	sy
 8013198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801319c:	bf00      	nop
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	2000101c 	.word	0x2000101c
 80131a8:	e000ed04 	.word	0xe000ed04

080131ac <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b088      	sub	sp, #32
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d10a      	bne.n	80131d4 <eTaskGetState+0x28>
	__asm volatile
 80131be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131c2:	f383 8811 	msr	BASEPRI, r3
 80131c6:	f3bf 8f6f 	isb	sy
 80131ca:	f3bf 8f4f 	dsb	sy
 80131ce:	60bb      	str	r3, [r7, #8]
}
 80131d0:	bf00      	nop
 80131d2:	e7fe      	b.n	80131d2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80131d4:	4b23      	ldr	r3, [pc, #140]	; (8013264 <eTaskGetState+0xb8>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	69ba      	ldr	r2, [r7, #24]
 80131da:	429a      	cmp	r2, r3
 80131dc:	d102      	bne.n	80131e4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80131de:	2300      	movs	r3, #0
 80131e0:	77fb      	strb	r3, [r7, #31]
 80131e2:	e03a      	b.n	801325a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80131e4:	f001 f9fe 	bl	80145e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	695b      	ldr	r3, [r3, #20]
 80131ec:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80131ee:	4b1e      	ldr	r3, [pc, #120]	; (8013268 <eTaskGetState+0xbc>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80131f4:	4b1d      	ldr	r3, [pc, #116]	; (801326c <eTaskGetState+0xc0>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80131fa:	f001 fa23 	bl	8014644 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80131fe:	697a      	ldr	r2, [r7, #20]
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	429a      	cmp	r2, r3
 8013204:	d003      	beq.n	801320e <eTaskGetState+0x62>
 8013206:	697a      	ldr	r2, [r7, #20]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	429a      	cmp	r2, r3
 801320c:	d102      	bne.n	8013214 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801320e:	2302      	movs	r3, #2
 8013210:	77fb      	strb	r3, [r7, #31]
 8013212:	e022      	b.n	801325a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	4a16      	ldr	r2, [pc, #88]	; (8013270 <eTaskGetState+0xc4>)
 8013218:	4293      	cmp	r3, r2
 801321a:	d112      	bne.n	8013242 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013220:	2b00      	cmp	r3, #0
 8013222:	d10b      	bne.n	801323c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013224:	69bb      	ldr	r3, [r7, #24]
 8013226:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801322a:	b2db      	uxtb	r3, r3
 801322c:	2b01      	cmp	r3, #1
 801322e:	d102      	bne.n	8013236 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8013230:	2302      	movs	r3, #2
 8013232:	77fb      	strb	r3, [r7, #31]
 8013234:	e011      	b.n	801325a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8013236:	2303      	movs	r3, #3
 8013238:	77fb      	strb	r3, [r7, #31]
 801323a:	e00e      	b.n	801325a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801323c:	2302      	movs	r3, #2
 801323e:	77fb      	strb	r3, [r7, #31]
 8013240:	e00b      	b.n	801325a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	4a0b      	ldr	r2, [pc, #44]	; (8013274 <eTaskGetState+0xc8>)
 8013246:	4293      	cmp	r3, r2
 8013248:	d002      	beq.n	8013250 <eTaskGetState+0xa4>
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d102      	bne.n	8013256 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013250:	2304      	movs	r3, #4
 8013252:	77fb      	strb	r3, [r7, #31]
 8013254:	e001      	b.n	801325a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013256:	2301      	movs	r3, #1
 8013258:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801325a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801325c:	4618      	mov	r0, r3
 801325e:	3720      	adds	r7, #32
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	20000b20 	.word	0x20000b20
 8013268:	20000fac 	.word	0x20000fac
 801326c:	20000fb0 	.word	0x20000fb0
 8013270:	20000fe0 	.word	0x20000fe0
 8013274:	20000fc8 	.word	0x20000fc8

08013278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b08a      	sub	sp, #40	; 0x28
 801327c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801327e:	2300      	movs	r3, #0
 8013280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013282:	2300      	movs	r3, #0
 8013284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013286:	463a      	mov	r2, r7
 8013288:	1d39      	adds	r1, r7, #4
 801328a:	f107 0308 	add.w	r3, r7, #8
 801328e:	4618      	mov	r0, r3
 8013290:	f7fe fea0 	bl	8011fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013294:	6839      	ldr	r1, [r7, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68ba      	ldr	r2, [r7, #8]
 801329a:	9202      	str	r2, [sp, #8]
 801329c:	9301      	str	r3, [sp, #4]
 801329e:	2300      	movs	r3, #0
 80132a0:	9300      	str	r3, [sp, #0]
 80132a2:	2300      	movs	r3, #0
 80132a4:	460a      	mov	r2, r1
 80132a6:	4924      	ldr	r1, [pc, #144]	; (8013338 <vTaskStartScheduler+0xc0>)
 80132a8:	4824      	ldr	r0, [pc, #144]	; (801333c <vTaskStartScheduler+0xc4>)
 80132aa:	f7ff fd21 	bl	8012cf0 <xTaskCreateStatic>
 80132ae:	4603      	mov	r3, r0
 80132b0:	4a23      	ldr	r2, [pc, #140]	; (8013340 <vTaskStartScheduler+0xc8>)
 80132b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80132b4:	4b22      	ldr	r3, [pc, #136]	; (8013340 <vTaskStartScheduler+0xc8>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d002      	beq.n	80132c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80132bc:	2301      	movs	r3, #1
 80132be:	617b      	str	r3, [r7, #20]
 80132c0:	e001      	b.n	80132c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	d102      	bne.n	80132d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80132cc:	f000 fd10 	bl	8013cf0 <xTimerCreateTimerTask>
 80132d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d11b      	bne.n	8013310 <vTaskStartScheduler+0x98>
	__asm volatile
 80132d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132dc:	f383 8811 	msr	BASEPRI, r3
 80132e0:	f3bf 8f6f 	isb	sy
 80132e4:	f3bf 8f4f 	dsb	sy
 80132e8:	613b      	str	r3, [r7, #16]
}
 80132ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80132ec:	4b15      	ldr	r3, [pc, #84]	; (8013344 <vTaskStartScheduler+0xcc>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	3354      	adds	r3, #84	; 0x54
 80132f2:	4a15      	ldr	r2, [pc, #84]	; (8013348 <vTaskStartScheduler+0xd0>)
 80132f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80132f6:	4b15      	ldr	r3, [pc, #84]	; (801334c <vTaskStartScheduler+0xd4>)
 80132f8:	f04f 32ff 	mov.w	r2, #4294967295
 80132fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80132fe:	4b14      	ldr	r3, [pc, #80]	; (8013350 <vTaskStartScheduler+0xd8>)
 8013300:	2201      	movs	r2, #1
 8013302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013304:	4b13      	ldr	r3, [pc, #76]	; (8013354 <vTaskStartScheduler+0xdc>)
 8013306:	2200      	movs	r2, #0
 8013308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801330a:	f001 f8c9 	bl	80144a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801330e:	e00e      	b.n	801332e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013316:	d10a      	bne.n	801332e <vTaskStartScheduler+0xb6>
	__asm volatile
 8013318:	f04f 0330 	mov.w	r3, #48	; 0x30
 801331c:	f383 8811 	msr	BASEPRI, r3
 8013320:	f3bf 8f6f 	isb	sy
 8013324:	f3bf 8f4f 	dsb	sy
 8013328:	60fb      	str	r3, [r7, #12]
}
 801332a:	bf00      	nop
 801332c:	e7fe      	b.n	801332c <vTaskStartScheduler+0xb4>
}
 801332e:	bf00      	nop
 8013330:	3718      	adds	r7, #24
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	0801c240 	.word	0x0801c240
 801333c:	0801397d 	.word	0x0801397d
 8013340:	20001018 	.word	0x20001018
 8013344:	20000b20 	.word	0x20000b20
 8013348:	200002e4 	.word	0x200002e4
 801334c:	20001014 	.word	0x20001014
 8013350:	20001000 	.word	0x20001000
 8013354:	20000ff8 	.word	0x20000ff8

08013358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013358:	b480      	push	{r7}
 801335a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801335c:	4b04      	ldr	r3, [pc, #16]	; (8013370 <vTaskSuspendAll+0x18>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	3301      	adds	r3, #1
 8013362:	4a03      	ldr	r2, [pc, #12]	; (8013370 <vTaskSuspendAll+0x18>)
 8013364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013366:	bf00      	nop
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr
 8013370:	2000101c 	.word	0x2000101c

08013374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b084      	sub	sp, #16
 8013378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801337a:	2300      	movs	r3, #0
 801337c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801337e:	2300      	movs	r3, #0
 8013380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013382:	4b42      	ldr	r3, [pc, #264]	; (801348c <xTaskResumeAll+0x118>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d10a      	bne.n	80133a0 <xTaskResumeAll+0x2c>
	__asm volatile
 801338a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801338e:	f383 8811 	msr	BASEPRI, r3
 8013392:	f3bf 8f6f 	isb	sy
 8013396:	f3bf 8f4f 	dsb	sy
 801339a:	603b      	str	r3, [r7, #0]
}
 801339c:	bf00      	nop
 801339e:	e7fe      	b.n	801339e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80133a0:	f001 f920 	bl	80145e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80133a4:	4b39      	ldr	r3, [pc, #228]	; (801348c <xTaskResumeAll+0x118>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	3b01      	subs	r3, #1
 80133aa:	4a38      	ldr	r2, [pc, #224]	; (801348c <xTaskResumeAll+0x118>)
 80133ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133ae:	4b37      	ldr	r3, [pc, #220]	; (801348c <xTaskResumeAll+0x118>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d162      	bne.n	801347c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80133b6:	4b36      	ldr	r3, [pc, #216]	; (8013490 <xTaskResumeAll+0x11c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d05e      	beq.n	801347c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80133be:	e02f      	b.n	8013420 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133c0:	4b34      	ldr	r3, [pc, #208]	; (8013494 <xTaskResumeAll+0x120>)
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	3318      	adds	r3, #24
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7fe febf 	bl	8012150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	3304      	adds	r3, #4
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fe feba 	bl	8012150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e0:	4b2d      	ldr	r3, [pc, #180]	; (8013498 <xTaskResumeAll+0x124>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d903      	bls.n	80133f0 <xTaskResumeAll+0x7c>
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ec:	4a2a      	ldr	r2, [pc, #168]	; (8013498 <xTaskResumeAll+0x124>)
 80133ee:	6013      	str	r3, [r2, #0]
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133f4:	4613      	mov	r3, r2
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	4413      	add	r3, r2
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4a27      	ldr	r2, [pc, #156]	; (801349c <xTaskResumeAll+0x128>)
 80133fe:	441a      	add	r2, r3
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	3304      	adds	r3, #4
 8013404:	4619      	mov	r1, r3
 8013406:	4610      	mov	r0, r2
 8013408:	f7fe fe45 	bl	8012096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013410:	4b23      	ldr	r3, [pc, #140]	; (80134a0 <xTaskResumeAll+0x12c>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013416:	429a      	cmp	r2, r3
 8013418:	d302      	bcc.n	8013420 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801341a:	4b22      	ldr	r3, [pc, #136]	; (80134a4 <xTaskResumeAll+0x130>)
 801341c:	2201      	movs	r2, #1
 801341e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013420:	4b1c      	ldr	r3, [pc, #112]	; (8013494 <xTaskResumeAll+0x120>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1cb      	bne.n	80133c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801342e:	f000 fb5f 	bl	8013af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013432:	4b1d      	ldr	r3, [pc, #116]	; (80134a8 <xTaskResumeAll+0x134>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d010      	beq.n	8013460 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801343e:	f000 f847 	bl	80134d0 <xTaskIncrementTick>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d002      	beq.n	801344e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013448:	4b16      	ldr	r3, [pc, #88]	; (80134a4 <xTaskResumeAll+0x130>)
 801344a:	2201      	movs	r2, #1
 801344c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	3b01      	subs	r3, #1
 8013452:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1f1      	bne.n	801343e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801345a:	4b13      	ldr	r3, [pc, #76]	; (80134a8 <xTaskResumeAll+0x134>)
 801345c:	2200      	movs	r2, #0
 801345e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013460:	4b10      	ldr	r3, [pc, #64]	; (80134a4 <xTaskResumeAll+0x130>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d009      	beq.n	801347c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013468:	2301      	movs	r3, #1
 801346a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801346c:	4b0f      	ldr	r3, [pc, #60]	; (80134ac <xTaskResumeAll+0x138>)
 801346e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013472:	601a      	str	r2, [r3, #0]
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801347c:	f001 f8e2 	bl	8014644 <vPortExitCritical>

	return xAlreadyYielded;
 8013480:	68bb      	ldr	r3, [r7, #8]
}
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	2000101c 	.word	0x2000101c
 8013490:	20000ff4 	.word	0x20000ff4
 8013494:	20000fb4 	.word	0x20000fb4
 8013498:	20000ffc 	.word	0x20000ffc
 801349c:	20000b24 	.word	0x20000b24
 80134a0:	20000b20 	.word	0x20000b20
 80134a4:	20001008 	.word	0x20001008
 80134a8:	20001004 	.word	0x20001004
 80134ac:	e000ed04 	.word	0xe000ed04

080134b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80134b6:	4b05      	ldr	r3, [pc, #20]	; (80134cc <xTaskGetTickCount+0x1c>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80134bc:	687b      	ldr	r3, [r7, #4]
}
 80134be:	4618      	mov	r0, r3
 80134c0:	370c      	adds	r7, #12
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	20000ff8 	.word	0x20000ff8

080134d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80134d6:	2300      	movs	r3, #0
 80134d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134da:	4b4f      	ldr	r3, [pc, #316]	; (8013618 <xTaskIncrementTick+0x148>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f040 808f 	bne.w	8013602 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80134e4:	4b4d      	ldr	r3, [pc, #308]	; (801361c <xTaskIncrementTick+0x14c>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	3301      	adds	r3, #1
 80134ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80134ec:	4a4b      	ldr	r2, [pc, #300]	; (801361c <xTaskIncrementTick+0x14c>)
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d120      	bne.n	801353a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80134f8:	4b49      	ldr	r3, [pc, #292]	; (8013620 <xTaskIncrementTick+0x150>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d00a      	beq.n	8013518 <xTaskIncrementTick+0x48>
	__asm volatile
 8013502:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013506:	f383 8811 	msr	BASEPRI, r3
 801350a:	f3bf 8f6f 	isb	sy
 801350e:	f3bf 8f4f 	dsb	sy
 8013512:	603b      	str	r3, [r7, #0]
}
 8013514:	bf00      	nop
 8013516:	e7fe      	b.n	8013516 <xTaskIncrementTick+0x46>
 8013518:	4b41      	ldr	r3, [pc, #260]	; (8013620 <xTaskIncrementTick+0x150>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	60fb      	str	r3, [r7, #12]
 801351e:	4b41      	ldr	r3, [pc, #260]	; (8013624 <xTaskIncrementTick+0x154>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4a3f      	ldr	r2, [pc, #252]	; (8013620 <xTaskIncrementTick+0x150>)
 8013524:	6013      	str	r3, [r2, #0]
 8013526:	4a3f      	ldr	r2, [pc, #252]	; (8013624 <xTaskIncrementTick+0x154>)
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	4b3e      	ldr	r3, [pc, #248]	; (8013628 <xTaskIncrementTick+0x158>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	3301      	adds	r3, #1
 8013532:	4a3d      	ldr	r2, [pc, #244]	; (8013628 <xTaskIncrementTick+0x158>)
 8013534:	6013      	str	r3, [r2, #0]
 8013536:	f000 fadb 	bl	8013af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801353a:	4b3c      	ldr	r3, [pc, #240]	; (801362c <xTaskIncrementTick+0x15c>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	693a      	ldr	r2, [r7, #16]
 8013540:	429a      	cmp	r2, r3
 8013542:	d349      	bcc.n	80135d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013544:	4b36      	ldr	r3, [pc, #216]	; (8013620 <xTaskIncrementTick+0x150>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d104      	bne.n	8013558 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801354e:	4b37      	ldr	r3, [pc, #220]	; (801362c <xTaskIncrementTick+0x15c>)
 8013550:	f04f 32ff 	mov.w	r2, #4294967295
 8013554:	601a      	str	r2, [r3, #0]
					break;
 8013556:	e03f      	b.n	80135d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013558:	4b31      	ldr	r3, [pc, #196]	; (8013620 <xTaskIncrementTick+0x150>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013568:	693a      	ldr	r2, [r7, #16]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	429a      	cmp	r2, r3
 801356e:	d203      	bcs.n	8013578 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013570:	4a2e      	ldr	r2, [pc, #184]	; (801362c <xTaskIncrementTick+0x15c>)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013576:	e02f      	b.n	80135d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	3304      	adds	r3, #4
 801357c:	4618      	mov	r0, r3
 801357e:	f7fe fde7 	bl	8012150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013586:	2b00      	cmp	r3, #0
 8013588:	d004      	beq.n	8013594 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	3318      	adds	r3, #24
 801358e:	4618      	mov	r0, r3
 8013590:	f7fe fdde 	bl	8012150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013598:	4b25      	ldr	r3, [pc, #148]	; (8013630 <xTaskIncrementTick+0x160>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	429a      	cmp	r2, r3
 801359e:	d903      	bls.n	80135a8 <xTaskIncrementTick+0xd8>
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a4:	4a22      	ldr	r2, [pc, #136]	; (8013630 <xTaskIncrementTick+0x160>)
 80135a6:	6013      	str	r3, [r2, #0]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135ac:	4613      	mov	r3, r2
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	4413      	add	r3, r2
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	4a1f      	ldr	r2, [pc, #124]	; (8013634 <xTaskIncrementTick+0x164>)
 80135b6:	441a      	add	r2, r3
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	3304      	adds	r3, #4
 80135bc:	4619      	mov	r1, r3
 80135be:	4610      	mov	r0, r2
 80135c0:	f7fe fd69 	bl	8012096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135c8:	4b1b      	ldr	r3, [pc, #108]	; (8013638 <xTaskIncrementTick+0x168>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d3b8      	bcc.n	8013544 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80135d2:	2301      	movs	r3, #1
 80135d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135d6:	e7b5      	b.n	8013544 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80135d8:	4b17      	ldr	r3, [pc, #92]	; (8013638 <xTaskIncrementTick+0x168>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135de:	4915      	ldr	r1, [pc, #84]	; (8013634 <xTaskIncrementTick+0x164>)
 80135e0:	4613      	mov	r3, r2
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	4413      	add	r3, r2
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	440b      	add	r3, r1
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d901      	bls.n	80135f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80135f0:	2301      	movs	r3, #1
 80135f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80135f4:	4b11      	ldr	r3, [pc, #68]	; (801363c <xTaskIncrementTick+0x16c>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d007      	beq.n	801360c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80135fc:	2301      	movs	r3, #1
 80135fe:	617b      	str	r3, [r7, #20]
 8013600:	e004      	b.n	801360c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013602:	4b0f      	ldr	r3, [pc, #60]	; (8013640 <xTaskIncrementTick+0x170>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	3301      	adds	r3, #1
 8013608:	4a0d      	ldr	r2, [pc, #52]	; (8013640 <xTaskIncrementTick+0x170>)
 801360a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801360c:	697b      	ldr	r3, [r7, #20]
}
 801360e:	4618      	mov	r0, r3
 8013610:	3718      	adds	r7, #24
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	2000101c 	.word	0x2000101c
 801361c:	20000ff8 	.word	0x20000ff8
 8013620:	20000fac 	.word	0x20000fac
 8013624:	20000fb0 	.word	0x20000fb0
 8013628:	2000100c 	.word	0x2000100c
 801362c:	20001014 	.word	0x20001014
 8013630:	20000ffc 	.word	0x20000ffc
 8013634:	20000b24 	.word	0x20000b24
 8013638:	20000b20 	.word	0x20000b20
 801363c:	20001008 	.word	0x20001008
 8013640:	20001004 	.word	0x20001004

08013644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013644:	b480      	push	{r7}
 8013646:	b085      	sub	sp, #20
 8013648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801364a:	4b2a      	ldr	r3, [pc, #168]	; (80136f4 <vTaskSwitchContext+0xb0>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d003      	beq.n	801365a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013652:	4b29      	ldr	r3, [pc, #164]	; (80136f8 <vTaskSwitchContext+0xb4>)
 8013654:	2201      	movs	r2, #1
 8013656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013658:	e046      	b.n	80136e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801365a:	4b27      	ldr	r3, [pc, #156]	; (80136f8 <vTaskSwitchContext+0xb4>)
 801365c:	2200      	movs	r2, #0
 801365e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013660:	4b26      	ldr	r3, [pc, #152]	; (80136fc <vTaskSwitchContext+0xb8>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	60fb      	str	r3, [r7, #12]
 8013666:	e010      	b.n	801368a <vTaskSwitchContext+0x46>
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10a      	bne.n	8013684 <vTaskSwitchContext+0x40>
	__asm volatile
 801366e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013672:	f383 8811 	msr	BASEPRI, r3
 8013676:	f3bf 8f6f 	isb	sy
 801367a:	f3bf 8f4f 	dsb	sy
 801367e:	607b      	str	r3, [r7, #4]
}
 8013680:	bf00      	nop
 8013682:	e7fe      	b.n	8013682 <vTaskSwitchContext+0x3e>
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	3b01      	subs	r3, #1
 8013688:	60fb      	str	r3, [r7, #12]
 801368a:	491d      	ldr	r1, [pc, #116]	; (8013700 <vTaskSwitchContext+0xbc>)
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	4613      	mov	r3, r2
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	4413      	add	r3, r2
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	440b      	add	r3, r1
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d0e4      	beq.n	8013668 <vTaskSwitchContext+0x24>
 801369e:	68fa      	ldr	r2, [r7, #12]
 80136a0:	4613      	mov	r3, r2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4413      	add	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4a15      	ldr	r2, [pc, #84]	; (8013700 <vTaskSwitchContext+0xbc>)
 80136aa:	4413      	add	r3, r2
 80136ac:	60bb      	str	r3, [r7, #8]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	685a      	ldr	r2, [r3, #4]
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	605a      	str	r2, [r3, #4]
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	685a      	ldr	r2, [r3, #4]
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	3308      	adds	r3, #8
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d104      	bne.n	80136ce <vTaskSwitchContext+0x8a>
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	685a      	ldr	r2, [r3, #4]
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	605a      	str	r2, [r3, #4]
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	68db      	ldr	r3, [r3, #12]
 80136d4:	4a0b      	ldr	r2, [pc, #44]	; (8013704 <vTaskSwitchContext+0xc0>)
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	4a08      	ldr	r2, [pc, #32]	; (80136fc <vTaskSwitchContext+0xb8>)
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80136de:	4b09      	ldr	r3, [pc, #36]	; (8013704 <vTaskSwitchContext+0xc0>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3354      	adds	r3, #84	; 0x54
 80136e4:	4a08      	ldr	r2, [pc, #32]	; (8013708 <vTaskSwitchContext+0xc4>)
 80136e6:	6013      	str	r3, [r2, #0]
}
 80136e8:	bf00      	nop
 80136ea:	3714      	adds	r7, #20
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr
 80136f4:	2000101c 	.word	0x2000101c
 80136f8:	20001008 	.word	0x20001008
 80136fc:	20000ffc 	.word	0x20000ffc
 8013700:	20000b24 	.word	0x20000b24
 8013704:	20000b20 	.word	0x20000b20
 8013708:	200002e4 	.word	0x200002e4

0801370c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d10a      	bne.n	8013732 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801371c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013720:	f383 8811 	msr	BASEPRI, r3
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	f3bf 8f4f 	dsb	sy
 801372c:	60fb      	str	r3, [r7, #12]
}
 801372e:	bf00      	nop
 8013730:	e7fe      	b.n	8013730 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013732:	4b07      	ldr	r3, [pc, #28]	; (8013750 <vTaskPlaceOnEventList+0x44>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	3318      	adds	r3, #24
 8013738:	4619      	mov	r1, r3
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7fe fccf 	bl	80120de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013740:	2101      	movs	r1, #1
 8013742:	6838      	ldr	r0, [r7, #0]
 8013744:	f000 fa80 	bl	8013c48 <prvAddCurrentTaskToDelayedList>
}
 8013748:	bf00      	nop
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	20000b20 	.word	0x20000b20

08013754 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013754:	b580      	push	{r7, lr}
 8013756:	b086      	sub	sp, #24
 8013758:	af00      	add	r7, sp, #0
 801375a:	60f8      	str	r0, [r7, #12]
 801375c:	60b9      	str	r1, [r7, #8]
 801375e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d10a      	bne.n	801377c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013766:	f04f 0330 	mov.w	r3, #48	; 0x30
 801376a:	f383 8811 	msr	BASEPRI, r3
 801376e:	f3bf 8f6f 	isb	sy
 8013772:	f3bf 8f4f 	dsb	sy
 8013776:	617b      	str	r3, [r7, #20]
}
 8013778:	bf00      	nop
 801377a:	e7fe      	b.n	801377a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801377c:	4b0a      	ldr	r3, [pc, #40]	; (80137a8 <vTaskPlaceOnEventListRestricted+0x54>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	3318      	adds	r3, #24
 8013782:	4619      	mov	r1, r3
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7fe fc86 	bl	8012096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d002      	beq.n	8013796 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013790:	f04f 33ff 	mov.w	r3, #4294967295
 8013794:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013796:	6879      	ldr	r1, [r7, #4]
 8013798:	68b8      	ldr	r0, [r7, #8]
 801379a:	f000 fa55 	bl	8013c48 <prvAddCurrentTaskToDelayedList>
	}
 801379e:	bf00      	nop
 80137a0:	3718      	adds	r7, #24
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	20000b20 	.word	0x20000b20

080137ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d10a      	bne.n	80137d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80137c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137c6:	f383 8811 	msr	BASEPRI, r3
 80137ca:	f3bf 8f6f 	isb	sy
 80137ce:	f3bf 8f4f 	dsb	sy
 80137d2:	60fb      	str	r3, [r7, #12]
}
 80137d4:	bf00      	nop
 80137d6:	e7fe      	b.n	80137d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	3318      	adds	r3, #24
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fe fcb7 	bl	8012150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137e2:	4b1e      	ldr	r3, [pc, #120]	; (801385c <xTaskRemoveFromEventList+0xb0>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d11d      	bne.n	8013826 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	3304      	adds	r3, #4
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fe fcae 	bl	8012150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80137f4:	693b      	ldr	r3, [r7, #16]
 80137f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f8:	4b19      	ldr	r3, [pc, #100]	; (8013860 <xTaskRemoveFromEventList+0xb4>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d903      	bls.n	8013808 <xTaskRemoveFromEventList+0x5c>
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013804:	4a16      	ldr	r2, [pc, #88]	; (8013860 <xTaskRemoveFromEventList+0xb4>)
 8013806:	6013      	str	r3, [r2, #0]
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801380c:	4613      	mov	r3, r2
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	4413      	add	r3, r2
 8013812:	009b      	lsls	r3, r3, #2
 8013814:	4a13      	ldr	r2, [pc, #76]	; (8013864 <xTaskRemoveFromEventList+0xb8>)
 8013816:	441a      	add	r2, r3
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	3304      	adds	r3, #4
 801381c:	4619      	mov	r1, r3
 801381e:	4610      	mov	r0, r2
 8013820:	f7fe fc39 	bl	8012096 <vListInsertEnd>
 8013824:	e005      	b.n	8013832 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	3318      	adds	r3, #24
 801382a:	4619      	mov	r1, r3
 801382c:	480e      	ldr	r0, [pc, #56]	; (8013868 <xTaskRemoveFromEventList+0xbc>)
 801382e:	f7fe fc32 	bl	8012096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013836:	4b0d      	ldr	r3, [pc, #52]	; (801386c <xTaskRemoveFromEventList+0xc0>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801383c:	429a      	cmp	r2, r3
 801383e:	d905      	bls.n	801384c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013840:	2301      	movs	r3, #1
 8013842:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013844:	4b0a      	ldr	r3, [pc, #40]	; (8013870 <xTaskRemoveFromEventList+0xc4>)
 8013846:	2201      	movs	r2, #1
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	e001      	b.n	8013850 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801384c:	2300      	movs	r3, #0
 801384e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013850:	697b      	ldr	r3, [r7, #20]
}
 8013852:	4618      	mov	r0, r3
 8013854:	3718      	adds	r7, #24
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	2000101c 	.word	0x2000101c
 8013860:	20000ffc 	.word	0x20000ffc
 8013864:	20000b24 	.word	0x20000b24
 8013868:	20000fb4 	.word	0x20000fb4
 801386c:	20000b20 	.word	0x20000b20
 8013870:	20001008 	.word	0x20001008

08013874 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801387c:	4b06      	ldr	r3, [pc, #24]	; (8013898 <vTaskInternalSetTimeOutState+0x24>)
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013884:	4b05      	ldr	r3, [pc, #20]	; (801389c <vTaskInternalSetTimeOutState+0x28>)
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	605a      	str	r2, [r3, #4]
}
 801388c:	bf00      	nop
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr
 8013898:	2000100c 	.word	0x2000100c
 801389c:	20000ff8 	.word	0x20000ff8

080138a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b088      	sub	sp, #32
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d10a      	bne.n	80138c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80138b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138b4:	f383 8811 	msr	BASEPRI, r3
 80138b8:	f3bf 8f6f 	isb	sy
 80138bc:	f3bf 8f4f 	dsb	sy
 80138c0:	613b      	str	r3, [r7, #16]
}
 80138c2:	bf00      	nop
 80138c4:	e7fe      	b.n	80138c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10a      	bne.n	80138e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80138cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138d0:	f383 8811 	msr	BASEPRI, r3
 80138d4:	f3bf 8f6f 	isb	sy
 80138d8:	f3bf 8f4f 	dsb	sy
 80138dc:	60fb      	str	r3, [r7, #12]
}
 80138de:	bf00      	nop
 80138e0:	e7fe      	b.n	80138e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80138e2:	f000 fe7f 	bl	80145e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80138e6:	4b1d      	ldr	r3, [pc, #116]	; (801395c <xTaskCheckForTimeOut+0xbc>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	69ba      	ldr	r2, [r7, #24]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138fe:	d102      	bne.n	8013906 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013900:	2300      	movs	r3, #0
 8013902:	61fb      	str	r3, [r7, #28]
 8013904:	e023      	b.n	801394e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	4b15      	ldr	r3, [pc, #84]	; (8013960 <xTaskCheckForTimeOut+0xc0>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	429a      	cmp	r2, r3
 8013910:	d007      	beq.n	8013922 <xTaskCheckForTimeOut+0x82>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	69ba      	ldr	r2, [r7, #24]
 8013918:	429a      	cmp	r2, r3
 801391a:	d302      	bcc.n	8013922 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801391c:	2301      	movs	r3, #1
 801391e:	61fb      	str	r3, [r7, #28]
 8013920:	e015      	b.n	801394e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	697a      	ldr	r2, [r7, #20]
 8013928:	429a      	cmp	r2, r3
 801392a:	d20b      	bcs.n	8013944 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	1ad2      	subs	r2, r2, r3
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff ff9b 	bl	8013874 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801393e:	2300      	movs	r3, #0
 8013940:	61fb      	str	r3, [r7, #28]
 8013942:	e004      	b.n	801394e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	2200      	movs	r2, #0
 8013948:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801394a:	2301      	movs	r3, #1
 801394c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801394e:	f000 fe79 	bl	8014644 <vPortExitCritical>

	return xReturn;
 8013952:	69fb      	ldr	r3, [r7, #28]
}
 8013954:	4618      	mov	r0, r3
 8013956:	3720      	adds	r7, #32
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	20000ff8 	.word	0x20000ff8
 8013960:	2000100c 	.word	0x2000100c

08013964 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013964:	b480      	push	{r7}
 8013966:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013968:	4b03      	ldr	r3, [pc, #12]	; (8013978 <vTaskMissedYield+0x14>)
 801396a:	2201      	movs	r2, #1
 801396c:	601a      	str	r2, [r3, #0]
}
 801396e:	bf00      	nop
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr
 8013978:	20001008 	.word	0x20001008

0801397c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013984:	f000 f852 	bl	8013a2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013988:	4b06      	ldr	r3, [pc, #24]	; (80139a4 <prvIdleTask+0x28>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b01      	cmp	r3, #1
 801398e:	d9f9      	bls.n	8013984 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013990:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <prvIdleTask+0x2c>)
 8013992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013996:	601a      	str	r2, [r3, #0]
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80139a0:	e7f0      	b.n	8013984 <prvIdleTask+0x8>
 80139a2:	bf00      	nop
 80139a4:	20000b24 	.word	0x20000b24
 80139a8:	e000ed04 	.word	0xe000ed04

080139ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139b2:	2300      	movs	r3, #0
 80139b4:	607b      	str	r3, [r7, #4]
 80139b6:	e00c      	b.n	80139d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	4613      	mov	r3, r2
 80139bc:	009b      	lsls	r3, r3, #2
 80139be:	4413      	add	r3, r2
 80139c0:	009b      	lsls	r3, r3, #2
 80139c2:	4a12      	ldr	r2, [pc, #72]	; (8013a0c <prvInitialiseTaskLists+0x60>)
 80139c4:	4413      	add	r3, r2
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fe fb38 	bl	801203c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	3301      	adds	r3, #1
 80139d0:	607b      	str	r3, [r7, #4]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2b37      	cmp	r3, #55	; 0x37
 80139d6:	d9ef      	bls.n	80139b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80139d8:	480d      	ldr	r0, [pc, #52]	; (8013a10 <prvInitialiseTaskLists+0x64>)
 80139da:	f7fe fb2f 	bl	801203c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80139de:	480d      	ldr	r0, [pc, #52]	; (8013a14 <prvInitialiseTaskLists+0x68>)
 80139e0:	f7fe fb2c 	bl	801203c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80139e4:	480c      	ldr	r0, [pc, #48]	; (8013a18 <prvInitialiseTaskLists+0x6c>)
 80139e6:	f7fe fb29 	bl	801203c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80139ea:	480c      	ldr	r0, [pc, #48]	; (8013a1c <prvInitialiseTaskLists+0x70>)
 80139ec:	f7fe fb26 	bl	801203c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80139f0:	480b      	ldr	r0, [pc, #44]	; (8013a20 <prvInitialiseTaskLists+0x74>)
 80139f2:	f7fe fb23 	bl	801203c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80139f6:	4b0b      	ldr	r3, [pc, #44]	; (8013a24 <prvInitialiseTaskLists+0x78>)
 80139f8:	4a05      	ldr	r2, [pc, #20]	; (8013a10 <prvInitialiseTaskLists+0x64>)
 80139fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80139fc:	4b0a      	ldr	r3, [pc, #40]	; (8013a28 <prvInitialiseTaskLists+0x7c>)
 80139fe:	4a05      	ldr	r2, [pc, #20]	; (8013a14 <prvInitialiseTaskLists+0x68>)
 8013a00:	601a      	str	r2, [r3, #0]
}
 8013a02:	bf00      	nop
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
 8013a0a:	bf00      	nop
 8013a0c:	20000b24 	.word	0x20000b24
 8013a10:	20000f84 	.word	0x20000f84
 8013a14:	20000f98 	.word	0x20000f98
 8013a18:	20000fb4 	.word	0x20000fb4
 8013a1c:	20000fc8 	.word	0x20000fc8
 8013a20:	20000fe0 	.word	0x20000fe0
 8013a24:	20000fac 	.word	0x20000fac
 8013a28:	20000fb0 	.word	0x20000fb0

08013a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a32:	e019      	b.n	8013a68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a34:	f000 fdd6 	bl	80145e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a38:	4b10      	ldr	r3, [pc, #64]	; (8013a7c <prvCheckTasksWaitingTermination+0x50>)
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	3304      	adds	r3, #4
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7fe fb83 	bl	8012150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a4a:	4b0d      	ldr	r3, [pc, #52]	; (8013a80 <prvCheckTasksWaitingTermination+0x54>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	3b01      	subs	r3, #1
 8013a50:	4a0b      	ldr	r2, [pc, #44]	; (8013a80 <prvCheckTasksWaitingTermination+0x54>)
 8013a52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a54:	4b0b      	ldr	r3, [pc, #44]	; (8013a84 <prvCheckTasksWaitingTermination+0x58>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	4a0a      	ldr	r2, [pc, #40]	; (8013a84 <prvCheckTasksWaitingTermination+0x58>)
 8013a5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a5e:	f000 fdf1 	bl	8014644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f000 f810 	bl	8013a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a68:	4b06      	ldr	r3, [pc, #24]	; (8013a84 <prvCheckTasksWaitingTermination+0x58>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d1e1      	bne.n	8013a34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013a70:	bf00      	nop
 8013a72:	bf00      	nop
 8013a74:	3708      	adds	r7, #8
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	20000fc8 	.word	0x20000fc8
 8013a80:	20000ff4 	.word	0x20000ff4
 8013a84:	20000fdc 	.word	0x20000fdc

08013a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	3354      	adds	r3, #84	; 0x54
 8013a94:	4618      	mov	r0, r3
 8013a96:	f007 ffd5 	bl	801ba44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d108      	bne.n	8013ab6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f000 ff89 	bl	80149c0 <vPortFree>
				vPortFree( pxTCB );
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f000 ff86 	bl	80149c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ab4:	e018      	b.n	8013ae8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d103      	bne.n	8013ac8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f000 ff7d 	bl	80149c0 <vPortFree>
	}
 8013ac6:	e00f      	b.n	8013ae8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	d00a      	beq.n	8013ae8 <prvDeleteTCB+0x60>
	__asm volatile
 8013ad2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ad6:	f383 8811 	msr	BASEPRI, r3
 8013ada:	f3bf 8f6f 	isb	sy
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	60fb      	str	r3, [r7, #12]
}
 8013ae4:	bf00      	nop
 8013ae6:	e7fe      	b.n	8013ae6 <prvDeleteTCB+0x5e>
	}
 8013ae8:	bf00      	nop
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013af6:	4b0c      	ldr	r3, [pc, #48]	; (8013b28 <prvResetNextTaskUnblockTime+0x38>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d104      	bne.n	8013b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013b00:	4b0a      	ldr	r3, [pc, #40]	; (8013b2c <prvResetNextTaskUnblockTime+0x3c>)
 8013b02:	f04f 32ff 	mov.w	r2, #4294967295
 8013b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013b08:	e008      	b.n	8013b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b0a:	4b07      	ldr	r3, [pc, #28]	; (8013b28 <prvResetNextTaskUnblockTime+0x38>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	68db      	ldr	r3, [r3, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	4a04      	ldr	r2, [pc, #16]	; (8013b2c <prvResetNextTaskUnblockTime+0x3c>)
 8013b1a:	6013      	str	r3, [r2, #0]
}
 8013b1c:	bf00      	nop
 8013b1e:	370c      	adds	r7, #12
 8013b20:	46bd      	mov	sp, r7
 8013b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b26:	4770      	bx	lr
 8013b28:	20000fac 	.word	0x20000fac
 8013b2c:	20001014 	.word	0x20001014

08013b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b36:	4b0b      	ldr	r3, [pc, #44]	; (8013b64 <xTaskGetSchedulerState+0x34>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d102      	bne.n	8013b44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b3e:	2301      	movs	r3, #1
 8013b40:	607b      	str	r3, [r7, #4]
 8013b42:	e008      	b.n	8013b56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b44:	4b08      	ldr	r3, [pc, #32]	; (8013b68 <xTaskGetSchedulerState+0x38>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d102      	bne.n	8013b52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	607b      	str	r3, [r7, #4]
 8013b50:	e001      	b.n	8013b56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b52:	2300      	movs	r3, #0
 8013b54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b56:	687b      	ldr	r3, [r7, #4]
	}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	370c      	adds	r7, #12
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr
 8013b64:	20001000 	.word	0x20001000
 8013b68:	2000101c 	.word	0x2000101c

08013b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d056      	beq.n	8013c30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013b82:	4b2e      	ldr	r3, [pc, #184]	; (8013c3c <xTaskPriorityDisinherit+0xd0>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	693a      	ldr	r2, [r7, #16]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d00a      	beq.n	8013ba2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013b8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b90:	f383 8811 	msr	BASEPRI, r3
 8013b94:	f3bf 8f6f 	isb	sy
 8013b98:	f3bf 8f4f 	dsb	sy
 8013b9c:	60fb      	str	r3, [r7, #12]
}
 8013b9e:	bf00      	nop
 8013ba0:	e7fe      	b.n	8013ba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10a      	bne.n	8013bc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013baa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bae:	f383 8811 	msr	BASEPRI, r3
 8013bb2:	f3bf 8f6f 	isb	sy
 8013bb6:	f3bf 8f4f 	dsb	sy
 8013bba:	60bb      	str	r3, [r7, #8]
}
 8013bbc:	bf00      	nop
 8013bbe:	e7fe      	b.n	8013bbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bc4:	1e5a      	subs	r2, r3, #1
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d02c      	beq.n	8013c30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d128      	bne.n	8013c30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	3304      	adds	r3, #4
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fe fab4 	bl	8012150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c00:	4b0f      	ldr	r3, [pc, #60]	; (8013c40 <xTaskPriorityDisinherit+0xd4>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d903      	bls.n	8013c10 <xTaskPriorityDisinherit+0xa4>
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c0c:	4a0c      	ldr	r2, [pc, #48]	; (8013c40 <xTaskPriorityDisinherit+0xd4>)
 8013c0e:	6013      	str	r3, [r2, #0]
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c14:	4613      	mov	r3, r2
 8013c16:	009b      	lsls	r3, r3, #2
 8013c18:	4413      	add	r3, r2
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4a09      	ldr	r2, [pc, #36]	; (8013c44 <xTaskPriorityDisinherit+0xd8>)
 8013c1e:	441a      	add	r2, r3
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	3304      	adds	r3, #4
 8013c24:	4619      	mov	r1, r3
 8013c26:	4610      	mov	r0, r2
 8013c28:	f7fe fa35 	bl	8012096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c30:	697b      	ldr	r3, [r7, #20]
	}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3718      	adds	r7, #24
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20000b20 	.word	0x20000b20
 8013c40:	20000ffc 	.word	0x20000ffc
 8013c44:	20000b24 	.word	0x20000b24

08013c48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013c52:	4b21      	ldr	r3, [pc, #132]	; (8013cd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c58:	4b20      	ldr	r3, [pc, #128]	; (8013cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	3304      	adds	r3, #4
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fe fa76 	bl	8012150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c6a:	d10a      	bne.n	8013c82 <prvAddCurrentTaskToDelayedList+0x3a>
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d007      	beq.n	8013c82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c72:	4b1a      	ldr	r3, [pc, #104]	; (8013cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	3304      	adds	r3, #4
 8013c78:	4619      	mov	r1, r3
 8013c7a:	4819      	ldr	r0, [pc, #100]	; (8013ce0 <prvAddCurrentTaskToDelayedList+0x98>)
 8013c7c:	f7fe fa0b 	bl	8012096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013c80:	e026      	b.n	8013cd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4413      	add	r3, r2
 8013c88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c8a:	4b14      	ldr	r3, [pc, #80]	; (8013cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68ba      	ldr	r2, [r7, #8]
 8013c90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013c92:	68ba      	ldr	r2, [r7, #8]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d209      	bcs.n	8013cae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c9a:	4b12      	ldr	r3, [pc, #72]	; (8013ce4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	4b0f      	ldr	r3, [pc, #60]	; (8013cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	3304      	adds	r3, #4
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	4610      	mov	r0, r2
 8013ca8:	f7fe fa19 	bl	80120de <vListInsert>
}
 8013cac:	e010      	b.n	8013cd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cae:	4b0e      	ldr	r3, [pc, #56]	; (8013ce8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	4b0a      	ldr	r3, [pc, #40]	; (8013cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	3304      	adds	r3, #4
 8013cb8:	4619      	mov	r1, r3
 8013cba:	4610      	mov	r0, r2
 8013cbc:	f7fe fa0f 	bl	80120de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013cc0:	4b0a      	ldr	r3, [pc, #40]	; (8013cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68ba      	ldr	r2, [r7, #8]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d202      	bcs.n	8013cd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013cca:	4a08      	ldr	r2, [pc, #32]	; (8013cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	6013      	str	r3, [r2, #0]
}
 8013cd0:	bf00      	nop
 8013cd2:	3710      	adds	r7, #16
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	20000ff8 	.word	0x20000ff8
 8013cdc:	20000b20 	.word	0x20000b20
 8013ce0:	20000fe0 	.word	0x20000fe0
 8013ce4:	20000fb0 	.word	0x20000fb0
 8013ce8:	20000fac 	.word	0x20000fac
 8013cec:	20001014 	.word	0x20001014

08013cf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b08a      	sub	sp, #40	; 0x28
 8013cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013cfa:	f000 fb07 	bl	801430c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013cfe:	4b1c      	ldr	r3, [pc, #112]	; (8013d70 <xTimerCreateTimerTask+0x80>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d021      	beq.n	8013d4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013d06:	2300      	movs	r3, #0
 8013d08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013d0e:	1d3a      	adds	r2, r7, #4
 8013d10:	f107 0108 	add.w	r1, r7, #8
 8013d14:	f107 030c 	add.w	r3, r7, #12
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fe f975 	bl	8012008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013d1e:	6879      	ldr	r1, [r7, #4]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	68fa      	ldr	r2, [r7, #12]
 8013d24:	9202      	str	r2, [sp, #8]
 8013d26:	9301      	str	r3, [sp, #4]
 8013d28:	2302      	movs	r3, #2
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	460a      	mov	r2, r1
 8013d30:	4910      	ldr	r1, [pc, #64]	; (8013d74 <xTimerCreateTimerTask+0x84>)
 8013d32:	4811      	ldr	r0, [pc, #68]	; (8013d78 <xTimerCreateTimerTask+0x88>)
 8013d34:	f7fe ffdc 	bl	8012cf0 <xTaskCreateStatic>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	4a10      	ldr	r2, [pc, #64]	; (8013d7c <xTimerCreateTimerTask+0x8c>)
 8013d3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013d3e:	4b0f      	ldr	r3, [pc, #60]	; (8013d7c <xTimerCreateTimerTask+0x8c>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d001      	beq.n	8013d4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013d46:	2301      	movs	r3, #1
 8013d48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10a      	bne.n	8013d66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013d50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d54:	f383 8811 	msr	BASEPRI, r3
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	f3bf 8f4f 	dsb	sy
 8013d60:	613b      	str	r3, [r7, #16]
}
 8013d62:	bf00      	nop
 8013d64:	e7fe      	b.n	8013d64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013d66:	697b      	ldr	r3, [r7, #20]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	20001050 	.word	0x20001050
 8013d74:	0801c248 	.word	0x0801c248
 8013d78:	08013eb5 	.word	0x08013eb5
 8013d7c:	20001054 	.word	0x20001054

08013d80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b08a      	sub	sp, #40	; 0x28
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
 8013d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d10a      	bne.n	8013dae <xTimerGenericCommand+0x2e>
	__asm volatile
 8013d98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d9c:	f383 8811 	msr	BASEPRI, r3
 8013da0:	f3bf 8f6f 	isb	sy
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	623b      	str	r3, [r7, #32]
}
 8013daa:	bf00      	nop
 8013dac:	e7fe      	b.n	8013dac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013dae:	4b1a      	ldr	r3, [pc, #104]	; (8013e18 <xTimerGenericCommand+0x98>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d02a      	beq.n	8013e0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	2b05      	cmp	r3, #5
 8013dc6:	dc18      	bgt.n	8013dfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013dc8:	f7ff feb2 	bl	8013b30 <xTaskGetSchedulerState>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	2b02      	cmp	r3, #2
 8013dd0:	d109      	bne.n	8013de6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013dd2:	4b11      	ldr	r3, [pc, #68]	; (8013e18 <xTimerGenericCommand+0x98>)
 8013dd4:	6818      	ldr	r0, [r3, #0]
 8013dd6:	f107 0110 	add.w	r1, r7, #16
 8013dda:	2300      	movs	r3, #0
 8013ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dde:	f7fe fb1f 	bl	8012420 <xQueueGenericSend>
 8013de2:	6278      	str	r0, [r7, #36]	; 0x24
 8013de4:	e012      	b.n	8013e0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013de6:	4b0c      	ldr	r3, [pc, #48]	; (8013e18 <xTimerGenericCommand+0x98>)
 8013de8:	6818      	ldr	r0, [r3, #0]
 8013dea:	f107 0110 	add.w	r1, r7, #16
 8013dee:	2300      	movs	r3, #0
 8013df0:	2200      	movs	r2, #0
 8013df2:	f7fe fb15 	bl	8012420 <xQueueGenericSend>
 8013df6:	6278      	str	r0, [r7, #36]	; 0x24
 8013df8:	e008      	b.n	8013e0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013dfa:	4b07      	ldr	r3, [pc, #28]	; (8013e18 <xTimerGenericCommand+0x98>)
 8013dfc:	6818      	ldr	r0, [r3, #0]
 8013dfe:	f107 0110 	add.w	r1, r7, #16
 8013e02:	2300      	movs	r3, #0
 8013e04:	683a      	ldr	r2, [r7, #0]
 8013e06:	f7fe fc09 	bl	801261c <xQueueGenericSendFromISR>
 8013e0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3728      	adds	r7, #40	; 0x28
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	20001050 	.word	0x20001050

08013e1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b088      	sub	sp, #32
 8013e20:	af02      	add	r7, sp, #8
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e26:	4b22      	ldr	r3, [pc, #136]	; (8013eb0 <prvProcessExpiredTimer+0x94>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	68db      	ldr	r3, [r3, #12]
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	3304      	adds	r3, #4
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7fe f98b 	bl	8012150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e40:	f003 0304 	and.w	r3, r3, #4
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d022      	beq.n	8013e8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	699a      	ldr	r2, [r3, #24]
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	18d1      	adds	r1, r2, r3
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	683a      	ldr	r2, [r7, #0]
 8013e54:	6978      	ldr	r0, [r7, #20]
 8013e56:	f000 f8d1 	bl	8013ffc <prvInsertTimerInActiveList>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d01f      	beq.n	8013ea0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013e60:	2300      	movs	r3, #0
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	2300      	movs	r3, #0
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	2100      	movs	r1, #0
 8013e6a:	6978      	ldr	r0, [r7, #20]
 8013e6c:	f7ff ff88 	bl	8013d80 <xTimerGenericCommand>
 8013e70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d113      	bne.n	8013ea0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013e78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e7c:	f383 8811 	msr	BASEPRI, r3
 8013e80:	f3bf 8f6f 	isb	sy
 8013e84:	f3bf 8f4f 	dsb	sy
 8013e88:	60fb      	str	r3, [r7, #12]
}
 8013e8a:	bf00      	nop
 8013e8c:	e7fe      	b.n	8013e8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e94:	f023 0301 	bic.w	r3, r3, #1
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	6a1b      	ldr	r3, [r3, #32]
 8013ea4:	6978      	ldr	r0, [r7, #20]
 8013ea6:	4798      	blx	r3
}
 8013ea8:	bf00      	nop
 8013eaa:	3718      	adds	r7, #24
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	20001048 	.word	0x20001048

08013eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013ebc:	f107 0308 	add.w	r3, r7, #8
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f000 f857 	bl	8013f74 <prvGetNextExpireTime>
 8013ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	4619      	mov	r1, r3
 8013ecc:	68f8      	ldr	r0, [r7, #12]
 8013ece:	f000 f803 	bl	8013ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013ed2:	f000 f8d5 	bl	8014080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013ed6:	e7f1      	b.n	8013ebc <prvTimerTask+0x8>

08013ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013ee2:	f7ff fa39 	bl	8013358 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013ee6:	f107 0308 	add.w	r3, r7, #8
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 f866 	bl	8013fbc <prvSampleTimeNow>
 8013ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d130      	bne.n	8013f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d10a      	bne.n	8013f14 <prvProcessTimerOrBlockTask+0x3c>
 8013efe:	687a      	ldr	r2, [r7, #4]
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d806      	bhi.n	8013f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013f06:	f7ff fa35 	bl	8013374 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013f0a:	68f9      	ldr	r1, [r7, #12]
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7ff ff85 	bl	8013e1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013f12:	e024      	b.n	8013f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d008      	beq.n	8013f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013f1a:	4b13      	ldr	r3, [pc, #76]	; (8013f68 <prvProcessTimerOrBlockTask+0x90>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d101      	bne.n	8013f28 <prvProcessTimerOrBlockTask+0x50>
 8013f24:	2301      	movs	r3, #1
 8013f26:	e000      	b.n	8013f2a <prvProcessTimerOrBlockTask+0x52>
 8013f28:	2300      	movs	r3, #0
 8013f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f2c:	4b0f      	ldr	r3, [pc, #60]	; (8013f6c <prvProcessTimerOrBlockTask+0x94>)
 8013f2e:	6818      	ldr	r0, [r3, #0]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	1ad3      	subs	r3, r2, r3
 8013f36:	683a      	ldr	r2, [r7, #0]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	f7fe fea5 	bl	8012c88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013f3e:	f7ff fa19 	bl	8013374 <xTaskResumeAll>
 8013f42:	4603      	mov	r3, r0
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d10a      	bne.n	8013f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013f48:	4b09      	ldr	r3, [pc, #36]	; (8013f70 <prvProcessTimerOrBlockTask+0x98>)
 8013f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f4e:	601a      	str	r2, [r3, #0]
 8013f50:	f3bf 8f4f 	dsb	sy
 8013f54:	f3bf 8f6f 	isb	sy
}
 8013f58:	e001      	b.n	8013f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013f5a:	f7ff fa0b 	bl	8013374 <xTaskResumeAll>
}
 8013f5e:	bf00      	nop
 8013f60:	3710      	adds	r7, #16
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	2000104c 	.word	0x2000104c
 8013f6c:	20001050 	.word	0x20001050
 8013f70:	e000ed04 	.word	0xe000ed04

08013f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013f7c:	4b0e      	ldr	r3, [pc, #56]	; (8013fb8 <prvGetNextExpireTime+0x44>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d101      	bne.n	8013f8a <prvGetNextExpireTime+0x16>
 8013f86:	2201      	movs	r2, #1
 8013f88:	e000      	b.n	8013f8c <prvGetNextExpireTime+0x18>
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d105      	bne.n	8013fa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013f98:	4b07      	ldr	r3, [pc, #28]	; (8013fb8 <prvGetNextExpireTime+0x44>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	60fb      	str	r3, [r7, #12]
 8013fa2:	e001      	b.n	8013fa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3714      	adds	r7, #20
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	20001048 	.word	0x20001048

08013fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013fc4:	f7ff fa74 	bl	80134b0 <xTaskGetTickCount>
 8013fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013fca:	4b0b      	ldr	r3, [pc, #44]	; (8013ff8 <prvSampleTimeNow+0x3c>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	68fa      	ldr	r2, [r7, #12]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d205      	bcs.n	8013fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013fd4:	f000 f936 	bl	8014244 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2201      	movs	r2, #1
 8013fdc:	601a      	str	r2, [r3, #0]
 8013fde:	e002      	b.n	8013fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013fe6:	4a04      	ldr	r2, [pc, #16]	; (8013ff8 <prvSampleTimeNow+0x3c>)
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013fec:	68fb      	ldr	r3, [r7, #12]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3710      	adds	r7, #16
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	20001058 	.word	0x20001058

08013ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b086      	sub	sp, #24
 8014000:	af00      	add	r7, sp, #0
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
 8014008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801400a:	2300      	movs	r3, #0
 801400c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	68ba      	ldr	r2, [r7, #8]
 8014012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	429a      	cmp	r2, r3
 8014020:	d812      	bhi.n	8014048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	1ad2      	subs	r2, r2, r3
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	699b      	ldr	r3, [r3, #24]
 801402c:	429a      	cmp	r2, r3
 801402e:	d302      	bcc.n	8014036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014030:	2301      	movs	r3, #1
 8014032:	617b      	str	r3, [r7, #20]
 8014034:	e01b      	b.n	801406e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014036:	4b10      	ldr	r3, [pc, #64]	; (8014078 <prvInsertTimerInActiveList+0x7c>)
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	3304      	adds	r3, #4
 801403e:	4619      	mov	r1, r3
 8014040:	4610      	mov	r0, r2
 8014042:	f7fe f84c 	bl	80120de <vListInsert>
 8014046:	e012      	b.n	801406e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	429a      	cmp	r2, r3
 801404e:	d206      	bcs.n	801405e <prvInsertTimerInActiveList+0x62>
 8014050:	68ba      	ldr	r2, [r7, #8]
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	429a      	cmp	r2, r3
 8014056:	d302      	bcc.n	801405e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014058:	2301      	movs	r3, #1
 801405a:	617b      	str	r3, [r7, #20]
 801405c:	e007      	b.n	801406e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801405e:	4b07      	ldr	r3, [pc, #28]	; (801407c <prvInsertTimerInActiveList+0x80>)
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	3304      	adds	r3, #4
 8014066:	4619      	mov	r1, r3
 8014068:	4610      	mov	r0, r2
 801406a:	f7fe f838 	bl	80120de <vListInsert>
		}
	}

	return xProcessTimerNow;
 801406e:	697b      	ldr	r3, [r7, #20]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3718      	adds	r7, #24
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	2000104c 	.word	0x2000104c
 801407c:	20001048 	.word	0x20001048

08014080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b08e      	sub	sp, #56	; 0x38
 8014084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014086:	e0ca      	b.n	801421e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2b00      	cmp	r3, #0
 801408c:	da18      	bge.n	80140c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801408e:	1d3b      	adds	r3, r7, #4
 8014090:	3304      	adds	r3, #4
 8014092:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014096:	2b00      	cmp	r3, #0
 8014098:	d10a      	bne.n	80140b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801409a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801409e:	f383 8811 	msr	BASEPRI, r3
 80140a2:	f3bf 8f6f 	isb	sy
 80140a6:	f3bf 8f4f 	dsb	sy
 80140aa:	61fb      	str	r3, [r7, #28]
}
 80140ac:	bf00      	nop
 80140ae:	e7fe      	b.n	80140ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80140b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140b6:	6850      	ldr	r0, [r2, #4]
 80140b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140ba:	6892      	ldr	r2, [r2, #8]
 80140bc:	4611      	mov	r1, r2
 80140be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f2c0 80aa 	blt.w	801421c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80140cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ce:	695b      	ldr	r3, [r3, #20]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d004      	beq.n	80140de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80140d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d6:	3304      	adds	r3, #4
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fe f839 	bl	8012150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80140de:	463b      	mov	r3, r7
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7ff ff6b 	bl	8013fbc <prvSampleTimeNow>
 80140e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b09      	cmp	r3, #9
 80140ec:	f200 8097 	bhi.w	801421e <prvProcessReceivedCommands+0x19e>
 80140f0:	a201      	add	r2, pc, #4	; (adr r2, 80140f8 <prvProcessReceivedCommands+0x78>)
 80140f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140f6:	bf00      	nop
 80140f8:	08014121 	.word	0x08014121
 80140fc:	08014121 	.word	0x08014121
 8014100:	08014121 	.word	0x08014121
 8014104:	08014195 	.word	0x08014195
 8014108:	080141a9 	.word	0x080141a9
 801410c:	080141f3 	.word	0x080141f3
 8014110:	08014121 	.word	0x08014121
 8014114:	08014121 	.word	0x08014121
 8014118:	08014195 	.word	0x08014195
 801411c:	080141a9 	.word	0x080141a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014126:	f043 0301 	orr.w	r3, r3, #1
 801412a:	b2da      	uxtb	r2, r3
 801412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014132:	68ba      	ldr	r2, [r7, #8]
 8014134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014136:	699b      	ldr	r3, [r3, #24]
 8014138:	18d1      	adds	r1, r2, r3
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801413e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014140:	f7ff ff5c 	bl	8013ffc <prvInsertTimerInActiveList>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d069      	beq.n	801421e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014158:	f003 0304 	and.w	r3, r3, #4
 801415c:	2b00      	cmp	r3, #0
 801415e:	d05e      	beq.n	801421e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014164:	699b      	ldr	r3, [r3, #24]
 8014166:	441a      	add	r2, r3
 8014168:	2300      	movs	r3, #0
 801416a:	9300      	str	r3, [sp, #0]
 801416c:	2300      	movs	r3, #0
 801416e:	2100      	movs	r1, #0
 8014170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014172:	f7ff fe05 	bl	8013d80 <xTimerGenericCommand>
 8014176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014178:	6a3b      	ldr	r3, [r7, #32]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d14f      	bne.n	801421e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801417e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014182:	f383 8811 	msr	BASEPRI, r3
 8014186:	f3bf 8f6f 	isb	sy
 801418a:	f3bf 8f4f 	dsb	sy
 801418e:	61bb      	str	r3, [r7, #24]
}
 8014190:	bf00      	nop
 8014192:	e7fe      	b.n	8014192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801419a:	f023 0301 	bic.w	r3, r3, #1
 801419e:	b2da      	uxtb	r2, r3
 80141a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80141a6:	e03a      	b.n	801421e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80141a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141ae:	f043 0301 	orr.w	r3, r3, #1
 80141b2:	b2da      	uxtb	r2, r3
 80141b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80141ba:	68ba      	ldr	r2, [r7, #8]
 80141bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80141c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c2:	699b      	ldr	r3, [r3, #24]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10a      	bne.n	80141de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80141c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80141cc:	f383 8811 	msr	BASEPRI, r3
 80141d0:	f3bf 8f6f 	isb	sy
 80141d4:	f3bf 8f4f 	dsb	sy
 80141d8:	617b      	str	r3, [r7, #20]
}
 80141da:	bf00      	nop
 80141dc:	e7fe      	b.n	80141dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80141de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e0:	699a      	ldr	r2, [r3, #24]
 80141e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e4:	18d1      	adds	r1, r2, r3
 80141e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141ec:	f7ff ff06 	bl	8013ffc <prvInsertTimerInActiveList>
					break;
 80141f0:	e015      	b.n	801421e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80141f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141f8:	f003 0302 	and.w	r3, r3, #2
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d103      	bne.n	8014208 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014202:	f000 fbdd 	bl	80149c0 <vPortFree>
 8014206:	e00a      	b.n	801421e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801420e:	f023 0301 	bic.w	r3, r3, #1
 8014212:	b2da      	uxtb	r2, r3
 8014214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801421a:	e000      	b.n	801421e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801421c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801421e:	4b08      	ldr	r3, [pc, #32]	; (8014240 <prvProcessReceivedCommands+0x1c0>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	1d39      	adds	r1, r7, #4
 8014224:	2200      	movs	r2, #0
 8014226:	4618      	mov	r0, r3
 8014228:	f7fe fa94 	bl	8012754 <xQueueReceive>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	f47f af2a 	bne.w	8014088 <prvProcessReceivedCommands+0x8>
	}
}
 8014234:	bf00      	nop
 8014236:	bf00      	nop
 8014238:	3730      	adds	r7, #48	; 0x30
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	20001050 	.word	0x20001050

08014244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b088      	sub	sp, #32
 8014248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801424a:	e048      	b.n	80142de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801424c:	4b2d      	ldr	r3, [pc, #180]	; (8014304 <prvSwitchTimerLists+0xc0>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	68db      	ldr	r3, [r3, #12]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014256:	4b2b      	ldr	r3, [pc, #172]	; (8014304 <prvSwitchTimerLists+0xc0>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	3304      	adds	r3, #4
 8014264:	4618      	mov	r0, r3
 8014266:	f7fd ff73 	bl	8012150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	6a1b      	ldr	r3, [r3, #32]
 801426e:	68f8      	ldr	r0, [r7, #12]
 8014270:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014278:	f003 0304 	and.w	r3, r3, #4
 801427c:	2b00      	cmp	r3, #0
 801427e:	d02e      	beq.n	80142de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	699b      	ldr	r3, [r3, #24]
 8014284:	693a      	ldr	r2, [r7, #16]
 8014286:	4413      	add	r3, r2
 8014288:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801428a:	68ba      	ldr	r2, [r7, #8]
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	429a      	cmp	r2, r3
 8014290:	d90e      	bls.n	80142b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801429e:	4b19      	ldr	r3, [pc, #100]	; (8014304 <prvSwitchTimerLists+0xc0>)
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	3304      	adds	r3, #4
 80142a6:	4619      	mov	r1, r3
 80142a8:	4610      	mov	r0, r2
 80142aa:	f7fd ff18 	bl	80120de <vListInsert>
 80142ae:	e016      	b.n	80142de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80142b0:	2300      	movs	r3, #0
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	2300      	movs	r3, #0
 80142b6:	693a      	ldr	r2, [r7, #16]
 80142b8:	2100      	movs	r1, #0
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f7ff fd60 	bl	8013d80 <xTimerGenericCommand>
 80142c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d10a      	bne.n	80142de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80142c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80142cc:	f383 8811 	msr	BASEPRI, r3
 80142d0:	f3bf 8f6f 	isb	sy
 80142d4:	f3bf 8f4f 	dsb	sy
 80142d8:	603b      	str	r3, [r7, #0]
}
 80142da:	bf00      	nop
 80142dc:	e7fe      	b.n	80142dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80142de:	4b09      	ldr	r3, [pc, #36]	; (8014304 <prvSwitchTimerLists+0xc0>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d1b1      	bne.n	801424c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80142e8:	4b06      	ldr	r3, [pc, #24]	; (8014304 <prvSwitchTimerLists+0xc0>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80142ee:	4b06      	ldr	r3, [pc, #24]	; (8014308 <prvSwitchTimerLists+0xc4>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	4a04      	ldr	r2, [pc, #16]	; (8014304 <prvSwitchTimerLists+0xc0>)
 80142f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80142f6:	4a04      	ldr	r2, [pc, #16]	; (8014308 <prvSwitchTimerLists+0xc4>)
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	6013      	str	r3, [r2, #0]
}
 80142fc:	bf00      	nop
 80142fe:	3718      	adds	r7, #24
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	20001048 	.word	0x20001048
 8014308:	2000104c 	.word	0x2000104c

0801430c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014312:	f000 f967 	bl	80145e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014316:	4b15      	ldr	r3, [pc, #84]	; (801436c <prvCheckForValidListAndQueue+0x60>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d120      	bne.n	8014360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801431e:	4814      	ldr	r0, [pc, #80]	; (8014370 <prvCheckForValidListAndQueue+0x64>)
 8014320:	f7fd fe8c 	bl	801203c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014324:	4813      	ldr	r0, [pc, #76]	; (8014374 <prvCheckForValidListAndQueue+0x68>)
 8014326:	f7fd fe89 	bl	801203c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801432a:	4b13      	ldr	r3, [pc, #76]	; (8014378 <prvCheckForValidListAndQueue+0x6c>)
 801432c:	4a10      	ldr	r2, [pc, #64]	; (8014370 <prvCheckForValidListAndQueue+0x64>)
 801432e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014330:	4b12      	ldr	r3, [pc, #72]	; (801437c <prvCheckForValidListAndQueue+0x70>)
 8014332:	4a10      	ldr	r2, [pc, #64]	; (8014374 <prvCheckForValidListAndQueue+0x68>)
 8014334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014336:	2300      	movs	r3, #0
 8014338:	9300      	str	r3, [sp, #0]
 801433a:	4b11      	ldr	r3, [pc, #68]	; (8014380 <prvCheckForValidListAndQueue+0x74>)
 801433c:	4a11      	ldr	r2, [pc, #68]	; (8014384 <prvCheckForValidListAndQueue+0x78>)
 801433e:	2110      	movs	r1, #16
 8014340:	200a      	movs	r0, #10
 8014342:	f7fd ff97 	bl	8012274 <xQueueGenericCreateStatic>
 8014346:	4603      	mov	r3, r0
 8014348:	4a08      	ldr	r2, [pc, #32]	; (801436c <prvCheckForValidListAndQueue+0x60>)
 801434a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801434c:	4b07      	ldr	r3, [pc, #28]	; (801436c <prvCheckForValidListAndQueue+0x60>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d005      	beq.n	8014360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014354:	4b05      	ldr	r3, [pc, #20]	; (801436c <prvCheckForValidListAndQueue+0x60>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	490b      	ldr	r1, [pc, #44]	; (8014388 <prvCheckForValidListAndQueue+0x7c>)
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fc6a 	bl	8012c34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014360:	f000 f970 	bl	8014644 <vPortExitCritical>
}
 8014364:	bf00      	nop
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	20001050 	.word	0x20001050
 8014370:	20001020 	.word	0x20001020
 8014374:	20001034 	.word	0x20001034
 8014378:	20001048 	.word	0x20001048
 801437c:	2000104c 	.word	0x2000104c
 8014380:	200010fc 	.word	0x200010fc
 8014384:	2000105c 	.word	0x2000105c
 8014388:	0801c250 	.word	0x0801c250

0801438c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801438c:	b480      	push	{r7}
 801438e:	b085      	sub	sp, #20
 8014390:	af00      	add	r7, sp, #0
 8014392:	60f8      	str	r0, [r7, #12]
 8014394:	60b9      	str	r1, [r7, #8]
 8014396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	3b04      	subs	r3, #4
 801439c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80143a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3b04      	subs	r3, #4
 80143aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	f023 0201 	bic.w	r2, r3, #1
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	3b04      	subs	r3, #4
 80143ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80143bc:	4a0c      	ldr	r2, [pc, #48]	; (80143f0 <pxPortInitialiseStack+0x64>)
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	3b14      	subs	r3, #20
 80143c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	3b04      	subs	r3, #4
 80143d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	f06f 0202 	mvn.w	r2, #2
 80143da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	3b20      	subs	r3, #32
 80143e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80143e2:	68fb      	ldr	r3, [r7, #12]
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3714      	adds	r7, #20
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr
 80143f0:	080143f5 	.word	0x080143f5

080143f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80143f4:	b480      	push	{r7}
 80143f6:	b085      	sub	sp, #20
 80143f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80143fa:	2300      	movs	r3, #0
 80143fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80143fe:	4b12      	ldr	r3, [pc, #72]	; (8014448 <prvTaskExitError+0x54>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014406:	d00a      	beq.n	801441e <prvTaskExitError+0x2a>
	__asm volatile
 8014408:	f04f 0330 	mov.w	r3, #48	; 0x30
 801440c:	f383 8811 	msr	BASEPRI, r3
 8014410:	f3bf 8f6f 	isb	sy
 8014414:	f3bf 8f4f 	dsb	sy
 8014418:	60fb      	str	r3, [r7, #12]
}
 801441a:	bf00      	nop
 801441c:	e7fe      	b.n	801441c <prvTaskExitError+0x28>
	__asm volatile
 801441e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014422:	f383 8811 	msr	BASEPRI, r3
 8014426:	f3bf 8f6f 	isb	sy
 801442a:	f3bf 8f4f 	dsb	sy
 801442e:	60bb      	str	r3, [r7, #8]
}
 8014430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014432:	bf00      	nop
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d0fc      	beq.n	8014434 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801443a:	bf00      	nop
 801443c:	bf00      	nop
 801443e:	3714      	adds	r7, #20
 8014440:	46bd      	mov	sp, r7
 8014442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014446:	4770      	bx	lr
 8014448:	20000140 	.word	0x20000140
 801444c:	00000000 	.word	0x00000000

08014450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014450:	4b07      	ldr	r3, [pc, #28]	; (8014470 <pxCurrentTCBConst2>)
 8014452:	6819      	ldr	r1, [r3, #0]
 8014454:	6808      	ldr	r0, [r1, #0]
 8014456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445a:	f380 8809 	msr	PSP, r0
 801445e:	f3bf 8f6f 	isb	sy
 8014462:	f04f 0000 	mov.w	r0, #0
 8014466:	f380 8811 	msr	BASEPRI, r0
 801446a:	4770      	bx	lr
 801446c:	f3af 8000 	nop.w

08014470 <pxCurrentTCBConst2>:
 8014470:	20000b20 	.word	0x20000b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014474:	bf00      	nop
 8014476:	bf00      	nop

08014478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014478:	4808      	ldr	r0, [pc, #32]	; (801449c <prvPortStartFirstTask+0x24>)
 801447a:	6800      	ldr	r0, [r0, #0]
 801447c:	6800      	ldr	r0, [r0, #0]
 801447e:	f380 8808 	msr	MSP, r0
 8014482:	f04f 0000 	mov.w	r0, #0
 8014486:	f380 8814 	msr	CONTROL, r0
 801448a:	b662      	cpsie	i
 801448c:	b661      	cpsie	f
 801448e:	f3bf 8f4f 	dsb	sy
 8014492:	f3bf 8f6f 	isb	sy
 8014496:	df00      	svc	0
 8014498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801449a:	bf00      	nop
 801449c:	e000ed08 	.word	0xe000ed08

080144a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80144a6:	4b46      	ldr	r3, [pc, #280]	; (80145c0 <xPortStartScheduler+0x120>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4a46      	ldr	r2, [pc, #280]	; (80145c4 <xPortStartScheduler+0x124>)
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d10a      	bne.n	80144c6 <xPortStartScheduler+0x26>
	__asm volatile
 80144b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80144b4:	f383 8811 	msr	BASEPRI, r3
 80144b8:	f3bf 8f6f 	isb	sy
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	613b      	str	r3, [r7, #16]
}
 80144c2:	bf00      	nop
 80144c4:	e7fe      	b.n	80144c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80144c6:	4b3e      	ldr	r3, [pc, #248]	; (80145c0 <xPortStartScheduler+0x120>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	4a3f      	ldr	r2, [pc, #252]	; (80145c8 <xPortStartScheduler+0x128>)
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d10a      	bne.n	80144e6 <xPortStartScheduler+0x46>
	__asm volatile
 80144d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80144d4:	f383 8811 	msr	BASEPRI, r3
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	60fb      	str	r3, [r7, #12]
}
 80144e2:	bf00      	nop
 80144e4:	e7fe      	b.n	80144e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80144e6:	4b39      	ldr	r3, [pc, #228]	; (80145cc <xPortStartScheduler+0x12c>)
 80144e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	b2db      	uxtb	r3, r3
 80144f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	22ff      	movs	r2, #255	; 0xff
 80144f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014500:	78fb      	ldrb	r3, [r7, #3]
 8014502:	b2db      	uxtb	r3, r3
 8014504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014508:	b2da      	uxtb	r2, r3
 801450a:	4b31      	ldr	r3, [pc, #196]	; (80145d0 <xPortStartScheduler+0x130>)
 801450c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801450e:	4b31      	ldr	r3, [pc, #196]	; (80145d4 <xPortStartScheduler+0x134>)
 8014510:	2207      	movs	r2, #7
 8014512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014514:	e009      	b.n	801452a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014516:	4b2f      	ldr	r3, [pc, #188]	; (80145d4 <xPortStartScheduler+0x134>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	3b01      	subs	r3, #1
 801451c:	4a2d      	ldr	r2, [pc, #180]	; (80145d4 <xPortStartScheduler+0x134>)
 801451e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014520:	78fb      	ldrb	r3, [r7, #3]
 8014522:	b2db      	uxtb	r3, r3
 8014524:	005b      	lsls	r3, r3, #1
 8014526:	b2db      	uxtb	r3, r3
 8014528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801452a:	78fb      	ldrb	r3, [r7, #3]
 801452c:	b2db      	uxtb	r3, r3
 801452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014532:	2b80      	cmp	r3, #128	; 0x80
 8014534:	d0ef      	beq.n	8014516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014536:	4b27      	ldr	r3, [pc, #156]	; (80145d4 <xPortStartScheduler+0x134>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	f1c3 0307 	rsb	r3, r3, #7
 801453e:	2b04      	cmp	r3, #4
 8014540:	d00a      	beq.n	8014558 <xPortStartScheduler+0xb8>
	__asm volatile
 8014542:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014546:	f383 8811 	msr	BASEPRI, r3
 801454a:	f3bf 8f6f 	isb	sy
 801454e:	f3bf 8f4f 	dsb	sy
 8014552:	60bb      	str	r3, [r7, #8]
}
 8014554:	bf00      	nop
 8014556:	e7fe      	b.n	8014556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014558:	4b1e      	ldr	r3, [pc, #120]	; (80145d4 <xPortStartScheduler+0x134>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	021b      	lsls	r3, r3, #8
 801455e:	4a1d      	ldr	r2, [pc, #116]	; (80145d4 <xPortStartScheduler+0x134>)
 8014560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014562:	4b1c      	ldr	r3, [pc, #112]	; (80145d4 <xPortStartScheduler+0x134>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801456a:	4a1a      	ldr	r2, [pc, #104]	; (80145d4 <xPortStartScheduler+0x134>)
 801456c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	b2da      	uxtb	r2, r3
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014576:	4b18      	ldr	r3, [pc, #96]	; (80145d8 <xPortStartScheduler+0x138>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	4a17      	ldr	r2, [pc, #92]	; (80145d8 <xPortStartScheduler+0x138>)
 801457c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014582:	4b15      	ldr	r3, [pc, #84]	; (80145d8 <xPortStartScheduler+0x138>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	4a14      	ldr	r2, [pc, #80]	; (80145d8 <xPortStartScheduler+0x138>)
 8014588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801458c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801458e:	f000 f8dd 	bl	801474c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014592:	4b12      	ldr	r3, [pc, #72]	; (80145dc <xPortStartScheduler+0x13c>)
 8014594:	2200      	movs	r2, #0
 8014596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014598:	f000 f8fc 	bl	8014794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801459c:	4b10      	ldr	r3, [pc, #64]	; (80145e0 <xPortStartScheduler+0x140>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4a0f      	ldr	r2, [pc, #60]	; (80145e0 <xPortStartScheduler+0x140>)
 80145a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80145a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80145a8:	f7ff ff66 	bl	8014478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80145ac:	f7ff f84a 	bl	8013644 <vTaskSwitchContext>
	prvTaskExitError();
 80145b0:	f7ff ff20 	bl	80143f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80145b4:	2300      	movs	r3, #0
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3718      	adds	r7, #24
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	e000ed00 	.word	0xe000ed00
 80145c4:	410fc271 	.word	0x410fc271
 80145c8:	410fc270 	.word	0x410fc270
 80145cc:	e000e400 	.word	0xe000e400
 80145d0:	2000114c 	.word	0x2000114c
 80145d4:	20001150 	.word	0x20001150
 80145d8:	e000ed20 	.word	0xe000ed20
 80145dc:	20000140 	.word	0x20000140
 80145e0:	e000ef34 	.word	0xe000ef34

080145e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
	__asm volatile
 80145ea:	f04f 0330 	mov.w	r3, #48	; 0x30
 80145ee:	f383 8811 	msr	BASEPRI, r3
 80145f2:	f3bf 8f6f 	isb	sy
 80145f6:	f3bf 8f4f 	dsb	sy
 80145fa:	607b      	str	r3, [r7, #4]
}
 80145fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80145fe:	4b0f      	ldr	r3, [pc, #60]	; (801463c <vPortEnterCritical+0x58>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	3301      	adds	r3, #1
 8014604:	4a0d      	ldr	r2, [pc, #52]	; (801463c <vPortEnterCritical+0x58>)
 8014606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014608:	4b0c      	ldr	r3, [pc, #48]	; (801463c <vPortEnterCritical+0x58>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b01      	cmp	r3, #1
 801460e:	d10f      	bne.n	8014630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014610:	4b0b      	ldr	r3, [pc, #44]	; (8014640 <vPortEnterCritical+0x5c>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	b2db      	uxtb	r3, r3
 8014616:	2b00      	cmp	r3, #0
 8014618:	d00a      	beq.n	8014630 <vPortEnterCritical+0x4c>
	__asm volatile
 801461a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801461e:	f383 8811 	msr	BASEPRI, r3
 8014622:	f3bf 8f6f 	isb	sy
 8014626:	f3bf 8f4f 	dsb	sy
 801462a:	603b      	str	r3, [r7, #0]
}
 801462c:	bf00      	nop
 801462e:	e7fe      	b.n	801462e <vPortEnterCritical+0x4a>
	}
}
 8014630:	bf00      	nop
 8014632:	370c      	adds	r7, #12
 8014634:	46bd      	mov	sp, r7
 8014636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463a:	4770      	bx	lr
 801463c:	20000140 	.word	0x20000140
 8014640:	e000ed04 	.word	0xe000ed04

08014644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801464a:	4b12      	ldr	r3, [pc, #72]	; (8014694 <vPortExitCritical+0x50>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d10a      	bne.n	8014668 <vPortExitCritical+0x24>
	__asm volatile
 8014652:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014656:	f383 8811 	msr	BASEPRI, r3
 801465a:	f3bf 8f6f 	isb	sy
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	607b      	str	r3, [r7, #4]
}
 8014664:	bf00      	nop
 8014666:	e7fe      	b.n	8014666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014668:	4b0a      	ldr	r3, [pc, #40]	; (8014694 <vPortExitCritical+0x50>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	3b01      	subs	r3, #1
 801466e:	4a09      	ldr	r2, [pc, #36]	; (8014694 <vPortExitCritical+0x50>)
 8014670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014672:	4b08      	ldr	r3, [pc, #32]	; (8014694 <vPortExitCritical+0x50>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d105      	bne.n	8014686 <vPortExitCritical+0x42>
 801467a:	2300      	movs	r3, #0
 801467c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	f383 8811 	msr	BASEPRI, r3
}
 8014684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014686:	bf00      	nop
 8014688:	370c      	adds	r7, #12
 801468a:	46bd      	mov	sp, r7
 801468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop
 8014694:	20000140 	.word	0x20000140
	...

080146a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80146a0:	f3ef 8009 	mrs	r0, PSP
 80146a4:	f3bf 8f6f 	isb	sy
 80146a8:	4b15      	ldr	r3, [pc, #84]	; (8014700 <pxCurrentTCBConst>)
 80146aa:	681a      	ldr	r2, [r3, #0]
 80146ac:	f01e 0f10 	tst.w	lr, #16
 80146b0:	bf08      	it	eq
 80146b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80146b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ba:	6010      	str	r0, [r2, #0]
 80146bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80146c0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80146c4:	f380 8811 	msr	BASEPRI, r0
 80146c8:	f3bf 8f4f 	dsb	sy
 80146cc:	f3bf 8f6f 	isb	sy
 80146d0:	f7fe ffb8 	bl	8013644 <vTaskSwitchContext>
 80146d4:	f04f 0000 	mov.w	r0, #0
 80146d8:	f380 8811 	msr	BASEPRI, r0
 80146dc:	bc09      	pop	{r0, r3}
 80146de:	6819      	ldr	r1, [r3, #0]
 80146e0:	6808      	ldr	r0, [r1, #0]
 80146e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e6:	f01e 0f10 	tst.w	lr, #16
 80146ea:	bf08      	it	eq
 80146ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80146f0:	f380 8809 	msr	PSP, r0
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	4770      	bx	lr
 80146fa:	bf00      	nop
 80146fc:	f3af 8000 	nop.w

08014700 <pxCurrentTCBConst>:
 8014700:	20000b20 	.word	0x20000b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014704:	bf00      	nop
 8014706:	bf00      	nop

08014708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
	__asm volatile
 801470e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014712:	f383 8811 	msr	BASEPRI, r3
 8014716:	f3bf 8f6f 	isb	sy
 801471a:	f3bf 8f4f 	dsb	sy
 801471e:	607b      	str	r3, [r7, #4]
}
 8014720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014722:	f7fe fed5 	bl	80134d0 <xTaskIncrementTick>
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	d003      	beq.n	8014734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801472c:	4b06      	ldr	r3, [pc, #24]	; (8014748 <xPortSysTickHandler+0x40>)
 801472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	2300      	movs	r3, #0
 8014736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	f383 8811 	msr	BASEPRI, r3
}
 801473e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014740:	bf00      	nop
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	e000ed04 	.word	0xe000ed04

0801474c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801474c:	b480      	push	{r7}
 801474e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014750:	4b0b      	ldr	r3, [pc, #44]	; (8014780 <vPortSetupTimerInterrupt+0x34>)
 8014752:	2200      	movs	r2, #0
 8014754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014756:	4b0b      	ldr	r3, [pc, #44]	; (8014784 <vPortSetupTimerInterrupt+0x38>)
 8014758:	2200      	movs	r2, #0
 801475a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801475c:	4b0a      	ldr	r3, [pc, #40]	; (8014788 <vPortSetupTimerInterrupt+0x3c>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4a0a      	ldr	r2, [pc, #40]	; (801478c <vPortSetupTimerInterrupt+0x40>)
 8014762:	fba2 2303 	umull	r2, r3, r2, r3
 8014766:	099b      	lsrs	r3, r3, #6
 8014768:	4a09      	ldr	r2, [pc, #36]	; (8014790 <vPortSetupTimerInterrupt+0x44>)
 801476a:	3b01      	subs	r3, #1
 801476c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801476e:	4b04      	ldr	r3, [pc, #16]	; (8014780 <vPortSetupTimerInterrupt+0x34>)
 8014770:	2207      	movs	r2, #7
 8014772:	601a      	str	r2, [r3, #0]
}
 8014774:	bf00      	nop
 8014776:	46bd      	mov	sp, r7
 8014778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	e000e010 	.word	0xe000e010
 8014784:	e000e018 	.word	0xe000e018
 8014788:	20000004 	.word	0x20000004
 801478c:	10624dd3 	.word	0x10624dd3
 8014790:	e000e014 	.word	0xe000e014

08014794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80147a4 <vPortEnableVFP+0x10>
 8014798:	6801      	ldr	r1, [r0, #0]
 801479a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801479e:	6001      	str	r1, [r0, #0]
 80147a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80147a2:	bf00      	nop
 80147a4:	e000ed88 	.word	0xe000ed88

080147a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80147a8:	b480      	push	{r7}
 80147aa:	b085      	sub	sp, #20
 80147ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80147ae:	f3ef 8305 	mrs	r3, IPSR
 80147b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2b0f      	cmp	r3, #15
 80147b8:	d914      	bls.n	80147e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80147ba:	4a17      	ldr	r2, [pc, #92]	; (8014818 <vPortValidateInterruptPriority+0x70>)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	4413      	add	r3, r2
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80147c4:	4b15      	ldr	r3, [pc, #84]	; (801481c <vPortValidateInterruptPriority+0x74>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	7afa      	ldrb	r2, [r7, #11]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d20a      	bcs.n	80147e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80147ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147d2:	f383 8811 	msr	BASEPRI, r3
 80147d6:	f3bf 8f6f 	isb	sy
 80147da:	f3bf 8f4f 	dsb	sy
 80147de:	607b      	str	r3, [r7, #4]
}
 80147e0:	bf00      	nop
 80147e2:	e7fe      	b.n	80147e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80147e4:	4b0e      	ldr	r3, [pc, #56]	; (8014820 <vPortValidateInterruptPriority+0x78>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80147ec:	4b0d      	ldr	r3, [pc, #52]	; (8014824 <vPortValidateInterruptPriority+0x7c>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d90a      	bls.n	801480a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80147f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147f8:	f383 8811 	msr	BASEPRI, r3
 80147fc:	f3bf 8f6f 	isb	sy
 8014800:	f3bf 8f4f 	dsb	sy
 8014804:	603b      	str	r3, [r7, #0]
}
 8014806:	bf00      	nop
 8014808:	e7fe      	b.n	8014808 <vPortValidateInterruptPriority+0x60>
	}
 801480a:	bf00      	nop
 801480c:	3714      	adds	r7, #20
 801480e:	46bd      	mov	sp, r7
 8014810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014814:	4770      	bx	lr
 8014816:	bf00      	nop
 8014818:	e000e3f0 	.word	0xe000e3f0
 801481c:	2000114c 	.word	0x2000114c
 8014820:	e000ed0c 	.word	0xe000ed0c
 8014824:	20001150 	.word	0x20001150

08014828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b08a      	sub	sp, #40	; 0x28
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014830:	2300      	movs	r3, #0
 8014832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014834:	f7fe fd90 	bl	8013358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014838:	4b5b      	ldr	r3, [pc, #364]	; (80149a8 <pvPortMalloc+0x180>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d101      	bne.n	8014844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014840:	f000 f920 	bl	8014a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014844:	4b59      	ldr	r3, [pc, #356]	; (80149ac <pvPortMalloc+0x184>)
 8014846:	681a      	ldr	r2, [r3, #0]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4013      	ands	r3, r2
 801484c:	2b00      	cmp	r3, #0
 801484e:	f040 8093 	bne.w	8014978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d01d      	beq.n	8014894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014858:	2208      	movs	r2, #8
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4413      	add	r3, r2
 801485e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f003 0307 	and.w	r3, r3, #7
 8014866:	2b00      	cmp	r3, #0
 8014868:	d014      	beq.n	8014894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f023 0307 	bic.w	r3, r3, #7
 8014870:	3308      	adds	r3, #8
 8014872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f003 0307 	and.w	r3, r3, #7
 801487a:	2b00      	cmp	r3, #0
 801487c:	d00a      	beq.n	8014894 <pvPortMalloc+0x6c>
	__asm volatile
 801487e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014882:	f383 8811 	msr	BASEPRI, r3
 8014886:	f3bf 8f6f 	isb	sy
 801488a:	f3bf 8f4f 	dsb	sy
 801488e:	617b      	str	r3, [r7, #20]
}
 8014890:	bf00      	nop
 8014892:	e7fe      	b.n	8014892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d06e      	beq.n	8014978 <pvPortMalloc+0x150>
 801489a:	4b45      	ldr	r3, [pc, #276]	; (80149b0 <pvPortMalloc+0x188>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d869      	bhi.n	8014978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80148a4:	4b43      	ldr	r3, [pc, #268]	; (80149b4 <pvPortMalloc+0x18c>)
 80148a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80148a8:	4b42      	ldr	r3, [pc, #264]	; (80149b4 <pvPortMalloc+0x18c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80148ae:	e004      	b.n	80148ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80148b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80148b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80148ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d903      	bls.n	80148cc <pvPortMalloc+0xa4>
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d1f1      	bne.n	80148b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80148cc:	4b36      	ldr	r3, [pc, #216]	; (80149a8 <pvPortMalloc+0x180>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d050      	beq.n	8014978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80148d6:	6a3b      	ldr	r3, [r7, #32]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2208      	movs	r2, #8
 80148dc:	4413      	add	r3, r2
 80148de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80148e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e2:	681a      	ldr	r2, [r3, #0]
 80148e4:	6a3b      	ldr	r3, [r7, #32]
 80148e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80148e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ea:	685a      	ldr	r2, [r3, #4]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	1ad2      	subs	r2, r2, r3
 80148f0:	2308      	movs	r3, #8
 80148f2:	005b      	lsls	r3, r3, #1
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d91f      	bls.n	8014938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80148f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4413      	add	r3, r2
 80148fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014900:	69bb      	ldr	r3, [r7, #24]
 8014902:	f003 0307 	and.w	r3, r3, #7
 8014906:	2b00      	cmp	r3, #0
 8014908:	d00a      	beq.n	8014920 <pvPortMalloc+0xf8>
	__asm volatile
 801490a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801490e:	f383 8811 	msr	BASEPRI, r3
 8014912:	f3bf 8f6f 	isb	sy
 8014916:	f3bf 8f4f 	dsb	sy
 801491a:	613b      	str	r3, [r7, #16]
}
 801491c:	bf00      	nop
 801491e:	e7fe      	b.n	801491e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014922:	685a      	ldr	r2, [r3, #4]
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	1ad2      	subs	r2, r2, r3
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014932:	69b8      	ldr	r0, [r7, #24]
 8014934:	f000 f908 	bl	8014b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014938:	4b1d      	ldr	r3, [pc, #116]	; (80149b0 <pvPortMalloc+0x188>)
 801493a:	681a      	ldr	r2, [r3, #0]
 801493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493e:	685b      	ldr	r3, [r3, #4]
 8014940:	1ad3      	subs	r3, r2, r3
 8014942:	4a1b      	ldr	r2, [pc, #108]	; (80149b0 <pvPortMalloc+0x188>)
 8014944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014946:	4b1a      	ldr	r3, [pc, #104]	; (80149b0 <pvPortMalloc+0x188>)
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	4b1b      	ldr	r3, [pc, #108]	; (80149b8 <pvPortMalloc+0x190>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	429a      	cmp	r2, r3
 8014950:	d203      	bcs.n	801495a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014952:	4b17      	ldr	r3, [pc, #92]	; (80149b0 <pvPortMalloc+0x188>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4a18      	ldr	r2, [pc, #96]	; (80149b8 <pvPortMalloc+0x190>)
 8014958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495c:	685a      	ldr	r2, [r3, #4]
 801495e:	4b13      	ldr	r3, [pc, #76]	; (80149ac <pvPortMalloc+0x184>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	431a      	orrs	r2, r3
 8014964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496a:	2200      	movs	r2, #0
 801496c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801496e:	4b13      	ldr	r3, [pc, #76]	; (80149bc <pvPortMalloc+0x194>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	3301      	adds	r3, #1
 8014974:	4a11      	ldr	r2, [pc, #68]	; (80149bc <pvPortMalloc+0x194>)
 8014976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014978:	f7fe fcfc 	bl	8013374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801497c:	69fb      	ldr	r3, [r7, #28]
 801497e:	f003 0307 	and.w	r3, r3, #7
 8014982:	2b00      	cmp	r3, #0
 8014984:	d00a      	beq.n	801499c <pvPortMalloc+0x174>
	__asm volatile
 8014986:	f04f 0330 	mov.w	r3, #48	; 0x30
 801498a:	f383 8811 	msr	BASEPRI, r3
 801498e:	f3bf 8f6f 	isb	sy
 8014992:	f3bf 8f4f 	dsb	sy
 8014996:	60fb      	str	r3, [r7, #12]
}
 8014998:	bf00      	nop
 801499a:	e7fe      	b.n	801499a <pvPortMalloc+0x172>
	return pvReturn;
 801499c:	69fb      	ldr	r3, [r7, #28]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3728      	adds	r7, #40	; 0x28
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	2000295c 	.word	0x2000295c
 80149ac:	20002970 	.word	0x20002970
 80149b0:	20002960 	.word	0x20002960
 80149b4:	20002954 	.word	0x20002954
 80149b8:	20002964 	.word	0x20002964
 80149bc:	20002968 	.word	0x20002968

080149c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b086      	sub	sp, #24
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d04d      	beq.n	8014a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80149d2:	2308      	movs	r3, #8
 80149d4:	425b      	negs	r3, r3
 80149d6:	697a      	ldr	r2, [r7, #20]
 80149d8:	4413      	add	r3, r2
 80149da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	685a      	ldr	r2, [r3, #4]
 80149e4:	4b24      	ldr	r3, [pc, #144]	; (8014a78 <vPortFree+0xb8>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	4013      	ands	r3, r2
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d10a      	bne.n	8014a04 <vPortFree+0x44>
	__asm volatile
 80149ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149f2:	f383 8811 	msr	BASEPRI, r3
 80149f6:	f3bf 8f6f 	isb	sy
 80149fa:	f3bf 8f4f 	dsb	sy
 80149fe:	60fb      	str	r3, [r7, #12]
}
 8014a00:	bf00      	nop
 8014a02:	e7fe      	b.n	8014a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d00a      	beq.n	8014a22 <vPortFree+0x62>
	__asm volatile
 8014a0c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a10:	f383 8811 	msr	BASEPRI, r3
 8014a14:	f3bf 8f6f 	isb	sy
 8014a18:	f3bf 8f4f 	dsb	sy
 8014a1c:	60bb      	str	r3, [r7, #8]
}
 8014a1e:	bf00      	nop
 8014a20:	e7fe      	b.n	8014a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	685a      	ldr	r2, [r3, #4]
 8014a26:	4b14      	ldr	r3, [pc, #80]	; (8014a78 <vPortFree+0xb8>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d01e      	beq.n	8014a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d11a      	bne.n	8014a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	685a      	ldr	r2, [r3, #4]
 8014a3c:	4b0e      	ldr	r3, [pc, #56]	; (8014a78 <vPortFree+0xb8>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	43db      	mvns	r3, r3
 8014a42:	401a      	ands	r2, r3
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014a48:	f7fe fc86 	bl	8013358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	685a      	ldr	r2, [r3, #4]
 8014a50:	4b0a      	ldr	r3, [pc, #40]	; (8014a7c <vPortFree+0xbc>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	4413      	add	r3, r2
 8014a56:	4a09      	ldr	r2, [pc, #36]	; (8014a7c <vPortFree+0xbc>)
 8014a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014a5a:	6938      	ldr	r0, [r7, #16]
 8014a5c:	f000 f874 	bl	8014b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014a60:	4b07      	ldr	r3, [pc, #28]	; (8014a80 <vPortFree+0xc0>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	3301      	adds	r3, #1
 8014a66:	4a06      	ldr	r2, [pc, #24]	; (8014a80 <vPortFree+0xc0>)
 8014a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014a6a:	f7fe fc83 	bl	8013374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014a6e:	bf00      	nop
 8014a70:	3718      	adds	r7, #24
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	20002970 	.word	0x20002970
 8014a7c:	20002960 	.word	0x20002960
 8014a80:	2000296c 	.word	0x2000296c

08014a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014a84:	b480      	push	{r7}
 8014a86:	b085      	sub	sp, #20
 8014a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014a8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014a90:	4b27      	ldr	r3, [pc, #156]	; (8014b30 <prvHeapInit+0xac>)
 8014a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f003 0307 	and.w	r3, r3, #7
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00c      	beq.n	8014ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	3307      	adds	r3, #7
 8014aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	f023 0307 	bic.w	r3, r3, #7
 8014aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	1ad3      	subs	r3, r2, r3
 8014ab2:	4a1f      	ldr	r2, [pc, #124]	; (8014b30 <prvHeapInit+0xac>)
 8014ab4:	4413      	add	r3, r2
 8014ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014abc:	4a1d      	ldr	r2, [pc, #116]	; (8014b34 <prvHeapInit+0xb0>)
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014ac2:	4b1c      	ldr	r3, [pc, #112]	; (8014b34 <prvHeapInit+0xb0>)
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	68ba      	ldr	r2, [r7, #8]
 8014acc:	4413      	add	r3, r2
 8014ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014ad0:	2208      	movs	r2, #8
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	1a9b      	subs	r3, r3, r2
 8014ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	f023 0307 	bic.w	r3, r3, #7
 8014ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	4a15      	ldr	r2, [pc, #84]	; (8014b38 <prvHeapInit+0xb4>)
 8014ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014ae6:	4b14      	ldr	r3, [pc, #80]	; (8014b38 <prvHeapInit+0xb4>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2200      	movs	r2, #0
 8014aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014aee:	4b12      	ldr	r3, [pc, #72]	; (8014b38 <prvHeapInit+0xb4>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2200      	movs	r2, #0
 8014af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	68fa      	ldr	r2, [r7, #12]
 8014afe:	1ad2      	subs	r2, r2, r3
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014b04:	4b0c      	ldr	r3, [pc, #48]	; (8014b38 <prvHeapInit+0xb4>)
 8014b06:	681a      	ldr	r2, [r3, #0]
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	4a0a      	ldr	r2, [pc, #40]	; (8014b3c <prvHeapInit+0xb8>)
 8014b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	685b      	ldr	r3, [r3, #4]
 8014b18:	4a09      	ldr	r2, [pc, #36]	; (8014b40 <prvHeapInit+0xbc>)
 8014b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014b1c:	4b09      	ldr	r3, [pc, #36]	; (8014b44 <prvHeapInit+0xc0>)
 8014b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014b22:	601a      	str	r2, [r3, #0]
}
 8014b24:	bf00      	nop
 8014b26:	3714      	adds	r7, #20
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr
 8014b30:	20001154 	.word	0x20001154
 8014b34:	20002954 	.word	0x20002954
 8014b38:	2000295c 	.word	0x2000295c
 8014b3c:	20002964 	.word	0x20002964
 8014b40:	20002960 	.word	0x20002960
 8014b44:	20002970 	.word	0x20002970

08014b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b085      	sub	sp, #20
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014b50:	4b28      	ldr	r3, [pc, #160]	; (8014bf4 <prvInsertBlockIntoFreeList+0xac>)
 8014b52:	60fb      	str	r3, [r7, #12]
 8014b54:	e002      	b.n	8014b5c <prvInsertBlockIntoFreeList+0x14>
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	60fb      	str	r3, [r7, #12]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d8f7      	bhi.n	8014b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	4413      	add	r3, r2
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d108      	bne.n	8014b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	685a      	ldr	r2, [r3, #4]
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	685b      	ldr	r3, [r3, #4]
 8014b80:	441a      	add	r2, r3
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	441a      	add	r2, r3
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d118      	bne.n	8014bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	4b15      	ldr	r3, [pc, #84]	; (8014bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d00d      	beq.n	8014bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	685a      	ldr	r2, [r3, #4]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	441a      	add	r2, r3
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	601a      	str	r2, [r3, #0]
 8014bc4:	e008      	b.n	8014bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014bc6:	4b0c      	ldr	r3, [pc, #48]	; (8014bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	601a      	str	r2, [r3, #0]
 8014bce:	e003      	b.n	8014bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014bd8:	68fa      	ldr	r2, [r7, #12]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d002      	beq.n	8014be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014be6:	bf00      	nop
 8014be8:	3714      	adds	r7, #20
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr
 8014bf2:	bf00      	nop
 8014bf4:	20002954 	.word	0x20002954
 8014bf8:	2000295c 	.word	0x2000295c

08014bfc <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8014c00:	f7fa fa99 	bl	800f136 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8014c04:	f000 f836 	bl	8014c74 <USBPD_DPM_InitCore>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d000      	beq.n	8014c10 <MX_USBPD_Init+0x14>
  {
    while(1);
 8014c0e:	e7fe      	b.n	8014c0e <MX_USBPD_Init+0x12>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 8014c10:	4b0a      	ldr	r3, [pc, #40]	; (8014c3c <MX_USBPD_Init+0x40>)
 8014c12:	4a0b      	ldr	r2, [pc, #44]	; (8014c40 <MX_USBPD_Init+0x44>)
 8014c14:	490b      	ldr	r1, [pc, #44]	; (8014c44 <MX_USBPD_Init+0x48>)
 8014c16:	480c      	ldr	r0, [pc, #48]	; (8014c48 <MX_USBPD_Init+0x4c>)
 8014c18:	f002 fdb4 	bl	8017784 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8014c1c:	f000 fa4a 	bl	80150b4 <USBPD_DPM_UserInit>
 8014c20:	4603      	mov	r3, r0
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d000      	beq.n	8014c28 <MX_USBPD_Init+0x2c>
  {
    while(1);
 8014c26:	e7fe      	b.n	8014c26 <MX_USBPD_Init+0x2a>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8014c28:	f000 f8d4 	bl	8014dd4 <USBPD_DPM_InitOS>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d000      	beq.n	8014c34 <MX_USBPD_Init+0x38>
  {
    while(1);
 8014c32:	e7fe      	b.n	8014c32 <MX_USBPD_Init+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8014c34:	b662      	cpsie	i
}
 8014c36:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8014c38:	bf00      	nop
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	0800fb99 	.word	0x0800fb99
 8014c40:	0800fb75 	.word	0x0800fb75
 8014c44:	08014c61 	.word	0x08014c61
 8014c48:	08014c4d 	.word	0x08014c4d

08014c4c <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 8014c50:	4b02      	ldr	r3, [pc, #8]	; (8014c5c <BSP_GetBoardName+0x10>)
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr
 8014c5c:	0801c258 	.word	0x0801c258

08014c60 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 8014c60:	b480      	push	{r7}
 8014c62:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 8014c64:	4b02      	ldr	r3, [pc, #8]	; (8014c70 <BSP_GetBoardID+0x10>)
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr
 8014c70:	0801c260 	.word	0x0801c260

08014c74 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 8014c7e:	4850      	ldr	r0, [pc, #320]	; (8014dc0 <USBPD_DPM_InitCore+0x14c>)
 8014c80:	f7ec fb55 	bl	800132e <USBPD_PE_CheckLIB>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d001      	beq.n	8014c8e <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 8014c8a:	2302      	movs	r3, #2
 8014c8c:	e094      	b.n	8014db8 <USBPD_DPM_InitCore+0x144>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8014c8e:	f7ec fb59 	bl	8001344 <USBPD_PE_GetMemoryConsumption>
 8014c92:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 8014c94:	f7f8 fd28 	bl	800d6e8 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8014c98:	2300      	movs	r3, #0
 8014c9a:	71bb      	strb	r3, [r7, #6]
 8014c9c:	e087      	b.n	8014dae <USBPD_DPM_InitCore+0x13a>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8014c9e:	79bb      	ldrb	r3, [r7, #6]
 8014ca0:	4a48      	ldr	r2, [pc, #288]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	4413      	add	r3, r2
 8014ca6:	785a      	ldrb	r2, [r3, #1]
 8014ca8:	f36f 02c3 	bfc	r2, #3, #1
 8014cac:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8014cae:	79b9      	ldrb	r1, [r7, #6]
 8014cb0:	79ba      	ldrb	r2, [r7, #6]
 8014cb2:	4845      	ldr	r0, [pc, #276]	; (8014dc8 <USBPD_DPM_InitCore+0x154>)
 8014cb4:	460b      	mov	r3, r1
 8014cb6:	005b      	lsls	r3, r3, #1
 8014cb8:	440b      	add	r3, r1
 8014cba:	009b      	lsls	r3, r3, #2
 8014cbc:	4403      	add	r3, r0
 8014cbe:	791b      	ldrb	r3, [r3, #4]
 8014cc0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8014cc4:	b2d8      	uxtb	r0, r3
 8014cc6:	493f      	ldr	r1, [pc, #252]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014cc8:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8014ccc:	f360 0301 	bfi	r3, r0, #0, #2
 8014cd0:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8014cd4:	79b9      	ldrb	r1, [r7, #6]
 8014cd6:	79ba      	ldrb	r2, [r7, #6]
 8014cd8:	483b      	ldr	r0, [pc, #236]	; (8014dc8 <USBPD_DPM_InitCore+0x154>)
 8014cda:	460b      	mov	r3, r1
 8014cdc:	005b      	lsls	r3, r3, #1
 8014cde:	440b      	add	r3, r1
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	4403      	add	r3, r0
 8014ce4:	791b      	ldrb	r3, [r3, #4]
 8014ce6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014cea:	b2d8      	uxtb	r0, r3
 8014cec:	4935      	ldr	r1, [pc, #212]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014cee:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8014cf2:	f360 0382 	bfi	r3, r0, #2, #1
 8014cf6:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8014cfa:	79ba      	ldrb	r2, [r7, #6]
 8014cfc:	4931      	ldr	r1, [pc, #196]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014cfe:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8014d02:	f36f 1304 	bfc	r3, #4, #1
 8014d06:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8014d0a:	79ba      	ldrb	r2, [r7, #6]
 8014d0c:	492d      	ldr	r1, [pc, #180]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014d0e:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8014d12:	f36f 1387 	bfc	r3, #6, #2
 8014d16:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8014d1a:	79bb      	ldrb	r3, [r7, #6]
 8014d1c:	4a29      	ldr	r2, [pc, #164]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014d1e:	00db      	lsls	r3, r3, #3
 8014d20:	4413      	add	r3, r2
 8014d22:	785a      	ldrb	r2, [r3, #1]
 8014d24:	f36f 1246 	bfc	r2, #5, #2
 8014d28:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8014d2a:	79bb      	ldrb	r3, [r7, #6]
 8014d2c:	4a25      	ldr	r2, [pc, #148]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014d2e:	00db      	lsls	r3, r3, #3
 8014d30:	4413      	add	r3, r2
 8014d32:	785a      	ldrb	r2, [r3, #1]
 8014d34:	f36f 12c7 	bfc	r2, #7, #1
 8014d38:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 8014d3a:	79ba      	ldrb	r2, [r7, #6]
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	005b      	lsls	r3, r3, #1
 8014d40:	4413      	add	r3, r2
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	4a20      	ldr	r2, [pc, #128]	; (8014dc8 <USBPD_DPM_InitCore+0x154>)
 8014d46:	441a      	add	r2, r3
 8014d48:	79bb      	ldrb	r3, [r7, #6]
 8014d4a:	00db      	lsls	r3, r3, #3
 8014d4c:	491d      	ldr	r1, [pc, #116]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014d4e:	440b      	add	r3, r1
 8014d50:	79b8      	ldrb	r0, [r7, #6]
 8014d52:	491e      	ldr	r1, [pc, #120]	; (8014dcc <USBPD_DPM_InitCore+0x158>)
 8014d54:	f7eb fa64 	bl	8000220 <USBPD_CAD_Init>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d001      	beq.n	8014d62 <USBPD_DPM_InitCore+0xee>
 8014d5e:	2302      	movs	r3, #2
 8014d60:	e02a      	b.n	8014db8 <USBPD_DPM_InitCore+0x144>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8014d62:	79ba      	ldrb	r2, [r7, #6]
 8014d64:	4613      	mov	r3, r2
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	4413      	add	r3, r2
 8014d6a:	009b      	lsls	r3, r3, #2
 8014d6c:	4a16      	ldr	r2, [pc, #88]	; (8014dc8 <USBPD_DPM_InitCore+0x154>)
 8014d6e:	1899      	adds	r1, r3, r2
 8014d70:	79bb      	ldrb	r3, [r7, #6]
 8014d72:	00db      	lsls	r3, r3, #3
 8014d74:	4a13      	ldr	r2, [pc, #76]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014d76:	441a      	add	r2, r3
 8014d78:	79b8      	ldrb	r0, [r7, #6]
 8014d7a:	4b15      	ldr	r3, [pc, #84]	; (8014dd0 <USBPD_DPM_InitCore+0x15c>)
 8014d7c:	f7eb fb3c 	bl	80003f8 <USBPD_PE_Init>
 8014d80:	4603      	mov	r3, r0
 8014d82:	71fb      	strb	r3, [r7, #7]
 8014d84:	79fb      	ldrb	r3, [r7, #7]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d001      	beq.n	8014d8e <USBPD_DPM_InitCore+0x11a>
 8014d8a:	79fb      	ldrb	r3, [r7, #7]
 8014d8c:	e014      	b.n	8014db8 <USBPD_DPM_InitCore+0x144>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8014d8e:	79bb      	ldrb	r3, [r7, #6]
 8014d90:	4a0c      	ldr	r2, [pc, #48]	; (8014dc4 <USBPD_DPM_InitCore+0x150>)
 8014d92:	00db      	lsls	r3, r3, #3
 8014d94:	4413      	add	r3, r2
 8014d96:	785a      	ldrb	r2, [r3, #1]
 8014d98:	f042 0208 	orr.w	r2, r2, #8
 8014d9c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8014d9e:	79bb      	ldrb	r3, [r7, #6]
 8014da0:	2101      	movs	r1, #1
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7eb fab8 	bl	8000318 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8014da8:	79bb      	ldrb	r3, [r7, #6]
 8014daa:	3301      	adds	r3, #1
 8014dac:	71bb      	strb	r3, [r7, #6]
 8014dae:	79bb      	ldrb	r3, [r7, #6]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f43f af74 	beq.w	8014c9e <USBPD_DPM_InitCore+0x2a>
  }

  return _retr;
 8014db6:	79fb      	ldrb	r3, [r7, #7]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3708      	adds	r7, #8
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	30330000 	.word	0x30330000
 8014dc4:	200030c0 	.word	0x200030c0
 8014dc8:	20000144 	.word	0x20000144
 8014dcc:	0801cbac 	.word	0x0801cbac
 8014dd0:	0801cbb4 	.word	0x0801cbb4

08014dd4 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
 8014dd8:	2200      	movs	r2, #0
 8014dda:	2102      	movs	r1, #2
 8014ddc:	2002      	movs	r0, #2
 8014dde:	f7fc ffc7 	bl	8011d70 <osMessageQueueNew>
 8014de2:	4603      	mov	r3, r0
 8014de4:	4a0c      	ldr	r2, [pc, #48]	; (8014e18 <USBPD_DPM_InitOS+0x44>)
 8014de6:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
 8014de8:	4a0c      	ldr	r2, [pc, #48]	; (8014e1c <USBPD_DPM_InitOS+0x48>)
 8014dea:	490b      	ldr	r1, [pc, #44]	; (8014e18 <USBPD_DPM_InitOS+0x44>)
 8014dec:	480c      	ldr	r0, [pc, #48]	; (8014e20 <USBPD_DPM_InitOS+0x4c>)
 8014dee:	f7fc fee5 	bl	8011bbc <osThreadNew>
 8014df2:	4603      	mov	r3, r0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d101      	bne.n	8014dfc <USBPD_DPM_InitOS+0x28>
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 8014df8:	2302      	movs	r3, #2
 8014dfa:	e00b      	b.n	8014e14 <USBPD_DPM_InitOS+0x40>
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
#if USBPD_PORT_COUNT == 2
  PEQueueId[1] = osMessageCreate(osMessageQ(queuePE), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#else
  PEQueueId[0] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	2102      	movs	r1, #2
 8014e00:	2001      	movs	r0, #1
 8014e02:	f7fc ffb5 	bl	8011d70 <osMessageQueueNew>
 8014e06:	4603      	mov	r3, r0
 8014e08:	4a06      	ldr	r2, [pc, #24]	; (8014e24 <USBPD_DPM_InitOS+0x50>)
 8014e0a:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 8014e0c:	4b06      	ldr	r3, [pc, #24]	; (8014e28 <USBPD_DPM_InitOS+0x54>)
 8014e0e:	2200      	movs	r2, #0
 8014e10:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8014e12:	2300      	movs	r3, #0
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	20002974 	.word	0x20002974
 8014e1c:	20000214 	.word	0x20000214
 8014e20:	08014ee1 	.word	0x08014ee1
 8014e24:	2000297c 	.word	0x2000297c
 8014e28:	20002978 	.word	0x20002978

08014e2c <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	4603      	mov	r3, r0
 8014e34:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 8014e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e3a:	60fb      	str	r3, [r7, #12]
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
 8014e3c:	79fb      	ldrb	r3, [r7, #7]
 8014e3e:	4a06      	ldr	r2, [pc, #24]	; (8014e58 <USBPD_PE_TaskWakeUp+0x2c>)
 8014e40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014e44:	f107 010c 	add.w	r1, r7, #12
 8014e48:	2300      	movs	r3, #0
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f7fd f804 	bl	8011e58 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 8014e50:	bf00      	nop
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	2000297c 	.word	0x2000297c

08014e5c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 8014e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e66:	607b      	str	r3, [r7, #4]
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
 8014e68:	4b05      	ldr	r3, [pc, #20]	; (8014e80 <USBPD_DPM_CADTaskWakeUp+0x24>)
 8014e6a:	6818      	ldr	r0, [r3, #0]
 8014e6c:	1d39      	adds	r1, r7, #4
 8014e6e:	2300      	movs	r3, #0
 8014e70:	2200      	movs	r2, #0
 8014e72:	f7fc fff1 	bl	8011e58 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 8014e76:	bf00      	nop
 8014e78:	3708      	adds	r7, #8
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	20002974 	.word	0x20002974

08014e84 <USBPD_PE_Task_P0>:
  * @brief  Main task for PE layer on Port0
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P0(void *argument)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_0);
 8014e8c:	2000      	movs	r0, #0
 8014e8e:	f000 f80f 	bl	8014eb0 <PE_Task>
}
 8014e92:	bf00      	nop
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}

08014e9a <USBPD_PE_Task_P1>:
  * @brief  Main task for PE layer on Port1
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P1(void *argument)
{
 8014e9a:	b580      	push	{r7, lr}
 8014e9c:	b082      	sub	sp, #8
 8014e9e:	af00      	add	r7, sp, #0
 8014ea0:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_1);
 8014ea2:	2001      	movs	r0, #1
 8014ea4:	f000 f804 	bl	8014eb0 <PE_Task>
}
 8014ea8:	bf00      	nop
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
static void PE_Task(uint32_t PortNum)
{
 8014eb0:	b590      	push	{r4, r7, lr}
 8014eb2:	b085      	sub	sp, #20
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    uint32_t event;
    (void)osMessageQueueGet(PEQueueId[PortNum], &event, NULL,
 8014eb8:	4a08      	ldr	r2, [pc, #32]	; (8014edc <PE_Task+0x2c>)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7ec fe8f 	bl	8001be8 <USBPD_PE_StateMachine_SNK>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	f107 010c 	add.w	r1, r7, #12
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f7fd f820 	bl	8011f18 <osMessageQueueGet>
  {
 8014ed8:	e7ee      	b.n	8014eb8 <PE_Task+0x8>
 8014eda:	bf00      	nop
 8014edc:	2000297c 	.word	0x2000297c

08014ee0 <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 8014ee0:	b590      	push	{r4, r7, lr}
 8014ee2:	b085      	sub	sp, #20
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
#else
    uint32_t event;
    (void)osMessageQueueGet(CADQueueId, &event, NULL, USBPD_CAD_Process());
 8014ee8:	4b05      	ldr	r3, [pc, #20]	; (8014f00 <USBPD_CAD_Task+0x20>)
 8014eea:	681c      	ldr	r4, [r3, #0]
 8014eec:	f7eb fa1c 	bl	8000328 <USBPD_CAD_Process>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	f107 010c 	add.w	r1, r7, #12
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	4620      	mov	r0, r4
 8014efa:	f7fd f80d 	bl	8011f18 <osMessageQueueGet>
  {
 8014efe:	e7f3      	b.n	8014ee8 <USBPD_CAD_Task+0x8>
 8014f00:	20002974 	.word	0x20002974

08014f04 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b086      	sub	sp, #24
 8014f08:	af02      	add	r7, sp, #8
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	603a      	str	r2, [r7, #0]
 8014f0e:	71fb      	strb	r3, [r7, #7]
 8014f10:	460b      	mov	r3, r1
 8014f12:	71bb      	strb	r3, [r7, #6]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 8014f14:	79ba      	ldrb	r2, [r7, #6]
 8014f16:	79f9      	ldrb	r1, [r7, #7]
 8014f18:	2300      	movs	r3, #0
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	2003      	movs	r0, #3
 8014f20:	f7f8 fbf4 	bl	800d70c <USBPD_TRACE_Add>

  switch (State)
 8014f24:	79bb      	ldrb	r3, [r7, #6]
 8014f26:	3b01      	subs	r3, #1
 8014f28:	2b03      	cmp	r3, #3
 8014f2a:	d867      	bhi.n	8014ffc <USBPD_DPM_CADCallback+0xf8>
 8014f2c:	a201      	add	r2, pc, #4	; (adr r2, 8014f34 <USBPD_DPM_CADCallback+0x30>)
 8014f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f32:	bf00      	nop
 8014f34:	08014f61 	.word	0x08014f61
 8014f38:	08014f53 	.word	0x08014f53
 8014f3c:	08014f61 	.word	0x08014f61
 8014f40:	08014f45 	.word	0x08014f45
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8014f44:	79b9      	ldrb	r1, [r7, #6]
 8014f46:	79fb      	ldrb	r3, [r7, #7]
 8014f48:	683a      	ldr	r2, [r7, #0]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f000 f860 	bl	8015010 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 8014f50:	e055      	b.n	8014ffe <USBPD_DPM_CADCallback+0xfa>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 8014f52:	79b9      	ldrb	r1, [r7, #6]
 8014f54:	79fb      	ldrb	r3, [r7, #7]
 8014f56:	683a      	ldr	r2, [r7, #0]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f000 f859 	bl	8015010 <DPM_ManageAttachedState>
      break;
 8014f5e:	e04e      	b.n	8014ffe <USBPD_DPM_CADCallback+0xfa>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 8014f60:	79fb      	ldrb	r3, [r7, #7]
 8014f62:	2100      	movs	r1, #0
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7eb fae3 	bl	8000530 <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 8014f6a:	79fb      	ldrb	r3, [r7, #7]
 8014f6c:	4a26      	ldr	r2, [pc, #152]	; (8015008 <USBPD_DPM_CADCallback+0x104>)
 8014f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d023      	beq.n	8014fbe <USBPD_DPM_CADCallback+0xba>
      {
        uint8_t _timeout = 0;
 8014f76:	2300      	movs	r3, #0
 8014f78:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 8014f7a:	e008      	b.n	8014f8e <USBPD_DPM_CADCallback+0x8a>
        {
          osDelay(1);
 8014f7c:	2001      	movs	r0, #1
 8014f7e:	f7fc fedc 	bl	8011d3a <osDelay>
          _timeout++;
 8014f82:	7bfb      	ldrb	r3, [r7, #15]
 8014f84:	3301      	adds	r3, #1
 8014f86:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 8014f88:	7bfb      	ldrb	r3, [r7, #15]
 8014f8a:	2b1e      	cmp	r3, #30
 8014f8c:	d80a      	bhi.n	8014fa4 <USBPD_DPM_CADCallback+0xa0>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 8014f8e:	79fb      	ldrb	r3, [r7, #7]
 8014f90:	4a1d      	ldr	r2, [pc, #116]	; (8015008 <USBPD_DPM_CADCallback+0x104>)
 8014f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7fe f908 	bl	80131ac <eTaskGetState>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b02      	cmp	r3, #2
 8014fa0:	d1ec      	bne.n	8014f7c <USBPD_DPM_CADCallback+0x78>
 8014fa2:	e000      	b.n	8014fa6 <USBPD_DPM_CADCallback+0xa2>
          {
            break;
 8014fa4:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 8014fa6:	79fb      	ldrb	r3, [r7, #7]
 8014fa8:	4a17      	ldr	r2, [pc, #92]	; (8015008 <USBPD_DPM_CADCallback+0x104>)
 8014faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fc fe96 	bl	8011ce0 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 8014fb4:	79fb      	ldrb	r3, [r7, #7]
 8014fb6:	4a14      	ldr	r2, [pc, #80]	; (8015008 <USBPD_DPM_CADCallback+0x104>)
 8014fb8:	2100      	movs	r1, #0
 8014fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8014fbe:	79fa      	ldrb	r2, [r7, #7]
 8014fc0:	4912      	ldr	r1, [pc, #72]	; (801500c <USBPD_DPM_CADCallback+0x108>)
 8014fc2:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8014fc6:	f36f 1304 	bfc	r3, #4, #1
 8014fca:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 8014fce:	79fa      	ldrb	r2, [r7, #7]
 8014fd0:	490e      	ldr	r1, [pc, #56]	; (801500c <USBPD_DPM_CADCallback+0x108>)
 8014fd2:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8014fd6:	f36f 1387 	bfc	r3, #6, #2
 8014fda:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8014fde:	79fb      	ldrb	r3, [r7, #7]
 8014fe0:	4a0a      	ldr	r2, [pc, #40]	; (801500c <USBPD_DPM_CADCallback+0x108>)
 8014fe2:	00db      	lsls	r3, r3, #3
 8014fe4:	4413      	add	r3, r2
 8014fe6:	785a      	ldrb	r2, [r3, #1]
 8014fe8:	f36f 0202 	bfc	r2, #0, #3
 8014fec:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8014fee:	79ba      	ldrb	r2, [r7, #6]
 8014ff0:	79fb      	ldrb	r3, [r7, #7]
 8014ff2:	4611      	mov	r1, r2
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f000 f881 	bl	80150fc <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 8014ffa:	e000      	b.n	8014ffe <USBPD_DPM_CADCallback+0xfa>
    }
    default :
      /* nothing to do */
      break;
 8014ffc:	bf00      	nop
  }
}
 8014ffe:	bf00      	nop
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	20002978 	.word	0x20002978
 801500c:	200030c0 	.word	0x200030c0

08015010 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015010:	b590      	push	{r4, r7, lr}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	4603      	mov	r3, r0
 8015018:	603a      	str	r2, [r7, #0]
 801501a:	71fb      	strb	r3, [r7, #7]
 801501c:	460b      	mov	r3, r1
 801501e:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8015020:	79fa      	ldrb	r2, [r7, #7]
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	f003 0303 	and.w	r3, r3, #3
 8015028:	b2d8      	uxtb	r0, r3
 801502a:	491c      	ldr	r1, [pc, #112]	; (801509c <DPM_ManageAttachedState+0x8c>)
 801502c:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8015030:	f360 1387 	bfi	r3, r0, #6, #2
 8015034:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8015038:	79fb      	ldrb	r3, [r7, #7]
 801503a:	2101      	movs	r1, #1
 801503c:	4618      	mov	r0, r3
 801503e:	f7eb fa77 	bl	8000530 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8015042:	79ba      	ldrb	r2, [r7, #6]
 8015044:	79fb      	ldrb	r3, [r7, #7]
 8015046:	4611      	mov	r1, r2
 8015048:	4618      	mov	r0, r3
 801504a:	f000 f857 	bl	80150fc <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 801504e:	79fb      	ldrb	r3, [r7, #7]
 8015050:	4a13      	ldr	r2, [pc, #76]	; (80150a0 <DPM_ManageAttachedState+0x90>)
 8015052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d11b      	bne.n	8015092 <DPM_ManageAttachedState+0x82>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
 801505a:	79fb      	ldrb	r3, [r7, #7]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d101      	bne.n	8015064 <DPM_ManageAttachedState+0x54>
 8015060:	4810      	ldr	r0, [pc, #64]	; (80150a4 <DPM_ManageAttachedState+0x94>)
 8015062:	e000      	b.n	8015066 <DPM_ManageAttachedState+0x56>
 8015064:	4810      	ldr	r0, [pc, #64]	; (80150a8 <DPM_ManageAttachedState+0x98>)
 8015066:	79fb      	ldrb	r3, [r7, #7]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d101      	bne.n	8015070 <DPM_ManageAttachedState+0x60>
 801506c:	4b0f      	ldr	r3, [pc, #60]	; (80150ac <DPM_ManageAttachedState+0x9c>)
 801506e:	e000      	b.n	8015072 <DPM_ManageAttachedState+0x62>
 8015070:	4b0f      	ldr	r3, [pc, #60]	; (80150b0 <DPM_ManageAttachedState+0xa0>)
 8015072:	79fc      	ldrb	r4, [r7, #7]
 8015074:	461a      	mov	r2, r3
 8015076:	2100      	movs	r1, #0
 8015078:	f7fc fda0 	bl	8011bbc <osThreadNew>
 801507c:	4603      	mov	r3, r0
 801507e:	4a08      	ldr	r2, [pc, #32]	; (80150a0 <DPM_ManageAttachedState+0x90>)
 8015080:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 8015084:	79fb      	ldrb	r3, [r7, #7]
 8015086:	4a06      	ldr	r2, [pc, #24]	; (80150a0 <DPM_ManageAttachedState+0x90>)
 8015088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d100      	bne.n	8015092 <DPM_ManageAttachedState+0x82>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 8015090:	e7fe      	b.n	8015090 <DPM_ManageAttachedState+0x80>
    }
  }
}
 8015092:	bf00      	nop
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	bd90      	pop	{r4, r7, pc}
 801509a:	bf00      	nop
 801509c:	200030c0 	.word	0x200030c0
 80150a0:	20002978 	.word	0x20002978
 80150a4:	08014e85 	.word	0x08014e85
 80150a8:	08014e9b 	.word	0x08014e9b
 80150ac:	200001cc 	.word	0x200001cc
 80150b0:	200001f0 	.word	0x200001f0

080150b4 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 80150b4:	b480      	push	{r7}
 80150b6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 80150b8:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b085      	sub	sp, #20
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 80150d0:	4a07      	ldr	r2, [pc, #28]	; (80150f0 <USBPD_DPM_SetNotification_GUI+0x2c>)
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	6013      	str	r3, [r2, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 80150d6:	4a07      	ldr	r2, [pc, #28]	; (80150f4 <USBPD_DPM_SetNotification_GUI+0x30>)
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	6013      	str	r3, [r2, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 80150dc:	4a06      	ldr	r2, [pc, #24]	; (80150f8 <USBPD_DPM_SetNotification_GUI+0x34>)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6013      	str	r3, [r2, #0]
}
 80150e2:	bf00      	nop
 80150e4:	3714      	adds	r7, #20
 80150e6:	46bd      	mov	sp, r7
 80150e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop
 80150f0:	20002980 	.word	0x20002980
 80150f4:	20002984 	.word	0x20002984
 80150f8:	20002988 	.word	0x20002988

080150fc <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b092      	sub	sp, #72	; 0x48
 8015100:	af02      	add	r7, sp, #8
 8015102:	4603      	mov	r3, r0
 8015104:	460a      	mov	r2, r1
 8015106:	71fb      	strb	r3, [r7, #7]
 8015108:	4613      	mov	r3, r2
 801510a:	71bb      	strb	r3, [r7, #6]
  switch(State)
 801510c:	79bb      	ldrb	r3, [r7, #6]
 801510e:	2b02      	cmp	r3, #2
 8015110:	d001      	beq.n	8015116 <USBPD_DPM_UserCableDetection+0x1a>
 8015112:	2b04      	cmp	r3, #4
 8015114:	d10a      	bne.n	801512c <USBPD_DPM_UserCableDetection+0x30>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8015116:	4b21      	ldr	r3, [pc, #132]	; (801519c <USBPD_DPM_UserCableDetection+0xa0>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d012      	beq.n	8015144 <USBPD_DPM_UserCableDetection+0x48>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 801511e:	4b1f      	ldr	r3, [pc, #124]	; (801519c <USBPD_DPM_UserCableDetection+0xa0>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	79f8      	ldrb	r0, [r7, #7]
 8015124:	2200      	movs	r2, #0
 8015126:	2120      	movs	r1, #32
 8015128:	4798      	blx	r3
    }
    break;
 801512a:	e00b      	b.n	8015144 <USBPD_DPM_UserCableDetection+0x48>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801512c:	4b1b      	ldr	r3, [pc, #108]	; (801519c <USBPD_DPM_UserCableDetection+0xa0>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d008      	beq.n	8015146 <USBPD_DPM_UserCableDetection+0x4a>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 8015134:	4b19      	ldr	r3, [pc, #100]	; (801519c <USBPD_DPM_UserCableDetection+0xa0>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	79f8      	ldrb	r0, [r7, #7]
 801513a:	2200      	movs	r2, #0
 801513c:	f248 0120 	movw	r1, #32800	; 0x8020
 8015140:	4798      	blx	r3
 8015142:	e000      	b.n	8015146 <USBPD_DPM_UserCableDetection+0x4a>
    break;
 8015144:	bf00      	nop
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 8015146:	f107 030c 	add.w	r3, r7, #12
 801514a:	4a15      	ldr	r2, [pc, #84]	; (80151a0 <USBPD_DPM_UserCableDetection+0xa4>)
 801514c:	2132      	movs	r1, #50	; 0x32
 801514e:	4618      	mov	r0, r3
 8015150:	f006 fce4 	bl	801bb1c <sniprintf>
 8015154:	4603      	mov	r3, r0
 8015156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801515a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801515e:	2b31      	cmp	r3, #49	; 0x31
 8015160:	d80e      	bhi.n	8015180 <USBPD_DPM_UserCableDetection+0x84>
 8015162:	f107 030c 	add.w	r3, r7, #12
 8015166:	4618      	mov	r0, r3
 8015168:	f7f0 fc34 	bl	80059d4 <strlen>
 801516c:	4602      	mov	r2, r0
 801516e:	f107 030c 	add.w	r3, r7, #12
 8015172:	79f9      	ldrb	r1, [r7, #7]
 8015174:	9200      	str	r2, [sp, #0]
 8015176:	2200      	movs	r2, #0
 8015178:	2006      	movs	r0, #6
 801517a:	f7f8 fac7 	bl	800d70c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801517e:	e008      	b.n	8015192 <USBPD_DPM_UserCableDetection+0x96>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 8015180:	f107 030c 	add.w	r3, r7, #12
 8015184:	79f9      	ldrb	r1, [r7, #7]
 8015186:	2232      	movs	r2, #50	; 0x32
 8015188:	9200      	str	r2, [sp, #0]
 801518a:	2200      	movs	r2, #0
 801518c:	2006      	movs	r0, #6
 801518e:	f7f8 fabd 	bl	800d70c <USBPD_TRACE_Add>
}
 8015192:	bf00      	nop
 8015194:	3740      	adds	r7, #64	; 0x40
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	20002984 	.word	0x20002984
 80151a0:	0801c27c 	.word	0x0801c27c

080151a4 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b092      	sub	sp, #72	; 0x48
 80151a8:	af02      	add	r7, sp, #8
 80151aa:	4603      	mov	r3, r0
 80151ac:	460a      	mov	r2, r1
 80151ae:	71fb      	strb	r3, [r7, #7]
 80151b0:	4613      	mov	r3, r2
 80151b2:	71bb      	strb	r3, [r7, #6]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 80151b4:	4b1a      	ldr	r3, [pc, #104]	; (8015220 <USBPD_DPM_Notification+0x7c>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d006      	beq.n	80151ca <USBPD_DPM_Notification+0x26>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 80151bc:	4b18      	ldr	r3, [pc, #96]	; (8015220 <USBPD_DPM_Notification+0x7c>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	79ba      	ldrb	r2, [r7, #6]
 80151c2:	b291      	uxth	r1, r2
 80151c4:	79fa      	ldrb	r2, [r7, #7]
 80151c6:	4610      	mov	r0, r2
 80151c8:	4798      	blx	r3
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 80151ca:	79bb      	ldrb	r3, [r7, #6]
 80151cc:	f107 000c 	add.w	r0, r7, #12
 80151d0:	4a14      	ldr	r2, [pc, #80]	; (8015224 <USBPD_DPM_Notification+0x80>)
 80151d2:	2132      	movs	r1, #50	; 0x32
 80151d4:	f006 fca2 	bl	801bb1c <sniprintf>
 80151d8:	4603      	mov	r3, r0
 80151da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80151de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80151e2:	2b31      	cmp	r3, #49	; 0x31
 80151e4:	d80e      	bhi.n	8015204 <USBPD_DPM_Notification+0x60>
 80151e6:	f107 030c 	add.w	r3, r7, #12
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7f0 fbf2 	bl	80059d4 <strlen>
 80151f0:	4602      	mov	r2, r0
 80151f2:	f107 030c 	add.w	r3, r7, #12
 80151f6:	79f9      	ldrb	r1, [r7, #7]
 80151f8:	9200      	str	r2, [sp, #0]
 80151fa:	2200      	movs	r2, #0
 80151fc:	2006      	movs	r0, #6
 80151fe:	f7f8 fa85 	bl	800d70c <USBPD_TRACE_Add>
      break;
 8015202:	e008      	b.n	8015216 <USBPD_DPM_Notification+0x72>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 8015204:	f107 030c 	add.w	r3, r7, #12
 8015208:	79f9      	ldrb	r1, [r7, #7]
 801520a:	2232      	movs	r2, #50	; 0x32
 801520c:	9200      	str	r2, [sp, #0]
 801520e:	2200      	movs	r2, #0
 8015210:	2006      	movs	r0, #6
 8015212:	f7f8 fa7b 	bl	800d70c <USBPD_TRACE_Add>
      break;
 8015216:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8015218:	bf00      	nop
 801521a:	3740      	adds	r7, #64	; 0x40
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	20002980 	.word	0x20002980
 8015224:	0801c2a8 	.word	0x0801c2a8

08015228 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b092      	sub	sp, #72	; 0x48
 801522c:	af02      	add	r7, sp, #8
 801522e:	4603      	mov	r3, r0
 8015230:	6039      	str	r1, [r7, #0]
 8015232:	71fb      	strb	r3, [r7, #7]
 8015234:	4613      	mov	r3, r2
 8015236:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 8015238:	f107 030c 	add.w	r3, r7, #12
 801523c:	4a13      	ldr	r2, [pc, #76]	; (801528c <USBPD_DPM_HardReset+0x64>)
 801523e:	2132      	movs	r1, #50	; 0x32
 8015240:	4618      	mov	r0, r3
 8015242:	f006 fc6b 	bl	801bb1c <sniprintf>
 8015246:	4603      	mov	r3, r0
 8015248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801524c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015250:	2b31      	cmp	r3, #49	; 0x31
 8015252:	d80e      	bhi.n	8015272 <USBPD_DPM_HardReset+0x4a>
 8015254:	f107 030c 	add.w	r3, r7, #12
 8015258:	4618      	mov	r0, r3
 801525a:	f7f0 fbbb 	bl	80059d4 <strlen>
 801525e:	4602      	mov	r2, r0
 8015260:	f107 030c 	add.w	r3, r7, #12
 8015264:	79f9      	ldrb	r1, [r7, #7]
 8015266:	9200      	str	r2, [sp, #0]
 8015268:	2200      	movs	r2, #0
 801526a:	2006      	movs	r0, #6
 801526c:	f7f8 fa4e 	bl	800d70c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 8015270:	e008      	b.n	8015284 <USBPD_DPM_HardReset+0x5c>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 8015272:	f107 030c 	add.w	r3, r7, #12
 8015276:	79f9      	ldrb	r1, [r7, #7]
 8015278:	2232      	movs	r2, #50	; 0x32
 801527a:	9200      	str	r2, [sp, #0]
 801527c:	2200      	movs	r2, #0
 801527e:	2006      	movs	r0, #6
 8015280:	f7f8 fa44 	bl	800d70c <USBPD_TRACE_Add>
}
 8015284:	bf00      	nop
 8015286:	3740      	adds	r7, #64	; 0x40
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	0801c2cc 	.word	0x0801c2cc

08015290 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b094      	sub	sp, #80	; 0x50
 8015294:	af02      	add	r7, sp, #8
 8015296:	60ba      	str	r2, [r7, #8]
 8015298:	607b      	str	r3, [r7, #4]
 801529a:	4603      	mov	r3, r0
 801529c:	73fb      	strb	r3, [r7, #15]
 801529e:	460b      	mov	r3, r1
 80152a0:	73bb      	strb	r3, [r7, #14]
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 80152a2:	7bbb      	ldrb	r3, [r7, #14]
 80152a4:	f107 0014 	add.w	r0, r7, #20
 80152a8:	4a13      	ldr	r2, [pc, #76]	; (80152f8 <USBPD_DPM_GetDataInfo+0x68>)
 80152aa:	2132      	movs	r1, #50	; 0x32
 80152ac:	f006 fc36 	bl	801bb1c <sniprintf>
 80152b0:	4603      	mov	r3, r0
 80152b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80152b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80152ba:	2b31      	cmp	r3, #49	; 0x31
 80152bc:	d80e      	bhi.n	80152dc <USBPD_DPM_GetDataInfo+0x4c>
 80152be:	f107 0314 	add.w	r3, r7, #20
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7f0 fb86 	bl	80059d4 <strlen>
 80152c8:	4602      	mov	r2, r0
 80152ca:	f107 0314 	add.w	r3, r7, #20
 80152ce:	7bf9      	ldrb	r1, [r7, #15]
 80152d0:	9200      	str	r2, [sp, #0]
 80152d2:	2200      	movs	r2, #0
 80152d4:	2006      	movs	r0, #6
 80152d6:	f7f8 fa19 	bl	800d70c <USBPD_TRACE_Add>
    break;
 80152da:	e008      	b.n	80152ee <USBPD_DPM_GetDataInfo+0x5e>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 80152dc:	f107 0314 	add.w	r3, r7, #20
 80152e0:	7bf9      	ldrb	r1, [r7, #15]
 80152e2:	2232      	movs	r2, #50	; 0x32
 80152e4:	9200      	str	r2, [sp, #0]
 80152e6:	2200      	movs	r2, #0
 80152e8:	2006      	movs	r0, #6
 80152ea:	f7f8 fa0f 	bl	800d70c <USBPD_TRACE_Add>
    break;
 80152ee:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80152f0:	bf00      	nop
 80152f2:	3748      	adds	r7, #72	; 0x48
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	0801c2f0 	.word	0x0801c2f0

080152fc <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80152fc:	b590      	push	{r4, r7, lr}
 80152fe:	b095      	sub	sp, #84	; 0x54
 8015300:	af02      	add	r7, sp, #8
 8015302:	60ba      	str	r2, [r7, #8]
 8015304:	607b      	str	r3, [r7, #4]
 8015306:	4603      	mov	r3, r0
 8015308:	73fb      	strb	r3, [r7, #15]
 801530a:	460b      	mov	r3, r1
 801530c:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801530e:	7bbb      	ldrb	r3, [r7, #14]
 8015310:	2b05      	cmp	r3, #5
 8015312:	d106      	bne.n	8015322 <USBPD_DPM_SetDataInfo+0x26>
//  case USBPD_CORE_DATATYPE_RDO_POSITION:      /*!< Reset the PDO position selected by the sink only */
    // break;
//  case USBPD_CORE_DATATYPE_RCV_SRC_PDO:       /*!< Storage of Received Source PDO values        */
    // break;
  case USBPD_CORE_DATATYPE_RCV_SNK_PDO:       /*!< Storage of Received Sink PDO values          */
	  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	7bb9      	ldrb	r1, [r7, #14]
 8015318:	7bf8      	ldrb	r0, [r7, #15]
 801531a:	68ba      	ldr	r2, [r7, #8]
 801531c:	f000 ff5c 	bl	80161d8 <USBPD_PWR_IF_GetPortPDOs>
	  break;
 8015320:	e026      	b.n	8015370 <USBPD_DPM_SetDataInfo+0x74>
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 8015322:	7bbb      	ldrb	r3, [r7, #14]
 8015324:	f107 0014 	add.w	r0, r7, #20
 8015328:	4a19      	ldr	r2, [pc, #100]	; (8015390 <USBPD_DPM_SetDataInfo+0x94>)
 801532a:	2132      	movs	r1, #50	; 0x32
 801532c:	f006 fbf6 	bl	801bb1c <sniprintf>
 8015330:	4603      	mov	r3, r0
 8015332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015336:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801533a:	2b31      	cmp	r3, #49	; 0x31
 801533c:	d80e      	bhi.n	801535c <USBPD_DPM_SetDataInfo+0x60>
 801533e:	f107 0314 	add.w	r3, r7, #20
 8015342:	4618      	mov	r0, r3
 8015344:	f7f0 fb46 	bl	80059d4 <strlen>
 8015348:	4602      	mov	r2, r0
 801534a:	f107 0314 	add.w	r3, r7, #20
 801534e:	7bf9      	ldrb	r1, [r7, #15]
 8015350:	9200      	str	r2, [sp, #0]
 8015352:	2200      	movs	r2, #0
 8015354:	2006      	movs	r0, #6
 8015356:	f7f8 f9d9 	bl	800d70c <USBPD_TRACE_Add>
    break;
 801535a:	e008      	b.n	801536e <USBPD_DPM_SetDataInfo+0x72>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801535c:	f107 0314 	add.w	r3, r7, #20
 8015360:	7bf9      	ldrb	r1, [r7, #15]
 8015362:	2232      	movs	r2, #50	; 0x32
 8015364:	9200      	str	r2, [sp, #0]
 8015366:	2200      	movs	r2, #0
 8015368:	2006      	movs	r0, #6
 801536a:	f7f8 f9cf 	bl	800d70c <USBPD_TRACE_Add>
    break;
 801536e:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 8015370:	4b08      	ldr	r3, [pc, #32]	; (8015394 <USBPD_DPM_SetDataInfo+0x98>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d006      	beq.n	8015386 <USBPD_DPM_SetDataInfo+0x8a>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 8015378:	4b06      	ldr	r3, [pc, #24]	; (8015394 <USBPD_DPM_SetDataInfo+0x98>)
 801537a:	681c      	ldr	r4, [r3, #0]
 801537c:	7bb9      	ldrb	r1, [r7, #14]
 801537e:	7bf8      	ldrb	r0, [r7, #15]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	68ba      	ldr	r2, [r7, #8]
 8015384:	47a0      	blx	r4
  }
}
 8015386:	bf00      	nop
 8015388:	374c      	adds	r7, #76	; 0x4c
 801538a:	46bd      	mov	sp, r7
 801538c:	bd90      	pop	{r4, r7, pc}
 801538e:	bf00      	nop
 8015390:	0801c318 	.word	0x0801c318
 8015394:	20002988 	.word	0x20002988

08015398 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8015398:	b480      	push	{r7}
 801539a:	b087      	sub	sp, #28
 801539c:	af00      	add	r7, sp, #0
 801539e:	4603      	mov	r3, r0
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
 80153a4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
//  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
	USBPD_SNKRDO_TypeDef rdo;
	rdo.d32 = 0;
 80153a6:	2300      	movs	r3, #0
 80153a8:	617b      	str	r3, [r7, #20]
	rdo.FixedVariableRDO.ObjectPosition = 1;
 80153aa:	7dfb      	ldrb	r3, [r7, #23]
 80153ac:	2201      	movs	r2, #1
 80153ae:	f362 1306 	bfi	r3, r2, #4, #3
 80153b2:	75fb      	strb	r3, [r7, #23]
	rdo.FixedVariableRDO.OperatingCurrentIn10mAunits = 50;
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	2232      	movs	r2, #50	; 0x32
 80153b8:	f362 2393 	bfi	r3, r2, #10, #10
 80153bc:	617b      	str	r3, [r7, #20]
	rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = 50;
 80153be:	8abb      	ldrh	r3, [r7, #20]
 80153c0:	2232      	movs	r2, #50	; 0x32
 80153c2:	f362 0309 	bfi	r3, r2, #0, #10
 80153c6:	82bb      	strh	r3, [r7, #20]
	rdo.FixedVariableRDO.CapabilityMismatch = 0;
 80153c8:	7dfb      	ldrb	r3, [r7, #23]
 80153ca:	f36f 0382 	bfc	r3, #2, #1
 80153ce:	75fb      	strb	r3, [r7, #23]
	*PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	601a      	str	r2, [r3, #0]
	*PtrRequestData = rdo.d32;
 80153d6:	697a      	ldr	r2, [r7, #20]
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	601a      	str	r2, [r3, #0]
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 80153dc:	bf00      	nop
 80153de:	371c      	adds	r7, #28
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 80153e8:	b480      	push	{r7}
 80153ea:	b083      	sub	sp, #12
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	603a      	str	r2, [r7, #0]
 80153f0:	461a      	mov	r2, r3
 80153f2:	4603      	mov	r3, r0
 80153f4:	71fb      	strb	r3, [r7, #7]
 80153f6:	460b      	mov	r3, r1
 80153f8:	71bb      	strb	r3, [r7, #6]
 80153fa:	4613      	mov	r3, r2
 80153fc:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 80153fe:	bf00      	nop
 8015400:	370c      	adds	r7, #12
 8015402:	46bd      	mov	sp, r7
 8015404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015408:	4770      	bx	lr

0801540a <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801540a:	b580      	push	{r7, lr}
 801540c:	b082      	sub	sp, #8
 801540e:	af00      	add	r7, sp, #0
 8015410:	4603      	mov	r3, r0
 8015412:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8015414:	79fb      	ldrb	r3, [r7, #7]
 8015416:	4618      	mov	r0, r3
 8015418:	f7ea ffe2 	bl	80003e0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801541c:	bf00      	nop
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8015424:	b480      	push	{r7}
 8015426:	b085      	sub	sp, #20
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801542e:	230c      	movs	r3, #12
 8015430:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8015432:	79fb      	ldrb	r3, [r7, #7]
 8015434:	4a2c      	ldr	r2, [pc, #176]	; (80154e8 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8015436:	2174      	movs	r1, #116	; 0x74
 8015438:	fb01 f303 	mul.w	r3, r1, r3
 801543c:	4413      	add	r3, r2
 801543e:	781b      	ldrb	r3, [r3, #0]
 8015440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015444:	b2db      	uxtb	r3, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	d017      	beq.n	801547a <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801544a:	79fb      	ldrb	r3, [r7, #7]
 801544c:	4a26      	ldr	r2, [pc, #152]	; (80154e8 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 801544e:	2174      	movs	r1, #116	; 0x74
 8015450:	fb01 f303 	mul.w	r3, r1, r3
 8015454:	4413      	add	r3, r2
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801545c:	b2db      	uxtb	r3, r3
 801545e:	2b00      	cmp	r3, #0
 8015460:	d10e      	bne.n	8015480 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 8015462:	79fb      	ldrb	r3, [r7, #7]
 8015464:	4a20      	ldr	r2, [pc, #128]	; (80154e8 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8015466:	2174      	movs	r1, #116	; 0x74
 8015468:	fb01 f303 	mul.w	r3, r1, r3
 801546c:	4413      	add	r3, r2
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015474:	b2db      	uxtb	r3, r3
 8015476:	2b00      	cmp	r3, #0
 8015478:	d102      	bne.n	8015480 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
  {
    status = USBPD_NOTSUPPORTED;
 801547a:	2301      	movs	r3, #1
 801547c:	73fb      	strb	r3, [r7, #15]
 801547e:	e02b      	b.n	80154d8 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8015480:	79fb      	ldrb	r3, [r7, #7]
 8015482:	4a19      	ldr	r2, [pc, #100]	; (80154e8 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8015484:	2174      	movs	r1, #116	; 0x74
 8015486:	fb01 f303 	mul.w	r3, r1, r3
 801548a:	4413      	add	r3, r2
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015492:	b2db      	uxtb	r3, r3
 8015494:	2b01      	cmp	r3, #1
 8015496:	d108      	bne.n	80154aa <USBPD_DPM_EvaluateDataRoleSwap+0x86>
 8015498:	79fb      	ldrb	r3, [r7, #7]
 801549a:	4a14      	ldr	r2, [pc, #80]	; (80154ec <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 801549c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80154a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d014      	beq.n	80154d4 <USBPD_DPM_EvaluateDataRoleSwap+0xb0>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 80154aa:	79fb      	ldrb	r3, [r7, #7]
 80154ac:	4a0e      	ldr	r2, [pc, #56]	; (80154e8 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 80154ae:	2174      	movs	r1, #116	; 0x74
 80154b0:	fb01 f303 	mul.w	r3, r1, r3
 80154b4:	4413      	add	r3, r2
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d10a      	bne.n	80154d8 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
 80154c2:	79fb      	ldrb	r3, [r7, #7]
 80154c4:	4a09      	ldr	r2, [pc, #36]	; (80154ec <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 80154c6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80154ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d101      	bne.n	80154d8 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
    {
      status = USBPD_ACCEPT;
 80154d4:	230a      	movs	r3, #10
 80154d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3714      	adds	r7, #20
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr
 80154e6:	bf00      	nop
 80154e8:	20000158 	.word	0x20000158
 80154ec:	200030c0 	.word	0x200030c0

080154f0 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	4603      	mov	r3, r0
 80154f8:	460a      	mov	r2, r1
 80154fa:	71fb      	strb	r3, [r7, #7]
 80154fc:	4613      	mov	r3, r2
 80154fe:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8015500:	79ba      	ldrb	r2, [r7, #6]
 8015502:	79fb      	ldrb	r3, [r7, #7]
 8015504:	4611      	mov	r1, r2
 8015506:	4618      	mov	r0, r3
 8015508:	f000 fe36 	bl	8016178 <USBPD_PWR_IF_SupplyReady>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	bf0c      	ite	eq
 8015512:	2301      	moveq	r3, #1
 8015514:	2300      	movne	r3, #0
 8015516:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8015518:	4618      	mov	r0, r3
 801551a:	3708      	adds	r7, #8
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b092      	sub	sp, #72	; 0x48
 8015524:	af02      	add	r7, sp, #8
 8015526:	4603      	mov	r3, r0
 8015528:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 801552a:	79fb      	ldrb	r3, [r7, #7]
 801552c:	4618      	mov	r0, r3
 801552e:	f7eb f83b 	bl	80005a8 <USBPD_PE_Request_HardReset>
 8015532:	4603      	mov	r3, r0
 8015534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 8015538:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801553c:	2b00      	cmp	r3, #0
 801553e:	d025      	beq.n	801558c <USBPD_DPM_RequestHardReset+0x6c>
 8015540:	f107 030c 	add.w	r3, r7, #12
 8015544:	4a14      	ldr	r2, [pc, #80]	; (8015598 <USBPD_DPM_RequestHardReset+0x78>)
 8015546:	2132      	movs	r1, #50	; 0x32
 8015548:	4618      	mov	r0, r3
 801554a:	f006 fae7 	bl	801bb1c <sniprintf>
 801554e:	4603      	mov	r3, r0
 8015550:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015554:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015558:	2b31      	cmp	r3, #49	; 0x31
 801555a:	d80e      	bhi.n	801557a <USBPD_DPM_RequestHardReset+0x5a>
 801555c:	f107 030c 	add.w	r3, r7, #12
 8015560:	4618      	mov	r0, r3
 8015562:	f7f0 fa37 	bl	80059d4 <strlen>
 8015566:	4602      	mov	r2, r0
 8015568:	f107 030c 	add.w	r3, r7, #12
 801556c:	79f9      	ldrb	r1, [r7, #7]
 801556e:	9200      	str	r2, [sp, #0]
 8015570:	2200      	movs	r2, #0
 8015572:	2006      	movs	r0, #6
 8015574:	f7f8 f8ca 	bl	800d70c <USBPD_TRACE_Add>
 8015578:	e008      	b.n	801558c <USBPD_DPM_RequestHardReset+0x6c>
 801557a:	f107 030c 	add.w	r3, r7, #12
 801557e:	79f9      	ldrb	r1, [r7, #7]
 8015580:	2232      	movs	r2, #50	; 0x32
 8015582:	9200      	str	r2, [sp, #0]
 8015584:	2200      	movs	r2, #0
 8015586:	2006      	movs	r0, #6
 8015588:	f7f8 f8c0 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 801558c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015590:	4618      	mov	r0, r3
 8015592:	3740      	adds	r7, #64	; 0x40
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	0801c340 	.word	0x0801c340

0801559c <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b092      	sub	sp, #72	; 0x48
 80155a0:	af02      	add	r7, sp, #8
 80155a2:	4603      	mov	r3, r0
 80155a4:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 80155a6:	79fb      	ldrb	r3, [r7, #7]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7eb f80b 	bl	80005c4 <USBPD_PE_Request_CableReset>
 80155ae:	4603      	mov	r3, r0
 80155b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 80155b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d025      	beq.n	8015608 <USBPD_DPM_RequestCableReset+0x6c>
 80155bc:	f107 030c 	add.w	r3, r7, #12
 80155c0:	4a14      	ldr	r2, [pc, #80]	; (8015614 <USBPD_DPM_RequestCableReset+0x78>)
 80155c2:	2132      	movs	r1, #50	; 0x32
 80155c4:	4618      	mov	r0, r3
 80155c6:	f006 faa9 	bl	801bb1c <sniprintf>
 80155ca:	4603      	mov	r3, r0
 80155cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80155d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80155d4:	2b31      	cmp	r3, #49	; 0x31
 80155d6:	d80e      	bhi.n	80155f6 <USBPD_DPM_RequestCableReset+0x5a>
 80155d8:	f107 030c 	add.w	r3, r7, #12
 80155dc:	4618      	mov	r0, r3
 80155de:	f7f0 f9f9 	bl	80059d4 <strlen>
 80155e2:	4602      	mov	r2, r0
 80155e4:	f107 030c 	add.w	r3, r7, #12
 80155e8:	79f9      	ldrb	r1, [r7, #7]
 80155ea:	9200      	str	r2, [sp, #0]
 80155ec:	2200      	movs	r2, #0
 80155ee:	2006      	movs	r0, #6
 80155f0:	f7f8 f88c 	bl	800d70c <USBPD_TRACE_Add>
 80155f4:	e008      	b.n	8015608 <USBPD_DPM_RequestCableReset+0x6c>
 80155f6:	f107 030c 	add.w	r3, r7, #12
 80155fa:	79f9      	ldrb	r1, [r7, #7]
 80155fc:	2232      	movs	r2, #50	; 0x32
 80155fe:	9200      	str	r2, [sp, #0]
 8015600:	2200      	movs	r2, #0
 8015602:	2006      	movs	r0, #6
 8015604:	f7f8 f882 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015608:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801560c:	4618      	mov	r0, r3
 801560e:	3740      	adds	r7, #64	; 0x40
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}
 8015614:	0801c368 	.word	0x0801c368

08015618 <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b092      	sub	sp, #72	; 0x48
 801561c:	af02      	add	r7, sp, #8
 801561e:	4603      	mov	r3, r0
 8015620:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 8015622:	79fb      	ldrb	r3, [r7, #7]
 8015624:	2200      	movs	r2, #0
 8015626:	2102      	movs	r1, #2
 8015628:	4618      	mov	r0, r3
 801562a:	f7ea ffdf 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 801562e:	4603      	mov	r3, r0
 8015630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 8015634:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015638:	2b00      	cmp	r3, #0
 801563a:	d025      	beq.n	8015688 <USBPD_DPM_RequestGotoMin+0x70>
 801563c:	f107 030c 	add.w	r3, r7, #12
 8015640:	4a14      	ldr	r2, [pc, #80]	; (8015694 <USBPD_DPM_RequestGotoMin+0x7c>)
 8015642:	2132      	movs	r1, #50	; 0x32
 8015644:	4618      	mov	r0, r3
 8015646:	f006 fa69 	bl	801bb1c <sniprintf>
 801564a:	4603      	mov	r3, r0
 801564c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015650:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015654:	2b31      	cmp	r3, #49	; 0x31
 8015656:	d80e      	bhi.n	8015676 <USBPD_DPM_RequestGotoMin+0x5e>
 8015658:	f107 030c 	add.w	r3, r7, #12
 801565c:	4618      	mov	r0, r3
 801565e:	f7f0 f9b9 	bl	80059d4 <strlen>
 8015662:	4602      	mov	r2, r0
 8015664:	f107 030c 	add.w	r3, r7, #12
 8015668:	79f9      	ldrb	r1, [r7, #7]
 801566a:	9200      	str	r2, [sp, #0]
 801566c:	2200      	movs	r2, #0
 801566e:	2006      	movs	r0, #6
 8015670:	f7f8 f84c 	bl	800d70c <USBPD_TRACE_Add>
 8015674:	e008      	b.n	8015688 <USBPD_DPM_RequestGotoMin+0x70>
 8015676:	f107 030c 	add.w	r3, r7, #12
 801567a:	79f9      	ldrb	r1, [r7, #7]
 801567c:	2232      	movs	r2, #50	; 0x32
 801567e:	9200      	str	r2, [sp, #0]
 8015680:	2200      	movs	r2, #0
 8015682:	2006      	movs	r0, #6
 8015684:	f7f8 f842 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015688:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801568c:	4618      	mov	r0, r3
 801568e:	3740      	adds	r7, #64	; 0x40
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}
 8015694:	0801c390 	.word	0x0801c390

08015698 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b092      	sub	sp, #72	; 0x48
 801569c:	af02      	add	r7, sp, #8
 801569e:	4603      	mov	r3, r0
 80156a0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 80156a2:	79fb      	ldrb	r3, [r7, #7]
 80156a4:	2200      	movs	r2, #0
 80156a6:	2105      	movs	r1, #5
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7ea ff9f 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 80156ae:	4603      	mov	r3, r0
 80156b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 80156b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d025      	beq.n	8015708 <USBPD_DPM_RequestPing+0x70>
 80156bc:	f107 030c 	add.w	r3, r7, #12
 80156c0:	4a14      	ldr	r2, [pc, #80]	; (8015714 <USBPD_DPM_RequestPing+0x7c>)
 80156c2:	2132      	movs	r1, #50	; 0x32
 80156c4:	4618      	mov	r0, r3
 80156c6:	f006 fa29 	bl	801bb1c <sniprintf>
 80156ca:	4603      	mov	r3, r0
 80156cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80156d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80156d4:	2b31      	cmp	r3, #49	; 0x31
 80156d6:	d80e      	bhi.n	80156f6 <USBPD_DPM_RequestPing+0x5e>
 80156d8:	f107 030c 	add.w	r3, r7, #12
 80156dc:	4618      	mov	r0, r3
 80156de:	f7f0 f979 	bl	80059d4 <strlen>
 80156e2:	4602      	mov	r2, r0
 80156e4:	f107 030c 	add.w	r3, r7, #12
 80156e8:	79f9      	ldrb	r1, [r7, #7]
 80156ea:	9200      	str	r2, [sp, #0]
 80156ec:	2200      	movs	r2, #0
 80156ee:	2006      	movs	r0, #6
 80156f0:	f7f8 f80c 	bl	800d70c <USBPD_TRACE_Add>
 80156f4:	e008      	b.n	8015708 <USBPD_DPM_RequestPing+0x70>
 80156f6:	f107 030c 	add.w	r3, r7, #12
 80156fa:	79f9      	ldrb	r1, [r7, #7]
 80156fc:	2232      	movs	r2, #50	; 0x32
 80156fe:	9200      	str	r2, [sp, #0]
 8015700:	2200      	movs	r2, #0
 8015702:	2006      	movs	r0, #6
 8015704:	f7f8 f802 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801570c:	4618      	mov	r0, r3
 801570e:	3740      	adds	r7, #64	; 0x40
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	0801c3b4 	.word	0x0801c3b4

08015718 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b092      	sub	sp, #72	; 0x48
 801571c:	af02      	add	r7, sp, #8
 801571e:	4603      	mov	r3, r0
 8015720:	71fb      	strb	r3, [r7, #7]
 8015722:	460b      	mov	r3, r1
 8015724:	71bb      	strb	r3, [r7, #6]
 8015726:	4613      	mov	r3, r2
 8015728:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801572a:	2302      	movs	r3, #2
 801572c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
/* USER CODE BEGIN USBPD_DPM_RequestMessageRequest */
  /* To be adapted to call the PE function */
  /*       _status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);*/
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_RequestMessageRequest");
 8015730:	f107 0308 	add.w	r3, r7, #8
 8015734:	4a29      	ldr	r2, [pc, #164]	; (80157dc <USBPD_DPM_RequestMessageRequest+0xc4>)
 8015736:	2132      	movs	r1, #50	; 0x32
 8015738:	4618      	mov	r0, r3
 801573a:	f006 f9ef 	bl	801bb1c <sniprintf>
 801573e:	4603      	mov	r3, r0
 8015740:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015744:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015748:	2b31      	cmp	r3, #49	; 0x31
 801574a:	d80e      	bhi.n	801576a <USBPD_DPM_RequestMessageRequest+0x52>
 801574c:	f107 0308 	add.w	r3, r7, #8
 8015750:	4618      	mov	r0, r3
 8015752:	f7f0 f93f 	bl	80059d4 <strlen>
 8015756:	4602      	mov	r2, r0
 8015758:	f107 0308 	add.w	r3, r7, #8
 801575c:	79f9      	ldrb	r1, [r7, #7]
 801575e:	9200      	str	r2, [sp, #0]
 8015760:	2200      	movs	r2, #0
 8015762:	2006      	movs	r0, #6
 8015764:	f7f7 ffd2 	bl	800d70c <USBPD_TRACE_Add>
 8015768:	e008      	b.n	801577c <USBPD_DPM_RequestMessageRequest+0x64>
 801576a:	f107 0308 	add.w	r3, r7, #8
 801576e:	79f9      	ldrb	r1, [r7, #7]
 8015770:	2232      	movs	r2, #50	; 0x32
 8015772:	9200      	str	r2, [sp, #0]
 8015774:	2200      	movs	r2, #0
 8015776:	2006      	movs	r0, #6
 8015778:	f7f7 ffc8 	bl	800d70c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801577c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015780:	2b00      	cmp	r3, #0
 8015782:	d025      	beq.n	80157d0 <USBPD_DPM_RequestMessageRequest+0xb8>
 8015784:	f107 0308 	add.w	r3, r7, #8
 8015788:	4a15      	ldr	r2, [pc, #84]	; (80157e0 <USBPD_DPM_RequestMessageRequest+0xc8>)
 801578a:	2132      	movs	r1, #50	; 0x32
 801578c:	4618      	mov	r0, r3
 801578e:	f006 f9c5 	bl	801bb1c <sniprintf>
 8015792:	4603      	mov	r3, r0
 8015794:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8015798:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801579c:	2b31      	cmp	r3, #49	; 0x31
 801579e:	d80e      	bhi.n	80157be <USBPD_DPM_RequestMessageRequest+0xa6>
 80157a0:	f107 0308 	add.w	r3, r7, #8
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f0 f915 	bl	80059d4 <strlen>
 80157aa:	4602      	mov	r2, r0
 80157ac:	f107 0308 	add.w	r3, r7, #8
 80157b0:	79f9      	ldrb	r1, [r7, #7]
 80157b2:	9200      	str	r2, [sp, #0]
 80157b4:	2200      	movs	r2, #0
 80157b6:	2006      	movs	r0, #6
 80157b8:	f7f7 ffa8 	bl	800d70c <USBPD_TRACE_Add>
 80157bc:	e008      	b.n	80157d0 <USBPD_DPM_RequestMessageRequest+0xb8>
 80157be:	f107 0308 	add.w	r3, r7, #8
 80157c2:	79f9      	ldrb	r1, [r7, #7]
 80157c4:	2232      	movs	r2, #50	; 0x32
 80157c6:	9200      	str	r2, [sp, #0]
 80157c8:	2200      	movs	r2, #0
 80157ca:	2006      	movs	r0, #6
 80157cc:	f7f7 ff9e 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 80157d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3740      	adds	r7, #64	; 0x40
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	0801c3d4 	.word	0x0801c3d4
 80157e0:	0801c404 	.word	0x0801c404

080157e4 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b092      	sub	sp, #72	; 0x48
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	4603      	mov	r3, r0
 80157ec:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 80157ee:	79fb      	ldrb	r3, [r7, #7]
 80157f0:	2200      	movs	r2, #0
 80157f2:	2107      	movs	r1, #7
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7ea fef9 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 80157fa:	4603      	mov	r3, r0
 80157fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 8015800:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015804:	2b00      	cmp	r3, #0
 8015806:	d025      	beq.n	8015854 <USBPD_DPM_RequestGetSourceCapability+0x70>
 8015808:	f107 030c 	add.w	r3, r7, #12
 801580c:	4a14      	ldr	r2, [pc, #80]	; (8015860 <USBPD_DPM_RequestGetSourceCapability+0x7c>)
 801580e:	2132      	movs	r1, #50	; 0x32
 8015810:	4618      	mov	r0, r3
 8015812:	f006 f983 	bl	801bb1c <sniprintf>
 8015816:	4603      	mov	r3, r0
 8015818:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801581c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015820:	2b31      	cmp	r3, #49	; 0x31
 8015822:	d80e      	bhi.n	8015842 <USBPD_DPM_RequestGetSourceCapability+0x5e>
 8015824:	f107 030c 	add.w	r3, r7, #12
 8015828:	4618      	mov	r0, r3
 801582a:	f7f0 f8d3 	bl	80059d4 <strlen>
 801582e:	4602      	mov	r2, r0
 8015830:	f107 030c 	add.w	r3, r7, #12
 8015834:	79f9      	ldrb	r1, [r7, #7]
 8015836:	9200      	str	r2, [sp, #0]
 8015838:	2200      	movs	r2, #0
 801583a:	2006      	movs	r0, #6
 801583c:	f7f7 ff66 	bl	800d70c <USBPD_TRACE_Add>
 8015840:	e008      	b.n	8015854 <USBPD_DPM_RequestGetSourceCapability+0x70>
 8015842:	f107 030c 	add.w	r3, r7, #12
 8015846:	79f9      	ldrb	r1, [r7, #7]
 8015848:	2232      	movs	r2, #50	; 0x32
 801584a:	9200      	str	r2, [sp, #0]
 801584c:	2200      	movs	r2, #0
 801584e:	2006      	movs	r0, #6
 8015850:	f7f7 ff5c 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015854:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015858:	4618      	mov	r0, r3
 801585a:	3740      	adds	r7, #64	; 0x40
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	0801c428 	.word	0x0801c428

08015864 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b092      	sub	sp, #72	; 0x48
 8015868:	af02      	add	r7, sp, #8
 801586a:	4603      	mov	r3, r0
 801586c:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 801586e:	79fb      	ldrb	r3, [r7, #7]
 8015870:	2200      	movs	r2, #0
 8015872:	2108      	movs	r1, #8
 8015874:	4618      	mov	r0, r3
 8015876:	f7ea feb9 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 801587a:	4603      	mov	r3, r0
 801587c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 8015880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015884:	2b00      	cmp	r3, #0
 8015886:	d025      	beq.n	80158d4 <USBPD_DPM_RequestGetSinkCapability+0x70>
 8015888:	f107 030c 	add.w	r3, r7, #12
 801588c:	4a14      	ldr	r2, [pc, #80]	; (80158e0 <USBPD_DPM_RequestGetSinkCapability+0x7c>)
 801588e:	2132      	movs	r1, #50	; 0x32
 8015890:	4618      	mov	r0, r3
 8015892:	f006 f943 	bl	801bb1c <sniprintf>
 8015896:	4603      	mov	r3, r0
 8015898:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801589c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80158a0:	2b31      	cmp	r3, #49	; 0x31
 80158a2:	d80e      	bhi.n	80158c2 <USBPD_DPM_RequestGetSinkCapability+0x5e>
 80158a4:	f107 030c 	add.w	r3, r7, #12
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7f0 f893 	bl	80059d4 <strlen>
 80158ae:	4602      	mov	r2, r0
 80158b0:	f107 030c 	add.w	r3, r7, #12
 80158b4:	79f9      	ldrb	r1, [r7, #7]
 80158b6:	9200      	str	r2, [sp, #0]
 80158b8:	2200      	movs	r2, #0
 80158ba:	2006      	movs	r0, #6
 80158bc:	f7f7 ff26 	bl	800d70c <USBPD_TRACE_Add>
 80158c0:	e008      	b.n	80158d4 <USBPD_DPM_RequestGetSinkCapability+0x70>
 80158c2:	f107 030c 	add.w	r3, r7, #12
 80158c6:	79f9      	ldrb	r1, [r7, #7]
 80158c8:	2232      	movs	r2, #50	; 0x32
 80158ca:	9200      	str	r2, [sp, #0]
 80158cc:	2200      	movs	r2, #0
 80158ce:	2006      	movs	r0, #6
 80158d0:	f7f7 ff1c 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 80158d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3740      	adds	r7, #64	; 0x40
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	0801c450 	.word	0x0801c450

080158e4 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b092      	sub	sp, #72	; 0x48
 80158e8:	af02      	add	r7, sp, #8
 80158ea:	4603      	mov	r3, r0
 80158ec:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 80158ee:	79fb      	ldrb	r3, [r7, #7]
 80158f0:	2200      	movs	r2, #0
 80158f2:	2109      	movs	r1, #9
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7ea fe79 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 80158fa:	4603      	mov	r3, r0
 80158fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 8015900:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015904:	2b00      	cmp	r3, #0
 8015906:	d025      	beq.n	8015954 <USBPD_DPM_RequestDataRoleSwap+0x70>
 8015908:	f107 030c 	add.w	r3, r7, #12
 801590c:	4a14      	ldr	r2, [pc, #80]	; (8015960 <USBPD_DPM_RequestDataRoleSwap+0x7c>)
 801590e:	2132      	movs	r1, #50	; 0x32
 8015910:	4618      	mov	r0, r3
 8015912:	f006 f903 	bl	801bb1c <sniprintf>
 8015916:	4603      	mov	r3, r0
 8015918:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801591c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015920:	2b31      	cmp	r3, #49	; 0x31
 8015922:	d80e      	bhi.n	8015942 <USBPD_DPM_RequestDataRoleSwap+0x5e>
 8015924:	f107 030c 	add.w	r3, r7, #12
 8015928:	4618      	mov	r0, r3
 801592a:	f7f0 f853 	bl	80059d4 <strlen>
 801592e:	4602      	mov	r2, r0
 8015930:	f107 030c 	add.w	r3, r7, #12
 8015934:	79f9      	ldrb	r1, [r7, #7]
 8015936:	9200      	str	r2, [sp, #0]
 8015938:	2200      	movs	r2, #0
 801593a:	2006      	movs	r0, #6
 801593c:	f7f7 fee6 	bl	800d70c <USBPD_TRACE_Add>
 8015940:	e008      	b.n	8015954 <USBPD_DPM_RequestDataRoleSwap+0x70>
 8015942:	f107 030c 	add.w	r3, r7, #12
 8015946:	79f9      	ldrb	r1, [r7, #7]
 8015948:	2232      	movs	r2, #50	; 0x32
 801594a:	9200      	str	r2, [sp, #0]
 801594c:	2200      	movs	r2, #0
 801594e:	2006      	movs	r0, #6
 8015950:	f7f7 fedc 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015958:	4618      	mov	r0, r3
 801595a:	3740      	adds	r7, #64	; 0x40
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	0801c478 	.word	0x0801c478

08015964 <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b092      	sub	sp, #72	; 0x48
 8015968:	af02      	add	r7, sp, #8
 801596a:	4603      	mov	r3, r0
 801596c:	71fb      	strb	r3, [r7, #7]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 801596e:	f107 030c 	add.w	r3, r7, #12
 8015972:	4a14      	ldr	r2, [pc, #80]	; (80159c4 <USBPD_DPM_RequestPowerRoleSwap+0x60>)
 8015974:	2132      	movs	r1, #50	; 0x32
 8015976:	4618      	mov	r0, r3
 8015978:	f006 f8d0 	bl	801bb1c <sniprintf>
 801597c:	4603      	mov	r3, r0
 801597e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015982:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015986:	2b31      	cmp	r3, #49	; 0x31
 8015988:	d80e      	bhi.n	80159a8 <USBPD_DPM_RequestPowerRoleSwap+0x44>
 801598a:	f107 030c 	add.w	r3, r7, #12
 801598e:	4618      	mov	r0, r3
 8015990:	f7f0 f820 	bl	80059d4 <strlen>
 8015994:	4602      	mov	r2, r0
 8015996:	f107 030c 	add.w	r3, r7, #12
 801599a:	79f9      	ldrb	r1, [r7, #7]
 801599c:	9200      	str	r2, [sp, #0]
 801599e:	2200      	movs	r2, #0
 80159a0:	2006      	movs	r0, #6
 80159a2:	f7f7 feb3 	bl	800d70c <USBPD_TRACE_Add>
 80159a6:	e008      	b.n	80159ba <USBPD_DPM_RequestPowerRoleSwap+0x56>
 80159a8:	f107 030c 	add.w	r3, r7, #12
 80159ac:	79f9      	ldrb	r1, [r7, #7]
 80159ae:	2232      	movs	r2, #50	; 0x32
 80159b0:	9200      	str	r2, [sp, #0]
 80159b2:	2200      	movs	r2, #0
 80159b4:	2006      	movs	r0, #6
 80159b6:	f7f7 fea9 	bl	800d70c <USBPD_TRACE_Add>
  return USBPD_ERROR;
 80159ba:	2302      	movs	r3, #2
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3740      	adds	r7, #64	; 0x40
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	0801c498 	.word	0x0801c498

080159c8 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b092      	sub	sp, #72	; 0x48
 80159cc:	af02      	add	r7, sp, #8
 80159ce:	4603      	mov	r3, r0
 80159d0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 80159d2:	79fb      	ldrb	r3, [r7, #7]
 80159d4:	2200      	movs	r2, #0
 80159d6:	210b      	movs	r1, #11
 80159d8:	4618      	mov	r0, r3
 80159da:	f7ea fe07 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 80159de:	4603      	mov	r3, r0
 80159e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 80159e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d025      	beq.n	8015a38 <USBPD_DPM_RequestVconnSwap+0x70>
 80159ec:	f107 030c 	add.w	r3, r7, #12
 80159f0:	4a14      	ldr	r2, [pc, #80]	; (8015a44 <USBPD_DPM_RequestVconnSwap+0x7c>)
 80159f2:	2132      	movs	r1, #50	; 0x32
 80159f4:	4618      	mov	r0, r3
 80159f6:	f006 f891 	bl	801bb1c <sniprintf>
 80159fa:	4603      	mov	r3, r0
 80159fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015a00:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015a04:	2b31      	cmp	r3, #49	; 0x31
 8015a06:	d80e      	bhi.n	8015a26 <USBPD_DPM_RequestVconnSwap+0x5e>
 8015a08:	f107 030c 	add.w	r3, r7, #12
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7ef ffe1 	bl	80059d4 <strlen>
 8015a12:	4602      	mov	r2, r0
 8015a14:	f107 030c 	add.w	r3, r7, #12
 8015a18:	79f9      	ldrb	r1, [r7, #7]
 8015a1a:	9200      	str	r2, [sp, #0]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	2006      	movs	r0, #6
 8015a20:	f7f7 fe74 	bl	800d70c <USBPD_TRACE_Add>
 8015a24:	e008      	b.n	8015a38 <USBPD_DPM_RequestVconnSwap+0x70>
 8015a26:	f107 030c 	add.w	r3, r7, #12
 8015a2a:	79f9      	ldrb	r1, [r7, #7]
 8015a2c:	2232      	movs	r2, #50	; 0x32
 8015a2e:	9200      	str	r2, [sp, #0]
 8015a30:	2200      	movs	r2, #0
 8015a32:	2006      	movs	r0, #6
 8015a34:	f7f7 fe6a 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3740      	adds	r7, #64	; 0x40
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	0801c4b8 	.word	0x0801c4b8

08015a48 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b092      	sub	sp, #72	; 0x48
 8015a4c:	af02      	add	r7, sp, #8
 8015a4e:	4603      	mov	r3, r0
 8015a50:	460a      	mov	r2, r1
 8015a52:	71fb      	strb	r3, [r7, #7]
 8015a54:	4613      	mov	r3, r2
 8015a56:	71bb      	strb	r3, [r7, #6]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 8015a58:	79ba      	ldrb	r2, [r7, #6]
 8015a5a:	79fb      	ldrb	r3, [r7, #7]
 8015a5c:	210d      	movs	r1, #13
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7ea fdc4 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015a64:	4603      	mov	r3, r0
 8015a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 8015a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d025      	beq.n	8015abe <USBPD_DPM_RequestSoftReset+0x76>
 8015a72:	f107 030c 	add.w	r3, r7, #12
 8015a76:	4a15      	ldr	r2, [pc, #84]	; (8015acc <USBPD_DPM_RequestSoftReset+0x84>)
 8015a78:	2132      	movs	r1, #50	; 0x32
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f006 f84e 	bl	801bb1c <sniprintf>
 8015a80:	4603      	mov	r3, r0
 8015a82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015a86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015a8a:	2b31      	cmp	r3, #49	; 0x31
 8015a8c:	d80e      	bhi.n	8015aac <USBPD_DPM_RequestSoftReset+0x64>
 8015a8e:	f107 030c 	add.w	r3, r7, #12
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7ef ff9e 	bl	80059d4 <strlen>
 8015a98:	4602      	mov	r2, r0
 8015a9a:	f107 030c 	add.w	r3, r7, #12
 8015a9e:	79f9      	ldrb	r1, [r7, #7]
 8015aa0:	9200      	str	r2, [sp, #0]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	2006      	movs	r0, #6
 8015aa6:	f7f7 fe31 	bl	800d70c <USBPD_TRACE_Add>
 8015aaa:	e008      	b.n	8015abe <USBPD_DPM_RequestSoftReset+0x76>
 8015aac:	f107 030c 	add.w	r3, r7, #12
 8015ab0:	79f9      	ldrb	r1, [r7, #7]
 8015ab2:	2232      	movs	r2, #50	; 0x32
 8015ab4:	9200      	str	r2, [sp, #0]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	2006      	movs	r0, #6
 8015aba:	f7f7 fe27 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3740      	adds	r7, #64	; 0x40
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	0801c4d8 	.word	0x0801c4d8

08015ad0 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b092      	sub	sp, #72	; 0x48
 8015ad4:	af02      	add	r7, sp, #8
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	71fb      	strb	r3, [r7, #7]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 8015ada:	79fb      	ldrb	r3, [r7, #7]
 8015adc:	2200      	movs	r2, #0
 8015ade:	2101      	movs	r1, #1
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7ea fe0b 	bl	80006fc <USBPD_PE_Request_DataMessage>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 8015aec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d025      	beq.n	8015b40 <USBPD_DPM_RequestSourceCapability+0x70>
 8015af4:	f107 030c 	add.w	r3, r7, #12
 8015af8:	4a14      	ldr	r2, [pc, #80]	; (8015b4c <USBPD_DPM_RequestSourceCapability+0x7c>)
 8015afa:	2132      	movs	r1, #50	; 0x32
 8015afc:	4618      	mov	r0, r3
 8015afe:	f006 f80d 	bl	801bb1c <sniprintf>
 8015b02:	4603      	mov	r3, r0
 8015b04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015b08:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015b0c:	2b31      	cmp	r3, #49	; 0x31
 8015b0e:	d80e      	bhi.n	8015b2e <USBPD_DPM_RequestSourceCapability+0x5e>
 8015b10:	f107 030c 	add.w	r3, r7, #12
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7ef ff5d 	bl	80059d4 <strlen>
 8015b1a:	4602      	mov	r2, r0
 8015b1c:	f107 030c 	add.w	r3, r7, #12
 8015b20:	79f9      	ldrb	r1, [r7, #7]
 8015b22:	9200      	str	r2, [sp, #0]
 8015b24:	2200      	movs	r2, #0
 8015b26:	2006      	movs	r0, #6
 8015b28:	f7f7 fdf0 	bl	800d70c <USBPD_TRACE_Add>
 8015b2c:	e008      	b.n	8015b40 <USBPD_DPM_RequestSourceCapability+0x70>
 8015b2e:	f107 030c 	add.w	r3, r7, #12
 8015b32:	79f9      	ldrb	r1, [r7, #7]
 8015b34:	2232      	movs	r2, #50	; 0x32
 8015b36:	9200      	str	r2, [sp, #0]
 8015b38:	2200      	movs	r2, #0
 8015b3a:	2006      	movs	r0, #6
 8015b3c:	f7f7 fde6 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3740      	adds	r7, #64	; 0x40
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	0801c500 	.word	0x0801c500

08015b50 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b092      	sub	sp, #72	; 0x48
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	4603      	mov	r3, r0
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 8015b5c:	463a      	mov	r2, r7
 8015b5e:	79fb      	ldrb	r3, [r7, #7]
 8015b60:	2106      	movs	r1, #6
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7ea fdca 	bl	80006fc <USBPD_PE_Request_DataMessage>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 8015b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d025      	beq.n	8015bc2 <USBPD_DPM_RequestAlert+0x72>
 8015b76:	f107 030c 	add.w	r3, r7, #12
 8015b7a:	4a15      	ldr	r2, [pc, #84]	; (8015bd0 <USBPD_DPM_RequestAlert+0x80>)
 8015b7c:	2132      	movs	r1, #50	; 0x32
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f005 ffcc 	bl	801bb1c <sniprintf>
 8015b84:	4603      	mov	r3, r0
 8015b86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015b8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015b8e:	2b31      	cmp	r3, #49	; 0x31
 8015b90:	d80e      	bhi.n	8015bb0 <USBPD_DPM_RequestAlert+0x60>
 8015b92:	f107 030c 	add.w	r3, r7, #12
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7ef ff1c 	bl	80059d4 <strlen>
 8015b9c:	4602      	mov	r2, r0
 8015b9e:	f107 030c 	add.w	r3, r7, #12
 8015ba2:	79f9      	ldrb	r1, [r7, #7]
 8015ba4:	9200      	str	r2, [sp, #0]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	2006      	movs	r0, #6
 8015baa:	f7f7 fdaf 	bl	800d70c <USBPD_TRACE_Add>
 8015bae:	e008      	b.n	8015bc2 <USBPD_DPM_RequestAlert+0x72>
 8015bb0:	f107 030c 	add.w	r3, r7, #12
 8015bb4:	79f9      	ldrb	r1, [r7, #7]
 8015bb6:	2232      	movs	r2, #50	; 0x32
 8015bb8:	9200      	str	r2, [sp, #0]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	2006      	movs	r0, #6
 8015bbe:	f7f7 fda5 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	3740      	adds	r7, #64	; 0x40
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	0801c690 	.word	0x0801c690

08015bd4 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b092      	sub	sp, #72	; 0x48
 8015bd8:	af02      	add	r7, sp, #8
 8015bda:	4603      	mov	r3, r0
 8015bdc:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 8015bde:	79fb      	ldrb	r3, [r7, #7]
 8015be0:	2200      	movs	r2, #0
 8015be2:	2111      	movs	r1, #17
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7ea fd01 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015bea:	4603      	mov	r3, r0
 8015bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 8015bf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d025      	beq.n	8015c44 <USBPD_DPM_RequestGetSourceCapabilityExt+0x70>
 8015bf8:	f107 030c 	add.w	r3, r7, #12
 8015bfc:	4a14      	ldr	r2, [pc, #80]	; (8015c50 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7c>)
 8015bfe:	2132      	movs	r1, #50	; 0x32
 8015c00:	4618      	mov	r0, r3
 8015c02:	f005 ff8b 	bl	801bb1c <sniprintf>
 8015c06:	4603      	mov	r3, r0
 8015c08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015c0c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015c10:	2b31      	cmp	r3, #49	; 0x31
 8015c12:	d80e      	bhi.n	8015c32 <USBPD_DPM_RequestGetSourceCapabilityExt+0x5e>
 8015c14:	f107 030c 	add.w	r3, r7, #12
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7ef fedb 	bl	80059d4 <strlen>
 8015c1e:	4602      	mov	r2, r0
 8015c20:	f107 030c 	add.w	r3, r7, #12
 8015c24:	79f9      	ldrb	r1, [r7, #7]
 8015c26:	9200      	str	r2, [sp, #0]
 8015c28:	2200      	movs	r2, #0
 8015c2a:	2006      	movs	r0, #6
 8015c2c:	f7f7 fd6e 	bl	800d70c <USBPD_TRACE_Add>
 8015c30:	e008      	b.n	8015c44 <USBPD_DPM_RequestGetSourceCapabilityExt+0x70>
 8015c32:	f107 030c 	add.w	r3, r7, #12
 8015c36:	79f9      	ldrb	r1, [r7, #7]
 8015c38:	2232      	movs	r2, #50	; 0x32
 8015c3a:	9200      	str	r2, [sp, #0]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	2006      	movs	r0, #6
 8015c40:	f7f7 fd64 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015c44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3740      	adds	r7, #64	; 0x40
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	0801c6b0 	.word	0x0801c6b0

08015c54 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b092      	sub	sp, #72	; 0x48
 8015c58:	af02      	add	r7, sp, #8
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 8015c5e:	79fb      	ldrb	r3, [r7, #7]
 8015c60:	2200      	movs	r2, #0
 8015c62:	2116      	movs	r1, #22
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7ea fcc1 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 8015c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d025      	beq.n	8015cc4 <USBPD_DPM_RequestGetSinkCapabilityExt+0x70>
 8015c78:	f107 030c 	add.w	r3, r7, #12
 8015c7c:	4a14      	ldr	r2, [pc, #80]	; (8015cd0 <USBPD_DPM_RequestGetSinkCapabilityExt+0x7c>)
 8015c7e:	2132      	movs	r1, #50	; 0x32
 8015c80:	4618      	mov	r0, r3
 8015c82:	f005 ff4b 	bl	801bb1c <sniprintf>
 8015c86:	4603      	mov	r3, r0
 8015c88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015c8c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015c90:	2b31      	cmp	r3, #49	; 0x31
 8015c92:	d80e      	bhi.n	8015cb2 <USBPD_DPM_RequestGetSinkCapabilityExt+0x5e>
 8015c94:	f107 030c 	add.w	r3, r7, #12
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7ef fe9b 	bl	80059d4 <strlen>
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	f107 030c 	add.w	r3, r7, #12
 8015ca4:	79f9      	ldrb	r1, [r7, #7]
 8015ca6:	9200      	str	r2, [sp, #0]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	2006      	movs	r0, #6
 8015cac:	f7f7 fd2e 	bl	800d70c <USBPD_TRACE_Add>
 8015cb0:	e008      	b.n	8015cc4 <USBPD_DPM_RequestGetSinkCapabilityExt+0x70>
 8015cb2:	f107 030c 	add.w	r3, r7, #12
 8015cb6:	79f9      	ldrb	r1, [r7, #7]
 8015cb8:	2232      	movs	r2, #50	; 0x32
 8015cba:	9200      	str	r2, [sp, #0]
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	2006      	movs	r0, #6
 8015cc0:	f7f7 fd24 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015cc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3740      	adds	r7, #64	; 0x40
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	0801c6dc 	.word	0x0801c6dc

08015cd4 <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b092      	sub	sp, #72	; 0x48
 8015cd8:	af02      	add	r7, sp, #8
 8015cda:	4603      	mov	r3, r0
 8015cdc:	603a      	str	r2, [r7, #0]
 8015cde:	71fb      	strb	r3, [r7, #7]
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	71bb      	strb	r3, [r7, #6]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8015ce4:	2302      	movs	r3, #2
 8015ce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (USBPD_SOPTYPE_SOP == SOPType)
 8015cea:	79bb      	ldrb	r3, [r7, #6]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d10a      	bne.n	8015d06 <USBPD_DPM_RequestGetManufacturerInfo+0x32>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 8015cf0:	79b9      	ldrb	r1, [r7, #6]
 8015cf2:	79f8      	ldrb	r0, [r7, #7]
 8015cf4:	2302      	movs	r3, #2
 8015cf6:	9300      	str	r3, [sp, #0]
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	2206      	movs	r2, #6
 8015cfc:	f7ea fd6b 	bl	80007d6 <USBPD_PE_SendExtendedMessage>
 8015d00:	4603      	mov	r3, r0
 8015d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 8015d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d025      	beq.n	8015d5a <USBPD_DPM_RequestGetManufacturerInfo+0x86>
 8015d0e:	f107 030c 	add.w	r3, r7, #12
 8015d12:	4a15      	ldr	r2, [pc, #84]	; (8015d68 <USBPD_DPM_RequestGetManufacturerInfo+0x94>)
 8015d14:	2132      	movs	r1, #50	; 0x32
 8015d16:	4618      	mov	r0, r3
 8015d18:	f005 ff00 	bl	801bb1c <sniprintf>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015d22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015d26:	2b31      	cmp	r3, #49	; 0x31
 8015d28:	d80e      	bhi.n	8015d48 <USBPD_DPM_RequestGetManufacturerInfo+0x74>
 8015d2a:	f107 030c 	add.w	r3, r7, #12
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7ef fe50 	bl	80059d4 <strlen>
 8015d34:	4602      	mov	r2, r0
 8015d36:	f107 030c 	add.w	r3, r7, #12
 8015d3a:	79f9      	ldrb	r1, [r7, #7]
 8015d3c:	9200      	str	r2, [sp, #0]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	2006      	movs	r0, #6
 8015d42:	f7f7 fce3 	bl	800d70c <USBPD_TRACE_Add>
 8015d46:	e008      	b.n	8015d5a <USBPD_DPM_RequestGetManufacturerInfo+0x86>
 8015d48:	f107 030c 	add.w	r3, r7, #12
 8015d4c:	79f9      	ldrb	r1, [r7, #7]
 8015d4e:	2232      	movs	r2, #50	; 0x32
 8015d50:	9200      	str	r2, [sp, #0]
 8015d52:	2200      	movs	r2, #0
 8015d54:	2006      	movs	r0, #6
 8015d56:	f7f7 fcd9 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3740      	adds	r7, #64	; 0x40
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	0801c708 	.word	0x0801c708

08015d6c <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b092      	sub	sp, #72	; 0x48
 8015d70:	af02      	add	r7, sp, #8
 8015d72:	4603      	mov	r3, r0
 8015d74:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 8015d76:	79fb      	ldrb	r3, [r7, #7]
 8015d78:	2200      	movs	r2, #0
 8015d7a:	2114      	movs	r1, #20
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7ea fc35 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015d82:	4603      	mov	r3, r0
 8015d84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 8015d88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d025      	beq.n	8015ddc <USBPD_DPM_RequestGetPPS_Status+0x70>
 8015d90:	f107 030c 	add.w	r3, r7, #12
 8015d94:	4a14      	ldr	r2, [pc, #80]	; (8015de8 <USBPD_DPM_RequestGetPPS_Status+0x7c>)
 8015d96:	2132      	movs	r1, #50	; 0x32
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f005 febf 	bl	801bb1c <sniprintf>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015da4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015da8:	2b31      	cmp	r3, #49	; 0x31
 8015daa:	d80e      	bhi.n	8015dca <USBPD_DPM_RequestGetPPS_Status+0x5e>
 8015dac:	f107 030c 	add.w	r3, r7, #12
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7ef fe0f 	bl	80059d4 <strlen>
 8015db6:	4602      	mov	r2, r0
 8015db8:	f107 030c 	add.w	r3, r7, #12
 8015dbc:	79f9      	ldrb	r1, [r7, #7]
 8015dbe:	9200      	str	r2, [sp, #0]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	2006      	movs	r0, #6
 8015dc4:	f7f7 fca2 	bl	800d70c <USBPD_TRACE_Add>
 8015dc8:	e008      	b.n	8015ddc <USBPD_DPM_RequestGetPPS_Status+0x70>
 8015dca:	f107 030c 	add.w	r3, r7, #12
 8015dce:	79f9      	ldrb	r1, [r7, #7]
 8015dd0:	2232      	movs	r2, #50	; 0x32
 8015dd2:	9200      	str	r2, [sp, #0]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	2006      	movs	r0, #6
 8015dd8:	f7f7 fc98 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3740      	adds	r7, #64	; 0x40
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	0801c730 	.word	0x0801c730

08015dec <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b092      	sub	sp, #72	; 0x48
 8015df0:	af02      	add	r7, sp, #8
 8015df2:	4603      	mov	r3, r0
 8015df4:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 8015df6:	79fb      	ldrb	r3, [r7, #7]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	2112      	movs	r1, #18
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7ea fbf5 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015e02:	4603      	mov	r3, r0
 8015e04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 8015e08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d025      	beq.n	8015e5c <USBPD_DPM_RequestGetStatus+0x70>
 8015e10:	f107 030c 	add.w	r3, r7, #12
 8015e14:	4a14      	ldr	r2, [pc, #80]	; (8015e68 <USBPD_DPM_RequestGetStatus+0x7c>)
 8015e16:	2132      	movs	r1, #50	; 0x32
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f005 fe7f 	bl	801bb1c <sniprintf>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015e24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015e28:	2b31      	cmp	r3, #49	; 0x31
 8015e2a:	d80e      	bhi.n	8015e4a <USBPD_DPM_RequestGetStatus+0x5e>
 8015e2c:	f107 030c 	add.w	r3, r7, #12
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7ef fdcf 	bl	80059d4 <strlen>
 8015e36:	4602      	mov	r2, r0
 8015e38:	f107 030c 	add.w	r3, r7, #12
 8015e3c:	79f9      	ldrb	r1, [r7, #7]
 8015e3e:	9200      	str	r2, [sp, #0]
 8015e40:	2200      	movs	r2, #0
 8015e42:	2006      	movs	r0, #6
 8015e44:	f7f7 fc62 	bl	800d70c <USBPD_TRACE_Add>
 8015e48:	e008      	b.n	8015e5c <USBPD_DPM_RequestGetStatus+0x70>
 8015e4a:	f107 030c 	add.w	r3, r7, #12
 8015e4e:	79f9      	ldrb	r1, [r7, #7]
 8015e50:	2232      	movs	r2, #50	; 0x32
 8015e52:	9200      	str	r2, [sp, #0]
 8015e54:	2200      	movs	r2, #0
 8015e56:	2006      	movs	r0, #6
 8015e58:	f7f7 fc58 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015e5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3740      	adds	r7, #64	; 0x40
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	0801c75c 	.word	0x0801c75c

08015e6c <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b092      	sub	sp, #72	; 0x48
 8015e70:	af02      	add	r7, sp, #8
 8015e72:	4603      	mov	r3, r0
 8015e74:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 8015e76:	79fb      	ldrb	r3, [r7, #7]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	2113      	movs	r1, #19
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7ea fbb5 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015e82:	4603      	mov	r3, r0
 8015e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 8015e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d025      	beq.n	8015edc <USBPD_DPM_RequestFastRoleSwap+0x70>
 8015e90:	f107 030c 	add.w	r3, r7, #12
 8015e94:	4a14      	ldr	r2, [pc, #80]	; (8015ee8 <USBPD_DPM_RequestFastRoleSwap+0x7c>)
 8015e96:	2132      	movs	r1, #50	; 0x32
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f005 fe3f 	bl	801bb1c <sniprintf>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015ea4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015ea8:	2b31      	cmp	r3, #49	; 0x31
 8015eaa:	d80e      	bhi.n	8015eca <USBPD_DPM_RequestFastRoleSwap+0x5e>
 8015eac:	f107 030c 	add.w	r3, r7, #12
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7ef fd8f 	bl	80059d4 <strlen>
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	f107 030c 	add.w	r3, r7, #12
 8015ebc:	79f9      	ldrb	r1, [r7, #7]
 8015ebe:	9200      	str	r2, [sp, #0]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	2006      	movs	r0, #6
 8015ec4:	f7f7 fc22 	bl	800d70c <USBPD_TRACE_Add>
 8015ec8:	e008      	b.n	8015edc <USBPD_DPM_RequestFastRoleSwap+0x70>
 8015eca:	f107 030c 	add.w	r3, r7, #12
 8015ece:	79f9      	ldrb	r1, [r7, #7]
 8015ed0:	2232      	movs	r2, #50	; 0x32
 8015ed2:	9200      	str	r2, [sp, #0]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	2006      	movs	r0, #6
 8015ed8:	f7f7 fc18 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015edc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3740      	adds	r7, #64	; 0x40
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	0801c784 	.word	0x0801c784

08015eec <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b092      	sub	sp, #72	; 0x48
 8015ef0:	af02      	add	r7, sp, #8
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 8015ef6:	79fb      	ldrb	r3, [r7, #7]
 8015ef8:	2200      	movs	r2, #0
 8015efa:	2115      	movs	r1, #21
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7ea fb75 	bl	80005ec <USBPD_PE_Request_CtrlMessage>
 8015f02:	4603      	mov	r3, r0
 8015f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 8015f08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d025      	beq.n	8015f5c <USBPD_DPM_RequestGetCountryCodes+0x70>
 8015f10:	f107 030c 	add.w	r3, r7, #12
 8015f14:	4a14      	ldr	r2, [pc, #80]	; (8015f68 <USBPD_DPM_RequestGetCountryCodes+0x7c>)
 8015f16:	2132      	movs	r1, #50	; 0x32
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f005 fdff 	bl	801bb1c <sniprintf>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015f24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015f28:	2b31      	cmp	r3, #49	; 0x31
 8015f2a:	d80e      	bhi.n	8015f4a <USBPD_DPM_RequestGetCountryCodes+0x5e>
 8015f2c:	f107 030c 	add.w	r3, r7, #12
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7ef fd4f 	bl	80059d4 <strlen>
 8015f36:	4602      	mov	r2, r0
 8015f38:	f107 030c 	add.w	r3, r7, #12
 8015f3c:	79f9      	ldrb	r1, [r7, #7]
 8015f3e:	9200      	str	r2, [sp, #0]
 8015f40:	2200      	movs	r2, #0
 8015f42:	2006      	movs	r0, #6
 8015f44:	f7f7 fbe2 	bl	800d70c <USBPD_TRACE_Add>
 8015f48:	e008      	b.n	8015f5c <USBPD_DPM_RequestGetCountryCodes+0x70>
 8015f4a:	f107 030c 	add.w	r3, r7, #12
 8015f4e:	79f9      	ldrb	r1, [r7, #7]
 8015f50:	2232      	movs	r2, #50	; 0x32
 8015f52:	9200      	str	r2, [sp, #0]
 8015f54:	2200      	movs	r2, #0
 8015f56:	2006      	movs	r0, #6
 8015f58:	f7f7 fbd8 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3740      	adds	r7, #64	; 0x40
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	0801c7a4 	.word	0x0801c7a4

08015f6c <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b092      	sub	sp, #72	; 0x48
 8015f70:	af02      	add	r7, sp, #8
 8015f72:	4603      	mov	r3, r0
 8015f74:	460a      	mov	r2, r1
 8015f76:	71fb      	strb	r3, [r7, #7]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 8015f7c:	1d3a      	adds	r2, r7, #4
 8015f7e:	79fb      	ldrb	r3, [r7, #7]
 8015f80:	2107      	movs	r1, #7
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7ea fbba 	bl	80006fc <USBPD_PE_Request_DataMessage>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 8015f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d025      	beq.n	8015fe2 <USBPD_DPM_RequestGetCountryInfo+0x76>
 8015f96:	f107 030c 	add.w	r3, r7, #12
 8015f9a:	4a15      	ldr	r2, [pc, #84]	; (8015ff0 <USBPD_DPM_RequestGetCountryInfo+0x84>)
 8015f9c:	2132      	movs	r1, #50	; 0x32
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f005 fdbc 	bl	801bb1c <sniprintf>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015faa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015fae:	2b31      	cmp	r3, #49	; 0x31
 8015fb0:	d80e      	bhi.n	8015fd0 <USBPD_DPM_RequestGetCountryInfo+0x64>
 8015fb2:	f107 030c 	add.w	r3, r7, #12
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7ef fd0c 	bl	80059d4 <strlen>
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	f107 030c 	add.w	r3, r7, #12
 8015fc2:	79f9      	ldrb	r1, [r7, #7]
 8015fc4:	9200      	str	r2, [sp, #0]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	2006      	movs	r0, #6
 8015fca:	f7f7 fb9f 	bl	800d70c <USBPD_TRACE_Add>
 8015fce:	e008      	b.n	8015fe2 <USBPD_DPM_RequestGetCountryInfo+0x76>
 8015fd0:	f107 030c 	add.w	r3, r7, #12
 8015fd4:	79f9      	ldrb	r1, [r7, #7]
 8015fd6:	2232      	movs	r2, #50	; 0x32
 8015fd8:	9200      	str	r2, [sp, #0]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	2006      	movs	r0, #6
 8015fde:	f7f7 fb95 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8015fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3740      	adds	r7, #64	; 0x40
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	0801c7d0 	.word	0x0801c7d0

08015ff4 <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b092      	sub	sp, #72	; 0x48
 8015ff8:	af02      	add	r7, sp, #8
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	6039      	str	r1, [r7, #0]
 8015ffe:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 8016000:	79f8      	ldrb	r0, [r7, #7]
 8016002:	2301      	movs	r3, #1
 8016004:	9300      	str	r3, [sp, #0]
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	2203      	movs	r2, #3
 801600a:	2100      	movs	r1, #0
 801600c:	f7ea fbe3 	bl	80007d6 <USBPD_PE_SendExtendedMessage>
 8016010:	4603      	mov	r3, r0
 8016012:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 8016016:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801601a:	2b00      	cmp	r3, #0
 801601c:	d025      	beq.n	801606a <USBPD_DPM_RequestGetBatteryCapability+0x76>
 801601e:	f107 030c 	add.w	r3, r7, #12
 8016022:	4a15      	ldr	r2, [pc, #84]	; (8016078 <USBPD_DPM_RequestGetBatteryCapability+0x84>)
 8016024:	2132      	movs	r1, #50	; 0x32
 8016026:	4618      	mov	r0, r3
 8016028:	f005 fd78 	bl	801bb1c <sniprintf>
 801602c:	4603      	mov	r3, r0
 801602e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8016032:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016036:	2b31      	cmp	r3, #49	; 0x31
 8016038:	d80e      	bhi.n	8016058 <USBPD_DPM_RequestGetBatteryCapability+0x64>
 801603a:	f107 030c 	add.w	r3, r7, #12
 801603e:	4618      	mov	r0, r3
 8016040:	f7ef fcc8 	bl	80059d4 <strlen>
 8016044:	4602      	mov	r2, r0
 8016046:	f107 030c 	add.w	r3, r7, #12
 801604a:	79f9      	ldrb	r1, [r7, #7]
 801604c:	9200      	str	r2, [sp, #0]
 801604e:	2200      	movs	r2, #0
 8016050:	2006      	movs	r0, #6
 8016052:	f7f7 fb5b 	bl	800d70c <USBPD_TRACE_Add>
 8016056:	e008      	b.n	801606a <USBPD_DPM_RequestGetBatteryCapability+0x76>
 8016058:	f107 030c 	add.w	r3, r7, #12
 801605c:	79f9      	ldrb	r1, [r7, #7]
 801605e:	2232      	movs	r2, #50	; 0x32
 8016060:	9200      	str	r2, [sp, #0]
 8016062:	2200      	movs	r2, #0
 8016064:	2006      	movs	r0, #6
 8016066:	f7f7 fb51 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 801606a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801606e:	4618      	mov	r0, r3
 8016070:	3740      	adds	r7, #64	; 0x40
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	0801c7fc 	.word	0x0801c7fc

0801607c <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b092      	sub	sp, #72	; 0x48
 8016080:	af02      	add	r7, sp, #8
 8016082:	4603      	mov	r3, r0
 8016084:	6039      	str	r1, [r7, #0]
 8016086:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 8016088:	79f8      	ldrb	r0, [r7, #7]
 801608a:	2301      	movs	r3, #1
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	2204      	movs	r2, #4
 8016092:	2100      	movs	r1, #0
 8016094:	f7ea fb9f 	bl	80007d6 <USBPD_PE_SendExtendedMessage>
 8016098:	4603      	mov	r3, r0
 801609a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801609e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d025      	beq.n	80160f2 <USBPD_DPM_RequestGetBatteryStatus+0x76>
 80160a6:	f107 030c 	add.w	r3, r7, #12
 80160aa:	4a15      	ldr	r2, [pc, #84]	; (8016100 <USBPD_DPM_RequestGetBatteryStatus+0x84>)
 80160ac:	2132      	movs	r1, #50	; 0x32
 80160ae:	4618      	mov	r0, r3
 80160b0:	f005 fd34 	bl	801bb1c <sniprintf>
 80160b4:	4603      	mov	r3, r0
 80160b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80160ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80160be:	2b31      	cmp	r3, #49	; 0x31
 80160c0:	d80e      	bhi.n	80160e0 <USBPD_DPM_RequestGetBatteryStatus+0x64>
 80160c2:	f107 030c 	add.w	r3, r7, #12
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7ef fc84 	bl	80059d4 <strlen>
 80160cc:	4602      	mov	r2, r0
 80160ce:	f107 030c 	add.w	r3, r7, #12
 80160d2:	79f9      	ldrb	r1, [r7, #7]
 80160d4:	9200      	str	r2, [sp, #0]
 80160d6:	2200      	movs	r2, #0
 80160d8:	2006      	movs	r0, #6
 80160da:	f7f7 fb17 	bl	800d70c <USBPD_TRACE_Add>
 80160de:	e008      	b.n	80160f2 <USBPD_DPM_RequestGetBatteryStatus+0x76>
 80160e0:	f107 030c 	add.w	r3, r7, #12
 80160e4:	79f9      	ldrb	r1, [r7, #7]
 80160e6:	2232      	movs	r2, #50	; 0x32
 80160e8:	9200      	str	r2, [sp, #0]
 80160ea:	2200      	movs	r2, #0
 80160ec:	2006      	movs	r0, #6
 80160ee:	f7f7 fb0d 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 80160f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3740      	adds	r7, #64	; 0x40
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	0801c828 	.word	0x0801c828

08016104 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b092      	sub	sp, #72	; 0x48
 8016108:	af02      	add	r7, sp, #8
 801610a:	4603      	mov	r3, r0
 801610c:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801610e:	2302      	movs	r3, #2
 8016110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 8016114:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016118:	2b00      	cmp	r3, #0
 801611a:	d025      	beq.n	8016168 <USBPD_DPM_RequestSecurityRequest+0x64>
 801611c:	f107 030c 	add.w	r3, r7, #12
 8016120:	4a14      	ldr	r2, [pc, #80]	; (8016174 <USBPD_DPM_RequestSecurityRequest+0x70>)
 8016122:	2132      	movs	r1, #50	; 0x32
 8016124:	4618      	mov	r0, r3
 8016126:	f005 fcf9 	bl	801bb1c <sniprintf>
 801612a:	4603      	mov	r3, r0
 801612c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8016130:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016134:	2b31      	cmp	r3, #49	; 0x31
 8016136:	d80e      	bhi.n	8016156 <USBPD_DPM_RequestSecurityRequest+0x52>
 8016138:	f107 030c 	add.w	r3, r7, #12
 801613c:	4618      	mov	r0, r3
 801613e:	f7ef fc49 	bl	80059d4 <strlen>
 8016142:	4602      	mov	r2, r0
 8016144:	f107 030c 	add.w	r3, r7, #12
 8016148:	79f9      	ldrb	r1, [r7, #7]
 801614a:	9200      	str	r2, [sp, #0]
 801614c:	2200      	movs	r2, #0
 801614e:	2006      	movs	r0, #6
 8016150:	f7f7 fadc 	bl	800d70c <USBPD_TRACE_Add>
 8016154:	e008      	b.n	8016168 <USBPD_DPM_RequestSecurityRequest+0x64>
 8016156:	f107 030c 	add.w	r3, r7, #12
 801615a:	79f9      	ldrb	r1, [r7, #7]
 801615c:	2232      	movs	r2, #50	; 0x32
 801615e:	9200      	str	r2, [sp, #0]
 8016160:	2200      	movs	r2, #0
 8016162:	2006      	movs	r0, #6
 8016164:	f7f7 fad2 	bl	800d70c <USBPD_TRACE_Add>
  return _status;
 8016168:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801616c:	4618      	mov	r0, r3
 801616e:	3740      	adds	r7, #64	; 0x40
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	0801c858 	.word	0x0801c858

08016178 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	4603      	mov	r3, r0
 8016180:	460a      	mov	r2, r1
 8016182:	71fb      	strb	r3, [r7, #7]
 8016184:	4613      	mov	r3, r2
 8016186:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8016188:	2302      	movs	r3, #2
 801618a:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801618c:	79fb      	ldrb	r3, [r7, #7]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d001      	beq.n	8016196 <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8016192:	2302      	movs	r3, #2
 8016194:	e01c      	b.n	80161d0 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8016196:	79fb      	ldrb	r3, [r7, #7]
 8016198:	f107 0208 	add.w	r2, r7, #8
 801619c:	4611      	mov	r1, r2
 801619e:	4618      	mov	r0, r3
 80161a0:	f000 f8ba 	bl	8016318 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 80161a4:	79bb      	ldrb	r3, [r7, #6]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d109      	bne.n	80161be <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	f240 22ed 	movw	r2, #749	; 0x2ed
 80161b0:	4293      	cmp	r3, r2
 80161b2:	d801      	bhi.n	80161b8 <USBPD_PWR_IF_SupplyReady+0x40>
 80161b4:	2300      	movs	r3, #0
 80161b6:	e000      	b.n	80161ba <USBPD_PWR_IF_SupplyReady+0x42>
 80161b8:	2302      	movs	r3, #2
 80161ba:	73fb      	strb	r3, [r7, #15]
 80161bc:	e007      	b.n	80161ce <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80161c4:	d901      	bls.n	80161ca <USBPD_PWR_IF_SupplyReady+0x52>
 80161c6:	2300      	movs	r3, #0
 80161c8:	e000      	b.n	80161cc <USBPD_PWR_IF_SupplyReady+0x54>
 80161ca:	2302      	movs	r3, #2
 80161cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80161ce:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3710      	adds	r7, #16
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}

080161d8 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b084      	sub	sp, #16
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60ba      	str	r2, [r7, #8]
 80161e0:	607b      	str	r3, [r7, #4]
 80161e2:	4603      	mov	r3, r0
 80161e4:	73fb      	strb	r3, [r7, #15]
 80161e6:	460b      	mov	r3, r1
 80161e8:	73bb      	strb	r3, [r7, #14]
    {
      *Size = USBPD_NbPDO[0];
 80161ea:	4b08      	ldr	r3, [pc, #32]	; (801620c <USBPD_PWR_IF_GetPortPDOs+0x34>)
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	461a      	mov	r2, r3
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 80161f4:	4b05      	ldr	r3, [pc, #20]	; (801620c <USBPD_PWR_IF_GetPortPDOs+0x34>)
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	009b      	lsls	r3, r3, #2
 80161fa:	461a      	mov	r2, r3
 80161fc:	4904      	ldr	r1, [pc, #16]	; (8016210 <USBPD_PWR_IF_GetPortPDOs+0x38>)
 80161fe:	68b8      	ldr	r0, [r7, #8]
 8016200:	f005 fb52 	bl	801b8a8 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 8016204:	bf00      	nop
 8016206:	3710      	adds	r7, #16
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}
 801620c:	20000238 	.word	0x20000238
 8016210:	2000023c 	.word	0x2000023c

08016214 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	4603      	mov	r3, r0
 801621c:	460a      	mov	r2, r1
 801621e:	71fb      	strb	r3, [r7, #7]
 8016220:	4613      	mov	r3, r2
 8016222:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8016224:	2300      	movs	r3, #0
 8016226:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8016228:	79fb      	ldrb	r3, [r7, #7]
 801622a:	4618      	mov	r0, r3
 801622c:	f7f9 fca2 	bl	800fb74 <HW_IF_PWR_GetVoltage>
 8016230:	4603      	mov	r3, r0
 8016232:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8016234:	79bb      	ldrb	r3, [r7, #6]
 8016236:	2b02      	cmp	r3, #2
 8016238:	d015      	beq.n	8016266 <USBPD_PWR_IF_GetVBUSStatus+0x52>
 801623a:	2b02      	cmp	r3, #2
 801623c:	dc1a      	bgt.n	8016274 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 801623e:	2b00      	cmp	r3, #0
 8016240:	d002      	beq.n	8016248 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 8016242:	2b01      	cmp	r3, #1
 8016244:	d008      	beq.n	8016258 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8016246:	e015      	b.n	8016274 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801624e:	4293      	cmp	r3, r2
 8016250:	d812      	bhi.n	8016278 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 8016252:	2301      	movs	r3, #1
 8016254:	73fb      	strb	r3, [r7, #15]
    break;
 8016256:	e00f      	b.n	8016278 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801625e:	d30d      	bcc.n	801627c <USBPD_PWR_IF_GetVBUSStatus+0x68>
 8016260:	2301      	movs	r3, #1
 8016262:	73fb      	strb	r3, [r7, #15]
    break;
 8016264:	e00a      	b.n	801627c <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801626c:	d208      	bcs.n	8016280 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 801626e:	2301      	movs	r3, #1
 8016270:	73fb      	strb	r3, [r7, #15]
    break;
 8016272:	e005      	b.n	8016280 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 8016274:	bf00      	nop
 8016276:	e004      	b.n	8016282 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016278:	bf00      	nop
 801627a:	e002      	b.n	8016282 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801627c:	bf00      	nop
 801627e:	e000      	b.n	8016282 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016280:	bf00      	nop
  }
  return _status;
 8016282:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8016284:	4618      	mov	r0, r3
 8016286:	3710      	adds	r7, #16
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801628c:	b480      	push	{r7}
 801628e:	b085      	sub	sp, #20
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8016294:	2300      	movs	r3, #0
 8016296:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d002      	beq.n	80162a4 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801629e:	f06f 0301 	mvn.w	r3, #1
 80162a2:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80162a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3714      	adds	r7, #20
 80162aa:	46bd      	mov	sp, r7
 80162ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b0:	4770      	bx	lr
	...

080162b4 <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af02      	add	r7, sp, #8
 80162ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80162bc:	2300      	movs	r3, #0
 80162be:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d003      	beq.n	80162ce <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80162c6:	f06f 0301 	mvn.w	r3, #1
 80162ca:	60fb      	str	r3, [r7, #12]
 80162cc:	e008      	b.n	80162e0 <BSP_USBPD_PWR_VBUSInit+0x2c>
  }
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	b2d9      	uxtb	r1, r3
 80162d2:	2325      	movs	r3, #37	; 0x25
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	4b05      	ldr	r3, [pc, #20]	; (80162ec <BSP_USBPD_PWR_VBUSInit+0x38>)
 80162d8:	2200      	movs	r2, #0
 80162da:	2006      	movs	r0, #6
 80162dc:	f7f7 fa16 	bl	800d70c <USBPD_TRACE_Add>
  }

  return ret;
 80162e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3710      	adds	r7, #16
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	0801c928 	.word	0x0801c928

080162f0 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80162f0:	b480      	push	{r7}
 80162f2:	b085      	sub	sp, #20
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80162f8:	f06f 030a 	mvn.w	r3, #10
 80162fc:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d002      	beq.n	801630a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016304:	f06f 0301 	mvn.w	r3, #1
 8016308:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801630a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801630c:	4618      	mov	r0, r3
 801630e:	3714      	adds	r7, #20
 8016310:	46bd      	mov	sp, r7
 8016312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016316:	4770      	bx	lr

08016318 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8016318:	b480      	push	{r7}
 801631a:	b085      	sub	sp, #20
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 8016322:	2300      	movs	r3, #0
 8016324:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d102      	bne.n	8016332 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d103      	bne.n	801633a <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016332:	f06f 0301 	mvn.w	r3, #1
 8016336:	60fb      	str	r3, [r7, #12]
 8016338:	e004      	b.n	8016344 <BSP_USBPD_PWR_VBUSGetVoltage+0x2c>
  }
  else
  {
//    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
//    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
	  val = 5000;
 801633a:	f241 3388 	movw	r3, #5000	; 0x1388
 801633e:	60bb      	str	r3, [r7, #8]
	  ret = BSP_ERROR_NONE;
 8016340:	2300      	movs	r3, #0
 8016342:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = val;
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	601a      	str	r2, [r3, #0]
  return ret;
 801634a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801634c:	4618      	mov	r0, r3
 801634e:	3714      	adds	r7, #20
 8016350:	46bd      	mov	sp, r7
 8016352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016356:	4770      	bx	lr

08016358 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 8016358:	b480      	push	{r7}
 801635a:	b085      	sub	sp, #20
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
 8016360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d102      	bne.n	801636e <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d103      	bne.n	8016376 <BSP_USBPD_PWR_VBUSGetCurrent+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801636e:	f06f 0301 	mvn.w	r3, #1
 8016372:	60fb      	str	r3, [r7, #12]
 8016374:	e005      	b.n	8016382 <BSP_USBPD_PWR_VBUSGetCurrent+0x2a>
  }
  else
  {
    *pCurrent = 0;
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	2200      	movs	r2, #0
 801637a:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801637c:	f06f 030a 	mvn.w	r3, #10
 8016380:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8016382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 8016384:	4618      	mov	r0, r3
 8016386:	3714      	adds	r7, #20
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr

08016390 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8016394:	2200      	movs	r2, #0
 8016396:	4912      	ldr	r1, [pc, #72]	; (80163e0 <MX_USB_Device_Init+0x50>)
 8016398:	4812      	ldr	r0, [pc, #72]	; (80163e4 <MX_USB_Device_Init+0x54>)
 801639a:	f7fa fa61 	bl	8010860 <USBD_Init>
 801639e:	4603      	mov	r3, r0
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d001      	beq.n	80163a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80163a4:	f7f0 fa46 	bl	8006834 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80163a8:	490f      	ldr	r1, [pc, #60]	; (80163e8 <MX_USB_Device_Init+0x58>)
 80163aa:	480e      	ldr	r0, [pc, #56]	; (80163e4 <MX_USB_Device_Init+0x54>)
 80163ac:	f7fa fa88 	bl	80108c0 <USBD_RegisterClass>
 80163b0:	4603      	mov	r3, r0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d001      	beq.n	80163ba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80163b6:	f7f0 fa3d 	bl	8006834 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80163ba:	490c      	ldr	r1, [pc, #48]	; (80163ec <MX_USB_Device_Init+0x5c>)
 80163bc:	4809      	ldr	r0, [pc, #36]	; (80163e4 <MX_USB_Device_Init+0x54>)
 80163be:	f7fa f9a9 	bl	8010714 <USBD_CDC_RegisterInterface>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d001      	beq.n	80163cc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80163c8:	f7f0 fa34 	bl	8006834 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80163cc:	4805      	ldr	r0, [pc, #20]	; (80163e4 <MX_USB_Device_Init+0x54>)
 80163ce:	f7fa fa9e 	bl	801090e <USBD_Start>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d001      	beq.n	80163dc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80163d8:	f7f0 fa2c 	bl	8006834 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80163dc:	bf00      	nop
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	2000026c 	.word	0x2000026c
 80163e4:	200030c8 	.word	0x200030c8
 80163e8:	2000003c 	.word	0x2000003c
 80163ec:	20000258 	.word	0x20000258

080163f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80163f4:	2200      	movs	r2, #0
 80163f6:	4905      	ldr	r1, [pc, #20]	; (801640c <CDC_Init_FS+0x1c>)
 80163f8:	4805      	ldr	r0, [pc, #20]	; (8016410 <CDC_Init_FS+0x20>)
 80163fa:	f7fa f9a0 	bl	801073e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80163fe:	4905      	ldr	r1, [pc, #20]	; (8016414 <CDC_Init_FS+0x24>)
 8016400:	4803      	ldr	r0, [pc, #12]	; (8016410 <CDC_Init_FS+0x20>)
 8016402:	f7fa f9ba 	bl	801077a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016406:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016408:	4618      	mov	r0, r3
 801640a:	bd80      	pop	{r7, pc}
 801640c:	20003b98 	.word	0x20003b98
 8016410:	200030c8 	.word	0x200030c8
 8016414:	20003398 	.word	0x20003398

08016418 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016418:	b480      	push	{r7}
 801641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801641c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801641e:	4618      	mov	r0, r3
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr

08016428 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	6039      	str	r1, [r7, #0]
 8016432:	71fb      	strb	r3, [r7, #7]
 8016434:	4613      	mov	r3, r2
 8016436:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016438:	79fb      	ldrb	r3, [r7, #7]
 801643a:	2b23      	cmp	r3, #35	; 0x23
 801643c:	d84a      	bhi.n	80164d4 <CDC_Control_FS+0xac>
 801643e:	a201      	add	r2, pc, #4	; (adr r2, 8016444 <CDC_Control_FS+0x1c>)
 8016440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016444:	080164d5 	.word	0x080164d5
 8016448:	080164d5 	.word	0x080164d5
 801644c:	080164d5 	.word	0x080164d5
 8016450:	080164d5 	.word	0x080164d5
 8016454:	080164d5 	.word	0x080164d5
 8016458:	080164d5 	.word	0x080164d5
 801645c:	080164d5 	.word	0x080164d5
 8016460:	080164d5 	.word	0x080164d5
 8016464:	080164d5 	.word	0x080164d5
 8016468:	080164d5 	.word	0x080164d5
 801646c:	080164d5 	.word	0x080164d5
 8016470:	080164d5 	.word	0x080164d5
 8016474:	080164d5 	.word	0x080164d5
 8016478:	080164d5 	.word	0x080164d5
 801647c:	080164d5 	.word	0x080164d5
 8016480:	080164d5 	.word	0x080164d5
 8016484:	080164d5 	.word	0x080164d5
 8016488:	080164d5 	.word	0x080164d5
 801648c:	080164d5 	.word	0x080164d5
 8016490:	080164d5 	.word	0x080164d5
 8016494:	080164d5 	.word	0x080164d5
 8016498:	080164d5 	.word	0x080164d5
 801649c:	080164d5 	.word	0x080164d5
 80164a0:	080164d5 	.word	0x080164d5
 80164a4:	080164d5 	.word	0x080164d5
 80164a8:	080164d5 	.word	0x080164d5
 80164ac:	080164d5 	.word	0x080164d5
 80164b0:	080164d5 	.word	0x080164d5
 80164b4:	080164d5 	.word	0x080164d5
 80164b8:	080164d5 	.word	0x080164d5
 80164bc:	080164d5 	.word	0x080164d5
 80164c0:	080164d5 	.word	0x080164d5
 80164c4:	080164d5 	.word	0x080164d5
 80164c8:	080164d5 	.word	0x080164d5
 80164cc:	080164d5 	.word	0x080164d5
 80164d0:	080164d5 	.word	0x080164d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80164d4:	bf00      	nop
  }

  return (USBD_OK);
 80164d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80164d8:	4618      	mov	r0, r3
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80164ee:	6879      	ldr	r1, [r7, #4]
 80164f0:	4805      	ldr	r0, [pc, #20]	; (8016508 <CDC_Receive_FS+0x24>)
 80164f2:	f7fa f942 	bl	801077a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80164f6:	4804      	ldr	r0, [pc, #16]	; (8016508 <CDC_Receive_FS+0x24>)
 80164f8:	f7fa f988 	bl	801080c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80164fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	200030c8 	.word	0x200030c8

0801650c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	460b      	mov	r3, r1
 8016516:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016518:	2300      	movs	r3, #0
 801651a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801651c:	4b0d      	ldr	r3, [pc, #52]	; (8016554 <CDC_Transmit_FS+0x48>)
 801651e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016522:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801652a:	2b00      	cmp	r3, #0
 801652c:	d001      	beq.n	8016532 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801652e:	2301      	movs	r3, #1
 8016530:	e00b      	b.n	801654a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016532:	887b      	ldrh	r3, [r7, #2]
 8016534:	461a      	mov	r2, r3
 8016536:	6879      	ldr	r1, [r7, #4]
 8016538:	4806      	ldr	r0, [pc, #24]	; (8016554 <CDC_Transmit_FS+0x48>)
 801653a:	f7fa f900 	bl	801073e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801653e:	4805      	ldr	r0, [pc, #20]	; (8016554 <CDC_Transmit_FS+0x48>)
 8016540:	f7fa f934 	bl	80107ac <USBD_CDC_TransmitPacket>
 8016544:	4603      	mov	r3, r0
 8016546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016548:	7bfb      	ldrb	r3, [r7, #15]
}
 801654a:	4618      	mov	r0, r3
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	200030c8 	.word	0x200030c8

08016558 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016558:	b480      	push	{r7}
 801655a:	b087      	sub	sp, #28
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	4613      	mov	r3, r2
 8016564:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016566:	2300      	movs	r3, #0
 8016568:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801656a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801656e:	4618      	mov	r0, r3
 8016570:	371c      	adds	r7, #28
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr
	...

0801657c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801657c:	b480      	push	{r7}
 801657e:	b083      	sub	sp, #12
 8016580:	af00      	add	r7, sp, #0
 8016582:	4603      	mov	r3, r0
 8016584:	6039      	str	r1, [r7, #0]
 8016586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	2212      	movs	r2, #18
 801658c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801658e:	4b03      	ldr	r3, [pc, #12]	; (801659c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8016590:	4618      	mov	r0, r3
 8016592:	370c      	adds	r7, #12
 8016594:	46bd      	mov	sp, r7
 8016596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659a:	4770      	bx	lr
 801659c:	2000028c 	.word	0x2000028c

080165a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	6039      	str	r1, [r7, #0]
 80165aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	2204      	movs	r2, #4
 80165b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80165b2:	4b03      	ldr	r3, [pc, #12]	; (80165c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80165b4:	4618      	mov	r0, r3
 80165b6:	370c      	adds	r7, #12
 80165b8:	46bd      	mov	sp, r7
 80165ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165be:	4770      	bx	lr
 80165c0:	200002a0 	.word	0x200002a0

080165c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b082      	sub	sp, #8
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	4603      	mov	r3, r0
 80165cc:	6039      	str	r1, [r7, #0]
 80165ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165d0:	79fb      	ldrb	r3, [r7, #7]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d105      	bne.n	80165e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80165d6:	683a      	ldr	r2, [r7, #0]
 80165d8:	4907      	ldr	r1, [pc, #28]	; (80165f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80165da:	4808      	ldr	r0, [pc, #32]	; (80165fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80165dc:	f7fb f97f 	bl	80118de <USBD_GetString>
 80165e0:	e004      	b.n	80165ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80165e2:	683a      	ldr	r2, [r7, #0]
 80165e4:	4904      	ldr	r1, [pc, #16]	; (80165f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80165e6:	4805      	ldr	r0, [pc, #20]	; (80165fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80165e8:	f7fb f979 	bl	80118de <USBD_GetString>
  }
  return USBD_StrDesc;
 80165ec:	4b02      	ldr	r3, [pc, #8]	; (80165f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	20004398 	.word	0x20004398
 80165fc:	0801ca1c 	.word	0x0801ca1c

08016600 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
 8016606:	4603      	mov	r3, r0
 8016608:	6039      	str	r1, [r7, #0]
 801660a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801660c:	683a      	ldr	r2, [r7, #0]
 801660e:	4904      	ldr	r1, [pc, #16]	; (8016620 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8016610:	4804      	ldr	r0, [pc, #16]	; (8016624 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8016612:	f7fb f964 	bl	80118de <USBD_GetString>
  return USBD_StrDesc;
 8016616:	4b02      	ldr	r3, [pc, #8]	; (8016620 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8016618:	4618      	mov	r0, r3
 801661a:	3708      	adds	r7, #8
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}
 8016620:	20004398 	.word	0x20004398
 8016624:	0801ca34 	.word	0x0801ca34

08016628 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
 801662e:	4603      	mov	r3, r0
 8016630:	6039      	str	r1, [r7, #0]
 8016632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	221a      	movs	r2, #26
 8016638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801663a:	f000 f843 	bl	80166c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801663e:	4b02      	ldr	r3, [pc, #8]	; (8016648 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8016640:	4618      	mov	r0, r3
 8016642:	3708      	adds	r7, #8
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}
 8016648:	200002a4 	.word	0x200002a4

0801664c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b082      	sub	sp, #8
 8016650:	af00      	add	r7, sp, #0
 8016652:	4603      	mov	r3, r0
 8016654:	6039      	str	r1, [r7, #0]
 8016656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016658:	79fb      	ldrb	r3, [r7, #7]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d105      	bne.n	801666a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801665e:	683a      	ldr	r2, [r7, #0]
 8016660:	4907      	ldr	r1, [pc, #28]	; (8016680 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8016662:	4808      	ldr	r0, [pc, #32]	; (8016684 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8016664:	f7fb f93b 	bl	80118de <USBD_GetString>
 8016668:	e004      	b.n	8016674 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801666a:	683a      	ldr	r2, [r7, #0]
 801666c:	4904      	ldr	r1, [pc, #16]	; (8016680 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801666e:	4805      	ldr	r0, [pc, #20]	; (8016684 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8016670:	f7fb f935 	bl	80118de <USBD_GetString>
  }
  return USBD_StrDesc;
 8016674:	4b02      	ldr	r3, [pc, #8]	; (8016680 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8016676:	4618      	mov	r0, r3
 8016678:	3708      	adds	r7, #8
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	20004398 	.word	0x20004398
 8016684:	0801ca48 	.word	0x0801ca48

08016688 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	4603      	mov	r3, r0
 8016690:	6039      	str	r1, [r7, #0]
 8016692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016694:	79fb      	ldrb	r3, [r7, #7]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d105      	bne.n	80166a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801669a:	683a      	ldr	r2, [r7, #0]
 801669c:	4907      	ldr	r1, [pc, #28]	; (80166bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801669e:	4808      	ldr	r0, [pc, #32]	; (80166c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80166a0:	f7fb f91d 	bl	80118de <USBD_GetString>
 80166a4:	e004      	b.n	80166b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80166a6:	683a      	ldr	r2, [r7, #0]
 80166a8:	4904      	ldr	r1, [pc, #16]	; (80166bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80166aa:	4805      	ldr	r0, [pc, #20]	; (80166c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80166ac:	f7fb f917 	bl	80118de <USBD_GetString>
  }
  return USBD_StrDesc;
 80166b0:	4b02      	ldr	r3, [pc, #8]	; (80166bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3708      	adds	r7, #8
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	20004398 	.word	0x20004398
 80166c0:	0801ca54 	.word	0x0801ca54

080166c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b084      	sub	sp, #16
 80166c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80166ca:	4b0f      	ldr	r3, [pc, #60]	; (8016708 <Get_SerialNum+0x44>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80166d0:	4b0e      	ldr	r3, [pc, #56]	; (801670c <Get_SerialNum+0x48>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80166d6:	4b0e      	ldr	r3, [pc, #56]	; (8016710 <Get_SerialNum+0x4c>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80166dc:	68fa      	ldr	r2, [r7, #12]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	4413      	add	r3, r2
 80166e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d009      	beq.n	80166fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80166ea:	2208      	movs	r2, #8
 80166ec:	4909      	ldr	r1, [pc, #36]	; (8016714 <Get_SerialNum+0x50>)
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f000 f814 	bl	801671c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80166f4:	2204      	movs	r2, #4
 80166f6:	4908      	ldr	r1, [pc, #32]	; (8016718 <Get_SerialNum+0x54>)
 80166f8:	68b8      	ldr	r0, [r7, #8]
 80166fa:	f000 f80f 	bl	801671c <IntToUnicode>
  }
}
 80166fe:	bf00      	nop
 8016700:	3710      	adds	r7, #16
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	1fff7590 	.word	0x1fff7590
 801670c:	1fff7594 	.word	0x1fff7594
 8016710:	1fff7598 	.word	0x1fff7598
 8016714:	200002a6 	.word	0x200002a6
 8016718:	200002b6 	.word	0x200002b6

0801671c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801671c:	b480      	push	{r7}
 801671e:	b087      	sub	sp, #28
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	4613      	mov	r3, r2
 8016728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801672a:	2300      	movs	r3, #0
 801672c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801672e:	2300      	movs	r3, #0
 8016730:	75fb      	strb	r3, [r7, #23]
 8016732:	e027      	b.n	8016784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	0f1b      	lsrs	r3, r3, #28
 8016738:	2b09      	cmp	r3, #9
 801673a:	d80b      	bhi.n	8016754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	0f1b      	lsrs	r3, r3, #28
 8016740:	b2da      	uxtb	r2, r3
 8016742:	7dfb      	ldrb	r3, [r7, #23]
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	4619      	mov	r1, r3
 8016748:	68bb      	ldr	r3, [r7, #8]
 801674a:	440b      	add	r3, r1
 801674c:	3230      	adds	r2, #48	; 0x30
 801674e:	b2d2      	uxtb	r2, r2
 8016750:	701a      	strb	r2, [r3, #0]
 8016752:	e00a      	b.n	801676a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	0f1b      	lsrs	r3, r3, #28
 8016758:	b2da      	uxtb	r2, r3
 801675a:	7dfb      	ldrb	r3, [r7, #23]
 801675c:	005b      	lsls	r3, r3, #1
 801675e:	4619      	mov	r1, r3
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	440b      	add	r3, r1
 8016764:	3237      	adds	r2, #55	; 0x37
 8016766:	b2d2      	uxtb	r2, r2
 8016768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	011b      	lsls	r3, r3, #4
 801676e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016770:	7dfb      	ldrb	r3, [r7, #23]
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	3301      	adds	r3, #1
 8016776:	68ba      	ldr	r2, [r7, #8]
 8016778:	4413      	add	r3, r2
 801677a:	2200      	movs	r2, #0
 801677c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801677e:	7dfb      	ldrb	r3, [r7, #23]
 8016780:	3301      	adds	r3, #1
 8016782:	75fb      	strb	r3, [r7, #23]
 8016784:	7dfa      	ldrb	r2, [r7, #23]
 8016786:	79fb      	ldrb	r3, [r7, #7]
 8016788:	429a      	cmp	r2, r3
 801678a:	d3d3      	bcc.n	8016734 <IntToUnicode+0x18>
  }
}
 801678c:	bf00      	nop
 801678e:	bf00      	nop
 8016790:	371c      	adds	r7, #28
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr
	...

0801679c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a11      	ldr	r2, [pc, #68]	; (80167f0 <HAL_PCD_MspInit+0x54>)
 80167aa:	4293      	cmp	r3, r2
 80167ac:	d11b      	bne.n	80167e6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80167ae:	4b11      	ldr	r3, [pc, #68]	; (80167f4 <HAL_PCD_MspInit+0x58>)
 80167b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167b2:	4a10      	ldr	r2, [pc, #64]	; (80167f4 <HAL_PCD_MspInit+0x58>)
 80167b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80167b8:	6593      	str	r3, [r2, #88]	; 0x58
 80167ba:	4b0e      	ldr	r3, [pc, #56]	; (80167f4 <HAL_PCD_MspInit+0x58>)
 80167bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80167c2:	60fb      	str	r3, [r7, #12]
 80167c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 3, 0);
 80167c6:	2200      	movs	r2, #0
 80167c8:	2103      	movs	r1, #3
 80167ca:	2013      	movs	r0, #19
 80167cc:	f7f0 facd 	bl	8006d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80167d0:	2013      	movs	r0, #19
 80167d2:	f7f0 fae4 	bl	8006d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 3, 0);
 80167d6:	2200      	movs	r2, #0
 80167d8:	2103      	movs	r1, #3
 80167da:	2014      	movs	r0, #20
 80167dc:	f7f0 fac5 	bl	8006d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80167e0:	2014      	movs	r0, #20
 80167e2:	f7f0 fadc 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80167e6:	bf00      	nop
 80167e8:	3710      	adds	r7, #16
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
 80167ee:	bf00      	nop
 80167f0:	40005c00 	.word	0x40005c00
 80167f4:	40021000 	.word	0x40021000

080167f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801680c:	4619      	mov	r1, r3
 801680e:	4610      	mov	r0, r2
 8016810:	f7fa f8c8 	bl	80109a4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8016814:	bf00      	nop
 8016816:	3708      	adds	r7, #8
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}

0801681c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801682e:	78fa      	ldrb	r2, [r7, #3]
 8016830:	6879      	ldr	r1, [r7, #4]
 8016832:	4613      	mov	r3, r2
 8016834:	009b      	lsls	r3, r3, #2
 8016836:	4413      	add	r3, r2
 8016838:	00db      	lsls	r3, r3, #3
 801683a:	440b      	add	r3, r1
 801683c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016840:	681a      	ldr	r2, [r3, #0]
 8016842:	78fb      	ldrb	r3, [r7, #3]
 8016844:	4619      	mov	r1, r3
 8016846:	f7fa f902 	bl	8010a4e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801684a:	bf00      	nop
 801684c:	3708      	adds	r7, #8
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}

08016852 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016852:	b580      	push	{r7, lr}
 8016854:	b082      	sub	sp, #8
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]
 801685a:	460b      	mov	r3, r1
 801685c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8016864:	78fa      	ldrb	r2, [r7, #3]
 8016866:	6879      	ldr	r1, [r7, #4]
 8016868:	4613      	mov	r3, r2
 801686a:	009b      	lsls	r3, r3, #2
 801686c:	4413      	add	r3, r2
 801686e:	00db      	lsls	r3, r3, #3
 8016870:	440b      	add	r3, r1
 8016872:	333c      	adds	r3, #60	; 0x3c
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	78fb      	ldrb	r3, [r7, #3]
 8016878:	4619      	mov	r1, r3
 801687a:	f7fa f94b 	bl	8010b14 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801687e:	bf00      	nop
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016886:	b580      	push	{r7, lr}
 8016888:	b082      	sub	sp, #8
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016894:	4618      	mov	r0, r3
 8016896:	f7fa fa5f 	bl	8010d58 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801689a:	bf00      	nop
 801689c:	3708      	adds	r7, #8
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}

080168a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a2:	b580      	push	{r7, lr}
 80168a4:	b084      	sub	sp, #16
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80168aa:	2301      	movs	r3, #1
 80168ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	689b      	ldr	r3, [r3, #8]
 80168b2:	2b02      	cmp	r3, #2
 80168b4:	d001      	beq.n	80168ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80168b6:	f7ef ffbd 	bl	8006834 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80168c0:	7bfa      	ldrb	r2, [r7, #15]
 80168c2:	4611      	mov	r1, r2
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7fa fa09 	bl	8010cdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7fa f9b5 	bl	8010c40 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80168d6:	bf00      	nop
 80168d8:	3710      	adds	r7, #16
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
	...

080168e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fa fa04 	bl	8010cfc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	699b      	ldr	r3, [r3, #24]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d005      	beq.n	8016908 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80168fc:	4b04      	ldr	r3, [pc, #16]	; (8016910 <HAL_PCD_SuspendCallback+0x30>)
 80168fe:	691b      	ldr	r3, [r3, #16]
 8016900:	4a03      	ldr	r2, [pc, #12]	; (8016910 <HAL_PCD_SuspendCallback+0x30>)
 8016902:	f043 0306 	orr.w	r3, r3, #6
 8016906:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8016908:	bf00      	nop
 801690a:	3708      	adds	r7, #8
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	e000ed00 	.word	0xe000ed00

08016914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	699b      	ldr	r3, [r3, #24]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d007      	beq.n	8016934 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016924:	4b08      	ldr	r3, [pc, #32]	; (8016948 <HAL_PCD_ResumeCallback+0x34>)
 8016926:	691b      	ldr	r3, [r3, #16]
 8016928:	4a07      	ldr	r2, [pc, #28]	; (8016948 <HAL_PCD_ResumeCallback+0x34>)
 801692a:	f023 0306 	bic.w	r3, r3, #6
 801692e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016930:	f000 f9fa 	bl	8016d28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801693a:	4618      	mov	r0, r3
 801693c:	f7fa f9f4 	bl	8010d28 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016940:	bf00      	nop
 8016942:	3708      	adds	r7, #8
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	e000ed00 	.word	0xe000ed00

0801694c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8016954:	4a2b      	ldr	r2, [pc, #172]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	4a29      	ldr	r2, [pc, #164]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016960:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8016964:	4b27      	ldr	r3, [pc, #156]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016966:	4a28      	ldr	r2, [pc, #160]	; (8016a08 <USBD_LL_Init+0xbc>)
 8016968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801696a:	4b26      	ldr	r3, [pc, #152]	; (8016a04 <USBD_LL_Init+0xb8>)
 801696c:	2208      	movs	r2, #8
 801696e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016970:	4b24      	ldr	r3, [pc, #144]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016972:	2202      	movs	r2, #2
 8016974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016976:	4b23      	ldr	r3, [pc, #140]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016978:	2202      	movs	r2, #2
 801697a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801697c:	4b21      	ldr	r3, [pc, #132]	; (8016a04 <USBD_LL_Init+0xb8>)
 801697e:	2200      	movs	r2, #0
 8016980:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016982:	4b20      	ldr	r3, [pc, #128]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016984:	2200      	movs	r2, #0
 8016986:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016988:	4b1e      	ldr	r3, [pc, #120]	; (8016a04 <USBD_LL_Init+0xb8>)
 801698a:	2200      	movs	r2, #0
 801698c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801698e:	4b1d      	ldr	r3, [pc, #116]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016990:	2200      	movs	r2, #0
 8016992:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016994:	481b      	ldr	r0, [pc, #108]	; (8016a04 <USBD_LL_Init+0xb8>)
 8016996:	f7f0 fe76 	bl	8007686 <HAL_PCD_Init>
 801699a:	4603      	mov	r3, r0
 801699c:	2b00      	cmp	r3, #0
 801699e:	d001      	beq.n	80169a4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80169a0:	f7ef ff48 	bl	8006834 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169aa:	2318      	movs	r3, #24
 80169ac:	2200      	movs	r2, #0
 80169ae:	2100      	movs	r1, #0
 80169b0:	f7f2 fa90 	bl	8008ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169ba:	2358      	movs	r3, #88	; 0x58
 80169bc:	2200      	movs	r2, #0
 80169be:	2180      	movs	r1, #128	; 0x80
 80169c0:	f7f2 fa88 	bl	8008ed4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169ca:	23c0      	movs	r3, #192	; 0xc0
 80169cc:	2200      	movs	r2, #0
 80169ce:	2181      	movs	r1, #129	; 0x81
 80169d0:	f7f2 fa80 	bl	8008ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80169de:	2200      	movs	r2, #0
 80169e0:	2101      	movs	r1, #1
 80169e2:	f7f2 fa77 	bl	8008ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80169f0:	2200      	movs	r2, #0
 80169f2:	2182      	movs	r1, #130	; 0x82
 80169f4:	f7f2 fa6e 	bl	8008ed4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80169f8:	2300      	movs	r3, #0
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3708      	adds	r7, #8
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
 8016a02:	bf00      	nop
 8016a04:	20004598 	.word	0x20004598
 8016a08:	40005c00 	.word	0x40005c00

08016a0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b084      	sub	sp, #16
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a14:	2300      	movs	r3, #0
 8016a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7f0 ff14 	bl	8007850 <HAL_PCD_Start>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a2c:	7bfb      	ldrb	r3, [r7, #15]
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f000 f980 	bl	8016d34 <USBD_Get_USB_Status>
 8016a34:	4603      	mov	r3, r0
 8016a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	3710      	adds	r7, #16
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}

08016a42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a42:	b580      	push	{r7, lr}
 8016a44:	b084      	sub	sp, #16
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
 8016a4a:	4608      	mov	r0, r1
 8016a4c:	4611      	mov	r1, r2
 8016a4e:	461a      	mov	r2, r3
 8016a50:	4603      	mov	r3, r0
 8016a52:	70fb      	strb	r3, [r7, #3]
 8016a54:	460b      	mov	r3, r1
 8016a56:	70bb      	strb	r3, [r7, #2]
 8016a58:	4613      	mov	r3, r2
 8016a5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a60:	2300      	movs	r3, #0
 8016a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a6a:	78bb      	ldrb	r3, [r7, #2]
 8016a6c:	883a      	ldrh	r2, [r7, #0]
 8016a6e:	78f9      	ldrb	r1, [r7, #3]
 8016a70:	f7f1 f883 	bl	8007b7a <HAL_PCD_EP_Open>
 8016a74:	4603      	mov	r3, r0
 8016a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a78:	7bfb      	ldrb	r3, [r7, #15]
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f000 f95a 	bl	8016d34 <USBD_Get_USB_Status>
 8016a80:	4603      	mov	r3, r0
 8016a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3710      	adds	r7, #16
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a8e:	b580      	push	{r7, lr}
 8016a90:	b084      	sub	sp, #16
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
 8016a96:	460b      	mov	r3, r1
 8016a98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016aa8:	78fa      	ldrb	r2, [r7, #3]
 8016aaa:	4611      	mov	r1, r2
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7f1 f8ca 	bl	8007c46 <HAL_PCD_EP_Close>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ab6:	7bfb      	ldrb	r3, [r7, #15]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f000 f93b 	bl	8016d34 <USBD_Get_USB_Status>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3710      	adds	r7, #16
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}

08016acc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b084      	sub	sp, #16
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016adc:	2300      	movs	r3, #0
 8016ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ae6:	78fa      	ldrb	r2, [r7, #3]
 8016ae8:	4611      	mov	r1, r2
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7f1 f98b 	bl	8007e06 <HAL_PCD_EP_SetStall>
 8016af0:	4603      	mov	r3, r0
 8016af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016af4:	7bfb      	ldrb	r3, [r7, #15]
 8016af6:	4618      	mov	r0, r3
 8016af8:	f000 f91c 	bl	8016d34 <USBD_Get_USB_Status>
 8016afc:	4603      	mov	r3, r0
 8016afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3710      	adds	r7, #16
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}

08016b0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b0a:	b580      	push	{r7, lr}
 8016b0c:	b084      	sub	sp, #16
 8016b0e:	af00      	add	r7, sp, #0
 8016b10:	6078      	str	r0, [r7, #4]
 8016b12:	460b      	mov	r3, r1
 8016b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b16:	2300      	movs	r3, #0
 8016b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b24:	78fa      	ldrb	r2, [r7, #3]
 8016b26:	4611      	mov	r1, r2
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7f1 f9be 	bl	8007eaa <HAL_PCD_EP_ClrStall>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b32:	7bfb      	ldrb	r3, [r7, #15]
 8016b34:	4618      	mov	r0, r3
 8016b36:	f000 f8fd 	bl	8016d34 <USBD_Get_USB_Status>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3710      	adds	r7, #16
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	460b      	mov	r3, r1
 8016b52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	da0c      	bge.n	8016b7e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b64:	78fb      	ldrb	r3, [r7, #3]
 8016b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b6a:	68f9      	ldr	r1, [r7, #12]
 8016b6c:	1c5a      	adds	r2, r3, #1
 8016b6e:	4613      	mov	r3, r2
 8016b70:	009b      	lsls	r3, r3, #2
 8016b72:	4413      	add	r3, r2
 8016b74:	00db      	lsls	r3, r3, #3
 8016b76:	440b      	add	r3, r1
 8016b78:	3302      	adds	r3, #2
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	e00b      	b.n	8016b96 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b7e:	78fb      	ldrb	r3, [r7, #3]
 8016b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b84:	68f9      	ldr	r1, [r7, #12]
 8016b86:	4613      	mov	r3, r2
 8016b88:	009b      	lsls	r3, r3, #2
 8016b8a:	4413      	add	r3, r2
 8016b8c:	00db      	lsls	r3, r3, #3
 8016b8e:	440b      	add	r3, r1
 8016b90:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8016b94:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	3714      	adds	r7, #20
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr

08016ba2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b084      	sub	sp, #16
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
 8016baa:	460b      	mov	r3, r1
 8016bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bbc:	78fa      	ldrb	r2, [r7, #3]
 8016bbe:	4611      	mov	r1, r2
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7f0 ffb5 	bl	8007b30 <HAL_PCD_SetAddress>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bca:	7bfb      	ldrb	r3, [r7, #15]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f000 f8b1 	bl	8016d34 <USBD_Get_USB_Status>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3710      	adds	r7, #16
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b086      	sub	sp, #24
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	607a      	str	r2, [r7, #4]
 8016bea:	603b      	str	r3, [r7, #0]
 8016bec:	460b      	mov	r3, r1
 8016bee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016bfe:	7af9      	ldrb	r1, [r7, #11]
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	f7f1 f8bc 	bl	8007d80 <HAL_PCD_EP_Transmit>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c0c:	7dfb      	ldrb	r3, [r7, #23]
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f000 f890 	bl	8016d34 <USBD_Get_USB_Status>
 8016c14:	4603      	mov	r3, r0
 8016c16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c18:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3718      	adds	r7, #24
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}

08016c22 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b086      	sub	sp, #24
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	60f8      	str	r0, [r7, #12]
 8016c2a:	607a      	str	r2, [r7, #4]
 8016c2c:	603b      	str	r3, [r7, #0]
 8016c2e:	460b      	mov	r3, r1
 8016c30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c32:	2300      	movs	r3, #0
 8016c34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c36:	2300      	movs	r3, #0
 8016c38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c40:	7af9      	ldrb	r1, [r7, #11]
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	f7f1 f846 	bl	8007cd6 <HAL_PCD_EP_Receive>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c4e:	7dfb      	ldrb	r3, [r7, #23]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f000 f86f 	bl	8016d34 <USBD_Get_USB_Status>
 8016c56:	4603      	mov	r3, r0
 8016c58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3718      	adds	r7, #24
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}

08016c64 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c76:	78fa      	ldrb	r2, [r7, #3]
 8016c78:	4611      	mov	r1, r2
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7f1 f868 	bl	8007d50 <HAL_PCD_EP_GetRxCount>
 8016c80:	4603      	mov	r3, r0
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3708      	adds	r7, #8
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}
	...

08016c8c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b082      	sub	sp, #8
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	460b      	mov	r3, r1
 8016c96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016c98:	78fb      	ldrb	r3, [r7, #3]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d002      	beq.n	8016ca4 <HAL_PCDEx_LPM_Callback+0x18>
 8016c9e:	2b01      	cmp	r3, #1
 8016ca0:	d013      	beq.n	8016cca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016ca2:	e023      	b.n	8016cec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	699b      	ldr	r3, [r3, #24]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d007      	beq.n	8016cbc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016cac:	f000 f83c 	bl	8016d28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016cb0:	4b10      	ldr	r3, [pc, #64]	; (8016cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016cb2:	691b      	ldr	r3, [r3, #16]
 8016cb4:	4a0f      	ldr	r2, [pc, #60]	; (8016cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016cb6:	f023 0306 	bic.w	r3, r3, #6
 8016cba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fa f830 	bl	8010d28 <USBD_LL_Resume>
    break;
 8016cc8:	e010      	b.n	8016cec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7fa f813 	bl	8010cfc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	699b      	ldr	r3, [r3, #24]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d005      	beq.n	8016cea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016cde:	4b05      	ldr	r3, [pc, #20]	; (8016cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016ce0:	691b      	ldr	r3, [r3, #16]
 8016ce2:	4a04      	ldr	r2, [pc, #16]	; (8016cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016ce4:	f043 0306 	orr.w	r3, r3, #6
 8016ce8:	6113      	str	r3, [r2, #16]
    break;
 8016cea:	bf00      	nop
}
 8016cec:	bf00      	nop
 8016cee:	3708      	adds	r7, #8
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	e000ed00 	.word	0xe000ed00

08016cf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016d00:	4b03      	ldr	r3, [pc, #12]	; (8016d10 <USBD_static_malloc+0x18>)
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	370c      	adds	r7, #12
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	2000298c 	.word	0x2000298c

08016d14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b083      	sub	sp, #12
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]

}
 8016d1c:	bf00      	nop
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr

08016d28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016d2c:	f7ef fab2 	bl	8006294 <SystemClock_Config>
}
 8016d30:	bf00      	nop
 8016d32:	bd80      	pop	{r7, pc}

08016d34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016d34:	b480      	push	{r7}
 8016d36:	b085      	sub	sp, #20
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016d42:	79fb      	ldrb	r3, [r7, #7]
 8016d44:	2b03      	cmp	r3, #3
 8016d46:	d817      	bhi.n	8016d78 <USBD_Get_USB_Status+0x44>
 8016d48:	a201      	add	r2, pc, #4	; (adr r2, 8016d50 <USBD_Get_USB_Status+0x1c>)
 8016d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d4e:	bf00      	nop
 8016d50:	08016d61 	.word	0x08016d61
 8016d54:	08016d67 	.word	0x08016d67
 8016d58:	08016d6d 	.word	0x08016d6d
 8016d5c:	08016d73 	.word	0x08016d73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016d60:	2300      	movs	r3, #0
 8016d62:	73fb      	strb	r3, [r7, #15]
    break;
 8016d64:	e00b      	b.n	8016d7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016d66:	2303      	movs	r3, #3
 8016d68:	73fb      	strb	r3, [r7, #15]
    break;
 8016d6a:	e008      	b.n	8016d7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8016d70:	e005      	b.n	8016d7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d72:	2303      	movs	r3, #3
 8016d74:	73fb      	strb	r3, [r7, #15]
    break;
 8016d76:	e002      	b.n	8016d7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016d78:	2303      	movs	r3, #3
 8016d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8016d7c:	bf00      	nop
  }
  return usb_status;
 8016d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3714      	adds	r7, #20
 8016d84:	46bd      	mov	sp, r7
 8016d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8a:	4770      	bx	lr
 8016d8c:	0000      	movs	r0, r0
	...

08016d90 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b086      	sub	sp, #24
 8016d94:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 8016d96:	2303      	movs	r3, #3
 8016d98:	73fb      	strb	r3, [r7, #15]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 8016d9a:	4b3d      	ldr	r3, [pc, #244]	; (8016e90 <BSP_GUI_LoadDataFromFlash+0x100>)
 8016d9c:	60bb      	str	r3, [r7, #8]
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016da6:	d012      	beq.n	8016dce <BSP_GUI_LoadDataFromFlash+0x3e>
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dae:	a136      	add	r1, pc, #216	; (adr r1, 8016e88 <BSP_GUI_LoadDataFromFlash+0xf8>)
 8016db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016db4:	428b      	cmp	r3, r1
 8016db6:	bf08      	it	eq
 8016db8:	4282      	cmpeq	r2, r0
 8016dba:	d008      	beq.n	8016dce <BSP_GUI_LoadDataFromFlash+0x3e>
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 8016dbc:	2318      	movs	r3, #24
 8016dbe:	9300      	str	r3, [sp, #0]
 8016dc0:	4b34      	ldr	r3, [pc, #208]	; (8016e94 <BSP_GUI_LoadDataFromFlash+0x104>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	2100      	movs	r1, #0
 8016dc6:	2006      	movs	r0, #6
 8016dc8:	f7f6 fca0 	bl	800d70c <USBPD_TRACE_Add>
    goto _exit;
 8016dcc:	e055      	b.n	8016e7a <BSP_GUI_LoadDataFromFlash+0xea>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dd6:	d04f      	beq.n	8016e78 <BSP_GUI_LoadDataFromFlash+0xe8>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 8016dd8:	4b2f      	ldr	r3, [pc, #188]	; (8016e98 <BSP_GUI_LoadDataFromFlash+0x108>)
 8016dda:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 8016ddc:	4b2f      	ldr	r3, [pc, #188]	; (8016e9c <BSP_GUI_LoadDataFromFlash+0x10c>)
 8016dde:	607b      	str	r3, [r7, #4]
    USPBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 8016de0:	2300      	movs	r3, #0
 8016de2:	73bb      	strb	r3, [r7, #14]
 8016de4:	e00d      	b.n	8016e02 <BSP_GUI_LoadDataFromFlash+0x72>
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	7bbb      	ldrb	r3, [r7, #14]
 8016dec:	00db      	lsls	r3, r3, #3
 8016dee:	fa22 f103 	lsr.w	r1, r2, r3
 8016df2:	7bbb      	ldrb	r3, [r7, #14]
 8016df4:	687a      	ldr	r2, [r7, #4]
 8016df6:	4413      	add	r3, r2
 8016df8:	b2ca      	uxtb	r2, r1
 8016dfa:	701a      	strb	r2, [r3, #0]
 8016dfc:	7bbb      	ldrb	r3, [r7, #14]
 8016dfe:	3301      	adds	r3, #1
 8016e00:	73bb      	strb	r3, [r7, #14]
 8016e02:	7bbb      	ldrb	r3, [r7, #14]
 8016e04:	2b03      	cmp	r3, #3
 8016e06:	d9ee      	bls.n	8016de6 <BSP_GUI_LoadDataFromFlash+0x56>
    _status = GUI_OK;
 8016e08:	2300      	movs	r3, #0
 8016e0a:	73fb      	strb	r3, [r7, #15]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 8016e0c:	4924      	ldr	r1, [pc, #144]	; (8016ea0 <BSP_GUI_LoadDataFromFlash+0x110>)
 8016e0e:	4825      	ldr	r0, [pc, #148]	; (8016ea4 <BSP_GUI_LoadDataFromFlash+0x114>)
 8016e10:	f000 f9fd 	bl	801720e <LoadPDOFromFlash>
 8016e14:	4603      	mov	r3, r0
 8016e16:	461a      	mov	r2, r3
 8016e18:	7bfb      	ldrb	r3, [r7, #15]
 8016e1a:	4313      	orrs	r3, r2
 8016e1c:	73fb      	strb	r3, [r7, #15]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 8016e1e:	220c      	movs	r2, #12
 8016e20:	4921      	ldr	r1, [pc, #132]	; (8016ea8 <BSP_GUI_LoadDataFromFlash+0x118>)
 8016e22:	4822      	ldr	r0, [pc, #136]	; (8016eac <BSP_GUI_LoadDataFromFlash+0x11c>)
 8016e24:	f000 fa18 	bl	8017258 <LoadSettingsFromFlash>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	7bfb      	ldrb	r3, [r7, #15]
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	73fb      	strb	r3, [r7, #15]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 8016e32:	2208      	movs	r2, #8
 8016e34:	491e      	ldr	r1, [pc, #120]	; (8016eb0 <BSP_GUI_LoadDataFromFlash+0x120>)
 8016e36:	481f      	ldr	r0, [pc, #124]	; (8016eb4 <BSP_GUI_LoadDataFromFlash+0x124>)
 8016e38:	f000 fa0e 	bl	8017258 <LoadSettingsFromFlash>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	461a      	mov	r2, r3
 8016e40:	7bfb      	ldrb	r3, [r7, #15]
 8016e42:	4313      	orrs	r3, r2
 8016e44:	73fb      	strb	r3, [r7, #15]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 8016e46:	2274      	movs	r2, #116	; 0x74
 8016e48:	491b      	ldr	r1, [pc, #108]	; (8016eb8 <BSP_GUI_LoadDataFromFlash+0x128>)
 8016e4a:	481c      	ldr	r0, [pc, #112]	; (8016ebc <BSP_GUI_LoadDataFromFlash+0x12c>)
 8016e4c:	f000 fa04 	bl	8017258 <LoadSettingsFromFlash>
 8016e50:	4603      	mov	r3, r0
 8016e52:	461a      	mov	r2, r3
 8016e54:	7bfb      	ldrb	r3, [r7, #15]
 8016e56:	4313      	orrs	r3, r2
 8016e58:	73fb      	strb	r3, [r7, #15]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 8016e5a:	4b15      	ldr	r3, [pc, #84]	; (8016eb0 <BSP_GUI_LoadDataFromFlash+0x120>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	4a16      	ldr	r2, [pc, #88]	; (8016eb8 <BSP_GUI_LoadDataFromFlash+0x128>)
 8016e60:	6553      	str	r3, [r2, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 8016e62:	4b13      	ldr	r3, [pc, #76]	; (8016eb0 <BSP_GUI_LoadDataFromFlash+0x120>)
 8016e64:	889a      	ldrh	r2, [r3, #4]
 8016e66:	4b14      	ldr	r3, [pc, #80]	; (8016eb8 <BSP_GUI_LoadDataFromFlash+0x128>)
 8016e68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 8016e6c:	4b10      	ldr	r3, [pc, #64]	; (8016eb0 <BSP_GUI_LoadDataFromFlash+0x120>)
 8016e6e:	88da      	ldrh	r2, [r3, #6]
 8016e70:	4b11      	ldr	r3, [pc, #68]	; (8016eb8 <BSP_GUI_LoadDataFromFlash+0x128>)
 8016e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8016e76:	e000      	b.n	8016e7a <BSP_GUI_LoadDataFromFlash+0xea>
    goto _exit;
 8016e78:	bf00      	nop
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3710      	adds	r7, #16
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}
 8016e84:	f3af 8000 	nop.w
 8016e88:	deadf00d 	.word	0xdeadf00d
 8016e8c:	deadbabe 	.word	0xdeadbabe
 8016e90:	0807f800 	.word	0x0807f800
 8016e94:	0801ca64 	.word	0x0801ca64
 8016e98:	0807f808 	.word	0x0807f808
 8016e9c:	20000238 	.word	0x20000238
 8016ea0:	2000023c 	.word	0x2000023c
 8016ea4:	0807f830 	.word	0x0807f830
 8016ea8:	20000144 	.word	0x20000144
 8016eac:	0807f890 	.word	0x0807f890
 8016eb0:	20000150 	.word	0x20000150
 8016eb4:	0807f91c 	.word	0x0807f91c
 8016eb8:	20000158 	.word	0x20000158
 8016ebc:	0807f89c 	.word	0x0807f89c

08016ec0 <BSP_GUI_SaveDataInFlash>:

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 8016ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec4:	b08d      	sub	sp, #52	; 0x34
 8016ec6:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 8016ec8:	2300      	movs	r3, #0
 8016eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  __ASM volatile ("cpsid i" : : : "memory");
 8016ece:	b672      	cpsid	i
}
 8016ed0:	bf00      	nop

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 8016ed2:	f7ef ffcd 	bl	8006e70 <HAL_FLASH_Unlock>

  /* Erase the page associated to the GUI parameters */
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	613b      	str	r3, [r7, #16]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 8016eda:	23ff      	movs	r3, #255	; 0xff
 8016edc:	61bb      	str	r3, [r7, #24]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
 8016ede:	2302      	movs	r3, #2
 8016ee0:	617b      	str	r3, [r7, #20]
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	61fb      	str	r3, [r7, #28]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 8016ee6:	4b5e      	ldr	r3, [pc, #376]	; (8017060 <BSP_GUI_SaveDataInFlash+0x1a0>)
 8016ee8:	691b      	ldr	r3, [r3, #16]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d003      	beq.n	8016ef6 <BSP_GUI_SaveDataInFlash+0x36>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 8016eee:	4b5c      	ldr	r3, [pc, #368]	; (8017060 <BSP_GUI_SaveDataInFlash+0x1a0>)
 8016ef0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016ef4:	611a      	str	r2, [r3, #16]
  }
#endif /* FLASH_SR_OPTVERR */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 8016ef6:	f107 020c 	add.w	r2, r7, #12
 8016efa:	f107 0310 	add.w	r3, r7, #16
 8016efe:	4611      	mov	r1, r2
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f0 f8a1 	bl	8007048 <HAL_FLASHEx_Erase>
 8016f06:	4603      	mov	r3, r0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d002      	beq.n	8016f12 <BSP_GUI_SaveDataInFlash+0x52>
  {
    status = GUI_ERASE_ERROR;
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f18:	f040 8091 	bne.w	801703e <BSP_GUI_SaveDataInFlash+0x17e>
 8016f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	f040 808c 	bne.w	801703e <BSP_GUI_SaveDataInFlash+0x17e>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 8016f26:	a34c      	add	r3, pc, #304	; (adr r3, 8017058 <BSP_GUI_SaveDataInFlash+0x198>)
 8016f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2c:	494d      	ldr	r1, [pc, #308]	; (8017064 <BSP_GUI_SaveDataInFlash+0x1a4>)
 8016f2e:	2000      	movs	r0, #0
 8016f30:	f7ef ff48 	bl	8006dc4 <HAL_FLASH_Program>
 8016f34:	4603      	mov	r3, r0
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d002      	beq.n	8016f40 <BSP_GUI_SaveDataInFlash+0x80>
    {
      status = GUI_WRITE_ERROR;
 8016f3a:	2302      	movs	r3, #2
 8016f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 8016f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d14b      	bne.n	8016fe0 <BSP_GUI_SaveDataInFlash+0x120>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 8016f48:	f04f 0200 	mov.w	r2, #0
 8016f4c:	f04f 0300 	mov.w	r3, #0
 8016f50:	e9c7 2308 	strd	r2, r3, [r7, #32]
      value |= USBPD_NbPDO[0];
 8016f54:	4b44      	ldr	r3, [pc, #272]	; (8017068 <BSP_GUI_SaveDataInFlash+0x1a8>)
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	f04f 0300 	mov.w	r3, #0
 8016f5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016f62:	ea40 0602 	orr.w	r6, r0, r2
 8016f66:	603e      	str	r6, [r7, #0]
 8016f68:	430b      	orrs	r3, r1
 8016f6a:	607b      	str	r3, [r7, #4]
 8016f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f70:	e9c7 2308 	strd	r2, r3, [r7, #32]
      value |= (USBPD_NbPDO[1] << 8);
 8016f74:	4b3c      	ldr	r3, [pc, #240]	; (8017068 <BSP_GUI_SaveDataInFlash+0x1a8>)
 8016f76:	785b      	ldrb	r3, [r3, #1]
 8016f78:	021b      	lsls	r3, r3, #8
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016f80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016f84:	ea40 0a02 	orr.w	sl, r0, r2
 8016f88:	ea41 0b03 	orr.w	fp, r1, r3
 8016f8c:	e9c7 ab08 	strd	sl, fp, [r7, #32]
      value |= (USBPD_NbPDO[2] << 16);
 8016f90:	4b35      	ldr	r3, [pc, #212]	; (8017068 <BSP_GUI_SaveDataInFlash+0x1a8>)
 8016f92:	789b      	ldrb	r3, [r3, #2]
 8016f94:	041b      	lsls	r3, r3, #16
 8016f96:	461a      	mov	r2, r3
 8016f98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016f9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016fa0:	ea40 0802 	orr.w	r8, r0, r2
 8016fa4:	ea41 0903 	orr.w	r9, r1, r3
 8016fa8:	e9c7 8908 	strd	r8, r9, [r7, #32]
      value |= (USBPD_NbPDO[3] << 24);
 8016fac:	4b2e      	ldr	r3, [pc, #184]	; (8017068 <BSP_GUI_SaveDataInFlash+0x1a8>)
 8016fae:	78db      	ldrb	r3, [r3, #3]
 8016fb0:	061b      	lsls	r3, r3, #24
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016fb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016fbc:	ea40 0402 	orr.w	r4, r0, r2
 8016fc0:	ea41 0503 	orr.w	r5, r1, r3
 8016fc4:	e9c7 4508 	strd	r4, r5, [r7, #32]
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 8016fc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016fcc:	4927      	ldr	r1, [pc, #156]	; (801706c <BSP_GUI_SaveDataInFlash+0x1ac>)
 8016fce:	2000      	movs	r0, #0
 8016fd0:	f7ef fef8 	bl	8006dc4 <HAL_FLASH_Program>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d002      	beq.n	8016fe0 <BSP_GUI_SaveDataInFlash+0x120>
      {
        status = GUI_WRITE_ERROR;
 8016fda:	2302      	movs	r3, #2
 8016fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 8016fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d106      	bne.n	8016ff6 <BSP_GUI_SaveDataInFlash+0x136>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 8016fe8:	4921      	ldr	r1, [pc, #132]	; (8017070 <BSP_GUI_SaveDataInFlash+0x1b0>)
 8016fea:	4822      	ldr	r0, [pc, #136]	; (8017074 <BSP_GUI_SaveDataInFlash+0x1b4>)
 8016fec:	f000 f850 	bl	8017090 <SavePDOInFlash>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8016ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d107      	bne.n	801700e <BSP_GUI_SaveDataInFlash+0x14e>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 8016ffe:	220c      	movs	r2, #12
 8017000:	491d      	ldr	r1, [pc, #116]	; (8017078 <BSP_GUI_SaveDataInFlash+0x1b8>)
 8017002:	481e      	ldr	r0, [pc, #120]	; (801707c <BSP_GUI_SaveDataInFlash+0x1bc>)
 8017004:	f000 f89b 	bl	801713e <SaveSettingsInFlash>
 8017008:	4603      	mov	r3, r0
 801700a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 801700e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017012:	2b00      	cmp	r3, #0
 8017014:	d107      	bne.n	8017026 <BSP_GUI_SaveDataInFlash+0x166>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 8017016:	2208      	movs	r2, #8
 8017018:	4919      	ldr	r1, [pc, #100]	; (8017080 <BSP_GUI_SaveDataInFlash+0x1c0>)
 801701a:	481a      	ldr	r0, [pc, #104]	; (8017084 <BSP_GUI_SaveDataInFlash+0x1c4>)
 801701c:	f000 f88f 	bl	801713e <SaveSettingsInFlash>
 8017020:	4603      	mov	r3, r0
 8017022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8017026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801702a:	2b00      	cmp	r3, #0
 801702c:	d107      	bne.n	801703e <BSP_GUI_SaveDataInFlash+0x17e>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 801702e:	2274      	movs	r2, #116	; 0x74
 8017030:	4915      	ldr	r1, [pc, #84]	; (8017088 <BSP_GUI_SaveDataInFlash+0x1c8>)
 8017032:	4816      	ldr	r0, [pc, #88]	; (801708c <BSP_GUI_SaveDataInFlash+0x1cc>)
 8017034:	f000 f883 	bl	801713e <SaveSettingsInFlash>
 8017038:	4603      	mov	r3, r0
 801703a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 801703e:	f7ef ff39 	bl	8006eb4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8017042:	b662      	cpsie	i
}
 8017044:	bf00      	nop

  /* Enable interrupts */
  __enable_irq();

  return status;
 8017046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801704a:	4618      	mov	r0, r3
 801704c:	3734      	adds	r7, #52	; 0x34
 801704e:	46bd      	mov	sp, r7
 8017050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017054:	f3af 8000 	nop.w
 8017058:	deadf00d 	.word	0xdeadf00d
 801705c:	deadbabe 	.word	0xdeadbabe
 8017060:	40022000 	.word	0x40022000
 8017064:	0807f800 	.word	0x0807f800
 8017068:	20000238 	.word	0x20000238
 801706c:	0807f808 	.word	0x0807f808
 8017070:	2000023c 	.word	0x2000023c
 8017074:	0807f830 	.word	0x0807f830
 8017078:	20000144 	.word	0x20000144
 801707c:	0807f890 	.word	0x0807f890
 8017080:	20000150 	.word	0x20000150
 8017084:	0807f91c 	.word	0x0807f91c
 8017088:	20000158 	.word	0x20000158
 801708c:	0807f89c 	.word	0x0807f89c

08017090 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8017090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017094:	b08a      	sub	sp, #40	; 0x28
 8017096:	af00      	add	r7, sp, #0
 8017098:	6078      	str	r0, [r7, #4]
 801709a:	6039      	str	r1, [r7, #0]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 801709c:	2300      	movs	r3, #0
 801709e:	77fb      	strb	r3, [r7, #31]

  index_flash = 0U;
 80170a0:	2300      	movs	r3, #0
 80170a2:	623b      	str	r3, [r7, #32]
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 80170a4:	2300      	movs	r3, #0
 80170a6:	627b      	str	r3, [r7, #36]	; 0x24
 80170a8:	e03d      	b.n	8017126 <SavePDOInFlash+0x96>
  {
    value[0] = pListOfPDO[index];
 80170aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ac:	009b      	lsls	r3, r3, #2
 80170ae:	683a      	ldr	r2, [r7, #0]
 80170b0:	4413      	add	r3, r2
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	60bb      	str	r3, [r7, #8]
    index++;
 80170b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b8:	3301      	adds	r3, #1
 80170ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (index < USBPD_MAX_NB_PDO)
 80170bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170be:	2b06      	cmp	r3, #6
 80170c0:	d806      	bhi.n	80170d0 <SavePDOInFlash+0x40>
    {
      value[1] = pListOfPDO[index];
 80170c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c4:	009b      	lsls	r3, r3, #2
 80170c6:	683a      	ldr	r2, [r7, #0]
 80170c8:	4413      	add	r3, r2
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	60fb      	str	r3, [r7, #12]
 80170ce:	e002      	b.n	80170d6 <SavePDOInFlash+0x46>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 80170d0:	f04f 33ff 	mov.w	r3, #4294967295
 80170d4:	60fb      	str	r3, [r7, #12]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	4618      	mov	r0, r3
 80170da:	f04f 0100 	mov.w	r1, #0
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	4698      	mov	r8, r3
 80170e2:	f04f 0900 	mov.w	r9, #0
 80170e6:	f04f 0200 	mov.w	r2, #0
 80170ea:	f04f 0300 	mov.w	r3, #0
 80170ee:	4643      	mov	r3, r8
 80170f0:	2200      	movs	r2, #0
 80170f2:	ea40 0402 	orr.w	r4, r0, r2
 80170f6:	ea41 0503 	orr.w	r5, r1, r3
 80170fa:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 80170fe:	6a3b      	ldr	r3, [r7, #32]
 8017100:	00da      	lsls	r2, r3, #3
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	18d1      	adds	r1, r2, r3
 8017106:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801710a:	2000      	movs	r0, #0
 801710c:	f7ef fe5a 	bl	8006dc4 <HAL_FLASH_Program>
 8017110:	4603      	mov	r3, r0
 8017112:	2b00      	cmp	r3, #0
 8017114:	d001      	beq.n	801711a <SavePDOInFlash+0x8a>
    {
      status = GUI_WRITE_ERROR;
 8017116:	2302      	movs	r3, #2
 8017118:	77fb      	strb	r3, [r7, #31]
    }
    index_flash += 1;
 801711a:	6a3b      	ldr	r3, [r7, #32]
 801711c:	3301      	adds	r3, #1
 801711e:	623b      	str	r3, [r7, #32]
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8017120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017122:	3301      	adds	r3, #1
 8017124:	627b      	str	r3, [r7, #36]	; 0x24
 8017126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017128:	2b06      	cmp	r3, #6
 801712a:	d802      	bhi.n	8017132 <SavePDOInFlash+0xa2>
 801712c:	7ffb      	ldrb	r3, [r7, #31]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d0bb      	beq.n	80170aa <SavePDOInFlash+0x1a>
  }
  return status;
 8017132:	7ffb      	ldrb	r3, [r7, #31]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8017134:	4618      	mov	r0, r3
 8017136:	3728      	adds	r7, #40	; 0x28
 8017138:	46bd      	mov	sp, r7
 801713a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801713e <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801713e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017142:	b08c      	sub	sp, #48	; 0x30
 8017144:	af00      	add	r7, sp, #0
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	607a      	str	r2, [r7, #4]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	089b      	lsrs	r3, r3, #2
 8017150:	623b      	str	r3, [r7, #32]
  GUI_StatusTypeDef status = GUI_OK;
 8017152:	2300      	movs	r3, #0
 8017154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f003 0303 	and.w	r3, r3, #3
 801715e:	2b00      	cmp	r3, #0
 8017160:	d001      	beq.n	8017166 <SaveSettingsInFlash+0x28>
  {
    return (GUI_ERROR);
 8017162:	2303      	movs	r3, #3
 8017164:	e04e      	b.n	8017204 <SaveSettingsInFlash+0xc6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 8017166:	2300      	movs	r3, #0
 8017168:	62bb      	str	r3, [r7, #40]	; 0x28
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801716a:	2300      	movs	r3, #0
 801716c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801716e:	e03f      	b.n	80171f0 <SaveSettingsInFlash+0xb2>
  {
    value[0] = pSettings[index];
 8017170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017172:	009b      	lsls	r3, r3, #2
 8017174:	68ba      	ldr	r2, [r7, #8]
 8017176:	4413      	add	r3, r2
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	613b      	str	r3, [r7, #16]
    index++;
 801717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717e:	3301      	adds	r3, #1
 8017180:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (index < nb_u32)
 8017182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017184:	6a3b      	ldr	r3, [r7, #32]
 8017186:	429a      	cmp	r2, r3
 8017188:	d206      	bcs.n	8017198 <SaveSettingsInFlash+0x5a>
    {
      value[1] = pSettings[index];
 801718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	68ba      	ldr	r2, [r7, #8]
 8017190:	4413      	add	r3, r2
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	617b      	str	r3, [r7, #20]
 8017196:	e002      	b.n	801719e <SaveSettingsInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8017198:	f04f 33ff 	mov.w	r3, #4294967295
 801719c:	617b      	str	r3, [r7, #20]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	4618      	mov	r0, r3
 80171a2:	f04f 0100 	mov.w	r1, #0
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	4698      	mov	r8, r3
 80171aa:	f04f 0900 	mov.w	r9, #0
 80171ae:	f04f 0200 	mov.w	r2, #0
 80171b2:	f04f 0300 	mov.w	r3, #0
 80171b6:	4643      	mov	r3, r8
 80171b8:	2200      	movs	r2, #0
 80171ba:	ea40 0402 	orr.w	r4, r0, r2
 80171be:	ea41 0503 	orr.w	r5, r1, r3
 80171c2:	e9c7 4506 	strd	r4, r5, [r7, #24]

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 80171c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c8:	00da      	lsls	r2, r3, #3
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	18d1      	adds	r1, r2, r3
 80171ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80171d2:	2000      	movs	r0, #0
 80171d4:	f7ef fdf6 	bl	8006dc4 <HAL_FLASH_Program>
 80171d8:	4603      	mov	r3, r0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d002      	beq.n	80171e4 <SaveSettingsInFlash+0xa6>
    {
      status = GUI_WRITE_ERROR;
 80171de:	2302      	movs	r3, #2
 80171e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    index_flash += 1U;
 80171e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e6:	3301      	adds	r3, #1
 80171e8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 80171ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ec:	3301      	adds	r3, #1
 80171ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171f2:	6a3b      	ldr	r3, [r7, #32]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	d203      	bcs.n	8017200 <SaveSettingsInFlash+0xc2>
 80171f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d0b7      	beq.n	8017170 <SaveSettingsInFlash+0x32>
  }
  return status;
 8017200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8017204:	4618      	mov	r0, r3
 8017206:	3730      	adds	r7, #48	; 0x30
 8017208:	46bd      	mov	sp, r7
 801720a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801720e <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801720e:	b480      	push	{r7}
 8017210:	b087      	sub	sp, #28
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
 8017216:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801721c:	2303      	movs	r3, #3
 801721e:	73fb      	strb	r3, [r7, #15]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8017220:	2300      	movs	r3, #0
 8017222:	613b      	str	r3, [r7, #16]
 8017224:	e00c      	b.n	8017240 <LoadPDOFromFlash+0x32>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 8017226:	697a      	ldr	r2, [r7, #20]
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	6839      	ldr	r1, [r7, #0]
 801722e:	440b      	add	r3, r1
 8017230:	6812      	ldr	r2, [r2, #0]
 8017232:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	3304      	adds	r3, #4
 8017238:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	3301      	adds	r3, #1
 801723e:	613b      	str	r3, [r7, #16]
 8017240:	693b      	ldr	r3, [r7, #16]
 8017242:	2b06      	cmp	r3, #6
 8017244:	d9ef      	bls.n	8017226 <LoadPDOFromFlash+0x18>
    }
    _status = GUI_OK;
 8017246:	2300      	movs	r3, #0
 8017248:	73fb      	strb	r3, [r7, #15]
  }
  return _status;
 801724a:	7bfb      	ldrb	r3, [r7, #15]
}
 801724c:	4618      	mov	r0, r3
 801724e:	371c      	adds	r7, #28
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b086      	sub	sp, #24
 801725c:	af00      	add	r7, sp, #0
 801725e:	60f8      	str	r0, [r7, #12]
 8017260:	60b9      	str	r1, [r7, #8]
 8017262:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8017268:	2303      	movs	r3, #3
 801726a:	74fb      	strb	r3, [r7, #19]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	4619      	mov	r1, r3
 8017272:	68b8      	ldr	r0, [r7, #8]
 8017274:	f004 fb18 	bl	801b8a8 <memcpy>
    _status = GUI_OK;
 8017278:	2300      	movs	r3, #0
 801727a:	74fb      	strb	r3, [r7, #19]
  }
  return _status;
 801727c:	7cfb      	ldrb	r3, [r7, #19]
}
 801727e:	4618      	mov	r0, r3
 8017280:	3718      	adds	r7, #24
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}

08017286 <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 8017286:	b480      	push	{r7}
 8017288:	b085      	sub	sp, #20
 801728a:	af00      	add	r7, sp, #0
 801728c:	60f8      	str	r0, [r7, #12]
 801728e:	607b      	str	r3, [r7, #4]
 8017290:	460b      	mov	r3, r1
 8017292:	72fb      	strb	r3, [r7, #11]
 8017294:	4613      	mov	r3, r2
 8017296:	813b      	strh	r3, [r7, #8]
  if (Ptr == NULL)
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d101      	bne.n	80172a2 <TLV_init_encode+0x1c>
  {
    return 0xFF;  /* Buffer is NULL*/
 801729e:	23ff      	movs	r3, #255	; 0xff
 80172a0:	e044      	b.n	801732c <TLV_init_encode+0xa6>
  }
  if (SizeMax < 11U)
 80172a2:	893b      	ldrh	r3, [r7, #8]
 80172a4:	2b0a      	cmp	r3, #10
 80172a6:	d801      	bhi.n	80172ac <TLV_init_encode+0x26>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 80172a8:	23ff      	movs	r3, #255	; 0xff
 80172aa:	e03f      	b.n	801732c <TLV_init_encode+0xa6>
  }

  ToSendTLV->data = Ptr;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	687a      	ldr	r2, [r7, #4]
 80172b0:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	893a      	ldrh	r2, [r7, #8]
 80172b6:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	22fd      	movs	r2, #253	; 0xfd
 80172be:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	3301      	adds	r3, #1
 80172c6:	22fd      	movs	r2, #253	; 0xfd
 80172c8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	3302      	adds	r3, #2
 80172d0:	22fd      	movs	r2, #253	; 0xfd
 80172d2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	3303      	adds	r3, #3
 80172da:	22fd      	movs	r2, #253	; 0xfd
 80172dc:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	3304      	adds	r3, #4
 80172e4:	7afa      	ldrb	r2, [r7, #11]
 80172e6:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	3305      	adds	r3, #5
 80172ee:	2200      	movs	r2, #0
 80172f0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	3306      	adds	r3, #6
 80172f8:	2200      	movs	r2, #0
 80172fa:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	3307      	adds	r3, #7
 8017302:	22a5      	movs	r2, #165	; 0xa5
 8017304:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	3308      	adds	r3, #8
 801730c:	22a5      	movs	r2, #165	; 0xa5
 801730e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	3309      	adds	r3, #9
 8017316:	22a5      	movs	r2, #165	; 0xa5
 8017318:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	330a      	adds	r3, #10
 8017320:	22a5      	movs	r2, #165	; 0xa5
 8017322:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	2207      	movs	r2, #7
 8017328:	80da      	strh	r2, [r3, #6]

  return 0;
 801732a:	2300      	movs	r3, #0
}
 801732c:	4618      	mov	r0, r3
 801732e:	3714      	adds	r7, #20
 8017330:	46bd      	mov	sp, r7
 8017332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017336:	4770      	bx	lr

08017338 <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 8017338:	b480      	push	{r7}
 801733a:	b087      	sub	sp, #28
 801733c:	af00      	add	r7, sp, #0
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	607b      	str	r3, [r7, #4]
 8017342:	460b      	mov	r3, r1
 8017344:	72fb      	strb	r3, [r7, #11]
 8017346:	4613      	mov	r3, r2
 8017348:	813b      	strh	r3, [r7, #8]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	68fa      	ldr	r2, [r7, #12]
 8017350:	88d2      	ldrh	r2, [r2, #6]
 8017352:	4413      	add	r3, r2
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	2ba5      	cmp	r3, #165	; 0xa5
 8017358:	d002      	beq.n	8017360 <TLV_add+0x28>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801735a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801735e:	e0a3      	b.n	80174a8 <TLV_add+0x170>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	88db      	ldrh	r3, [r3, #6]
 8017364:	461a      	mov	r2, r3
 8017366:	893b      	ldrh	r3, [r7, #8]
 8017368:	4413      	add	r3, r2
 801736a:	3307      	adds	r3, #7
 801736c:	68fa      	ldr	r2, [r7, #12]
 801736e:	8892      	ldrh	r2, [r2, #4]
 8017370:	4293      	cmp	r3, r2
 8017372:	d902      	bls.n	801737a <TLV_add+0x42>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8017374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017378:	e096      	b.n	80174a8 <TLV_add+0x170>
  }
  if (ToSendTLV->data == NULL)
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d102      	bne.n	8017388 <TLV_add+0x50>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8017382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017386:	e08f      	b.n	80174a8 <TLV_add+0x170>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	88db      	ldrh	r3, [r3, #6]
 801738c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017390:	4293      	cmp	r3, r2
 8017392:	d102      	bne.n	801739a <TLV_add+0x62>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8017394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017398:	e086      	b.n	80174a8 <TLV_add+0x170>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	68fa      	ldr	r2, [r7, #12]
 80173a0:	88d2      	ldrh	r2, [r2, #6]
 80173a2:	4413      	add	r3, r2
 80173a4:	7afa      	ldrb	r2, [r7, #11]
 80173a6:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	88db      	ldrh	r3, [r3, #6]
 80173ac:	3301      	adds	r3, #1
 80173ae:	b29a      	uxth	r2, r3
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	88da      	ldrh	r2, [r3, #6]
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 80173bc:	893b      	ldrh	r3, [r7, #8]
 80173be:	0a1b      	lsrs	r3, r3, #8
 80173c0:	b299      	uxth	r1, r3
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	68fa      	ldr	r2, [r7, #12]
 80173c8:	88d2      	ldrh	r2, [r2, #6]
 80173ca:	4413      	add	r3, r2
 80173cc:	b2ca      	uxtb	r2, r1
 80173ce:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	88db      	ldrh	r3, [r3, #6]
 80173d8:	3301      	adds	r3, #1
 80173da:	4413      	add	r3, r2
 80173dc:	893a      	ldrh	r2, [r7, #8]
 80173de:	b2d2      	uxtb	r2, r2
 80173e0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	88db      	ldrh	r3, [r3, #6]
 80173e6:	3302      	adds	r3, #2
 80173e8:	b29a      	uxth	r2, r3
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 80173ee:	2300      	movs	r3, #0
 80173f0:	617b      	str	r3, [r7, #20]
 80173f2:	e012      	b.n	801741a <TLV_add+0xe2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	697b      	ldr	r3, [r7, #20]
 80173f8:	441a      	add	r2, r3
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	68f9      	ldr	r1, [r7, #12]
 8017400:	88c9      	ldrh	r1, [r1, #6]
 8017402:	440b      	add	r3, r1
 8017404:	7812      	ldrb	r2, [r2, #0]
 8017406:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	88db      	ldrh	r3, [r3, #6]
 801740c:	3301      	adds	r3, #1
 801740e:	b29a      	uxth	r2, r3
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	3301      	adds	r3, #1
 8017418:	617b      	str	r3, [r7, #20]
 801741a:	893b      	ldrh	r3, [r7, #8]
 801741c:	697a      	ldr	r2, [r7, #20]
 801741e:	429a      	cmp	r2, r3
 8017420:	d3e8      	bcc.n	80173f4 <TLV_add+0xbc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	68fa      	ldr	r2, [r7, #12]
 8017428:	88d2      	ldrh	r2, [r2, #6]
 801742a:	4413      	add	r3, r2
 801742c:	22a5      	movs	r2, #165	; 0xa5
 801742e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681a      	ldr	r2, [r3, #0]
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	88db      	ldrh	r3, [r3, #6]
 8017438:	3301      	adds	r3, #1
 801743a:	4413      	add	r3, r2
 801743c:	22a5      	movs	r2, #165	; 0xa5
 801743e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	88db      	ldrh	r3, [r3, #6]
 8017448:	3302      	adds	r3, #2
 801744a:	4413      	add	r3, r2
 801744c:	22a5      	movs	r2, #165	; 0xa5
 801744e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	681a      	ldr	r2, [r3, #0]
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	88db      	ldrh	r3, [r3, #6]
 8017458:	3303      	adds	r3, #3
 801745a:	4413      	add	r3, r2
 801745c:	22a5      	movs	r2, #165	; 0xa5
 801745e:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	3305      	adds	r3, #5
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	b29b      	uxth	r3, r3
 801746a:	021b      	lsls	r3, r3, #8
 801746c:	b29a      	uxth	r2, r3
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	3306      	adds	r3, #6
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	b29b      	uxth	r3, r3
 8017478:	4413      	add	r3, r2
 801747a:	b29a      	uxth	r2, r3
 801747c:	893b      	ldrh	r3, [r7, #8]
 801747e:	4413      	add	r3, r2
 8017480:	b29b      	uxth	r3, r3
 8017482:	3303      	adds	r3, #3
 8017484:	827b      	strh	r3, [r7, #18]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8017486:	8a7b      	ldrh	r3, [r7, #18]
 8017488:	0a1b      	lsrs	r3, r3, #8
 801748a:	b29a      	uxth	r2, r3
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	3305      	adds	r3, #5
 8017492:	b2d2      	uxtb	r2, r2
 8017494:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	3306      	adds	r3, #6
 801749c:	8a7a      	ldrh	r2, [r7, #18]
 801749e:	b2d2      	uxtb	r2, r2
 80174a0:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 80174a2:	893b      	ldrh	r3, [r7, #8]
 80174a4:	3303      	adds	r3, #3
 80174a6:	b29b      	uxth	r3, r3
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	371c      	adds	r7, #28
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 80174b4:	b480      	push	{r7}
 80174b6:	b087      	sub	sp, #28
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	60f8      	str	r0, [r7, #12]
 80174bc:	60b9      	str	r1, [r7, #8]
 80174be:	4613      	mov	r3, r2
 80174c0:	80fb      	strh	r3, [r7, #6]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	68fa      	ldr	r2, [r7, #12]
 80174c8:	88d2      	ldrh	r2, [r2, #6]
 80174ca:	4413      	add	r3, r2
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2ba5      	cmp	r3, #165	; 0xa5
 80174d0:	d002      	beq.n	80174d8 <TLV_addValue+0x24>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 80174d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174d6:	e077      	b.n	80175c8 <TLV_addValue+0x114>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	88db      	ldrh	r3, [r3, #6]
 80174dc:	461a      	mov	r2, r3
 80174de:	88fb      	ldrh	r3, [r7, #6]
 80174e0:	4413      	add	r3, r2
 80174e2:	3307      	adds	r3, #7
 80174e4:	68fa      	ldr	r2, [r7, #12]
 80174e6:	8892      	ldrh	r2, [r2, #4]
 80174e8:	4293      	cmp	r3, r2
 80174ea:	d902      	bls.n	80174f2 <TLV_addValue+0x3e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 80174ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174f0:	e06a      	b.n	80175c8 <TLV_addValue+0x114>
  }
  if (ToSendTLV->data == NULL)
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d102      	bne.n	8017500 <TLV_addValue+0x4c>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 80174fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174fe:	e063      	b.n	80175c8 <TLV_addValue+0x114>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	88db      	ldrh	r3, [r3, #6]
 8017504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017508:	4293      	cmp	r3, r2
 801750a:	d102      	bne.n	8017512 <TLV_addValue+0x5e>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801750c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017510:	e05a      	b.n	80175c8 <TLV_addValue+0x114>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 8017512:	2300      	movs	r3, #0
 8017514:	617b      	str	r3, [r7, #20]
 8017516:	e012      	b.n	801753e <TLV_addValue+0x8a>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8017518:	68ba      	ldr	r2, [r7, #8]
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	441a      	add	r2, r3
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	68f9      	ldr	r1, [r7, #12]
 8017524:	88c9      	ldrh	r1, [r1, #6]
 8017526:	440b      	add	r3, r1
 8017528:	7812      	ldrb	r2, [r2, #0]
 801752a:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	88db      	ldrh	r3, [r3, #6]
 8017530:	3301      	adds	r3, #1
 8017532:	b29a      	uxth	r2, r3
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	3301      	adds	r3, #1
 801753c:	617b      	str	r3, [r7, #20]
 801753e:	88fb      	ldrh	r3, [r7, #6]
 8017540:	697a      	ldr	r2, [r7, #20]
 8017542:	429a      	cmp	r2, r3
 8017544:	d3e8      	bcc.n	8017518 <TLV_addValue+0x64>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	68fa      	ldr	r2, [r7, #12]
 801754c:	88d2      	ldrh	r2, [r2, #6]
 801754e:	4413      	add	r3, r2
 8017550:	22a5      	movs	r2, #165	; 0xa5
 8017552:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	681a      	ldr	r2, [r3, #0]
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	88db      	ldrh	r3, [r3, #6]
 801755c:	3301      	adds	r3, #1
 801755e:	4413      	add	r3, r2
 8017560:	22a5      	movs	r2, #165	; 0xa5
 8017562:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	88db      	ldrh	r3, [r3, #6]
 801756c:	3302      	adds	r3, #2
 801756e:	4413      	add	r3, r2
 8017570:	22a5      	movs	r2, #165	; 0xa5
 8017572:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	88db      	ldrh	r3, [r3, #6]
 801757c:	3303      	adds	r3, #3
 801757e:	4413      	add	r3, r2
 8017580:	22a5      	movs	r2, #165	; 0xa5
 8017582:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	3305      	adds	r3, #5
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	b29b      	uxth	r3, r3
 801758e:	021b      	lsls	r3, r3, #8
 8017590:	b29a      	uxth	r2, r3
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	3306      	adds	r3, #6
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	b29b      	uxth	r3, r3
 801759c:	4413      	add	r3, r2
 801759e:	b29a      	uxth	r2, r3
 80175a0:	88fb      	ldrh	r3, [r7, #6]
 80175a2:	4413      	add	r3, r2
 80175a4:	827b      	strh	r3, [r7, #18]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 80175a6:	8a7b      	ldrh	r3, [r7, #18]
 80175a8:	0a1b      	lsrs	r3, r3, #8
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	3305      	adds	r3, #5
 80175b2:	b2d2      	uxtb	r2, r2
 80175b4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	3306      	adds	r3, #6
 80175bc:	8a7a      	ldrh	r2, [r7, #18]
 80175be:	b2d2      	uxtb	r2, r2
 80175c0:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 80175c2:	88fb      	ldrh	r3, [r7, #6]
 80175c4:	3303      	adds	r3, #3
 80175c6:	b29b      	uxth	r3, r3
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	371c      	adds	r7, #28
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b083      	sub	sp, #12
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2200      	movs	r2, #0
 80175e0:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175e8:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2200      	movs	r2, #0
 80175ee:	809a      	strh	r2, [r3, #4]
}
 80175f0:	bf00      	nop
 80175f2:	370c      	adds	r7, #12
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d101      	bne.n	8017610 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 801760c:	23ff      	movs	r3, #255	; 0xff
 801760e:	e01d      	b.n	801764c <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	2bfd      	cmp	r3, #253	; 0xfd
 8017616:	d10e      	bne.n	8017636 <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	3301      	adds	r3, #1
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	2bfd      	cmp	r3, #253	; 0xfd
 8017620:	d109      	bne.n	8017636 <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	3302      	adds	r3, #2
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	2bfd      	cmp	r3, #253	; 0xfd
 801762a:	d104      	bne.n	8017636 <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	3303      	adds	r3, #3
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	2bfd      	cmp	r3, #253	; 0xfd
 8017634:	d001      	beq.n	801763a <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 8017636:	23ff      	movs	r3, #255	; 0xff
 8017638:	e008      	b.n	801764c <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	683a      	ldr	r2, [r7, #0]
 801763e:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2207      	movs	r2, #7
 8017644:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	889b      	ldrh	r3, [r3, #4]
 801764a:	b2db      	uxtb	r3, r3
}
 801764c:	4618      	mov	r0, r3
 801764e:	370c      	adds	r7, #12
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr

08017658 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 8017658:	b480      	push	{r7}
 801765a:	b085      	sub	sp, #20
 801765c:	af00      	add	r7, sp, #0
 801765e:	60f8      	str	r0, [r7, #12]
 8017660:	60b9      	str	r1, [r7, #8]
 8017662:	607a      	str	r2, [r7, #4]
 8017664:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d101      	bne.n	8017672 <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801766e:	23ff      	movs	r3, #255	; 0xff
 8017670:	e048      	b.n	8017704 <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	889b      	ldrh	r3, [r3, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d101      	bne.n	801767e <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 801767a:	23ff      	movs	r3, #255	; 0xff
 801767c:	e042      	b.n	8017704 <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	68fa      	ldr	r2, [r7, #12]
 8017684:	8892      	ldrh	r2, [r2, #4]
 8017686:	4413      	add	r3, r2
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	2ba5      	cmp	r3, #165	; 0xa5
 801768c:	d101      	bne.n	8017692 <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 801768e:	23ff      	movs	r3, #255	; 0xff
 8017690:	e038      	b.n	8017704 <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	68fa      	ldr	r2, [r7, #12]
 8017698:	8892      	ldrh	r2, [r2, #4]
 801769a:	4413      	add	r3, r2
 801769c:	781a      	ldrb	r2, [r3, #0]
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	889b      	ldrh	r3, [r3, #4]
 80176a6:	3301      	adds	r3, #1
 80176a8:	b29a      	uxth	r2, r3
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	68fa      	ldr	r2, [r7, #12]
 80176b4:	8892      	ldrh	r2, [r2, #4]
 80176b6:	4413      	add	r3, r2
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	b29b      	uxth	r3, r3
 80176bc:	021b      	lsls	r3, r3, #8
 80176be:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	6819      	ldr	r1, [r3, #0]
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	889b      	ldrh	r3, [r3, #4]
 80176c8:	3301      	adds	r3, #1
 80176ca:	440b      	add	r3, r1
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	4413      	add	r3, r2
 80176d2:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	889b      	ldrh	r3, [r3, #4]
 80176dc:	3302      	adds	r3, #2
 80176de:	b29a      	uxth	r2, r3
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	68fa      	ldr	r2, [r7, #12]
 80176ea:	8892      	ldrh	r2, [r2, #4]
 80176ec:	441a      	add	r2, r3
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	889a      	ldrh	r2, [r3, #4]
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	881b      	ldrh	r3, [r3, #0]
 80176fa:	4413      	add	r3, r2
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	809a      	strh	r2, [r3, #4]

  return 0;
 8017702:	2300      	movs	r3, #0
}
 8017704:	4618      	mov	r0, r3
 8017706:	3714      	adds	r7, #20
 8017708:	46bd      	mov	sp, r7
 801770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770e:	4770      	bx	lr

08017710 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 8017710:	b480      	push	{r7}
 8017712:	b083      	sub	sp, #12
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	2200      	movs	r2, #0
 801771c:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2200      	movs	r2, #0
 8017722:	809a      	strh	r2, [r3, #4]
}
 8017724:	bf00      	nop
 8017726:	370c      	adds	r7, #12
 8017728:	46bd      	mov	sp, r7
 801772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772e:	4770      	bx	lr

08017730 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 8017730:	b480      	push	{r7}
 8017732:	b085      	sub	sp, #20
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 8017738:	2300      	movs	r3, #0
 801773a:	73fb      	strb	r3, [r7, #15]

  while (pString[start] == TLV_SOF)
 801773c:	e002      	b.n	8017744 <TLV_get_string_length+0x14>
  {
    start++;
 801773e:	7bfb      	ldrb	r3, [r7, #15]
 8017740:	3301      	adds	r3, #1
 8017742:	73fb      	strb	r3, [r7, #15]
  while (pString[start] == TLV_SOF)
 8017744:	7bfb      	ldrb	r3, [r7, #15]
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	4413      	add	r3, r2
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	2bfd      	cmp	r3, #253	; 0xfd
 801774e:	d0f6      	beq.n	801773e <TLV_get_string_length+0xe>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 8017750:	7bfb      	ldrb	r3, [r7, #15]
 8017752:	3301      	adds	r3, #1
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	4413      	add	r3, r2
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	021b      	lsls	r3, r3, #8
 801775c:	b21a      	sxth	r2, r3
 801775e:	7bfb      	ldrb	r3, [r7, #15]
 8017760:	3302      	adds	r3, #2
 8017762:	6879      	ldr	r1, [r7, #4]
 8017764:	440b      	add	r3, r1
 8017766:	781b      	ldrb	r3, [r3, #0]
 8017768:	b21b      	sxth	r3, r3
 801776a:	4313      	orrs	r3, r2
 801776c:	b21b      	sxth	r3, r3
 801776e:	81bb      	strh	r3, [r7, #12]
  length += 3U;
 8017770:	89bb      	ldrh	r3, [r7, #12]
 8017772:	3303      	adds	r3, #3
 8017774:	81bb      	strh	r3, [r7, #12]

  return length;
 8017776:	89bb      	ldrh	r3, [r7, #12]
}
 8017778:	4618      	mov	r0, r3
 801777a:	3714      	adds	r7, #20
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b086      	sub	sp, #24
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	60b9      	str	r1, [r7, #8]
 801778e:	607a      	str	r2, [r7, #4]
 8017790:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 8017792:	2301      	movs	r3, #1
 8017794:	75fb      	strb	r3, [r7, #23]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 8017796:	f7ff fafb 	bl	8016d90 <BSP_GUI_LoadDataFromFlash>
 801779a:	4603      	mov	r3, r0
 801779c:	2b00      	cmp	r3, #0
 801779e:	bf14      	ite	ne
 80177a0:	2301      	movne	r3, #1
 80177a2:	2300      	moveq	r3, #0
 80177a4:	b2db      	uxtb	r3, r3
 80177a6:	461a      	mov	r2, r3
 80177a8:	4b3a      	ldr	r3, [pc, #232]	; (8017894 <GUI_Init+0x110>)
 80177aa:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 80177ac:	4b3a      	ldr	r3, [pc, #232]	; (8017898 <GUI_Init+0x114>)
 80177ae:	799b      	ldrb	r3, [r3, #6]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d003      	beq.n	80177bc <GUI_Init+0x38>
 80177b4:	4b38      	ldr	r3, [pc, #224]	; (8017898 <GUI_Init+0x114>)
 80177b6:	79db      	ldrb	r3, [r3, #7]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d110      	bne.n	80177de <GUI_Init+0x5a>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 80177bc:	4a37      	ldr	r2, [pc, #220]	; (801789c <GUI_Init+0x118>)
 80177be:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 80177c2:	2150      	movs	r1, #80	; 0x50
 80177c4:	f361 0347 	bfi	r3, r1, #1, #7
 80177c8:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 80177cc:	4a33      	ldr	r2, [pc, #204]	; (801789c <GUI_Init+0x118>)
 80177ce:	f892 306d 	ldrb.w	r3, [r2, #109]	; 0x6d
 80177d2:	2132      	movs	r1, #50	; 0x32
 80177d4:	f361 0306 	bfi	r3, r1, #0, #7
 80177d8:	f882 306d 	strb.w	r3, [r2, #109]	; 0x6d
 80177dc:	e02f      	b.n	801783e <GUI_Init+0xba>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80177de:	4b2e      	ldr	r3, [pc, #184]	; (8017898 <GUI_Init+0x114>)
 80177e0:	79db      	ldrb	r3, [r3, #7]
 80177e2:	461a      	mov	r2, r3
 80177e4:	2364      	movs	r3, #100	; 0x64
 80177e6:	fb03 f302 	mul.w	r3, r3, r2
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 80177ea:	4a2b      	ldr	r2, [pc, #172]	; (8017898 <GUI_Init+0x114>)
 80177ec:	79d2      	ldrb	r2, [r2, #7]
 80177ee:	4611      	mov	r1, r2
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 80177f0:	4a29      	ldr	r2, [pc, #164]	; (8017898 <GUI_Init+0x114>)
 80177f2:	7992      	ldrb	r2, [r2, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 80177f4:	440a      	add	r2, r1
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80177f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80177fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80177fe:	b2d9      	uxtb	r1, r3
 8017800:	4a26      	ldr	r2, [pc, #152]	; (801789c <GUI_Init+0x118>)
 8017802:	f892 306d 	ldrb.w	r3, [r2, #109]	; 0x6d
 8017806:	f361 0306 	bfi	r3, r1, #0, #7
 801780a:	f882 306d 	strb.w	r3, [r2, #109]	; 0x6d
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801780e:	4b22      	ldr	r3, [pc, #136]	; (8017898 <GUI_Init+0x114>)
 8017810:	79db      	ldrb	r3, [r3, #7]
 8017812:	461a      	mov	r2, r3
 8017814:	2364      	movs	r3, #100	; 0x64
 8017816:	fb03 f302 	mul.w	r3, r3, r2
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 801781a:	4a20      	ldr	r2, [pc, #128]	; (801789c <GUI_Init+0x118>)
 801781c:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8017820:	f3c2 0206 	ubfx	r2, r2, #0, #7
 8017824:	b2d2      	uxtb	r2, r2
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8017826:	fbb3 f3f2 	udiv	r3, r3, r2
 801782a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801782e:	b2d9      	uxtb	r1, r3
 8017830:	4a1a      	ldr	r2, [pc, #104]	; (801789c <GUI_Init+0x118>)
 8017832:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 8017836:	f361 0347 	bfi	r3, r1, #1, #7
 801783a:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 801783e:	4a18      	ldr	r2, [pc, #96]	; (80178a0 <GUI_Init+0x11c>)
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	6013      	str	r3, [r2, #0]
  pCB_HWPDType        = CB_HWPDType;
 8017844:	4a17      	ldr	r2, [pc, #92]	; (80178a4 <GUI_Init+0x120>)
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	6013      	str	r3, [r2, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 801784a:	4a17      	ldr	r2, [pc, #92]	; (80178a8 <GUI_Init+0x124>)
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6013      	str	r3, [r2, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 8017850:	4a16      	ldr	r2, [pc, #88]	; (80178ac <GUI_Init+0x128>)
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	6013      	str	r3, [r2, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 8017856:	4a16      	ldr	r2, [pc, #88]	; (80178b0 <GUI_Init+0x12c>)
 8017858:	4916      	ldr	r1, [pc, #88]	; (80178b4 <GUI_Init+0x130>)
 801785a:	4817      	ldr	r0, [pc, #92]	; (80178b8 <GUI_Init+0x134>)
 801785c:	f7fd fc32 	bl	80150c4 <USBPD_DPM_SetNotification_GUI>
  osMessageQDef(MsgBox, GUI_BOX_MESSAGES_MAX, uint32_t);
  osThreadDef(GUI, TaskGUI, FREERTOS_GUI_PRIORITY, 0, FREERTOS_GUI_STACK_SIZE);
  GUIMsgBox = osMessageCreate(osMessageQ(MsgBox), NULL);
  if (NULL == osThreadCreate(osThread(GUI), &GUIMsgBox))
#else
  GUIMsgBox = osMessageQueueNew(GUI_BOX_MESSAGES_MAX, sizeof(uint32_t), NULL);
 8017860:	2200      	movs	r2, #0
 8017862:	2104      	movs	r1, #4
 8017864:	201e      	movs	r0, #30
 8017866:	f7fa fa83 	bl	8011d70 <osMessageQueueNew>
 801786a:	4603      	mov	r3, r0
 801786c:	4a13      	ldr	r2, [pc, #76]	; (80178bc <GUI_Init+0x138>)
 801786e:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadNew(TaskGUI, &GUIMsgBox, &GUI_Thread_Atrr))
 8017870:	4a13      	ldr	r2, [pc, #76]	; (80178c0 <GUI_Init+0x13c>)
 8017872:	4912      	ldr	r1, [pc, #72]	; (80178bc <GUI_Init+0x138>)
 8017874:	4813      	ldr	r0, [pc, #76]	; (80178c4 <GUI_Init+0x140>)
 8017876:	f7fa f9a1 	bl	8011bbc <osThreadNew>
 801787a:	4603      	mov	r3, r0
 801787c:	2b00      	cmp	r3, #0
 801787e:	d101      	bne.n	8017884 <GUI_Init+0x100>
#endif /* osCMSIS < 0x20000U */
  {
    _status = USBPD_DISABLE;
 8017880:	2300      	movs	r3, #0
 8017882:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8017884:	b662      	cpsie	i
}
 8017886:	bf00      	nop
  UTIL_SEQ_RegTask(TASK_GUI, 0, GUI_Execute);
  UTIL_SEQ_SetTask(TASK_GUI, 0);
#endif /*USE_STM32_UTILITY_OS */
#endif /* _RTOS */

  return _status;
 8017888:	7dfb      	ldrb	r3, [r7, #23]
}
 801788a:	4618      	mov	r0, r3
 801788c:	3718      	adds	r7, #24
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	20004a9c 	.word	0x20004a9c
 8017898:	20000144 	.word	0x20000144
 801789c:	20000158 	.word	0x20000158
 80178a0:	20002bb0 	.word	0x20002bb0
 80178a4:	20002bb4 	.word	0x20002bb4
 80178a8:	20002bb8 	.word	0x20002bb8
 80178ac:	20002bbc 	.word	0x20002bbc
 80178b0:	080188ed 	.word	0x080188ed
 80178b4:	08018831 	.word	0x08018831
 80178b8:	08017bc5 	.word	0x08017bc5
 80178bc:	20004998 	.word	0x20004998
 80178c0:	200002c0 	.word	0x200002c0
 80178c4:	080178dd 	.word	0x080178dd

080178c8 <GUI_Start>:

void GUI_Start(void)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 80178cc:	4802      	ldr	r0, [pc, #8]	; (80178d8 <GUI_Start+0x10>)
 80178ce:	f003 f825 	bl	801a91c <TRACER_EMB_StartRX>
}
 80178d2:	bf00      	nop
 80178d4:	bd80      	pop	{r7, pc}
 80178d6:	bf00      	nop
 80178d8:	08017ae1 	.word	0x08017ae1

080178dc <TaskGUI>:
static void TaskGUI(void *pEvent)
#endif /* osCMSIS < 0x20000U */
#else
void GUI_Execute(void)
#endif /* _RTOS */
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b08a      	sub	sp, #40	; 0x28
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
#ifdef _RTOS
  uint32_t _timing = osWaitForever;
 80178e4:	f04f 33ff 	mov.w	r3, #4294967295
 80178e8:	627b      	str	r3, [r7, #36]	; 0x24
  osMessageQId  queue = *(osMessageQId *)pEvent;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	61fb      	str	r3, [r7, #28]

  GUI_Start();
 80178f0:	f7ff ffea 	bl	80178c8 <GUI_Start>
#if (osCMSIS < 0x20000U)
    osEvent event = osMessageGet(queue, _timing);
    switch (((GUI_USER_EVENT)event.value.v & 0xFU))
#else
    uint32_t event;
    (void)osMessageQueueGet(queue, &event, NULL, _timing);
 80178f4:	f107 0114 	add.w	r1, r7, #20
 80178f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fa:	2200      	movs	r2, #0
 80178fc:	69f8      	ldr	r0, [r7, #28]
 80178fe:	f7fa fb0b 	bl	8011f18 <osMessageQueueGet>
    switch ((GUI_USER_EVENT)(event & 0xFU))
 8017902:	697b      	ldr	r3, [r7, #20]
 8017904:	b2db      	uxtb	r3, r3
 8017906:	f003 030f 	and.w	r3, r3, #15
 801790a:	2b00      	cmp	r3, #0
 801790c:	d011      	beq.n	8017932 <TaskGUI+0x56>
 801790e:	2b01      	cmp	r3, #1
 8017910:	f040 808f 	bne.w	8017a32 <TaskGUI+0x156>
      case GUI_USER_EVENT_GUI:
      {
#if (osCMSIS < 0x20000U)
        (void)GUI_RXProcess((uint32_t)event.value.v);
#else
        (void)GUI_RXProcess((uint32_t)event);
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	4618      	mov	r0, r3
 8017918:	f000 f908 	bl	8017b2c <GUI_RXProcess>
#endif /* osCMSIS < 0x20000U */
        /* Sent an event to check if measurement report has been requested */
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
#else
        uint32_t eventtim = (uint32_t)GUI_USER_EVENT_TIMER;
 801791c:	2300      	movs	r3, #0
 801791e:	613b      	str	r3, [r7, #16]
        (void)osMessageQueuePut(GUIMsgBox, &eventtim, 0U, 0U);
 8017920:	4b46      	ldr	r3, [pc, #280]	; (8017a3c <TaskGUI+0x160>)
 8017922:	6818      	ldr	r0, [r3, #0]
 8017924:	f107 0110 	add.w	r1, r7, #16
 8017928:	2300      	movs	r3, #0
 801792a:	2200      	movs	r2, #0
 801792c:	f7fa fa94 	bl	8011e58 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
        break;
 8017930:	e080      	b.n	8017a34 <TaskGUI+0x158>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* !_RTOS */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8017932:	2300      	movs	r3, #0
 8017934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017938:	e076      	b.n	8017a28 <TaskGUI+0x14c>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 801793a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801793e:	4a40      	ldr	r2, [pc, #256]	; (8017a40 <TaskGUI+0x164>)
 8017940:	00db      	lsls	r3, r3, #3
 8017942:	4413      	add	r3, r2
 8017944:	785b      	ldrb	r3, [r3, #1]
 8017946:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801794a:	b2db      	uxtb	r3, r3
 801794c:	2b01      	cmp	r3, #1
 801794e:	d160      	bne.n	8017a12 <TaskGUI+0x136>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 8017950:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8017954:	493b      	ldr	r1, [pc, #236]	; (8017a44 <TaskGUI+0x168>)
 8017956:	4613      	mov	r3, r2
 8017958:	005b      	lsls	r3, r3, #1
 801795a:	4413      	add	r3, r2
 801795c:	005b      	lsls	r3, r3, #1
 801795e:	440b      	add	r3, r1
 8017960:	791b      	ldrb	r3, [r3, #4]
 8017962:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017966:	b2db      	uxtb	r3, r3
 8017968:	2b01      	cmp	r3, #1
 801796a:	d152      	bne.n	8017a12 <TaskGUI+0x136>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 801796c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8017970:	4934      	ldr	r1, [pc, #208]	; (8017a44 <TaskGUI+0x168>)
 8017972:	4613      	mov	r3, r2
 8017974:	005b      	lsls	r3, r3, #1
 8017976:	4413      	add	r3, r2
 8017978:	005b      	lsls	r3, r3, #1
 801797a:	440b      	add	r3, r1
 801797c:	791b      	ldrb	r3, [r3, #4]
 801797e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8017982:	b2db      	uxtb	r3, r3
 8017984:	2b00      	cmp	r3, #0
 8017986:	d044      	beq.n	8017a12 <TaskGUI+0x136>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 8017988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801798c:	4a2e      	ldr	r2, [pc, #184]	; (8017a48 <TaskGUI+0x16c>)
 801798e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017992:	b29b      	uxth	r3, r3
 8017994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017998:	d10a      	bne.n	80179b0 <TaskGUI+0xd4>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 801799a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801799e:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 80179a0:	f443 63d6 	orr.w	r3, r3, #1712	; 0x6b0
 80179a4:	f043 0301 	orr.w	r3, r3, #1
              uint32_t event_mr = GUI_USER_EVENT_GUI
 80179a8:	61bb      	str	r3, [r7, #24]
              (void)GUI_RXProcess(event_mr);
 80179aa:	69b8      	ldr	r0, [r7, #24]
 80179ac:	f000 f8be 	bl	8017b2c <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 80179b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80179b4:	4a24      	ldr	r2, [pc, #144]	; (8017a48 <TaskGUI+0x16c>)
 80179b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	dc2c      	bgt.n	8017a1e <TaskGUI+0x142>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 80179c4:	2300      	movs	r3, #0
 80179c6:	60fb      	str	r3, [r7, #12]
 80179c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80179cc:	491d      	ldr	r1, [pc, #116]	; (8017a44 <TaskGUI+0x168>)
 80179ce:	4613      	mov	r3, r2
 80179d0:	005b      	lsls	r3, r3, #1
 80179d2:	4413      	add	r3, r2
 80179d4:	005b      	lsls	r3, r3, #1
 80179d6:	440b      	add	r3, r1
 80179d8:	791b      	ldrb	r3, [r3, #4]
 80179da:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	b29b      	uxth	r3, r3
 80179e2:	461a      	mov	r2, r3
 80179e4:	0092      	lsls	r2, r2, #2
 80179e6:	4413      	add	r3, r2
 80179e8:	00db      	lsls	r3, r3, #3
 80179ea:	b29b      	uxth	r3, r3
 80179ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80179f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80179f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80179f8:	b299      	uxth	r1, r3
 80179fa:	4b13      	ldr	r3, [pc, #76]	; (8017a48 <TaskGUI+0x16c>)
 80179fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8017a00:	4b0e      	ldr	r3, [pc, #56]	; (8017a3c <TaskGUI+0x160>)
 8017a02:	6818      	ldr	r0, [r3, #0]
 8017a04:	f107 010c 	add.w	r1, r7, #12
 8017a08:	2300      	movs	r3, #0
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	f7fa fa24 	bl	8011e58 <osMessageQueuePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8017a10:	e005      	b.n	8017a1e <TaskGUI+0x142>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 8017a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a16:	4a0c      	ldr	r2, [pc, #48]	; (8017a48 <TaskGUI+0x16c>)
 8017a18:	2100      	movs	r1, #0
 8017a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8017a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a22:	3301      	adds	r3, #1
 8017a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d084      	beq.n	801793a <TaskGUI+0x5e>
          }
        }
#ifdef _RTOS
        break;
 8017a30:	e000      	b.n	8017a34 <TaskGUI+0x158>
      }

      default:
        break;
 8017a32:	bf00      	nop
    }
    _timing = CheckGUITimers();
 8017a34:	f000 f80a 	bl	8017a4c <CheckGUITimers>
 8017a38:	6278      	str	r0, [r7, #36]	; 0x24
  {
 8017a3a:	e75b      	b.n	80178f4 <TaskGUI+0x18>
 8017a3c:	20004998 	.word	0x20004998
 8017a40:	200030c0 	.word	0x200030c0
 8017a44:	20004990 	.word	0x20004990
 8017a48:	2000498c 	.word	0x2000498c

08017a4c <CheckGUITimers>:
#endif /* !_RTOS */
}

#ifdef _RTOS
static uint32_t CheckGUITimers(void)
{
 8017a4c:	b480      	push	{r7}
 8017a4e:	b085      	sub	sp, #20
 8017a50:	af00      	add	r7, sp, #0
  uint32_t _timing = osWaitForever;
 8017a52:	f04f 33ff 	mov.w	r3, #4294967295
 8017a56:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8017a58:	2300      	movs	r3, #0
 8017a5a:	72fb      	strb	r3, [r7, #11]
 8017a5c:	e013      	b.n	8017a86 <CheckGUITimers+0x3a>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 8017a5e:	7afb      	ldrb	r3, [r7, #11]
 8017a60:	4a0e      	ldr	r2, [pc, #56]	; (8017a9c <CheckGUITimers+0x50>)
 8017a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a6c:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d005      	beq.n	8017a80 <CheckGUITimers+0x34>
    {
      if (_current_timing < _timing)
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d201      	bcs.n	8017a80 <CheckGUITimers+0x34>
      {
        _timing = _current_timing;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8017a80:	7afb      	ldrb	r3, [r7, #11]
 8017a82:	3301      	adds	r3, #1
 8017a84:	72fb      	strb	r3, [r7, #11]
 8017a86:	7afb      	ldrb	r3, [r7, #11]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d0e8      	beq.n	8017a5e <CheckGUITimers+0x12>
      }
    }
  }
  return _timing;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
}
 8017a8e:	4618      	mov	r0, r3
 8017a90:	3714      	adds	r7, #20
 8017a92:	46bd      	mov	sp, r7
 8017a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a98:	4770      	bx	lr
 8017a9a:	bf00      	nop
 8017a9c:	2000498c 	.word	0x2000498c

08017aa0 <GUI_TimerCounter>:
#endif /* !_RTOS */

void GUI_TimerCounter(void)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 8017aa4:	4b0c      	ldr	r3, [pc, #48]	; (8017ad8 <GUI_TimerCounter+0x38>)
 8017aa6:	791b      	ldrb	r3, [r3, #4]
 8017aa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017aac:	b2db      	uxtb	r3, r3
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d00d      	beq.n	8017ace <GUI_TimerCounter+0x2e>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 8017ab2:	4b0a      	ldr	r3, [pc, #40]	; (8017adc <GUI_TimerCounter+0x3c>)
 8017ab4:	881b      	ldrh	r3, [r3, #0]
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d006      	beq.n	8017ace <GUI_TimerCounter+0x2e>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 8017ac0:	4b06      	ldr	r3, [pc, #24]	; (8017adc <GUI_TimerCounter+0x3c>)
 8017ac2:	881b      	ldrh	r3, [r3, #0]
 8017ac4:	b29b      	uxth	r3, r3
 8017ac6:	3b01      	subs	r3, #1
 8017ac8:	b29a      	uxth	r2, r3
 8017aca:	4b04      	ldr	r3, [pc, #16]	; (8017adc <GUI_TimerCounter+0x3c>)
 8017acc:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !_RTOS && USE_STM32_UTILITY_OS */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 8017ace:	bf00      	nop
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad6:	4770      	bx	lr
 8017ad8:	20004990 	.word	0x20004990
 8017adc:	2000498c 	.word	0x2000498c

08017ae0 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b084      	sub	sp, #16
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	460a      	mov	r2, r1
 8017aea:	71fb      	strb	r3, [r7, #7]
 8017aec:	4613      	mov	r3, r2
 8017aee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8017af0:	b672      	cpsid	i
}
 8017af2:	bf00      	nop
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 8017af4:	79ba      	ldrb	r2, [r7, #6]
 8017af6:	79fb      	ldrb	r3, [r7, #7]
 8017af8:	4611      	mov	r1, r2
 8017afa:	4618      	mov	r0, r3
 8017afc:	f000 f882 	bl	8017c04 <GUI_GetMessage>
 8017b00:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8017b02:	b662      	cpsie	i
}
 8017b04:	bf00      	nop
  __enable_irq();
  if (event == 1U)
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	2b01      	cmp	r3, #1
 8017b0a:	d109      	bne.n	8017b20 <GUI_CALLBACK_RX+0x40>
  {
#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(GUIMsgBox, GUI_USER_EVENT_GUI, 1);
#else
    uint32_t eventgui = (uint32_t)GUI_USER_EVENT_GUI;
 8017b0c:	2301      	movs	r3, #1
 8017b0e:	60bb      	str	r3, [r7, #8]
    (void)osMessageQueuePut(GUIMsgBox, &eventgui, 0U, 0U);
 8017b10:	4b05      	ldr	r3, [pc, #20]	; (8017b28 <GUI_CALLBACK_RX+0x48>)
 8017b12:	6818      	ldr	r0, [r3, #0]
 8017b14:	f107 0108 	add.w	r1, r7, #8
 8017b18:	2300      	movs	r3, #0
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	f7fa f99c 	bl	8011e58 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8017b20:	bf00      	nop
 8017b22:	3710      	adds	r7, #16
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	20004998 	.word	0x20004998

08017b2c <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 8017b2c:	b590      	push	{r4, r7, lr}
 8017b2e:	b087      	sub	sp, #28
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d11a      	bne.n	8017b74 <GUI_RXProcess+0x48>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 8017b3e:	f107 020f 	add.w	r2, r7, #15
 8017b42:	f107 0310 	add.w	r3, r7, #16
 8017b46:	4611      	mov	r1, r2
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f000 f963 	bl	8017e14 <GUI_SendAnswer>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	757b      	strb	r3, [r7, #21]

    switch (state)
 8017b52:	7d7b      	ldrb	r3, [r7, #21]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d02f      	beq.n	8017bb8 <GUI_RXProcess+0x8c>
 8017b58:	2b02      	cmp	r3, #2
 8017b5a:	d104      	bne.n	8017b66 <GUI_RXProcess+0x3a>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 8017b5c:	f7ff f9b0 	bl	8016ec0 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 8017b60:	f7ef f92b 	bl	8006dba <HAL_NVIC_SystemReset>
        break;
 8017b64:	e029      	b.n	8017bba <GUI_RXProcess+0x8e>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	7bfa      	ldrb	r2, [r7, #15]
 8017b6a:	4611      	mov	r1, r2
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f002 fe71 	bl	801a854 <TRACER_EMB_Add>
        break;
 8017b72:	e022      	b.n	8017bba <GUI_RXProcess+0x8e>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	091b      	lsrs	r3, r3, #4
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	b2db      	uxtb	r3, r3
 8017b7e:	82fb      	strh	r3, [r7, #22]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 8017b80:	8afb      	ldrh	r3, [r7, #22]
 8017b82:	2b6b      	cmp	r3, #107	; 0x6b
 8017b84:	d10d      	bne.n	8017ba2 <GUI_RXProcess+0x76>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	0e1b      	lsrs	r3, r3, #24
 8017b8a:	f003 0403 	and.w	r4, r3, #3
 8017b8e:	f7ee ffef 	bl	8006b70 <HAL_GetTick>
 8017b92:	4603      	mov	r3, r0
 8017b94:	461a      	mov	r2, r3
 8017b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	f000 f812 	bl	8017bc4 <GUI_FormatAndSendNotification>
 8017ba0:	e00b      	b.n	8017bba <GUI_RXProcess+0x8e>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	0e1b      	lsrs	r3, r3, #24
 8017ba6:	f003 0303 	and.w	r3, r3, #3
 8017baa:	8afa      	ldrh	r2, [r7, #22]
 8017bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f000 f807 	bl	8017bc4 <GUI_FormatAndSendNotification>
 8017bb6:	e000      	b.n	8017bba <GUI_RXProcess+0x8e>
        break;
 8017bb8:	bf00      	nop
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 8017bba:	2300      	movs	r3, #0
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	371c      	adds	r7, #28
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd90      	pop	{r4, r7, pc}

08017bc4 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b088      	sub	sp, #32
 8017bc8:	af02      	add	r7, sp, #8
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	b2d8      	uxtb	r0, r3
 8017bd4:	f107 0213 	add.w	r2, r7, #19
 8017bd8:	f107 0114 	add.w	r1, r7, #20
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	9300      	str	r3, [sp, #0]
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	f000 f9ff 	bl	8017fe4 <GUI_SendNotification>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d005      	beq.n	8017bf8 <GUI_FormatAndSendNotification+0x34>
  {
    TRACER_EMB_Add(msg, size);
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	7cfa      	ldrb	r2, [r7, #19]
 8017bf0:	4611      	mov	r1, r2
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f002 fe2e 	bl	801a854 <TRACER_EMB_Add>
  }
  return 0;
 8017bf8:	2300      	movs	r3, #0
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3718      	adds	r7, #24
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}
	...

08017c04 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 8017c04:	b480      	push	{r7}
 8017c06:	b085      	sub	sp, #20
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	460a      	mov	r2, r1
 8017c0e:	71fb      	strb	r3, [r7, #7]
 8017c10:	4613      	mov	r3, r2
 8017c12:	71bb      	strb	r3, [r7, #6]
  uint32_t status = 0;
 8017c14:	2300      	movs	r3, #0
 8017c16:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 8017c18:	4b79      	ldr	r3, [pc, #484]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017c1a:	881b      	ldrh	r3, [r3, #0]
 8017c1c:	2bff      	cmp	r3, #255	; 0xff
 8017c1e:	d809      	bhi.n	8017c34 <GUI_GetMessage+0x30>
  {
    PtrDataRx[cursor] = Character;
 8017c20:	4b77      	ldr	r3, [pc, #476]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017c22:	881b      	ldrh	r3, [r3, #0]
 8017c24:	4619      	mov	r1, r3
 8017c26:	4a77      	ldr	r2, [pc, #476]	; (8017e04 <GUI_GetMessage+0x200>)
 8017c28:	79fb      	ldrb	r3, [r7, #7]
 8017c2a:	5453      	strb	r3, [r2, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 8017c2c:	79bb      	ldrb	r3, [r7, #6]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d00e      	beq.n	8017c50 <GUI_GetMessage+0x4c>
 8017c32:	e00a      	b.n	8017c4a <GUI_GetMessage+0x46>
    cursor = 0U;
 8017c34:	4b72      	ldr	r3, [pc, #456]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017c36:	2200      	movs	r2, #0
 8017c38:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 8017c3a:	4b73      	ldr	r3, [pc, #460]	; (8017e08 <GUI_GetMessage+0x204>)
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8017c40:	4b72      	ldr	r3, [pc, #456]	; (8017e0c <GUI_GetMessage+0x208>)
 8017c42:	2200      	movs	r2, #0
 8017c44:	701a      	strb	r2, [r3, #0]
    return 0;
 8017c46:	2300      	movs	r3, #0
 8017c48:	e0d4      	b.n	8017df4 <GUI_GetMessage+0x1f0>
  {
    Rstate = Rerror;
 8017c4a:	4b70      	ldr	r3, [pc, #448]	; (8017e0c <GUI_GetMessage+0x208>)
 8017c4c:	2204      	movs	r2, #4
 8017c4e:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 8017c50:	4b6e      	ldr	r3, [pc, #440]	; (8017e0c <GUI_GetMessage+0x208>)
 8017c52:	781b      	ldrb	r3, [r3, #0]
 8017c54:	2b04      	cmp	r3, #4
 8017c56:	f200 80bd 	bhi.w	8017dd4 <GUI_GetMessage+0x1d0>
 8017c5a:	a201      	add	r2, pc, #4	; (adr r2, 8017c60 <GUI_GetMessage+0x5c>)
 8017c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c60:	08017c75 	.word	0x08017c75
 8017c64:	08017d0f 	.word	0x08017d0f
 8017c68:	08017cb7 	.word	0x08017cb7
 8017c6c:	08017d35 	.word	0x08017d35
 8017c70:	08017dbf 	.word	0x08017dbf
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 8017c74:	4b62      	ldr	r3, [pc, #392]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	461a      	mov	r2, r3
 8017c7a:	4b62      	ldr	r3, [pc, #392]	; (8017e04 <GUI_GetMessage+0x200>)
 8017c7c:	5c9b      	ldrb	r3, [r3, r2]
 8017c7e:	2bfd      	cmp	r3, #253	; 0xfd
 8017c80:	d106      	bne.n	8017c90 <GUI_GetMessage+0x8c>
      {
        counter++;
 8017c82:	4b61      	ldr	r3, [pc, #388]	; (8017e08 <GUI_GetMessage+0x204>)
 8017c84:	881b      	ldrh	r3, [r3, #0]
 8017c86:	3301      	adds	r3, #1
 8017c88:	b29a      	uxth	r2, r3
 8017c8a:	4b5f      	ldr	r3, [pc, #380]	; (8017e08 <GUI_GetMessage+0x204>)
 8017c8c:	801a      	strh	r2, [r3, #0]
 8017c8e:	e006      	b.n	8017c9e <GUI_GetMessage+0x9a>
      }
      else
      {
        counter = 0U;
 8017c90:	4b5d      	ldr	r3, [pc, #372]	; (8017e08 <GUI_GetMessage+0x204>)
 8017c92:	2200      	movs	r2, #0
 8017c94:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 8017c96:	4b5a      	ldr	r3, [pc, #360]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c9c:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 8017c9e:	4b5a      	ldr	r3, [pc, #360]	; (8017e08 <GUI_GetMessage+0x204>)
 8017ca0:	881b      	ldrh	r3, [r3, #0]
 8017ca2:	2b04      	cmp	r3, #4
 8017ca4:	f040 8098 	bne.w	8017dd8 <GUI_GetMessage+0x1d4>
      {
        counter = 0U;
 8017ca8:	4b57      	ldr	r3, [pc, #348]	; (8017e08 <GUI_GetMessage+0x204>)
 8017caa:	2200      	movs	r2, #0
 8017cac:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 8017cae:	4b57      	ldr	r3, [pc, #348]	; (8017e0c <GUI_GetMessage+0x208>)
 8017cb0:	2202      	movs	r2, #2
 8017cb2:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017cb4:	e090      	b.n	8017dd8 <GUI_GetMessage+0x1d4>
    case Rsize :
      counter++;
 8017cb6:	4b54      	ldr	r3, [pc, #336]	; (8017e08 <GUI_GetMessage+0x204>)
 8017cb8:	881b      	ldrh	r3, [r3, #0]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	b29a      	uxth	r2, r3
 8017cbe:	4b52      	ldr	r3, [pc, #328]	; (8017e08 <GUI_GetMessage+0x204>)
 8017cc0:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 8017cc2:	4b51      	ldr	r3, [pc, #324]	; (8017e08 <GUI_GetMessage+0x204>)
 8017cc4:	881b      	ldrh	r3, [r3, #0]
 8017cc6:	2b03      	cmp	r3, #3
 8017cc8:	f040 8088 	bne.w	8017ddc <GUI_GetMessage+0x1d8>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 8017ccc:	4b4c      	ldr	r3, [pc, #304]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017cce:	881b      	ldrh	r3, [r3, #0]
 8017cd0:	3b01      	subs	r3, #1
 8017cd2:	4a4c      	ldr	r2, [pc, #304]	; (8017e04 <GUI_GetMessage+0x200>)
 8017cd4:	5cd3      	ldrb	r3, [r2, r3]
 8017cd6:	b29b      	uxth	r3, r3
 8017cd8:	021b      	lsls	r3, r3, #8
 8017cda:	b29a      	uxth	r2, r3
 8017cdc:	4b48      	ldr	r3, [pc, #288]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017cde:	881b      	ldrh	r3, [r3, #0]
 8017ce0:	4619      	mov	r1, r3
 8017ce2:	4b48      	ldr	r3, [pc, #288]	; (8017e04 <GUI_GetMessage+0x200>)
 8017ce4:	5c5b      	ldrb	r3, [r3, r1]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	4413      	add	r3, r2
 8017cea:	b29a      	uxth	r2, r3
 8017cec:	4b48      	ldr	r3, [pc, #288]	; (8017e10 <GUI_GetMessage+0x20c>)
 8017cee:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 8017cf0:	4b47      	ldr	r3, [pc, #284]	; (8017e10 <GUI_GetMessage+0x20c>)
 8017cf2:	881b      	ldrh	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d103      	bne.n	8017d00 <GUI_GetMessage+0xfc>
        {
          Rstate = Rend;
 8017cf8:	4b44      	ldr	r3, [pc, #272]	; (8017e0c <GUI_GetMessage+0x208>)
 8017cfa:	2203      	movs	r2, #3
 8017cfc:	701a      	strb	r2, [r3, #0]
 8017cfe:	e002      	b.n	8017d06 <GUI_GetMessage+0x102>
        }
        else
        {
          Rstate = RonGoing;
 8017d00:	4b42      	ldr	r3, [pc, #264]	; (8017e0c <GUI_GetMessage+0x208>)
 8017d02:	2201      	movs	r2, #1
 8017d04:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 8017d06:	4b40      	ldr	r3, [pc, #256]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d08:	2200      	movs	r2, #0
 8017d0a:	801a      	strh	r2, [r3, #0]
      }
      break;
 8017d0c:	e066      	b.n	8017ddc <GUI_GetMessage+0x1d8>
    case RonGoing :
      counter++;
 8017d0e:	4b3e      	ldr	r3, [pc, #248]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d10:	881b      	ldrh	r3, [r3, #0]
 8017d12:	3301      	adds	r3, #1
 8017d14:	b29a      	uxth	r2, r3
 8017d16:	4b3c      	ldr	r3, [pc, #240]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d18:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 8017d1a:	4b3b      	ldr	r3, [pc, #236]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d1c:	881a      	ldrh	r2, [r3, #0]
 8017d1e:	4b3c      	ldr	r3, [pc, #240]	; (8017e10 <GUI_GetMessage+0x20c>)
 8017d20:	881b      	ldrh	r3, [r3, #0]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d15c      	bne.n	8017de0 <GUI_GetMessage+0x1dc>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 8017d26:	4b38      	ldr	r3, [pc, #224]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d28:	2200      	movs	r2, #0
 8017d2a:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 8017d2c:	4b37      	ldr	r3, [pc, #220]	; (8017e0c <GUI_GetMessage+0x208>)
 8017d2e:	2203      	movs	r2, #3
 8017d30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017d32:	e055      	b.n	8017de0 <GUI_GetMessage+0x1dc>
    case Rend :
      counter++;
 8017d34:	4b34      	ldr	r3, [pc, #208]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d36:	881b      	ldrh	r3, [r3, #0]
 8017d38:	3301      	adds	r3, #1
 8017d3a:	b29a      	uxth	r2, r3
 8017d3c:	4b32      	ldr	r3, [pc, #200]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d3e:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 8017d40:	4b2f      	ldr	r3, [pc, #188]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017d42:	881b      	ldrh	r3, [r3, #0]
 8017d44:	461a      	mov	r2, r3
 8017d46:	4b2f      	ldr	r3, [pc, #188]	; (8017e04 <GUI_GetMessage+0x200>)
 8017d48:	5c9b      	ldrb	r3, [r3, r2]
 8017d4a:	2ba5      	cmp	r3, #165	; 0xa5
 8017d4c:	d124      	bne.n	8017d98 <GUI_GetMessage+0x194>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 8017d4e:	4b2c      	ldr	r3, [pc, #176]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017d50:	881b      	ldrh	r3, [r3, #0]
 8017d52:	3b01      	subs	r3, #1
 8017d54:	4a2b      	ldr	r2, [pc, #172]	; (8017e04 <GUI_GetMessage+0x200>)
 8017d56:	5cd3      	ldrb	r3, [r2, r3]
 8017d58:	2ba5      	cmp	r3, #165	; 0xa5
 8017d5a:	d11d      	bne.n	8017d98 <GUI_GetMessage+0x194>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 8017d5c:	4b28      	ldr	r3, [pc, #160]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017d5e:	881b      	ldrh	r3, [r3, #0]
 8017d60:	3b02      	subs	r3, #2
 8017d62:	4a28      	ldr	r2, [pc, #160]	; (8017e04 <GUI_GetMessage+0x200>)
 8017d64:	5cd3      	ldrb	r3, [r2, r3]
 8017d66:	2ba5      	cmp	r3, #165	; 0xa5
 8017d68:	d116      	bne.n	8017d98 <GUI_GetMessage+0x194>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 8017d6a:	4b25      	ldr	r3, [pc, #148]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017d6c:	881b      	ldrh	r3, [r3, #0]
 8017d6e:	3b03      	subs	r3, #3
 8017d70:	4a24      	ldr	r2, [pc, #144]	; (8017e04 <GUI_GetMessage+0x200>)
 8017d72:	5cd3      	ldrb	r3, [r2, r3]
 8017d74:	2ba5      	cmp	r3, #165	; 0xa5
 8017d76:	d10f      	bne.n	8017d98 <GUI_GetMessage+0x194>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 8017d78:	4b23      	ldr	r3, [pc, #140]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d7a:	881b      	ldrh	r3, [r3, #0]
 8017d7c:	2b04      	cmp	r3, #4
 8017d7e:	d101      	bne.n	8017d84 <GUI_GetMessage+0x180>
        {
          status = 1U;
 8017d80:	2301      	movs	r3, #1
 8017d82:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 8017d84:	4b20      	ldr	r3, [pc, #128]	; (8017e08 <GUI_GetMessage+0x204>)
 8017d86:	2200      	movs	r2, #0
 8017d88:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8017d8a:	4b1d      	ldr	r3, [pc, #116]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d90:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8017d92:	4b1e      	ldr	r3, [pc, #120]	; (8017e0c <GUI_GetMessage+0x208>)
 8017d94:	2200      	movs	r2, #0
 8017d96:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 8017d98:	4b19      	ldr	r3, [pc, #100]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017d9a:	881b      	ldrh	r3, [r3, #0]
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	4b1c      	ldr	r3, [pc, #112]	; (8017e10 <GUI_GetMessage+0x20c>)
 8017da0:	881b      	ldrh	r3, [r3, #0]
 8017da2:	330b      	adds	r3, #11
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d11d      	bne.n	8017de4 <GUI_GetMessage+0x1e0>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 8017da8:	4b17      	ldr	r3, [pc, #92]	; (8017e08 <GUI_GetMessage+0x204>)
 8017daa:	2200      	movs	r2, #0
 8017dac:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8017dae:	4b14      	ldr	r3, [pc, #80]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017db4:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8017db6:	4b15      	ldr	r3, [pc, #84]	; (8017e0c <GUI_GetMessage+0x208>)
 8017db8:	2200      	movs	r2, #0
 8017dba:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017dbc:	e012      	b.n	8017de4 <GUI_GetMessage+0x1e0>
    case Rerror :
      counter = 0U;
 8017dbe:	4b12      	ldr	r3, [pc, #72]	; (8017e08 <GUI_GetMessage+0x204>)
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 8017dc4:	4b0e      	ldr	r3, [pc, #56]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017dca:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 8017dcc:	4b0f      	ldr	r3, [pc, #60]	; (8017e0c <GUI_GetMessage+0x208>)
 8017dce:	2200      	movs	r2, #0
 8017dd0:	701a      	strb	r2, [r3, #0]
      break;
 8017dd2:	e008      	b.n	8017de6 <GUI_GetMessage+0x1e2>
    default:
      break;
 8017dd4:	bf00      	nop
 8017dd6:	e006      	b.n	8017de6 <GUI_GetMessage+0x1e2>
      break;
 8017dd8:	bf00      	nop
 8017dda:	e004      	b.n	8017de6 <GUI_GetMessage+0x1e2>
      break;
 8017ddc:	bf00      	nop
 8017dde:	e002      	b.n	8017de6 <GUI_GetMessage+0x1e2>
      break;
 8017de0:	bf00      	nop
 8017de2:	e000      	b.n	8017de6 <GUI_GetMessage+0x1e2>
      break;
 8017de4:	bf00      	nop
  }

  cursor++;
 8017de6:	4b06      	ldr	r3, [pc, #24]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017de8:	881b      	ldrh	r3, [r3, #0]
 8017dea:	3301      	adds	r3, #1
 8017dec:	b29a      	uxth	r2, r3
 8017dee:	4b04      	ldr	r3, [pc, #16]	; (8017e00 <GUI_GetMessage+0x1fc>)
 8017df0:	801a      	strh	r2, [r3, #0]
  return status;
 8017df2:	68fb      	ldr	r3, [r7, #12]
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	3714      	adds	r7, #20
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfe:	4770      	bx	lr
 8017e00:	20002bc4 	.word	0x20002bc4
 8017e04:	2000499c 	.word	0x2000499c
 8017e08:	20002bc6 	.word	0x20002bc6
 8017e0c:	20002bc8 	.word	0x20002bc8
 8017e10:	20002bca 	.word	0x20002bca

08017e14 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b084      	sub	sp, #16
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 8017e1e:	4b6e      	ldr	r3, [pc, #440]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017e20:	791b      	ldrb	r3, [r3, #4]
 8017e22:	095b      	lsrs	r3, r3, #5
 8017e24:	73fb      	strb	r3, [r7, #15]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 8017e26:	4b6c      	ldr	r3, [pc, #432]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017e28:	791b      	ldrb	r3, [r3, #4]
 8017e2a:	f003 031f 	and.w	r3, r3, #31
 8017e2e:	3b01      	subs	r3, #1
 8017e30:	2b0f      	cmp	r3, #15
 8017e32:	f200 80bd 	bhi.w	8017fb0 <GUI_SendAnswer+0x19c>
 8017e36:	a201      	add	r2, pc, #4	; (adr r2, 8017e3c <GUI_SendAnswer+0x28>)
 8017e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e3c:	08017e7d 	.word	0x08017e7d
 8017e40:	08017e81 	.word	0x08017e81
 8017e44:	08017fb1 	.word	0x08017fb1
 8017e48:	08017ecf 	.word	0x08017ecf
 8017e4c:	08017fb1 	.word	0x08017fb1
 8017e50:	08017ef5 	.word	0x08017ef5
 8017e54:	08017fb1 	.word	0x08017fb1
 8017e58:	08017fb1 	.word	0x08017fb1
 8017e5c:	08017f1b 	.word	0x08017f1b
 8017e60:	08017fb1 	.word	0x08017fb1
 8017e64:	08017fb1 	.word	0x08017fb1
 8017e68:	08017fb1 	.word	0x08017fb1
 8017e6c:	08017fb1 	.word	0x08017fb1
 8017e70:	08017f41 	.word	0x08017f41
 8017e74:	08017fb1 	.word	0x08017fb1
 8017e78:	08017f8b 	.word	0x08017f8b
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 8017e7c:	2302      	movs	r3, #2
 8017e7e:	e0a6      	b.n	8017fce <GUI_SendAnswer+0x1ba>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 8017e80:	7bfb      	ldrb	r3, [r7, #15]
 8017e82:	4956      	ldr	r1, [pc, #344]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017e84:	4618      	mov	r0, r3
 8017e86:	f000 fe21 	bl	8018acc <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	4a53      	ldr	r2, [pc, #332]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017e8e:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8017e90:	4852      	ldr	r0, [pc, #328]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017e92:	f7ff fc4d 	bl	8017730 <TLV_get_string_length>
 8017e96:	4603      	mov	r3, r0
 8017e98:	b2db      	uxtb	r3, r3
 8017e9a:	3308      	adds	r3, #8
 8017e9c:	b2da      	uxtb	r2, r3
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681a      	ldr	r2, [r3, #0]
 8017ea6:	683b      	ldr	r3, [r7, #0]
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	4619      	mov	r1, r3
 8017eac:	4610      	mov	r0, r2
 8017eae:	f002 fcd1 	bl	801a854 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 8017eb2:	4b4b      	ldr	r3, [pc, #300]	; (8017fe0 <GUI_SendAnswer+0x1cc>)
 8017eb4:	2201      	movs	r2, #1
 8017eb6:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 8017eb8:	7bfb      	ldrb	r3, [r7, #15]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d105      	bne.n	8017eca <GUI_SendAnswer+0xb6>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 8017ebe:	226a      	movs	r2, #106	; 0x6a
 8017ec0:	f246 0120 	movw	r1, #24608	; 0x6020
 8017ec4:	2000      	movs	r0, #0
 8017ec6:	f7ff fe7d 	bl	8017bc4 <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	e07f      	b.n	8017fce <GUI_SendAnswer+0x1ba>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 8017ece:	7bfb      	ldrb	r3, [r7, #15]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d008      	beq.n	8017ee6 <GUI_SendAnswer+0xd2>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 8017ed4:	7bfb      	ldrb	r3, [r7, #15]
 8017ed6:	3b01      	subs	r3, #1
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	4a40      	ldr	r2, [pc, #256]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017edc:	493e      	ldr	r1, [pc, #248]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f001 fe08 	bl	8019af4 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8017ee4:	e065      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017ee6:	7bfb      	ldrb	r3, [r7, #15]
 8017ee8:	2205      	movs	r2, #5
 8017eea:	493c      	ldr	r1, [pc, #240]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017eec:	4618      	mov	r0, r3
 8017eee:	f002 f8b9 	bl	801a064 <Send_DpmConfigGetRej>
      break;
 8017ef2:	e05e      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 8017ef4:	7bfb      	ldrb	r3, [r7, #15]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d008      	beq.n	8017f0c <GUI_SendAnswer+0xf8>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 8017efa:	7bfb      	ldrb	r3, [r7, #15]
 8017efc:	3b01      	subs	r3, #1
 8017efe:	b2db      	uxtb	r3, r3
 8017f00:	4a36      	ldr	r2, [pc, #216]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f02:	4935      	ldr	r1, [pc, #212]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017f04:	4618      	mov	r0, r3
 8017f06:	f001 fa87 	bl	8019418 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8017f0a:	e052      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017f0c:	7bfb      	ldrb	r3, [r7, #15]
 8017f0e:	2205      	movs	r2, #5
 8017f10:	4932      	ldr	r1, [pc, #200]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f12:	4618      	mov	r0, r3
 8017f14:	f002 f8a6 	bl	801a064 <Send_DpmConfigGetRej>
      break;
 8017f18:	e04b      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 8017f1a:	7bfb      	ldrb	r3, [r7, #15]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d008      	beq.n	8017f32 <GUI_SendAnswer+0x11e>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 8017f20:	7bfb      	ldrb	r3, [r7, #15]
 8017f22:	3b01      	subs	r3, #1
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	4a2d      	ldr	r2, [pc, #180]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f28:	492b      	ldr	r1, [pc, #172]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f000 ff80 	bl	8018e30 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8017f30:	e03f      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017f32:	7bfb      	ldrb	r3, [r7, #15]
 8017f34:	2205      	movs	r2, #5
 8017f36:	4929      	ldr	r1, [pc, #164]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f002 f8b3 	bl	801a0a4 <Send_DpmMessageRej>
      break;
 8017f3e:	e038      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 8017f40:	7bfb      	ldrb	r3, [r7, #15]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d01a      	beq.n	8017f7c <GUI_SendAnswer+0x168>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 8017f46:	4b24      	ldr	r3, [pc, #144]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017f48:	795b      	ldrb	r3, [r3, #5]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d10c      	bne.n	8017f68 <GUI_SendAnswer+0x154>
 8017f4e:	4b22      	ldr	r3, [pc, #136]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017f50:	799b      	ldrb	r3, [r3, #6]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d108      	bne.n	8017f68 <GUI_SendAnswer+0x154>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 8017f56:	7bfb      	ldrb	r3, [r7, #15]
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	b2db      	uxtb	r3, r3
 8017f5c:	22ff      	movs	r2, #255	; 0xff
 8017f5e:	491f      	ldr	r1, [pc, #124]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f60:	4618      	mov	r0, r3
 8017f62:	f002 f8bf 	bl	801a0e4 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8017f66:	e024      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 8017f68:	7bfb      	ldrb	r3, [r7, #15]
 8017f6a:	3b01      	subs	r3, #1
 8017f6c:	b2db      	uxtb	r3, r3
 8017f6e:	4a1a      	ldr	r2, [pc, #104]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017f70:	79d2      	ldrb	r2, [r2, #7]
 8017f72:	491a      	ldr	r1, [pc, #104]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f74:	4618      	mov	r0, r3
 8017f76:	f002 f8b5 	bl	801a0e4 <Send_DpmRegisterReadCnf>
      break;
 8017f7a:	e01a      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017f7c:	7bfb      	ldrb	r3, [r7, #15]
 8017f7e:	2205      	movs	r2, #5
 8017f80:	4916      	ldr	r1, [pc, #88]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f82:	4618      	mov	r0, r3
 8017f84:	f002 f86e 	bl	801a064 <Send_DpmConfigGetRej>
      break;
 8017f88:	e013      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 8017f8a:	7bfb      	ldrb	r3, [r7, #15]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d008      	beq.n	8017fa2 <GUI_SendAnswer+0x18e>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 8017f90:	7bfb      	ldrb	r3, [r7, #15]
 8017f92:	3b01      	subs	r3, #1
 8017f94:	b2db      	uxtb	r3, r3
 8017f96:	4a10      	ldr	r2, [pc, #64]	; (8017fd8 <GUI_SendAnswer+0x1c4>)
 8017f98:	4910      	ldr	r1, [pc, #64]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f002 f9fa 	bl	801a394 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8017fa0:	e007      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017fa2:	7bfb      	ldrb	r3, [r7, #15]
 8017fa4:	2205      	movs	r2, #5
 8017fa6:	490d      	ldr	r1, [pc, #52]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f002 f85b 	bl	801a064 <Send_DpmConfigGetRej>
      break;
 8017fae:	e000      	b.n	8017fb2 <GUI_SendAnswer+0x19e>
    default :
      break;
 8017fb0:	bf00      	nop
  }

  *pMsgToSend = Processed;
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	4a09      	ldr	r2, [pc, #36]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017fb6:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8017fb8:	4808      	ldr	r0, [pc, #32]	; (8017fdc <GUI_SendAnswer+0x1c8>)
 8017fba:	f7ff fbb9 	bl	8017730 <TLV_get_string_length>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	b2db      	uxtb	r3, r3
 8017fc2:	3308      	adds	r3, #8
 8017fc4:	b2da      	uxtb	r2, r3
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 8017fca:	4b05      	ldr	r3, [pc, #20]	; (8017fe0 <GUI_SendAnswer+0x1cc>)
 8017fcc:	781b      	ldrb	r3, [r3, #0]
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3710      	adds	r7, #16
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	2000499c 	.word	0x2000499c
 8017fdc:	2000488c 	.word	0x2000488c
 8017fe0:	20002bac 	.word	0x20002bac

08017fe4 <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b0a6      	sub	sp, #152	; 0x98
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60b9      	str	r1, [r7, #8]
 8017fec:	607a      	str	r2, [r7, #4]
 8017fee:	603b      	str	r3, [r7, #0]
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	73fb      	strb	r3, [r7, #15]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8017ffa:	4bd6      	ldr	r3, [pc, #856]	; (8018354 <GUI_SendNotification+0x370>)
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	2b01      	cmp	r3, #1
 8018000:	f040 8406 	bne.w	8018810 <GUI_SendNotification+0x82c>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 8018004:	7bfb      	ldrb	r3, [r7, #15]
 8018006:	3301      	adds	r3, #1
 8018008:	b2db      	uxtb	r3, r3
 801800a:	015b      	lsls	r3, r3, #5
 801800c:	b2db      	uxtb	r3, r3
 801800e:	f043 030c 	orr.w	r3, r3, #12
 8018012:	b2d9      	uxtb	r1, r3
 8018014:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018018:	4bcf      	ldr	r3, [pc, #828]	; (8018358 <GUI_SendNotification+0x374>)
 801801a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801801e:	f7ff f932 	bl	8017286 <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	f003 0320 	and.w	r3, r3, #32
 8018028:	2b00      	cmp	r3, #0
 801802a:	f000 8087 	beq.w	801813c <GUI_SendNotification+0x158>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 801802e:	7bfb      	ldrb	r3, [r7, #15]
 8018030:	4aca      	ldr	r2, [pc, #808]	; (801835c <GUI_SendNotification+0x378>)
 8018032:	00db      	lsls	r3, r3, #3
 8018034:	4413      	add	r3, r2
 8018036:	785b      	ldrb	r3, [r3, #1]
 8018038:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801803c:	b2db      	uxtb	r3, r3
 801803e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8018042:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018046:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801804a:	2201      	movs	r2, #1
 801804c:	2105      	movs	r1, #5
 801804e:	f7ff f973 	bl	8017338 <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8018052:	7bfb      	ldrb	r3, [r7, #15]
 8018054:	4ac1      	ldr	r2, [pc, #772]	; (801835c <GUI_SendNotification+0x378>)
 8018056:	00db      	lsls	r3, r3, #3
 8018058:	4413      	add	r3, r2
 801805a:	785b      	ldrb	r3, [r3, #1]
 801805c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018060:	b2db      	uxtb	r3, r3
 8018062:	2b01      	cmp	r3, #1
 8018064:	d16a      	bne.n	801813c <GUI_SendNotification+0x158>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8018066:	7bfb      	ldrb	r3, [r7, #15]
 8018068:	4abc      	ldr	r2, [pc, #752]	; (801835c <GUI_SendNotification+0x378>)
 801806a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801806e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8018072:	b2db      	uxtb	r3, r3
 8018074:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8018078:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801807c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018080:	2201      	movs	r2, #1
 8018082:	2106      	movs	r1, #6
 8018084:	f7ff f958 	bl	8017338 <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8018088:	7bfb      	ldrb	r3, [r7, #15]
 801808a:	4ab4      	ldr	r2, [pc, #720]	; (801835c <GUI_SendNotification+0x378>)
 801808c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8018090:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018094:	b2db      	uxtb	r3, r3
 8018096:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801809a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801809e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80180a2:	2201      	movs	r2, #1
 80180a4:	2108      	movs	r1, #8
 80180a6:	f7ff f947 	bl	8017338 <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 80180aa:	2303      	movs	r3, #3
 80180ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 80180b0:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80180b4:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80180b8:	2201      	movs	r2, #1
 80180ba:	2109      	movs	r1, #9
 80180bc:	f7ff f93c 	bl	8017338 <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 80180c0:	7bfb      	ldrb	r3, [r7, #15]
 80180c2:	4aa6      	ldr	r2, [pc, #664]	; (801835c <GUI_SendNotification+0x378>)
 80180c4:	00db      	lsls	r3, r3, #3
 80180c6:	4413      	add	r3, r2
 80180c8:	785b      	ldrb	r3, [r3, #1]
 80180ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80180ce:	b2db      	uxtb	r3, r3
 80180d0:	2b03      	cmp	r3, #3
 80180d2:	d133      	bne.n	801813c <GUI_SendNotification+0x158>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 80180d4:	7bfb      	ldrb	r3, [r7, #15]
 80180d6:	4aa1      	ldr	r2, [pc, #644]	; (801835c <GUI_SendNotification+0x378>)
 80180d8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80180dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80180e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80180ea:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80180ee:	2201      	movs	r2, #1
 80180f0:	2107      	movs	r1, #7
 80180f2:	f7ff f921 	bl	8017338 <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80180f6:	7bfb      	ldrb	r3, [r7, #15]
 80180f8:	4a98      	ldr	r2, [pc, #608]	; (801835c <GUI_SendNotification+0x378>)
 80180fa:	00db      	lsls	r3, r3, #3
 80180fc:	4413      	add	r3, r2
 80180fe:	785b      	ldrb	r3, [r3, #1]
 8018100:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018104:	b2db      	uxtb	r3, r3
 8018106:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801810a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801810e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018112:	2201      	movs	r2, #1
 8018114:	210a      	movs	r1, #10
 8018116:	f7ff f90f 	bl	8017338 <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801811a:	7bfb      	ldrb	r3, [r7, #15]
 801811c:	4a8f      	ldr	r2, [pc, #572]	; (801835c <GUI_SendNotification+0x378>)
 801811e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8018122:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018126:	b2db      	uxtb	r3, r3
 8018128:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801812c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018130:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018134:	2201      	movs	r2, #1
 8018136:	210d      	movs	r1, #13
 8018138:	f7ff f8fe 	bl	8017338 <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018142:	2b00      	cmp	r3, #0
 8018144:	f000 82bd 	beq.w	80186c2 <GUI_SendNotification+0x6de>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 8018148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801814c:	2b6a      	cmp	r3, #106	; 0x6a
 801814e:	f000 8215 	beq.w	801857c <GUI_SendNotification+0x598>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 8018152:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018156:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801815a:	2201      	movs	r2, #1
 801815c:	210e      	movs	r1, #14
 801815e:	f7ff f8eb 	bl	8017338 <TLV_add>

        switch (Value)
 8018162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018166:	2b42      	cmp	r3, #66	; 0x42
 8018168:	f200 8082 	bhi.w	8018270 <GUI_SendNotification+0x28c>
 801816c:	2b07      	cmp	r3, #7
 801816e:	f0c0 82a5 	bcc.w	80186bc <GUI_SendNotification+0x6d8>
 8018172:	3b07      	subs	r3, #7
 8018174:	2b3b      	cmp	r3, #59	; 0x3b
 8018176:	f200 82a1 	bhi.w	80186bc <GUI_SendNotification+0x6d8>
 801817a:	a201      	add	r2, pc, #4	; (adr r2, 8018180 <GUI_SendNotification+0x19c>)
 801817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018180:	080182f7 	.word	0x080182f7
 8018184:	080186bd 	.word	0x080186bd
 8018188:	080186bd 	.word	0x080186bd
 801818c:	080186bd 	.word	0x080186bd
 8018190:	080186bd 	.word	0x080186bd
 8018194:	080186bd 	.word	0x080186bd
 8018198:	08018365 	.word	0x08018365
 801819c:	080186bd 	.word	0x080186bd
 80181a0:	080186bd 	.word	0x080186bd
 80181a4:	080183c1 	.word	0x080183c1
 80181a8:	080186bd 	.word	0x080186bd
 80181ac:	080186bd 	.word	0x080186bd
 80181b0:	080186bd 	.word	0x080186bd
 80181b4:	080184e1 	.word	0x080184e1
 80181b8:	080184e1 	.word	0x080184e1
 80181bc:	080186bd 	.word	0x080186bd
 80181c0:	080186bd 	.word	0x080186bd
 80181c4:	080186bd 	.word	0x080186bd
 80181c8:	080186bd 	.word	0x080186bd
 80181cc:	080186bd 	.word	0x080186bd
 80181d0:	080186bd 	.word	0x080186bd
 80181d4:	080186bd 	.word	0x080186bd
 80181d8:	080186bd 	.word	0x080186bd
 80181dc:	080186bd 	.word	0x080186bd
 80181e0:	080186bd 	.word	0x080186bd
 80181e4:	080186bd 	.word	0x080186bd
 80181e8:	080186bd 	.word	0x080186bd
 80181ec:	080186bd 	.word	0x080186bd
 80181f0:	080186bd 	.word	0x080186bd
 80181f4:	08018505 	.word	0x08018505
 80181f8:	08018505 	.word	0x08018505
 80181fc:	080186bd 	.word	0x080186bd
 8018200:	080186bd 	.word	0x080186bd
 8018204:	080186bd 	.word	0x080186bd
 8018208:	080186bd 	.word	0x080186bd
 801820c:	080186bd 	.word	0x080186bd
 8018210:	080186bd 	.word	0x080186bd
 8018214:	080186bd 	.word	0x080186bd
 8018218:	080186bd 	.word	0x080186bd
 801821c:	080186bd 	.word	0x080186bd
 8018220:	080186bd 	.word	0x080186bd
 8018224:	080186bd 	.word	0x080186bd
 8018228:	080186bd 	.word	0x080186bd
 801822c:	080186bd 	.word	0x080186bd
 8018230:	080186bd 	.word	0x080186bd
 8018234:	080186bd 	.word	0x080186bd
 8018238:	080186bd 	.word	0x080186bd
 801823c:	080186bd 	.word	0x080186bd
 8018240:	080186bd 	.word	0x080186bd
 8018244:	08018529 	.word	0x08018529
 8018248:	080186bd 	.word	0x080186bd
 801824c:	080186bd 	.word	0x080186bd
 8018250:	080186bd 	.word	0x080186bd
 8018254:	080186bd 	.word	0x080186bd
 8018258:	080186bd 	.word	0x080186bd
 801825c:	080186bd 	.word	0x080186bd
 8018260:	080186bd 	.word	0x080186bd
 8018264:	080186bd 	.word	0x080186bd
 8018268:	080186bd 	.word	0x080186bd
 801826c:	0801854d 	.word	0x0801854d
 8018270:	2b5a      	cmp	r3, #90	; 0x5a
 8018272:	f040 8223 	bne.w	80186bc <GUI_SendNotification+0x6d8>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8018276:	7bfb      	ldrb	r3, [r7, #15]
 8018278:	4a38      	ldr	r2, [pc, #224]	; (801835c <GUI_SendNotification+0x378>)
 801827a:	00db      	lsls	r3, r3, #3
 801827c:	4413      	add	r3, r2
 801827e:	785b      	ldrb	r3, [r3, #1]
 8018280:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018284:	b2db      	uxtb	r3, r3
 8018286:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801828a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801828e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018292:	2201      	movs	r2, #1
 8018294:	2105      	movs	r1, #5
 8018296:	f7ff f84f 	bl	8017338 <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 801829a:	7bfb      	ldrb	r3, [r7, #15]
 801829c:	4a2f      	ldr	r2, [pc, #188]	; (801835c <GUI_SendNotification+0x378>)
 801829e:	00db      	lsls	r3, r3, #3
 80182a0:	4413      	add	r3, r2
 80182a2:	785b      	ldrb	r3, [r3, #1]
 80182a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80182a8:	b2db      	uxtb	r3, r3
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	f040 8208 	bne.w	80186c0 <GUI_SendNotification+0x6dc>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 80182b0:	7bfb      	ldrb	r3, [r7, #15]
 80182b2:	4a2a      	ldr	r2, [pc, #168]	; (801835c <GUI_SendNotification+0x378>)
 80182b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80182b8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80182bc:	b2db      	uxtb	r3, r3
 80182be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 80182c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80182c6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80182ca:	2201      	movs	r2, #1
 80182cc:	2106      	movs	r1, #6
 80182ce:	f7ff f833 	bl	8017338 <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80182d2:	7bfb      	ldrb	r3, [r7, #15]
 80182d4:	4a21      	ldr	r2, [pc, #132]	; (801835c <GUI_SendNotification+0x378>)
 80182d6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80182da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 80182e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80182e8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80182ec:	2201      	movs	r2, #1
 80182ee:	2108      	movs	r1, #8
 80182f0:	f7ff f822 	bl	8017338 <TLV_add>
            }
            break;
 80182f4:	e1e4      	b.n	80186c0 <GUI_SendNotification+0x6dc>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 80182f6:	7bfa      	ldrb	r2, [r7, #15]
 80182f8:	4919      	ldr	r1, [pc, #100]	; (8018360 <GUI_SendNotification+0x37c>)
 80182fa:	4613      	mov	r3, r2
 80182fc:	00db      	lsls	r3, r3, #3
 80182fe:	1a9b      	subs	r3, r3, r2
 8018300:	011b      	lsls	r3, r3, #4
 8018302:	440b      	add	r3, r1
 8018304:	333c      	adds	r3, #60	; 0x3c
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	b2db      	uxtb	r3, r3
 801830a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 801830e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018312:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018316:	2201      	movs	r2, #1
 8018318:	2100      	movs	r1, #0
 801831a:	f7ff f80d 	bl	8017338 <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 801831e:	7bfa      	ldrb	r2, [r7, #15]
 8018320:	490f      	ldr	r1, [pc, #60]	; (8018360 <GUI_SendNotification+0x37c>)
 8018322:	4613      	mov	r3, r2
 8018324:	00db      	lsls	r3, r3, #3
 8018326:	1a9b      	subs	r3, r3, r2
 8018328:	011b      	lsls	r3, r3, #4
 801832a:	440b      	add	r3, r1
 801832c:	333c      	adds	r3, #60	; 0x3c
 801832e:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8018330:	b29b      	uxth	r3, r3
 8018332:	009b      	lsls	r3, r3, #2
 8018334:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8018336:	7bfa      	ldrb	r2, [r7, #15]
 8018338:	4613      	mov	r3, r2
 801833a:	00db      	lsls	r3, r3, #3
 801833c:	1a9b      	subs	r3, r3, r2
 801833e:	011b      	lsls	r3, r3, #4
 8018340:	3320      	adds	r3, #32
 8018342:	4a07      	ldr	r2, [pc, #28]	; (8018360 <GUI_SendNotification+0x37c>)
 8018344:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8018346:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801834a:	460a      	mov	r2, r1
 801834c:	2104      	movs	r1, #4
 801834e:	f7fe fff3 	bl	8017338 <TLV_add>
            break;
 8018352:	e1b6      	b.n	80186c2 <GUI_SendNotification+0x6de>
 8018354:	20002bac 	.word	0x20002bac
 8018358:	2000488c 	.word	0x2000488c
 801835c:	200030c0 	.word	0x200030c0
 8018360:	20004aa0 	.word	0x20004aa0
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8018364:	7bfa      	ldrb	r2, [r7, #15]
 8018366:	4983      	ldr	r1, [pc, #524]	; (8018574 <GUI_SendNotification+0x590>)
 8018368:	4613      	mov	r3, r2
 801836a:	00db      	lsls	r3, r3, #3
 801836c:	1a9b      	subs	r3, r3, r2
 801836e:	011b      	lsls	r3, r3, #4
 8018370:	440b      	add	r3, r1
 8018372:	331c      	adds	r3, #28
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	b2db      	uxtb	r3, r3
 8018378:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801837c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018380:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018384:	2201      	movs	r2, #1
 8018386:	2103      	movs	r1, #3
 8018388:	f7fe ffd6 	bl	8017338 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801838c:	7bfa      	ldrb	r2, [r7, #15]
 801838e:	4979      	ldr	r1, [pc, #484]	; (8018574 <GUI_SendNotification+0x590>)
 8018390:	4613      	mov	r3, r2
 8018392:	00db      	lsls	r3, r3, #3
 8018394:	1a9b      	subs	r3, r3, r2
 8018396:	011b      	lsls	r3, r3, #4
 8018398:	440b      	add	r3, r1
 801839a:	331c      	adds	r3, #28
 801839c:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801839e:	b29b      	uxth	r3, r3
 80183a0:	009b      	lsls	r3, r3, #2
 80183a2:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 80183a4:	7bfa      	ldrb	r2, [r7, #15]
 80183a6:	4613      	mov	r3, r2
 80183a8:	00db      	lsls	r3, r3, #3
 80183aa:	1a9b      	subs	r3, r3, r2
 80183ac:	011b      	lsls	r3, r3, #4
 80183ae:	4a71      	ldr	r2, [pc, #452]	; (8018574 <GUI_SendNotification+0x590>)
 80183b0:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80183b2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80183b6:	460a      	mov	r2, r1
 80183b8:	2102      	movs	r1, #2
 80183ba:	f7fe ffbd 	bl	8017338 <TLV_add>
            break;
 80183be:	e180      	b.n	80186c2 <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 80183c0:	7bfb      	ldrb	r3, [r7, #15]
 80183c2:	4a6d      	ldr	r2, [pc, #436]	; (8018578 <GUI_SendNotification+0x594>)
 80183c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80183c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80183cc:	b2db      	uxtb	r3, r3
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d12c      	bne.n	801842c <GUI_SendNotification+0x448>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80183d2:	7bfa      	ldrb	r2, [r7, #15]
 80183d4:	4967      	ldr	r1, [pc, #412]	; (8018574 <GUI_SendNotification+0x590>)
 80183d6:	4613      	mov	r3, r2
 80183d8:	00db      	lsls	r3, r3, #3
 80183da:	1a9b      	subs	r3, r3, r2
 80183dc:	011b      	lsls	r3, r3, #4
 80183de:	440b      	add	r3, r1
 80183e0:	331c      	adds	r3, #28
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 80183ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80183ee:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80183f2:	2201      	movs	r2, #1
 80183f4:	2103      	movs	r1, #3
 80183f6:	f7fe ff9f 	bl	8017338 <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 80183fa:	7bfa      	ldrb	r2, [r7, #15]
 80183fc:	495d      	ldr	r1, [pc, #372]	; (8018574 <GUI_SendNotification+0x590>)
 80183fe:	4613      	mov	r3, r2
 8018400:	00db      	lsls	r3, r3, #3
 8018402:	1a9b      	subs	r3, r3, r2
 8018404:	011b      	lsls	r3, r3, #4
 8018406:	440b      	add	r3, r1
 8018408:	331c      	adds	r3, #28
 801840a:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801840c:	b29b      	uxth	r3, r3
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8018412:	7bfa      	ldrb	r2, [r7, #15]
 8018414:	4613      	mov	r3, r2
 8018416:	00db      	lsls	r3, r3, #3
 8018418:	1a9b      	subs	r3, r3, r2
 801841a:	011b      	lsls	r3, r3, #4
 801841c:	4a55      	ldr	r2, [pc, #340]	; (8018574 <GUI_SendNotification+0x590>)
 801841e:	4413      	add	r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8018420:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018424:	460a      	mov	r2, r1
 8018426:	2102      	movs	r1, #2
 8018428:	f7fe ff86 	bl	8017338 <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 801842c:	7bfa      	ldrb	r2, [r7, #15]
 801842e:	4951      	ldr	r1, [pc, #324]	; (8018574 <GUI_SendNotification+0x590>)
 8018430:	4613      	mov	r3, r2
 8018432:	00db      	lsls	r3, r3, #3
 8018434:	1a9b      	subs	r3, r3, r2
 8018436:	011b      	lsls	r3, r3, #4
 8018438:	440b      	add	r3, r1
 801843a:	3340      	adds	r3, #64	; 0x40
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	b2db      	uxtb	r3, r3
 8018440:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8018444:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018448:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801844c:	2201      	movs	r2, #1
 801844e:	2101      	movs	r1, #1
 8018450:	f7fe ff72 	bl	8017338 <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8018454:	7bfb      	ldrb	r3, [r7, #15]
 8018456:	4a48      	ldr	r2, [pc, #288]	; (8018578 <GUI_SendNotification+0x594>)
 8018458:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801845c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018460:	b2db      	uxtb	r3, r3
 8018462:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8018466:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801846a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801846e:	2201      	movs	r2, #1
 8018470:	2107      	movs	r1, #7
 8018472:	f7fe ff61 	bl	8017338 <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8018476:	7bfb      	ldrb	r3, [r7, #15]
 8018478:	4a3f      	ldr	r2, [pc, #252]	; (8018578 <GUI_SendNotification+0x594>)
 801847a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801847e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018482:	b2db      	uxtb	r3, r3
 8018484:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8018488:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801848c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018490:	2201      	movs	r2, #1
 8018492:	2108      	movs	r1, #8
 8018494:	f7fe ff50 	bl	8017338 <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8018498:	7bfb      	ldrb	r3, [r7, #15]
 801849a:	4a37      	ldr	r2, [pc, #220]	; (8018578 <GUI_SendNotification+0x594>)
 801849c:	00db      	lsls	r3, r3, #3
 801849e:	4413      	add	r3, r2
 80184a0:	785b      	ldrb	r3, [r3, #1]
 80184a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80184a6:	b2db      	uxtb	r3, r3
 80184a8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 80184ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80184b0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80184b4:	2201      	movs	r2, #1
 80184b6:	210a      	movs	r1, #10
 80184b8:	f7fe ff3e 	bl	8017338 <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80184bc:	7bfb      	ldrb	r3, [r7, #15]
 80184be:	4a2e      	ldr	r2, [pc, #184]	; (8018578 <GUI_SendNotification+0x594>)
 80184c0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80184c4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80184ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80184d2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80184d6:	2201      	movs	r2, #1
 80184d8:	210d      	movs	r1, #13
 80184da:	f7fe ff2d 	bl	8017338 <TLV_add>
            break;
 80184de:	e0f0      	b.n	80186c2 <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80184e0:	7bfb      	ldrb	r3, [r7, #15]
 80184e2:	4a25      	ldr	r2, [pc, #148]	; (8018578 <GUI_SendNotification+0x594>)
 80184e4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80184e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 80184f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80184f6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80184fa:	2201      	movs	r2, #1
 80184fc:	2108      	movs	r1, #8
 80184fe:	f7fe ff1b 	bl	8017338 <TLV_add>
            break;
 8018502:	e0de      	b.n	80186c2 <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8018504:	7bfb      	ldrb	r3, [r7, #15]
 8018506:	4a1c      	ldr	r2, [pc, #112]	; (8018578 <GUI_SendNotification+0x594>)
 8018508:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801850c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018510:	b2db      	uxtb	r3, r3
 8018512:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8018516:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801851a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801851e:	2201      	movs	r2, #1
 8018520:	2107      	movs	r1, #7
 8018522:	f7fe ff09 	bl	8017338 <TLV_add>
            break;
 8018526:	e0cc      	b.n	80186c2 <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8018528:	7bfb      	ldrb	r3, [r7, #15]
 801852a:	4a13      	ldr	r2, [pc, #76]	; (8018578 <GUI_SendNotification+0x594>)
 801852c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8018530:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018534:	b2db      	uxtb	r3, r3
 8018536:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801853a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801853e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018542:	2201      	movs	r2, #1
 8018544:	210d      	movs	r1, #13
 8018546:	f7fe fef7 	bl	8017338 <TLV_add>
            break;
 801854a:	e0ba      	b.n	80186c2 <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 801854c:	7bfb      	ldrb	r3, [r7, #15]
 801854e:	4a0a      	ldr	r2, [pc, #40]	; (8018578 <GUI_SendNotification+0x594>)
 8018550:	00db      	lsls	r3, r3, #3
 8018552:	4413      	add	r3, r2
 8018554:	785b      	ldrb	r3, [r3, #1]
 8018556:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801855a:	b2db      	uxtb	r3, r3
 801855c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8018560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018564:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018568:	2201      	movs	r2, #1
 801856a:	210a      	movs	r1, #10
 801856c:	f7fe fee4 	bl	8017338 <TLV_add>
            break;
 8018570:	e0a7      	b.n	80186c2 <GUI_SendNotification+0x6de>
 8018572:	bf00      	nop
 8018574:	20004aa0 	.word	0x20004aa0
 8018578:	200030c0 	.word	0x200030c0
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801857c:	7bfb      	ldrb	r3, [r7, #15]
 801857e:	4aa7      	ldr	r2, [pc, #668]	; (801881c <GUI_SendNotification+0x838>)
 8018580:	00db      	lsls	r3, r3, #3
 8018582:	4413      	add	r3, r2
 8018584:	785b      	ldrb	r3, [r3, #1]
 8018586:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801858a:	b2db      	uxtb	r3, r3
 801858c:	2b01      	cmp	r3, #1
 801858e:	f040 8098 	bne.w	80186c2 <GUI_SendNotification+0x6de>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8018592:	7bfa      	ldrb	r2, [r7, #15]
 8018594:	49a2      	ldr	r1, [pc, #648]	; (8018820 <GUI_SendNotification+0x83c>)
 8018596:	4613      	mov	r3, r2
 8018598:	00db      	lsls	r3, r3, #3
 801859a:	1a9b      	subs	r3, r3, r2
 801859c:	011b      	lsls	r3, r3, #4
 801859e:	440b      	add	r3, r1
 80185a0:	333c      	adds	r3, #60	; 0x3c
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d02d      	beq.n	8018604 <GUI_SendNotification+0x620>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 80185a8:	7bfa      	ldrb	r2, [r7, #15]
 80185aa:	499d      	ldr	r1, [pc, #628]	; (8018820 <GUI_SendNotification+0x83c>)
 80185ac:	4613      	mov	r3, r2
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	1a9b      	subs	r3, r3, r2
 80185b2:	011b      	lsls	r3, r3, #4
 80185b4:	440b      	add	r3, r1
 80185b6:	333c      	adds	r3, #60	; 0x3c
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	b2db      	uxtb	r3, r3
 80185bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 80185c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80185c4:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80185c8:	2201      	movs	r2, #1
 80185ca:	2100      	movs	r1, #0
 80185cc:	f7fe feb4 	bl	8017338 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 80185d0:	7bfa      	ldrb	r2, [r7, #15]
 80185d2:	4993      	ldr	r1, [pc, #588]	; (8018820 <GUI_SendNotification+0x83c>)
 80185d4:	4613      	mov	r3, r2
 80185d6:	00db      	lsls	r3, r3, #3
 80185d8:	1a9b      	subs	r3, r3, r2
 80185da:	011b      	lsls	r3, r3, #4
 80185dc:	440b      	add	r3, r1
 80185de:	333c      	adds	r3, #60	; 0x3c
 80185e0:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80185e2:	b29b      	uxth	r3, r3
 80185e4:	009b      	lsls	r3, r3, #2
 80185e6:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 80185e8:	7bfa      	ldrb	r2, [r7, #15]
 80185ea:	4613      	mov	r3, r2
 80185ec:	00db      	lsls	r3, r3, #3
 80185ee:	1a9b      	subs	r3, r3, r2
 80185f0:	011b      	lsls	r3, r3, #4
 80185f2:	3320      	adds	r3, #32
 80185f4:	4a8a      	ldr	r2, [pc, #552]	; (8018820 <GUI_SendNotification+0x83c>)
 80185f6:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80185f8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80185fc:	460a      	mov	r2, r1
 80185fe:	2104      	movs	r1, #4
 8018600:	f7fe fe9a 	bl	8017338 <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 8018604:	7bfa      	ldrb	r2, [r7, #15]
 8018606:	4986      	ldr	r1, [pc, #536]	; (8018820 <GUI_SendNotification+0x83c>)
 8018608:	4613      	mov	r3, r2
 801860a:	00db      	lsls	r3, r3, #3
 801860c:	1a9b      	subs	r3, r3, r2
 801860e:	011b      	lsls	r3, r3, #4
 8018610:	440b      	add	r3, r1
 8018612:	3340      	adds	r3, #64	; 0x40
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	b2db      	uxtb	r3, r3
 8018618:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 801861c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018620:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018624:	2201      	movs	r2, #1
 8018626:	2101      	movs	r1, #1
 8018628:	f7fe fe86 	bl	8017338 <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 801862c:	7bfb      	ldrb	r3, [r7, #15]
 801862e:	4a7b      	ldr	r2, [pc, #492]	; (801881c <GUI_SendNotification+0x838>)
 8018630:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8018634:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018638:	b2db      	uxtb	r3, r3
 801863a:	2b00      	cmp	r3, #0
 801863c:	d12c      	bne.n	8018698 <GUI_SendNotification+0x6b4>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801863e:	7bfa      	ldrb	r2, [r7, #15]
 8018640:	4977      	ldr	r1, [pc, #476]	; (8018820 <GUI_SendNotification+0x83c>)
 8018642:	4613      	mov	r3, r2
 8018644:	00db      	lsls	r3, r3, #3
 8018646:	1a9b      	subs	r3, r3, r2
 8018648:	011b      	lsls	r3, r3, #4
 801864a:	440b      	add	r3, r1
 801864c:	331c      	adds	r3, #28
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	b2db      	uxtb	r3, r3
 8018652:	f887 3020 	strb.w	r3, [r7, #32]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8018656:	f107 0320 	add.w	r3, r7, #32
 801865a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801865e:	2201      	movs	r2, #1
 8018660:	2103      	movs	r1, #3
 8018662:	f7fe fe69 	bl	8017338 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 8018666:	7bfa      	ldrb	r2, [r7, #15]
 8018668:	496d      	ldr	r1, [pc, #436]	; (8018820 <GUI_SendNotification+0x83c>)
 801866a:	4613      	mov	r3, r2
 801866c:	00db      	lsls	r3, r3, #3
 801866e:	1a9b      	subs	r3, r3, r2
 8018670:	011b      	lsls	r3, r3, #4
 8018672:	440b      	add	r3, r1
 8018674:	331c      	adds	r3, #28
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801867a:	009b      	lsls	r3, r3, #2
 801867c:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801867e:	7bfa      	ldrb	r2, [r7, #15]
 8018680:	4613      	mov	r3, r2
 8018682:	00db      	lsls	r3, r3, #3
 8018684:	1a9b      	subs	r3, r3, r2
 8018686:	011b      	lsls	r3, r3, #4
 8018688:	4a65      	ldr	r2, [pc, #404]	; (8018820 <GUI_SendNotification+0x83c>)
 801868a:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801868c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018690:	460a      	mov	r2, r1
 8018692:	2102      	movs	r1, #2
 8018694:	f7fe fe50 	bl	8017338 <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8018698:	7bfb      	ldrb	r3, [r7, #15]
 801869a:	4a60      	ldr	r2, [pc, #384]	; (801881c <GUI_SendNotification+0x838>)
 801869c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80186a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80186a4:	b2db      	uxtb	r3, r3
 80186a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80186aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80186ae:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80186b2:	2201      	movs	r2, #1
 80186b4:	210d      	movs	r1, #13
 80186b6:	f7fe fe3f 	bl	8017338 <TLV_add>
 80186ba:	e002      	b.n	80186c2 <GUI_SendNotification+0x6de>
            break;
 80186bc:	bf00      	nop
 80186be:	e000      	b.n	80186c2 <GUI_SendNotification+0x6de>
            break;
 80186c0:	bf00      	nop
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d03a      	beq.n	8018742 <GUI_SendNotification+0x75e>
    {
      uint32_t vsense = 0;
 80186cc:	2300      	movs	r3, #0
 80186ce:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 80186d0:	2300      	movs	r3, #0
 80186d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 80186d6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80186da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80186de:	2204      	movs	r2, #4
 80186e0:	2113      	movs	r1, #19
 80186e2:	f7fe fe29 	bl	8017338 <TLV_add>

      if (NULL != pCB_GetVoltage)
 80186e6:	4b4f      	ldr	r3, [pc, #316]	; (8018824 <GUI_SendNotification+0x840>)
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d006      	beq.n	80186fc <GUI_SendNotification+0x718>
      {
        vsense = pCB_GetVoltage(PortNum);
 80186ee:	4b4d      	ldr	r3, [pc, #308]	; (8018824 <GUI_SendNotification+0x840>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	7bfa      	ldrb	r2, [r7, #15]
 80186f4:	4610      	mov	r0, r2
 80186f6:	4798      	blx	r3
 80186f8:	4603      	mov	r3, r0
 80186fa:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 80186fc:	4b49      	ldr	r3, [pc, #292]	; (8018824 <GUI_SendNotification+0x840>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d010      	beq.n	8018726 <GUI_SendNotification+0x742>
      {
        isense = pCB_GetCurrent(PortNum);
 8018704:	4b48      	ldr	r3, [pc, #288]	; (8018828 <GUI_SendNotification+0x844>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	7bfa      	ldrb	r2, [r7, #15]
 801870a:	4610      	mov	r0, r2
 801870c:	4798      	blx	r3
 801870e:	4603      	mov	r3, r0
 8018710:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        if (isense < 0)
 8018714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018718:	2b00      	cmp	r3, #0
 801871a:	da04      	bge.n	8018726 <GUI_SendNotification+0x742>
        {
          isense = -isense;
 801871c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018720:	425b      	negs	r3, r3
 8018722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 8018726:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801872a:	041a      	lsls	r2, r3, #16
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	4313      	orrs	r3, r2
 8018730:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 8018732:	f107 031c 	add.w	r3, r7, #28
 8018736:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801873a:	2204      	movs	r2, #4
 801873c:	210c      	movs	r1, #12
 801873e:	f7fe fdfb 	bl	8017338 <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018748:	2b00      	cmp	r3, #0
 801874a:	d007      	beq.n	801875c <GUI_SendNotification+0x778>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 801874c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018750:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018754:	2204      	movs	r2, #4
 8018756:	2113      	movs	r1, #19
 8018758:	f7fe fdee 	bl	8017338 <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 801875c:	683b      	ldr	r3, [r7, #0]
 801875e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018762:	2b00      	cmp	r3, #0
 8018764:	d03a      	beq.n	80187dc <GUI_SendNotification+0x7f8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8018766:	7bfb      	ldrb	r3, [r7, #15]
 8018768:	4a2c      	ldr	r2, [pc, #176]	; (801881c <GUI_SendNotification+0x838>)
 801876a:	00db      	lsls	r3, r3, #3
 801876c:	4413      	add	r3, r2
 801876e:	785b      	ldrb	r3, [r3, #1]
 8018770:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018774:	b2db      	uxtb	r3, r3
 8018776:	763b      	strb	r3, [r7, #24]
 8018778:	f107 0318 	add.w	r3, r7, #24
 801877c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018780:	2201      	movs	r2, #1
 8018782:	2105      	movs	r1, #5
 8018784:	f7fe fdd8 	bl	8017338 <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8018788:	7bfb      	ldrb	r3, [r7, #15]
 801878a:	4a24      	ldr	r2, [pc, #144]	; (801881c <GUI_SendNotification+0x838>)
 801878c:	00db      	lsls	r3, r3, #3
 801878e:	4413      	add	r3, r2
 8018790:	785b      	ldrb	r3, [r3, #1]
 8018792:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8018796:	b2db      	uxtb	r3, r3
 8018798:	2b00      	cmp	r3, #0
 801879a:	d11f      	bne.n	80187dc <GUI_SendNotification+0x7f8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801879c:	7bfb      	ldrb	r3, [r7, #15]
 801879e:	4a1f      	ldr	r2, [pc, #124]	; (801881c <GUI_SendNotification+0x838>)
 80187a0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80187a4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	753b      	strb	r3, [r7, #20]
 80187ac:	f107 0314 	add.w	r3, r7, #20
 80187b0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80187b4:	2201      	movs	r2, #1
 80187b6:	2106      	movs	r1, #6
 80187b8:	f7fe fdbe 	bl	8017338 <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80187bc:	7bfb      	ldrb	r3, [r7, #15]
 80187be:	4a17      	ldr	r2, [pc, #92]	; (801881c <GUI_SendNotification+0x838>)
 80187c0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80187c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80187c8:	b2db      	uxtb	r3, r3
 80187ca:	743b      	strb	r3, [r7, #16]
 80187cc:	f107 0310 	add.w	r3, r7, #16
 80187d0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80187d4:	2201      	movs	r2, #1
 80187d6:	2108      	movs	r1, #8
 80187d8:	f7fe fdae 	bl	8017338 <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 80187dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80187e0:	4618      	mov	r0, r3
 80187e2:	f7fe fef7 	bl	80175d4 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 80187e6:	4811      	ldr	r0, [pc, #68]	; (801882c <GUI_SendNotification+0x848>)
 80187e8:	f7fe ffa2 	bl	8017730 <TLV_get_string_length>
 80187ec:	4603      	mov	r3, r0
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d00e      	beq.n	8018810 <GUI_SendNotification+0x82c>
    {
      *pMsgToSend = Processed;
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	4a0d      	ldr	r2, [pc, #52]	; (801882c <GUI_SendNotification+0x848>)
 80187f6:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 80187f8:	480c      	ldr	r0, [pc, #48]	; (801882c <GUI_SendNotification+0x848>)
 80187fa:	f7fe ff99 	bl	8017730 <TLV_get_string_length>
 80187fe:	4603      	mov	r3, r0
 8018800:	b2db      	uxtb	r3, r3
 8018802:	3308      	adds	r3, #8
 8018804:	b2da      	uxtb	r2, r3
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 801880a:	2301      	movs	r3, #1
 801880c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    }

  }

  return gui_state;
 8018810:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8018814:	4618      	mov	r0, r3
 8018816:	3798      	adds	r7, #152	; 0x98
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}
 801881c:	200030c0 	.word	0x200030c0
 8018820:	20004aa0 	.word	0x20004aa0
 8018824:	20002bb8 	.word	0x20002bb8
 8018828:	20002bbc 	.word	0x20002bbc
 801882c:	2000488c 	.word	0x2000488c

08018830 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b084      	sub	sp, #16
 8018834:	af00      	add	r7, sp, #0
 8018836:	4603      	mov	r3, r0
 8018838:	460a      	mov	r2, r1
 801883a:	71fb      	strb	r3, [r7, #7]
 801883c:	4613      	mov	r3, r2
 801883e:	80bb      	strh	r3, [r7, #4]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 8018840:	88bb      	ldrh	r3, [r7, #4]
 8018842:	2b01      	cmp	r3, #1
 8018844:	d130      	bne.n	80188a8 <GUI_PostNotificationMessage+0x78>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 8018846:	79fa      	ldrb	r2, [r7, #7]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 8018848:	79f9      	ldrb	r1, [r7, #7]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 801884a:	4823      	ldr	r0, [pc, #140]	; (80188d8 <GUI_PostNotificationMessage+0xa8>)
 801884c:	4613      	mov	r3, r2
 801884e:	00db      	lsls	r3, r3, #3
 8018850:	1a9b      	subs	r3, r3, r2
 8018852:	011b      	lsls	r3, r3, #4
 8018854:	4403      	add	r3, r0
 8018856:	3344      	adds	r3, #68	; 0x44
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	4820      	ldr	r0, [pc, #128]	; (80188dc <GUI_PostNotificationMessage+0xac>)
 801885c:	2374      	movs	r3, #116	; 0x74
 801885e:	fb03 f301 	mul.w	r3, r3, r1
 8018862:	4403      	add	r3, r0
 8018864:	3308      	adds	r3, #8
 8018866:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8018868:	79fa      	ldrb	r2, [r7, #7]
 801886a:	491b      	ldr	r1, [pc, #108]	; (80188d8 <GUI_PostNotificationMessage+0xa8>)
 801886c:	4613      	mov	r3, r2
 801886e:	00db      	lsls	r3, r3, #3
 8018870:	1a9b      	subs	r3, r3, r2
 8018872:	011b      	lsls	r3, r3, #4
 8018874:	440b      	add	r3, r1
 8018876:	3344      	adds	r3, #68	; 0x44
 8018878:	6819      	ldr	r1, [r3, #0]
 801887a:	79fa      	ldrb	r2, [r7, #7]
 801887c:	4816      	ldr	r0, [pc, #88]	; (80188d8 <GUI_PostNotificationMessage+0xa8>)
 801887e:	4613      	mov	r3, r2
 8018880:	00db      	lsls	r3, r3, #3
 8018882:	1a9b      	subs	r3, r3, r2
 8018884:	011b      	lsls	r3, r3, #4
 8018886:	4403      	add	r3, r0
 8018888:	3348      	adds	r3, #72	; 0x48
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	fb03 f201 	mul.w	r2, r3, r1
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 8018890:	79fb      	ldrb	r3, [r7, #7]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8018892:	4913      	ldr	r1, [pc, #76]	; (80188e0 <GUI_PostNotificationMessage+0xb0>)
 8018894:	fba1 1202 	umull	r1, r2, r1, r2
 8018898:	0992      	lsrs	r2, r2, #6
 801889a:	4910      	ldr	r1, [pc, #64]	; (80188dc <GUI_PostNotificationMessage+0xac>)
 801889c:	2074      	movs	r0, #116	; 0x74
 801889e:	fb00 f303 	mul.w	r3, r0, r3
 80188a2:	440b      	add	r3, r1
 80188a4:	3314      	adds	r3, #20
 80188a6:	601a      	str	r2, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80188a8:	4b0e      	ldr	r3, [pc, #56]	; (80188e4 <GUI_PostNotificationMessage+0xb4>)
 80188aa:	781b      	ldrb	r3, [r3, #0]
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	d10f      	bne.n	80188d0 <GUI_PostNotificationMessage+0xa0>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 80188b0:	79fb      	ldrb	r3, [r7, #7]
 80188b2:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 80188b4:	88bb      	ldrh	r3, [r7, #4]
 80188b6:	011b      	lsls	r3, r3, #4
 80188b8:	4313      	orrs	r3, r2
 80188ba:	f043 0301 	orr.w	r3, r3, #1
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 80188be:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(GUIMsgBox, event, 0);
#else
    (void)osMessageQueuePut(GUIMsgBox, &event, 0U, 0U);
 80188c0:	4b09      	ldr	r3, [pc, #36]	; (80188e8 <GUI_PostNotificationMessage+0xb8>)
 80188c2:	6818      	ldr	r0, [r3, #0]
 80188c4:	f107 010c 	add.w	r1, r7, #12
 80188c8:	2300      	movs	r3, #0
 80188ca:	2200      	movs	r2, #0
 80188cc:	f7f9 fac4 	bl	8011e58 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 80188d0:	bf00      	nop
 80188d2:	3710      	adds	r7, #16
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	20004aa0 	.word	0x20004aa0
 80188dc:	20000158 	.word	0x20000158
 80188e0:	10624dd3 	.word	0x10624dd3
 80188e4:	20002bac 	.word	0x20002bac
 80188e8:	20004998 	.word	0x20004998

080188ec <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b08a      	sub	sp, #40	; 0x28
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60ba      	str	r2, [r7, #8]
 80188f4:	607b      	str	r3, [r7, #4]
 80188f6:	4603      	mov	r3, r0
 80188f8:	73fb      	strb	r3, [r7, #15]
 80188fa:	460b      	mov	r3, r1
 80188fc:	73bb      	strb	r3, [r7, #14]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 80188fe:	7bbb      	ldrb	r3, [r7, #14]
 8018900:	3b02      	subs	r3, #2
 8018902:	2b11      	cmp	r3, #17
 8018904:	f200 80d3 	bhi.w	8018aae <GUI_SaveInfo+0x1c2>
 8018908:	a201      	add	r2, pc, #4	; (adr r2, 8018910 <GUI_SaveInfo+0x24>)
 801890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801890e:	bf00      	nop
 8018910:	08018959 	.word	0x08018959
 8018914:	08018aaf 	.word	0x08018aaf
 8018918:	080189b5 	.word	0x080189b5
 801891c:	08018a0f 	.word	0x08018a0f
 8018920:	08018a6b 	.word	0x08018a6b
 8018924:	08018aaf 	.word	0x08018aaf
 8018928:	08018aaf 	.word	0x08018aaf
 801892c:	08018aaf 	.word	0x08018aaf
 8018930:	08018aaf 	.word	0x08018aaf
 8018934:	08018aaf 	.word	0x08018aaf
 8018938:	08018aaf 	.word	0x08018aaf
 801893c:	08018aaf 	.word	0x08018aaf
 8018940:	08018aaf 	.word	0x08018aaf
 8018944:	08018aaf 	.word	0x08018aaf
 8018948:	08018aaf 	.word	0x08018aaf
 801894c:	08018aaf 	.word	0x08018aaf
 8018950:	08018aaf 	.word	0x08018aaf
 8018954:	08018a8f 	.word	0x08018a8f
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2b04      	cmp	r3, #4
 801895c:	f040 80a9 	bne.w	8018ab2 <GUI_SaveInfo+0x1c6>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 8018960:	7bfa      	ldrb	r2, [r7, #15]
 8018962:	4613      	mov	r3, r2
 8018964:	00db      	lsls	r3, r3, #3
 8018966:	1a9b      	subs	r3, r3, r2
 8018968:	011b      	lsls	r3, r3, #4
 801896a:	3340      	adds	r3, #64	; 0x40
 801896c:	4a56      	ldr	r2, [pc, #344]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 801896e:	4413      	add	r3, r2
 8018970:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	68b9      	ldr	r1, [r7, #8]
 8018976:	6938      	ldr	r0, [r7, #16]
 8018978:	f002 ff96 	bl	801b8a8 <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	7bfa      	ldrb	r2, [r7, #15]
 8018982:	4618      	mov	r0, r3
 8018984:	4950      	ldr	r1, [pc, #320]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 8018986:	4613      	mov	r3, r2
 8018988:	00db      	lsls	r3, r3, #3
 801898a:	1a9b      	subs	r3, r3, r2
 801898c:	011b      	lsls	r3, r3, #4
 801898e:	440b      	add	r3, r1
 8018990:	334c      	adds	r3, #76	; 0x4c
 8018992:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 8018994:	7bfa      	ldrb	r2, [r7, #15]
 8018996:	4613      	mov	r3, r2
 8018998:	00db      	lsls	r3, r3, #3
 801899a:	1a9b      	subs	r3, r3, r2
 801899c:	011b      	lsls	r3, r3, #4
 801899e:	3348      	adds	r3, #72	; 0x48
 80189a0:	4a49      	ldr	r2, [pc, #292]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 80189a2:	4413      	add	r3, r2
 80189a4:	3304      	adds	r3, #4
 80189a6:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 80189a8:	687a      	ldr	r2, [r7, #4]
 80189aa:	68b9      	ldr	r1, [r7, #8]
 80189ac:	6938      	ldr	r0, [r7, #16]
 80189ae:	f002 ff7b 	bl	801b8a8 <memcpy>
      }
      break;
 80189b2:	e07e      	b.n	8018ab2 <GUI_SaveInfo+0x1c6>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2b1c      	cmp	r3, #28
 80189b8:	d87d      	bhi.n	8018ab6 <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 80189ba:	7bfa      	ldrb	r2, [r7, #15]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	0899      	lsrs	r1, r3, #2
 80189c0:	4841      	ldr	r0, [pc, #260]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 80189c2:	4613      	mov	r3, r2
 80189c4:	00db      	lsls	r3, r3, #3
 80189c6:	1a9b      	subs	r3, r3, r2
 80189c8:	011b      	lsls	r3, r3, #4
 80189ca:	4403      	add	r3, r0
 80189cc:	331c      	adds	r3, #28
 80189ce:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 80189d0:	2300      	movs	r3, #0
 80189d2:	627b      	str	r3, [r7, #36]	; 0x24
 80189d4:	e015      	b.n	8018a02 <GUI_SaveInfo+0x116>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 80189d6:	7bfa      	ldrb	r2, [r7, #15]
 80189d8:	4613      	mov	r3, r2
 80189da:	00db      	lsls	r3, r3, #3
 80189dc:	1a9b      	subs	r3, r3, r2
 80189de:	009b      	lsls	r3, r3, #2
 80189e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189e2:	4413      	add	r3, r2
 80189e4:	009b      	lsls	r3, r3, #2
 80189e6:	4a38      	ldr	r2, [pc, #224]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 80189e8:	4413      	add	r3, r2
 80189ea:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 80189ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	68ba      	ldr	r2, [r7, #8]
 80189f2:	4413      	add	r3, r2
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	461a      	mov	r2, r3
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	601a      	str	r2, [r3, #0]
        for (index = 0U; index < (Size / 4U); index++)
 80189fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189fe:	3301      	adds	r3, #1
 8018a00:	627b      	str	r3, [r7, #36]	; 0x24
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	089b      	lsrs	r3, r3, #2
 8018a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d3e4      	bcc.n	80189d6 <GUI_SaveInfo+0xea>
        }
      }
      break;
 8018a0c:	e053      	b.n	8018ab6 <GUI_SaveInfo+0x1ca>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2b1c      	cmp	r3, #28
 8018a12:	d852      	bhi.n	8018aba <GUI_SaveInfo+0x1ce>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 8018a14:	7bfa      	ldrb	r2, [r7, #15]
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	0899      	lsrs	r1, r3, #2
 8018a1a:	482b      	ldr	r0, [pc, #172]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 8018a1c:	4613      	mov	r3, r2
 8018a1e:	00db      	lsls	r3, r3, #3
 8018a20:	1a9b      	subs	r3, r3, r2
 8018a22:	011b      	lsls	r3, r3, #4
 8018a24:	4403      	add	r3, r0
 8018a26:	333c      	adds	r3, #60	; 0x3c
 8018a28:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8018a2e:	e016      	b.n	8018a5e <GUI_SaveInfo+0x172>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 8018a30:	7bfa      	ldrb	r2, [r7, #15]
 8018a32:	4613      	mov	r3, r2
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	1a9b      	subs	r3, r3, r2
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a3c:	4413      	add	r3, r2
 8018a3e:	3308      	adds	r3, #8
 8018a40:	009b      	lsls	r3, r3, #2
 8018a42:	4a21      	ldr	r2, [pc, #132]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 8018a44:	4413      	add	r3, r2
 8018a46:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8018a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a4a:	009b      	lsls	r3, r3, #2
 8018a4c:	68ba      	ldr	r2, [r7, #8]
 8018a4e:	4413      	add	r3, r2
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	461a      	mov	r2, r3
 8018a54:	69bb      	ldr	r3, [r7, #24]
 8018a56:	601a      	str	r2, [r3, #0]
        for (index = 0U; index < (Size / 4U); index++)
 8018a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	089b      	lsrs	r3, r3, #2
 8018a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d3e3      	bcc.n	8018a30 <GUI_SaveInfo+0x144>
        }
      }
      break;
 8018a68:	e027      	b.n	8018aba <GUI_SaveInfo+0x1ce>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	2b04      	cmp	r3, #4
 8018a6e:	d126      	bne.n	8018abe <GUI_SaveInfo+0x1d2>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 8018a70:	7bfa      	ldrb	r2, [r7, #15]
 8018a72:	4613      	mov	r3, r2
 8018a74:	00db      	lsls	r3, r3, #3
 8018a76:	1a9b      	subs	r3, r3, r2
 8018a78:	011b      	lsls	r3, r3, #4
 8018a7a:	3350      	adds	r3, #80	; 0x50
 8018a7c:	4a12      	ldr	r2, [pc, #72]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 8018a7e:	4413      	add	r3, r2
 8018a80:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	68b9      	ldr	r1, [r7, #8]
 8018a86:	69f8      	ldr	r0, [r7, #28]
 8018a88:	f002 ff0e 	bl	801b8a8 <memcpy>
      }
      break;
 8018a8c:	e017      	b.n	8018abe <GUI_SaveInfo+0x1d2>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 8018a8e:	7bfa      	ldrb	r2, [r7, #15]
 8018a90:	4613      	mov	r3, r2
 8018a92:	00db      	lsls	r3, r3, #3
 8018a94:	1a9b      	subs	r3, r3, r2
 8018a96:	011b      	lsls	r3, r3, #4
 8018a98:	3350      	adds	r3, #80	; 0x50
 8018a9a:	4a0b      	ldr	r2, [pc, #44]	; (8018ac8 <GUI_SaveInfo+0x1dc>)
 8018a9c:	4413      	add	r3, r2
 8018a9e:	3304      	adds	r3, #4
 8018aa0:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 8018aa2:	687a      	ldr	r2, [r7, #4]
 8018aa4:	68b9      	ldr	r1, [r7, #8]
 8018aa6:	6a38      	ldr	r0, [r7, #32]
 8018aa8:	f002 fefe 	bl	801b8a8 <memcpy>
      break;
 8018aac:	e008      	b.n	8018ac0 <GUI_SaveInfo+0x1d4>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 8018aae:	bf00      	nop
 8018ab0:	e006      	b.n	8018ac0 <GUI_SaveInfo+0x1d4>
      break;
 8018ab2:	bf00      	nop
 8018ab4:	e004      	b.n	8018ac0 <GUI_SaveInfo+0x1d4>
      break;
 8018ab6:	bf00      	nop
 8018ab8:	e002      	b.n	8018ac0 <GUI_SaveInfo+0x1d4>
      break;
 8018aba:	bf00      	nop
 8018abc:	e000      	b.n	8018ac0 <GUI_SaveInfo+0x1d4>
      break;
 8018abe:	bf00      	nop
  }
}
 8018ac0:	bf00      	nop
 8018ac2:	3728      	adds	r7, #40	; 0x28
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}
 8018ac8:	20004aa0 	.word	0x20004aa0

08018acc <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b090      	sub	sp, #64	; 0x40
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	6039      	str	r1, [r7, #0]
 8018ad6:	71fb      	strb	r3, [r7, #7]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018ad8:	79fb      	ldrb	r3, [r7, #7]
 8018ada:	015b      	lsls	r3, r3, #5
 8018adc:	b25b      	sxtb	r3, r3
 8018ade:	f043 0303 	orr.w	r3, r3, #3
 8018ae2:	b25b      	sxtb	r3, r3
 8018ae4:	b2d9      	uxtb	r1, r3
 8018ae6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018af0:	f7fe fbc9 	bl	8017286 <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 8018af4:	79fb      	ldrb	r3, [r7, #7]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d166      	bne.n	8018bc8 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 8018afa:	4bc6      	ldr	r3, [pc, #792]	; (8018e14 <Send_DpmInitCnf+0x348>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d004      	beq.n	8018b0c <Send_DpmInitCnf+0x40>
    {
      hwversion = pCB_HWBoardVersion();
 8018b02:	4bc4      	ldr	r3, [pc, #784]	; (8018e14 <Send_DpmInitCnf+0x348>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	4798      	blx	r3
 8018b08:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018b0a:	e001      	b.n	8018b10 <Send_DpmInitCnf+0x44>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 8018b0c:	4bc2      	ldr	r3, [pc, #776]	; (8018e18 <Send_DpmInitCnf+0x34c>)
 8018b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 8018b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018b12:	f7ec ff5f 	bl	80059d4 <strlen>
 8018b16:	4603      	mov	r3, r0
 8018b18:	b29a      	uxth	r2, r3
 8018b1a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b20:	2100      	movs	r1, #0
 8018b22:	f7fe fc09 	bl	8017338 <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 8018b26:	4bbb      	ldr	r3, [pc, #748]	; (8018e14 <Send_DpmInitCnf+0x348>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d004      	beq.n	8018b38 <Send_DpmInitCnf+0x6c>
    {
      hwpdtype  = pCB_HWPDType();
 8018b2e:	4bbb      	ldr	r3, [pc, #748]	; (8018e1c <Send_DpmInitCnf+0x350>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	4798      	blx	r3
 8018b34:	63b8      	str	r0, [r7, #56]	; 0x38
 8018b36:	e001      	b.n	8018b3c <Send_DpmInitCnf+0x70>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 8018b38:	4bb7      	ldr	r3, [pc, #732]	; (8018e18 <Send_DpmInitCnf+0x34c>)
 8018b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8018b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018b3e:	f7ec ff49 	bl	80059d4 <strlen>
 8018b42:	4603      	mov	r3, r0
 8018b44:	b29a      	uxth	r2, r3
 8018b46:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b4c:	2101      	movs	r1, #1
 8018b4e:	f7fe fbf3 	bl	8017338 <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 8018b52:	2301      	movs	r3, #1
 8018b54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8018b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018b5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018b60:	2201      	movs	r2, #1
 8018b62:	2102      	movs	r1, #2
 8018b64:	f7fe fbe8 	bl	8017338 <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 8018b68:	4aad      	ldr	r2, [pc, #692]	; (8018e20 <Send_DpmInitCnf+0x354>)
 8018b6a:	f107 031c 	add.w	r3, r7, #28
 8018b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b72:	e883 0003 	stmia.w	r3, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 8018b76:	f107 031c 	add.w	r3, r7, #28
 8018b7a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018b7e:	2208      	movs	r2, #8
 8018b80:	2103      	movs	r1, #3
 8018b82:	f7fe fbd9 	bl	8017338 <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8018b86:	2300      	movs	r3, #0
 8018b88:	763b      	strb	r3, [r7, #24]
 8018b8a:	f107 0318 	add.w	r3, r7, #24
 8018b8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018b92:	2201      	movs	r2, #1
 8018b94:	211e      	movs	r1, #30
 8018b96:	f7fe fbcf 	bl	8017338 <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	753b      	strb	r3, [r7, #20]
 8018b9e:	f107 0314 	add.w	r3, r7, #20
 8018ba2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	211e      	movs	r1, #30
 8018baa:	f7fe fbc5 	bl	8017338 <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 8018bae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018bb2:	4b9c      	ldr	r3, [pc, #624]	; (8018e24 <Send_DpmInitCnf+0x358>)
 8018bb4:	2201      	movs	r2, #1
 8018bb6:	211f      	movs	r1, #31
 8018bb8:	f7fe fbbe 	bl	8017338 <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 8018bbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7fe fd07 	bl	80175d4 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 8018bc6:	e120      	b.n	8018e0a <Send_DpmInitCnf+0x33e>
    uint8_t port = PortNum - 1U;
 8018bc8:	79fb      	ldrb	r3, [r7, #7]
 8018bca:	3b01      	subs	r3, #1
 8018bcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 8018bd0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8018bd4:	4994      	ldr	r1, [pc, #592]	; (8018e28 <Send_DpmInitCnf+0x35c>)
 8018bd6:	4613      	mov	r3, r2
 8018bd8:	005b      	lsls	r3, r3, #1
 8018bda:	4413      	add	r3, r2
 8018bdc:	009b      	lsls	r3, r3, #2
 8018bde:	440b      	add	r3, r1
 8018be0:	791b      	ldrb	r3, [r3, #4]
 8018be2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018be6:	b2db      	uxtb	r3, r3
 8018be8:	b29b      	uxth	r3, r3
 8018bea:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 8018bec:	2312      	movs	r3, #18
 8018bee:	743b      	strb	r3, [r7, #16]
 8018bf0:	8a7b      	ldrh	r3, [r7, #18]
 8018bf2:	b2db      	uxtb	r3, r3
 8018bf4:	747b      	strb	r3, [r7, #17]
 8018bf6:	f107 0310 	add.w	r3, r7, #16
 8018bfa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018bfe:	2202      	movs	r2, #2
 8018c00:	2104      	movs	r1, #4
 8018c02:	f7fe fb99 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 8018c06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8018c0a:	4987      	ldr	r1, [pc, #540]	; (8018e28 <Send_DpmInitCnf+0x35c>)
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	005b      	lsls	r3, r3, #1
 8018c10:	4413      	add	r3, r2
 8018c12:	009b      	lsls	r3, r3, #2
 8018c14:	440b      	add	r3, r1
 8018c16:	3308      	adds	r3, #8
 8018c18:	781b      	ldrb	r3, [r3, #0]
 8018c1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018c1e:	b2db      	uxtb	r3, r3
 8018c20:	b29b      	uxth	r3, r3
 8018c22:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 8018c24:	f107 0312 	add.w	r3, r7, #18
 8018c28:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018c2c:	2201      	movs	r2, #1
 8018c2e:	2106      	movs	r1, #6
 8018c30:	f7fe fb82 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 8018c34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8018c38:	497b      	ldr	r1, [pc, #492]	; (8018e28 <Send_DpmInitCnf+0x35c>)
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	005b      	lsls	r3, r3, #1
 8018c3e:	4413      	add	r3, r2
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	440b      	add	r3, r1
 8018c44:	795b      	ldrb	r3, [r3, #5]
 8018c46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 8018c50:	f107 0312 	add.w	r3, r7, #18
 8018c54:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018c58:	2201      	movs	r2, #1
 8018c5a:	2107      	movs	r1, #7
 8018c5c:	f7fe fb6c 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 8018c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018c64:	4a71      	ldr	r2, [pc, #452]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018c66:	2174      	movs	r1, #116	; 0x74
 8018c68:	fb01 f303 	mul.w	r3, r1, r3
 8018c6c:	4413      	add	r3, r2
 8018c6e:	3368      	adds	r3, #104	; 0x68
 8018c70:	78db      	ldrb	r3, [r3, #3]
 8018c72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018c76:	b2db      	uxtb	r3, r3
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 8018c7c:	f107 0312 	add.w	r3, r7, #18
 8018c80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018c84:	2201      	movs	r2, #1
 8018c86:	2108      	movs	r1, #8
 8018c88:	f7fe fb56 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 8018c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018c90:	4a66      	ldr	r2, [pc, #408]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018c92:	2174      	movs	r1, #116	; 0x74
 8018c94:	fb01 f303 	mul.w	r3, r1, r3
 8018c98:	4413      	add	r3, r2
 8018c9a:	3368      	adds	r3, #104	; 0x68
 8018c9c:	78db      	ldrb	r3, [r3, #3]
 8018c9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018ca2:	b2db      	uxtb	r3, r3
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 8018ca8:	f107 0312 	add.w	r3, r7, #18
 8018cac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018cb0:	2201      	movs	r2, #1
 8018cb2:	2109      	movs	r1, #9
 8018cb4:	f7fe fb40 	bl	8017338 <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 8018cb8:	2300      	movs	r3, #0
 8018cba:	733b      	strb	r3, [r7, #12]
 8018cbc:	f107 030c 	add.w	r3, r7, #12
 8018cc0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018cc4:	2201      	movs	r2, #1
 8018cc6:	210b      	movs	r1, #11
 8018cc8:	f7fe fb36 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 8018ccc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8018cd0:	4955      	ldr	r1, [pc, #340]	; (8018e28 <Send_DpmInitCnf+0x35c>)
 8018cd2:	4613      	mov	r3, r2
 8018cd4:	005b      	lsls	r3, r3, #1
 8018cd6:	4413      	add	r3, r2
 8018cd8:	009b      	lsls	r3, r3, #2
 8018cda:	440b      	add	r3, r1
 8018cdc:	795b      	ldrb	r3, [r3, #5]
 8018cde:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018ce2:	b2db      	uxtb	r3, r3
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 8018ce8:	f107 0312 	add.w	r3, r7, #18
 8018cec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018cf0:	2201      	movs	r2, #1
 8018cf2:	2110      	movs	r1, #16
 8018cf4:	f7fe fb20 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 8018cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018cfc:	4a4b      	ldr	r2, [pc, #300]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018cfe:	2174      	movs	r1, #116	; 0x74
 8018d00:	fb01 f303 	mul.w	r3, r1, r3
 8018d04:	4413      	add	r3, r2
 8018d06:	3368      	adds	r3, #104	; 0x68
 8018d08:	78db      	ldrb	r3, [r3, #3]
 8018d0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 8018d14:	f107 0312 	add.w	r3, r7, #18
 8018d18:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018d1c:	2201      	movs	r2, #1
 8018d1e:	2112      	movs	r1, #18
 8018d20:	f7fe fb0a 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 8018d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018d28:	4a40      	ldr	r2, [pc, #256]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018d2a:	2174      	movs	r1, #116	; 0x74
 8018d2c:	fb01 f303 	mul.w	r3, r1, r3
 8018d30:	4413      	add	r3, r2
 8018d32:	3368      	adds	r3, #104	; 0x68
 8018d34:	78db      	ldrb	r3, [r3, #3]
 8018d36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018d3a:	b2db      	uxtb	r3, r3
 8018d3c:	b29b      	uxth	r3, r3
 8018d3e:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8018d40:	f107 0312 	add.w	r3, r7, #18
 8018d44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018d48:	2201      	movs	r2, #1
 8018d4a:	2113      	movs	r1, #19
 8018d4c:	f7fe faf4 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8018d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018d54:	4a35      	ldr	r2, [pc, #212]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018d56:	2174      	movs	r1, #116	; 0x74
 8018d58:	fb01 f303 	mul.w	r3, r1, r3
 8018d5c:	4413      	add	r3, r2
 8018d5e:	3368      	adds	r3, #104	; 0x68
 8018d60:	78db      	ldrb	r3, [r3, #3]
 8018d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	b29b      	uxth	r3, r3
 8018d6a:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 8018d6c:	f107 0312 	add.w	r3, r7, #18
 8018d70:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018d74:	2201      	movs	r2, #1
 8018d76:	2114      	movs	r1, #20
 8018d78:	f7fe fade 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 8018d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018d80:	4a2a      	ldr	r2, [pc, #168]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018d82:	2174      	movs	r1, #116	; 0x74
 8018d84:	fb01 f303 	mul.w	r3, r1, r3
 8018d88:	4413      	add	r3, r2
 8018d8a:	3368      	adds	r3, #104	; 0x68
 8018d8c:	78db      	ldrb	r3, [r3, #3]
 8018d8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	b29b      	uxth	r3, r3
 8018d96:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 8018d98:	f107 0312 	add.w	r3, r7, #18
 8018d9c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018da0:	2201      	movs	r2, #1
 8018da2:	2115      	movs	r1, #21
 8018da4:	f7fe fac8 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 8018da8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018dac:	4a1f      	ldr	r2, [pc, #124]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018dae:	2174      	movs	r1, #116	; 0x74
 8018db0:	fb01 f303 	mul.w	r3, r1, r3
 8018db4:	4413      	add	r3, r2
 8018db6:	3368      	adds	r3, #104	; 0x68
 8018db8:	78db      	ldrb	r3, [r3, #3]
 8018dba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018dbe:	b2db      	uxtb	r3, r3
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 8018dc4:	f107 0312 	add.w	r3, r7, #18
 8018dc8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018dcc:	2201      	movs	r2, #1
 8018dce:	2116      	movs	r1, #22
 8018dd0:	f7fe fab2 	bl	8017338 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8018dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018dd8:	4a14      	ldr	r2, [pc, #80]	; (8018e2c <Send_DpmInitCnf+0x360>)
 8018dda:	2174      	movs	r1, #116	; 0x74
 8018ddc:	fb01 f303 	mul.w	r3, r1, r3
 8018de0:	4413      	add	r3, r2
 8018de2:	3368      	adds	r3, #104	; 0x68
 8018de4:	791b      	ldrb	r3, [r3, #4]
 8018de6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018dea:	b2db      	uxtb	r3, r3
 8018dec:	b29b      	uxth	r3, r3
 8018dee:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8018df0:	f107 0312 	add.w	r3, r7, #18
 8018df4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018df8:	2201      	movs	r2, #1
 8018dfa:	2117      	movs	r1, #23
 8018dfc:	f7fe fa9c 	bl	8017338 <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8018e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7fe fbe5 	bl	80175d4 <TLV_deinit_encode>
}
 8018e0a:	bf00      	nop
 8018e0c:	3740      	adds	r7, #64	; 0x40
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	bf00      	nop
 8018e14:	20002bb0 	.word	0x20002bb0
 8018e18:	0801ca80 	.word	0x0801ca80
 8018e1c:	20002bb4 	.word	0x20002bb4
 8018e20:	0801ca88 	.word	0x0801ca88
 8018e24:	20004a9c 	.word	0x20004a9c
 8018e28:	20000144 	.word	0x20000144
 8018e2c:	20000158 	.word	0x20000158

08018e30 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b090      	sub	sp, #64	; 0x40
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	4603      	mov	r3, r0
 8018e38:	60b9      	str	r1, [r7, #8]
 8018e3a:	607a      	str	r2, [r7, #4]
 8018e3c:	73fb      	strb	r3, [r7, #15]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8018e3e:	2302      	movs	r3, #2
 8018e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 8018e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018e48:	68b9      	ldr	r1, [r7, #8]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7fe fbd6 	bl	80175fc <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018e50:	7bfb      	ldrb	r3, [r7, #15]
 8018e52:	3301      	adds	r3, #1
 8018e54:	015b      	lsls	r3, r3, #5
 8018e56:	b25b      	sxtb	r3, r3
 8018e58:	f043 030a 	orr.w	r3, r3, #10
 8018e5c:	b25b      	sxtb	r3, r3
 8018e5e:	b2d9      	uxtb	r1, r3
 8018e60:	f107 0020 	add.w	r0, r7, #32
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018e6a:	f7fe fa0c 	bl	8017286 <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8018e6e:	f107 0318 	add.w	r3, r7, #24
 8018e72:	f107 021c 	add.w	r2, r7, #28
 8018e76:	f107 011e 	add.w	r1, r7, #30
 8018e7a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018e7e:	f7fe fbeb 	bl	8017658 <TLV_get>
  switch (tag)
 8018e82:	7fbb      	ldrb	r3, [r7, #30]
 8018e84:	2b2b      	cmp	r3, #43	; 0x2b
 8018e86:	f200 826a 	bhi.w	801935e <Request_MessageReq+0x52e>
 8018e8a:	a201      	add	r2, pc, #4	; (adr r2, 8018e90 <Request_MessageReq+0x60>)
 8018e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e90:	08018f41 	.word	0x08018f41
 8018e94:	08018f51 	.word	0x08018f51
 8018e98:	0801935f 	.word	0x0801935f
 8018e9c:	08018f61 	.word	0x08018f61
 8018ea0:	08018f71 	.word	0x08018f71
 8018ea4:	08018f81 	.word	0x08018f81
 8018ea8:	08018f91 	.word	0x08018f91
 8018eac:	08018fa1 	.word	0x08018fa1
 8018eb0:	0801906f 	.word	0x0801906f
 8018eb4:	08019163 	.word	0x08019163
 8018eb8:	08019153 	.word	0x08019153
 8018ebc:	08019123 	.word	0x08019123
 8018ec0:	08019133 	.word	0x08019133
 8018ec4:	08019143 	.word	0x08019143
 8018ec8:	08018fb1 	.word	0x08018fb1
 8018ecc:	08018fc1 	.word	0x08018fc1
 8018ed0:	0801935f 	.word	0x0801935f
 8018ed4:	08019183 	.word	0x08019183
 8018ed8:	080191e1 	.word	0x080191e1
 8018edc:	0801935f 	.word	0x0801935f
 8018ee0:	0801935f 	.word	0x0801935f
 8018ee4:	0801935f 	.word	0x0801935f
 8018ee8:	0801935f 	.word	0x0801935f
 8018eec:	0801935f 	.word	0x0801935f
 8018ef0:	0801935f 	.word	0x0801935f
 8018ef4:	0801935f 	.word	0x0801935f
 8018ef8:	080190c1 	.word	0x080190c1
 8018efc:	0801935f 	.word	0x0801935f
 8018f00:	0801935f 	.word	0x0801935f
 8018f04:	0801935f 	.word	0x0801935f
 8018f08:	0801935f 	.word	0x0801935f
 8018f0c:	0801935f 	.word	0x0801935f
 8018f10:	0801935f 	.word	0x0801935f
 8018f14:	0801935f 	.word	0x0801935f
 8018f18:	0801935f 	.word	0x0801935f
 8018f1c:	0801935f 	.word	0x0801935f
 8018f20:	080190a1 	.word	0x080190a1
 8018f24:	080190b1 	.word	0x080190b1
 8018f28:	08019231 	.word	0x08019231
 8018f2c:	0801926b 	.word	0x0801926b
 8018f30:	080192a5 	.word	0x080192a5
 8018f34:	0801934f 	.word	0x0801934f
 8018f38:	0801935f 	.word	0x0801935f
 8018f3c:	08019173 	.word	0x08019173
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8018f40:	7bfb      	ldrb	r3, [r7, #15]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fc fb68 	bl	8015618 <USBPD_DPM_RequestGotoMin>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018f4e:	e225      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8018f50:	7bfb      	ldrb	r3, [r7, #15]
 8018f52:	4618      	mov	r0, r3
 8018f54:	f7fc fba0 	bl	8015698 <USBPD_DPM_RequestPing>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018f5e:	e21d      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8018f60:	7bfb      	ldrb	r3, [r7, #15]
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7fc fc3e 	bl	80157e4 <USBPD_DPM_RequestGetSourceCapability>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018f6e:	e215      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 8018f70:	7bfb      	ldrb	r3, [r7, #15]
 8018f72:	4618      	mov	r0, r3
 8018f74:	f7fc fc76 	bl	8015864 <USBPD_DPM_RequestGetSinkCapability>
 8018f78:	4603      	mov	r3, r0
 8018f7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018f7e:	e20d      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8018f80:	7bfb      	ldrb	r3, [r7, #15]
 8018f82:	4618      	mov	r0, r3
 8018f84:	f7fc fcae 	bl	80158e4 <USBPD_DPM_RequestDataRoleSwap>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018f8e:	e205      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8018f90:	7bfb      	ldrb	r3, [r7, #15]
 8018f92:	4618      	mov	r0, r3
 8018f94:	f7fc fce6 	bl	8015964 <USBPD_DPM_RequestPowerRoleSwap>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018f9e:	e1fd      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 8018fa0:	7bfb      	ldrb	r3, [r7, #15]
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7fc fd10 	bl	80159c8 <USBPD_DPM_RequestVconnSwap>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018fae:	e1f5      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8018fb0:	7bfb      	ldrb	r3, [r7, #15]
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f7fc fd8c 	bl	8015ad0 <USBPD_DPM_RequestSourceCapability>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8018fbe:	e1ed      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
      uint8_t nb_expected_tag = 0U;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      uint8_t index_pdo = 0;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      if (length > TLV_SIZE_MAX)
 8018fd0:	8bbb      	ldrh	r3, [r7, #28]
 8018fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018fd6:	f200 81c4 	bhi.w	8019362 <Request_MessageReq+0x532>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8018fda:	f107 0318 	add.w	r3, r7, #24
 8018fde:	f107 021c 	add.w	r2, r7, #28
 8018fe2:	f107 011e 	add.w	r1, r7, #30
 8018fe6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018fea:	f7fe fb35 	bl	8017658 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8018fee:	e024      	b.n	801903a <Request_MessageReq+0x20a>
      {
        nb_expected_tag++;
 8018ff0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018ff4:	3301      	adds	r3, #1
 8018ff6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 8018ffa:	7fbb      	ldrb	r3, [r7, #30]
 8018ffc:	2b01      	cmp	r3, #1
 8018ffe:	d104      	bne.n	801900a <Request_MessageReq+0x1da>
        {
          index_pdo = value[0];
 8019000:	69bb      	ldr	r3, [r7, #24]
 8019002:	781b      	ldrb	r3, [r3, #0]
 8019004:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8019008:	e00d      	b.n	8019026 <Request_MessageReq+0x1f6>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 801900a:	7fbb      	ldrb	r3, [r7, #30]
 801900c:	2b02      	cmp	r3, #2
 801900e:	d10a      	bne.n	8019026 <Request_MessageReq+0x1f6>
        {
          voltage = USBPD_LE16(&value[0]);
 8019010:	69bb      	ldr	r3, [r7, #24]
 8019012:	781b      	ldrb	r3, [r3, #0]
 8019014:	b29a      	uxth	r2, r3
 8019016:	69bb      	ldr	r3, [r7, #24]
 8019018:	3301      	adds	r3, #1
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	b29b      	uxth	r3, r3
 801901e:	021b      	lsls	r3, r3, #8
 8019020:	b29b      	uxth	r3, r3
 8019022:	4413      	add	r3, r2
 8019024:	87bb      	strh	r3, [r7, #60]	; 0x3c
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8019026:	f107 0318 	add.w	r3, r7, #24
 801902a:	f107 021c 	add.w	r2, r7, #28
 801902e:	f107 011e 	add.w	r1, r7, #30
 8019032:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019036:	f7fe fb0f 	bl	8017658 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 801903a:	8bbb      	ldrh	r3, [r7, #28]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d006      	beq.n	801904e <Request_MessageReq+0x21e>
 8019040:	8bbb      	ldrh	r3, [r7, #28]
 8019042:	2bff      	cmp	r3, #255	; 0xff
 8019044:	d803      	bhi.n	801904e <Request_MessageReq+0x21e>
 8019046:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801904a:	2b01      	cmp	r3, #1
 801904c:	d9d0      	bls.n	8018ff0 <Request_MessageReq+0x1c0>
      }
      if (2U == nb_expected_tag)
 801904e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019052:	2b02      	cmp	r3, #2
 8019054:	f040 8187 	bne.w	8019366 <Request_MessageReq+0x536>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8019058:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801905a:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 801905e:	7bfb      	ldrb	r3, [r7, #15]
 8019060:	4618      	mov	r0, r3
 8019062:	f7fc fb59 	bl	8015718 <USBPD_DPM_RequestMessageRequest>
 8019066:	4603      	mov	r3, r0
 8019068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 801906c:	e17b      	b.n	8019366 <Request_MessageReq+0x536>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801906e:	f107 0318 	add.w	r3, r7, #24
 8019072:	f107 021c 	add.w	r2, r7, #28
 8019076:	f107 011e 	add.w	r1, r7, #30
 801907a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801907e:	f7fe faeb 	bl	8017658 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8019082:	7fbb      	ldrb	r3, [r7, #30]
 8019084:	2b00      	cmp	r3, #0
 8019086:	f040 8170 	bne.w	801936a <Request_MessageReq+0x53a>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 801908a:	69bb      	ldr	r3, [r7, #24]
 801908c:	781a      	ldrb	r2, [r3, #0]
 801908e:	7bfb      	ldrb	r3, [r7, #15]
 8019090:	4611      	mov	r1, r2
 8019092:	4618      	mov	r0, r3
 8019094:	f7fc fcd8 	bl	8015a48 <USBPD_DPM_RequestSoftReset>
 8019098:	4603      	mov	r3, r0
 801909a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 801909e:	e164      	b.n	801936a <Request_MessageReq+0x53a>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 80190a0:	7bfb      	ldrb	r3, [r7, #15]
 80190a2:	4618      	mov	r0, r3
 80190a4:	f7fc fa3c 	bl	8015520 <USBPD_DPM_RequestHardReset>
 80190a8:	4603      	mov	r3, r0
 80190aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 80190ae:	e175      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 80190b0:	7bfb      	ldrb	r3, [r7, #15]
 80190b2:	4618      	mov	r0, r3
 80190b4:	f7fc fa72 	bl	801559c <USBPD_DPM_RequestCableReset>
 80190b8:	4603      	mov	r3, r0
 80190ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 80190be:	e16d      	b.n	801939c <Request_MessageReq+0x56c>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 80190c0:	2300      	movs	r3, #0
 80190c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      if (length > TLV_SIZE_MAX)
 80190c6:	8bbb      	ldrh	r3, [r7, #28]
 80190c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190cc:	f200 814f 	bhi.w	801936e <Request_MessageReq+0x53e>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80190d0:	f107 0318 	add.w	r3, r7, #24
 80190d4:	f107 021c 	add.w	r2, r7, #28
 80190d8:	f107 011e 	add.w	r1, r7, #30
 80190dc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80190e0:	f7fe faba 	bl	8017658 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 80190e4:	e004      	b.n	80190f0 <Request_MessageReq+0x2c0>
      {
        nb_expected_tag++;
 80190e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80190ea:	3301      	adds	r3, #1
 80190ec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 80190f0:	8bbb      	ldrh	r3, [r7, #28]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d006      	beq.n	8019104 <Request_MessageReq+0x2d4>
 80190f6:	8bbb      	ldrh	r3, [r7, #28]
 80190f8:	2bff      	cmp	r3, #255	; 0xff
 80190fa:	d803      	bhi.n	8019104 <Request_MessageReq+0x2d4>
 80190fc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8019100:	2b00      	cmp	r3, #0
 8019102:	d0f0      	beq.n	80190e6 <Request_MessageReq+0x2b6>
      }
      if (1U == nb_expected_tag)
 8019104:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8019108:	2b01      	cmp	r3, #1
 801910a:	f040 8132 	bne.w	8019372 <Request_MessageReq+0x542>
      {
        status = Manage_FreeText(PortNum, value, length);
 801910e:	69b9      	ldr	r1, [r7, #24]
 8019110:	8bba      	ldrh	r2, [r7, #28]
 8019112:	7bfb      	ldrb	r3, [r7, #15]
 8019114:	4618      	mov	r0, r3
 8019116:	f001 fa7d 	bl	801a614 <Manage_FreeText>
 801911a:	4603      	mov	r3, r0
 801911c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8019120:	e127      	b.n	8019372 <Request_MessageReq+0x542>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 8019122:	7bfb      	ldrb	r3, [r7, #15]
 8019124:	4618      	mov	r0, r3
 8019126:	f7fc fea1 	bl	8015e6c <USBPD_DPM_RequestFastRoleSwap>
 801912a:	4603      	mov	r3, r0
 801912c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8019130:	e134      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8019132:	7bfb      	ldrb	r3, [r7, #15]
 8019134:	4618      	mov	r0, r3
 8019136:	f7fc fe19 	bl	8015d6c <USBPD_DPM_RequestGetPPS_Status>
 801913a:	4603      	mov	r3, r0
 801913c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8019140:	e12c      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8019142:	7bfb      	ldrb	r3, [r7, #15]
 8019144:	4618      	mov	r0, r3
 8019146:	f7fc fed1 	bl	8015eec <USBPD_DPM_RequestGetCountryCodes>
 801914a:	4603      	mov	r3, r0
 801914c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8019150:	e124      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 8019152:	7bfb      	ldrb	r3, [r7, #15]
 8019154:	4618      	mov	r0, r3
 8019156:	f7fc fe49 	bl	8015dec <USBPD_DPM_RequestGetStatus>
 801915a:	4603      	mov	r3, r0
 801915c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8019160:	e11c      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8019162:	7bfb      	ldrb	r3, [r7, #15]
 8019164:	4618      	mov	r0, r3
 8019166:	f7fc fd35 	bl	8015bd4 <USBPD_DPM_RequestGetSourceCapabilityExt>
 801916a:	4603      	mov	r3, r0
 801916c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8019170:	e114      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8019172:	7bfb      	ldrb	r3, [r7, #15]
 8019174:	4618      	mov	r0, r3
 8019176:	f7fc fd6d 	bl	8015c54 <USBPD_DPM_RequestGetSinkCapabilityExt>
 801917a:	4603      	mov	r3, r0
 801917c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8019180:	e10c      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8019182:	8bbb      	ldrh	r3, [r7, #28]
 8019184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019188:	f200 80f5 	bhi.w	8019376 <Request_MessageReq+0x546>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801918c:	f107 0318 	add.w	r3, r7, #24
 8019190:	f107 021c 	add.w	r2, r7, #28
 8019194:	f107 011e 	add.w	r1, r7, #30
 8019198:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801919c:	f7fe fa5c 	bl	8017658 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 80191a0:	7fbb      	ldrb	r3, [r7, #30]
 80191a2:	2b04      	cmp	r3, #4
 80191a4:	f040 80e9 	bne.w	801937a <Request_MessageReq+0x54a>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 80191a8:	69bb      	ldr	r3, [r7, #24]
 80191aa:	781b      	ldrb	r3, [r3, #0]
 80191ac:	461a      	mov	r2, r3
 80191ae:	69bb      	ldr	r3, [r7, #24]
 80191b0:	3301      	adds	r3, #1
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	021b      	lsls	r3, r3, #8
 80191b6:	441a      	add	r2, r3
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	3302      	adds	r3, #2
 80191bc:	781b      	ldrb	r3, [r3, #0]
 80191be:	041b      	lsls	r3, r3, #16
 80191c0:	441a      	add	r2, r3
 80191c2:	69bb      	ldr	r3, [r7, #24]
 80191c4:	3303      	adds	r3, #3
 80191c6:	781b      	ldrb	r3, [r3, #0]
 80191c8:	061b      	lsls	r3, r3, #24
 80191ca:	4413      	add	r3, r2
 80191cc:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 80191ce:	7bfb      	ldrb	r3, [r7, #15]
 80191d0:	6979      	ldr	r1, [r7, #20]
 80191d2:	4618      	mov	r0, r3
 80191d4:	f7fc fcbc 	bl	8015b50 <USBPD_DPM_RequestAlert>
 80191d8:	4603      	mov	r3, r0
 80191da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80191de:	e0cc      	b.n	801937a <Request_MessageReq+0x54a>
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 80191e0:	8bbb      	ldrh	r3, [r7, #28]
 80191e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191e6:	f200 80ca 	bhi.w	801937e <Request_MessageReq+0x54e>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80191ea:	f107 0318 	add.w	r3, r7, #24
 80191ee:	f107 021c 	add.w	r2, r7, #28
 80191f2:	f107 011e 	add.w	r1, r7, #30
 80191f6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80191fa:	f7fe fa2d 	bl	8017658 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 80191fe:	7fbb      	ldrb	r3, [r7, #30]
 8019200:	2b05      	cmp	r3, #5
 8019202:	f040 80be 	bne.w	8019382 <Request_MessageReq+0x552>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 8019206:	69bb      	ldr	r3, [r7, #24]
 8019208:	781b      	ldrb	r3, [r3, #0]
 801920a:	b29a      	uxth	r2, r3
 801920c:	69bb      	ldr	r3, [r7, #24]
 801920e:	3301      	adds	r3, #1
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	b29b      	uxth	r3, r3
 8019214:	021b      	lsls	r3, r3, #8
 8019216:	b29b      	uxth	r3, r3
 8019218:	4413      	add	r3, r2
 801921a:	86bb      	strh	r3, [r7, #52]	; 0x34
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 801921c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801921e:	7bfb      	ldrb	r3, [r7, #15]
 8019220:	4611      	mov	r1, r2
 8019222:	4618      	mov	r0, r3
 8019224:	f7fc fea2 	bl	8015f6c <USBPD_DPM_RequestGetCountryInfo>
 8019228:	4603      	mov	r3, r0
 801922a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 801922e:	e0a8      	b.n	8019382 <Request_MessageReq+0x552>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8019230:	8bbb      	ldrh	r3, [r7, #28]
 8019232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019236:	f200 80a6 	bhi.w	8019386 <Request_MessageReq+0x556>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801923a:	f107 0318 	add.w	r3, r7, #24
 801923e:	f107 021c 	add.w	r2, r7, #28
 8019242:	f107 011e 	add.w	r1, r7, #30
 8019246:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801924a:	f7fe fa05 	bl	8017658 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 801924e:	7fbb      	ldrb	r3, [r7, #30]
 8019250:	2b0c      	cmp	r3, #12
 8019252:	f040 809a 	bne.w	801938a <Request_MessageReq+0x55a>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8019256:	69ba      	ldr	r2, [r7, #24]
 8019258:	7bfb      	ldrb	r3, [r7, #15]
 801925a:	4611      	mov	r1, r2
 801925c:	4618      	mov	r0, r3
 801925e:	f7fc fec9 	bl	8015ff4 <USBPD_DPM_RequestGetBatteryCapability>
 8019262:	4603      	mov	r3, r0
 8019264:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8019268:	e08f      	b.n	801938a <Request_MessageReq+0x55a>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 801926a:	8bbb      	ldrh	r3, [r7, #28]
 801926c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019270:	f200 808d 	bhi.w	801938e <Request_MessageReq+0x55e>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8019274:	f107 0318 	add.w	r3, r7, #24
 8019278:	f107 021c 	add.w	r2, r7, #28
 801927c:	f107 011e 	add.w	r1, r7, #30
 8019280:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019284:	f7fe f9e8 	bl	8017658 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8019288:	7fbb      	ldrb	r3, [r7, #30]
 801928a:	2b0c      	cmp	r3, #12
 801928c:	f040 8081 	bne.w	8019392 <Request_MessageReq+0x562>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8019290:	69ba      	ldr	r2, [r7, #24]
 8019292:	7bfb      	ldrb	r3, [r7, #15]
 8019294:	4611      	mov	r1, r2
 8019296:	4618      	mov	r0, r3
 8019298:	f7fc fef0 	bl	801607c <USBPD_DPM_RequestGetBatteryStatus>
 801929c:	4603      	mov	r3, r0
 801929e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80192a2:	e076      	b.n	8019392 <Request_MessageReq+0x562>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint16_t manu_info;
      uint8_t nb_expected_tag = 0U;
 80192a4:	2300      	movs	r3, #0
 80192a6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 80192aa:	2300      	movs	r3, #0
 80192ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (length > TLV_SIZE_MAX)
 80192b0:	8bbb      	ldrh	r3, [r7, #28]
 80192b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80192b6:	d86e      	bhi.n	8019396 <Request_MessageReq+0x566>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80192b8:	f107 0318 	add.w	r3, r7, #24
 80192bc:	f107 021c 	add.w	r2, r7, #28
 80192c0:	f107 011e 	add.w	r1, r7, #30
 80192c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80192c8:	f7fe f9c6 	bl	8017658 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 80192cc:	e025      	b.n	801931a <Request_MessageReq+0x4ea>
      {
        nb_expected_tag++;
 80192ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80192d2:	3301      	adds	r3, #1
 80192d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 80192d8:	7fbb      	ldrb	r3, [r7, #30]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d104      	bne.n	80192e8 <Request_MessageReq+0x4b8>
        {
          sop = value[0];
 80192de:	69bb      	ldr	r3, [r7, #24]
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80192e6:	e00e      	b.n	8019306 <Request_MessageReq+0x4d6>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 80192e8:	7fbb      	ldrb	r3, [r7, #30]
 80192ea:	2b0d      	cmp	r3, #13
 80192ec:	d10b      	bne.n	8019306 <Request_MessageReq+0x4d6>
        {
          manu_info = USBPD_LE16(&value[0]);
 80192ee:	69bb      	ldr	r3, [r7, #24]
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	b29a      	uxth	r2, r3
 80192f4:	69bb      	ldr	r3, [r7, #24]
 80192f6:	3301      	adds	r3, #1
 80192f8:	781b      	ldrb	r3, [r3, #0]
 80192fa:	b29b      	uxth	r3, r3
 80192fc:	021b      	lsls	r3, r3, #8
 80192fe:	b29b      	uxth	r3, r3
 8019300:	4413      	add	r3, r2
 8019302:	b29b      	uxth	r3, r3
 8019304:	827b      	strh	r3, [r7, #18]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8019306:	f107 0318 	add.w	r3, r7, #24
 801930a:	f107 021c 	add.w	r2, r7, #28
 801930e:	f107 011e 	add.w	r1, r7, #30
 8019312:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019316:	f7fe f99f 	bl	8017658 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 801931a:	8bbb      	ldrh	r3, [r7, #28]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d006      	beq.n	801932e <Request_MessageReq+0x4fe>
 8019320:	8bbb      	ldrh	r3, [r7, #28]
 8019322:	2bff      	cmp	r3, #255	; 0xff
 8019324:	d803      	bhi.n	801932e <Request_MessageReq+0x4fe>
 8019326:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801932a:	2b01      	cmp	r3, #1
 801932c:	d9cf      	bls.n	80192ce <Request_MessageReq+0x49e>
      }
      if (2U == nb_expected_tag)
 801932e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019332:	2b02      	cmp	r3, #2
 8019334:	d131      	bne.n	801939a <Request_MessageReq+0x56a>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 8019336:	f107 0212 	add.w	r2, r7, #18
 801933a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801933e:	7bfb      	ldrb	r3, [r7, #15]
 8019340:	4618      	mov	r0, r3
 8019342:	f7fc fcc7 	bl	8015cd4 <USBPD_DPM_RequestGetManufacturerInfo>
 8019346:	4603      	mov	r3, r0
 8019348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 801934c:	e025      	b.n	801939a <Request_MessageReq+0x56a>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 801934e:	7bfb      	ldrb	r3, [r7, #15]
 8019350:	4618      	mov	r0, r3
 8019352:	f7fc fed7 	bl	8016104 <USBPD_DPM_RequestSecurityRequest>
 8019356:	4603      	mov	r3, r0
 8019358:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 801935c:	e01e      	b.n	801939c <Request_MessageReq+0x56c>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 801935e:	bf00      	nop
 8019360:	e01c      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 8019362:	bf00      	nop
 8019364:	e01a      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 8019366:	bf00      	nop
 8019368:	e018      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 801936a:	bf00      	nop
 801936c:	e016      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 801936e:	bf00      	nop
 8019370:	e014      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 8019372:	bf00      	nop
 8019374:	e012      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 8019376:	bf00      	nop
 8019378:	e010      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 801937a:	bf00      	nop
 801937c:	e00e      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 801937e:	bf00      	nop
 8019380:	e00c      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 8019382:	bf00      	nop
 8019384:	e00a      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 8019386:	bf00      	nop
 8019388:	e008      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 801938a:	bf00      	nop
 801938c:	e006      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 801938e:	bf00      	nop
 8019390:	e004      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 8019392:	bf00      	nop
 8019394:	e002      	b.n	801939c <Request_MessageReq+0x56c>
        break;
 8019396:	bf00      	nop
 8019398:	e000      	b.n	801939c <Request_MessageReq+0x56c>
      break;
 801939a:	bf00      	nop
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 801939c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d02b      	beq.n	80193fc <Request_MessageReq+0x5cc>
  {
    switch (status)
 80193a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80193a8:	2b03      	cmp	r3, #3
 80193aa:	d002      	beq.n	80193b2 <Request_MessageReq+0x582>
 80193ac:	2b04      	cmp	r3, #4
 80193ae:	d003      	beq.n	80193b8 <Request_MessageReq+0x588>
 80193b0:	e005      	b.n	80193be <Request_MessageReq+0x58e>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 80193b2:	2306      	movs	r3, #6
 80193b4:	77fb      	strb	r3, [r7, #31]
        break;
 80193b6:	e005      	b.n	80193c4 <Request_MessageReq+0x594>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 80193b8:	2302      	movs	r3, #2
 80193ba:	77fb      	strb	r3, [r7, #31]
        break;
 80193bc:	e002      	b.n	80193c4 <Request_MessageReq+0x594>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 80193be:	2300      	movs	r3, #0
 80193c0:	77fb      	strb	r3, [r7, #31]
        break;
 80193c2:	bf00      	nop
    }
    TLV_deinit_encode(&send_tlv);
 80193c4:	f107 0320 	add.w	r3, r7, #32
 80193c8:	4618      	mov	r0, r3
 80193ca:	f7fe f903 	bl	80175d4 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 80193ce:	7bfb      	ldrb	r3, [r7, #15]
 80193d0:	3301      	adds	r3, #1
 80193d2:	015b      	lsls	r3, r3, #5
 80193d4:	b25b      	sxtb	r3, r3
 80193d6:	f043 030b 	orr.w	r3, r3, #11
 80193da:	b25b      	sxtb	r3, r3
 80193dc:	b2d9      	uxtb	r1, r3
 80193de:	f107 0020 	add.w	r0, r7, #32
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80193e8:	f7fd ff4d 	bl	8017286 <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 80193ec:	f107 011f 	add.w	r1, r7, #31
 80193f0:	f107 0320 	add.w	r3, r7, #32
 80193f4:	2201      	movs	r2, #1
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7fe f85c 	bl	80174b4 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 80193fc:	f107 0320 	add.w	r3, r7, #32
 8019400:	4618      	mov	r0, r3
 8019402:	f7fe f8e7 	bl	80175d4 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 8019406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801940a:	4618      	mov	r0, r3
 801940c:	f7fe f980 	bl	8017710 <TLV_deinit_decode>
}
 8019410:	bf00      	nop
 8019412:	3740      	adds	r7, #64	; 0x40
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}

08019418 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8019418:	b590      	push	{r4, r7, lr}
 801941a:	b0d5      	sub	sp, #340	; 0x154
 801941c:	af00      	add	r7, sp, #0
 801941e:	f107 0308 	add.w	r3, r7, #8
 8019422:	6019      	str	r1, [r3, #0]
 8019424:	1d3b      	adds	r3, r7, #4
 8019426:	601a      	str	r2, [r3, #0]
 8019428:	f107 030f 	add.w	r3, r7, #15
 801942c:	4602      	mov	r2, r0
 801942e:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8019430:	2300      	movs	r3, #0
 8019432:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
  uint8_t error = 0xFF;
 8019436:	23ff      	movs	r3, #255	; 0xff
 8019438:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 801943c:	2300      	movs	r3, #0
 801943e:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
  uint8_t tag;
  uint8_t flag_drp = 0;
 8019442:	2300      	movs	r3, #0
 8019444:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
  uint8_t tdrp = 0;
 8019448:	2300      	movs	r3, #0
 801944a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

  (void)TLV_init_decode(&process_tlv, instruction);
 801944e:	f107 0308 	add.w	r3, r7, #8
 8019452:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8019456:	6819      	ldr	r1, [r3, #0]
 8019458:	4610      	mov	r0, r2
 801945a:	f7fe f8cf 	bl	80175fc <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801945e:	f107 030f 	add.w	r3, r7, #15
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	3301      	adds	r3, #1
 8019466:	015b      	lsls	r3, r3, #5
 8019468:	b25b      	sxtb	r3, r3
 801946a:	f043 0307 	orr.w	r3, r3, #7
 801946e:	b25b      	sxtb	r3, r3
 8019470:	b2d9      	uxtb	r1, r3
 8019472:	1d3b      	adds	r3, r7, #4
 8019474:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801947e:	f7fd ff02 	bl	8017286 <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8019482:	e24b      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 8019484:	f107 0317 	add.w	r3, r7, #23
 8019488:	781b      	ldrb	r3, [r3, #0]
 801948a:	2b1c      	cmp	r3, #28
 801948c:	f200 8235 	bhi.w	80198fa <Send_DpmConfigSetCnf+0x4e2>
 8019490:	a201      	add	r2, pc, #4	; (adr r2, 8019498 <Send_DpmConfigSetCnf+0x80>)
 8019492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019496:	bf00      	nop
 8019498:	0801950d 	.word	0x0801950d
 801949c:	080198fb 	.word	0x080198fb
 80194a0:	0801952b 	.word	0x0801952b
 80194a4:	08019559 	.word	0x08019559
 80194a8:	080195a5 	.word	0x080195a5
 80194ac:	080195cf 	.word	0x080195cf
 80194b0:	080195f9 	.word	0x080195f9
 80194b4:	08019623 	.word	0x08019623
 80194b8:	0801964d 	.word	0x0801964d
 80194bc:	080198fb 	.word	0x080198fb
 80194c0:	08019673 	.word	0x08019673
 80194c4:	0801969d 	.word	0x0801969d
 80194c8:	080196d1 	.word	0x080196d1
 80194cc:	080198fb 	.word	0x080198fb
 80194d0:	08019775 	.word	0x08019775
 80194d4:	080197ad 	.word	0x080197ad
 80194d8:	080197e5 	.word	0x080197e5
 80194dc:	0801980f 	.word	0x0801980f
 80194e0:	08019849 	.word	0x08019849
 80194e4:	080198fb 	.word	0x080198fb
 80194e8:	080198fb 	.word	0x080198fb
 80194ec:	080198fb 	.word	0x080198fb
 80194f0:	080198fb 	.word	0x080198fb
 80194f4:	08019883 	.word	0x08019883
 80194f8:	080198af 	.word	0x080198af
 80194fc:	080198fb 	.word	0x080198fb
 8019500:	080198db 	.word	0x080198db
 8019504:	080198fb 	.word	0x080198fb
 8019508:	0801957f 	.word	0x0801957f
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 801950c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019510:	7819      	ldrb	r1, [r3, #0]
 8019512:	f107 030f 	add.w	r3, r7, #15
 8019516:	781a      	ldrb	r2, [r3, #0]
 8019518:	4608      	mov	r0, r1
 801951a:	49c7      	ldr	r1, [pc, #796]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 801951c:	4613      	mov	r3, r2
 801951e:	005b      	lsls	r3, r3, #1
 8019520:	4413      	add	r3, r2
 8019522:	009b      	lsls	r3, r3, #2
 8019524:	440b      	add	r3, r1
 8019526:	6018      	str	r0, [r3, #0]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 8019528:	e1f8      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 801952a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801952e:	7819      	ldrb	r1, [r3, #0]
 8019530:	f107 030f 	add.w	r3, r7, #15
 8019534:	781a      	ldrb	r2, [r3, #0]
 8019536:	460b      	mov	r3, r1
 8019538:	f003 0301 	and.w	r3, r3, #1
 801953c:	b2d9      	uxtb	r1, r3
 801953e:	48be      	ldr	r0, [pc, #760]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 8019540:	4613      	mov	r3, r2
 8019542:	005b      	lsls	r3, r3, #1
 8019544:	4413      	add	r3, r2
 8019546:	009b      	lsls	r3, r3, #2
 8019548:	4403      	add	r3, r0
 801954a:	f103 0208 	add.w	r2, r3, #8
 801954e:	7813      	ldrb	r3, [r2, #0]
 8019550:	f361 0341 	bfi	r3, r1, #1, #1
 8019554:	7013      	strb	r3, [r2, #0]
        break;
 8019556:	e1e1      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 8019558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801955c:	781a      	ldrb	r2, [r3, #0]
 801955e:	f107 030f 	add.w	r3, r7, #15
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	f002 0201 	and.w	r2, r2, #1
 8019568:	b2d1      	uxtb	r1, r2
 801956a:	4ab4      	ldr	r2, [pc, #720]	; (801983c <Send_DpmConfigSetCnf+0x424>)
 801956c:	2074      	movs	r0, #116	; 0x74
 801956e:	fb00 f303 	mul.w	r3, r0, r3
 8019572:	441a      	add	r2, r3
 8019574:	7813      	ldrb	r3, [r2, #0]
 8019576:	f361 03c3 	bfi	r3, r1, #3, #1
 801957a:	7013      	strb	r3, [r2, #0]
        break;
 801957c:	e1ce      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 801957e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019582:	781a      	ldrb	r2, [r3, #0]
 8019584:	f107 030f 	add.w	r3, r7, #15
 8019588:	781b      	ldrb	r3, [r3, #0]
 801958a:	f002 0201 	and.w	r2, r2, #1
 801958e:	b2d1      	uxtb	r1, r2
 8019590:	4aaa      	ldr	r2, [pc, #680]	; (801983c <Send_DpmConfigSetCnf+0x424>)
 8019592:	2074      	movs	r0, #116	; 0x74
 8019594:	fb00 f303 	mul.w	r3, r0, r3
 8019598:	441a      	add	r2, r3
 801959a:	7813      	ldrb	r3, [r2, #0]
 801959c:	f361 0382 	bfi	r3, r1, #2, #1
 80195a0:	7013      	strb	r3, [r2, #0]
        break;
 80195a2:	e1bb      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 80195a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80195a8:	7819      	ldrb	r1, [r3, #0]
 80195aa:	f107 030f 	add.w	r3, r7, #15
 80195ae:	781a      	ldrb	r2, [r3, #0]
 80195b0:	460b      	mov	r3, r1
 80195b2:	f003 0301 	and.w	r3, r3, #1
 80195b6:	b2d9      	uxtb	r1, r3
 80195b8:	489f      	ldr	r0, [pc, #636]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 80195ba:	4613      	mov	r3, r2
 80195bc:	005b      	lsls	r3, r3, #1
 80195be:	4413      	add	r3, r2
 80195c0:	009b      	lsls	r3, r3, #2
 80195c2:	18c2      	adds	r2, r0, r3
 80195c4:	7913      	ldrb	r3, [r2, #4]
 80195c6:	f361 0382 	bfi	r3, r1, #2, #1
 80195ca:	7113      	strb	r3, [r2, #4]
        break;
 80195cc:	e1a6      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 80195ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80195d2:	7819      	ldrb	r1, [r3, #0]
 80195d4:	f107 030f 	add.w	r3, r7, #15
 80195d8:	781a      	ldrb	r2, [r3, #0]
 80195da:	460b      	mov	r3, r1
 80195dc:	f003 0301 	and.w	r3, r3, #1
 80195e0:	b2d9      	uxtb	r1, r3
 80195e2:	4895      	ldr	r0, [pc, #596]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 80195e4:	4613      	mov	r3, r2
 80195e6:	005b      	lsls	r3, r3, #1
 80195e8:	4413      	add	r3, r2
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	18c2      	adds	r2, r0, r3
 80195ee:	7913      	ldrb	r3, [r2, #4]
 80195f0:	f361 03c3 	bfi	r3, r1, #3, #1
 80195f4:	7113      	strb	r3, [r2, #4]
        break;
 80195f6:	e191      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 80195f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80195fc:	7819      	ldrb	r1, [r3, #0]
 80195fe:	f107 030f 	add.w	r3, r7, #15
 8019602:	781a      	ldrb	r2, [r3, #0]
 8019604:	460b      	mov	r3, r1
 8019606:	f003 0301 	and.w	r3, r3, #1
 801960a:	b2d9      	uxtb	r1, r3
 801960c:	488a      	ldr	r0, [pc, #552]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 801960e:	4613      	mov	r3, r2
 8019610:	005b      	lsls	r3, r3, #1
 8019612:	4413      	add	r3, r2
 8019614:	009b      	lsls	r3, r3, #2
 8019616:	18c2      	adds	r2, r0, r3
 8019618:	7953      	ldrb	r3, [r2, #5]
 801961a:	f361 1345 	bfi	r3, r1, #5, #1
 801961e:	7153      	strb	r3, [r2, #5]
        break;
 8019620:	e17c      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 8019622:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019626:	7819      	ldrb	r1, [r3, #0]
 8019628:	f107 030f 	add.w	r3, r7, #15
 801962c:	781a      	ldrb	r2, [r3, #0]
 801962e:	460b      	mov	r3, r1
 8019630:	f003 0301 	and.w	r3, r3, #1
 8019634:	b2d9      	uxtb	r1, r3
 8019636:	4880      	ldr	r0, [pc, #512]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 8019638:	4613      	mov	r3, r2
 801963a:	005b      	lsls	r3, r3, #1
 801963c:	4413      	add	r3, r2
 801963e:	009b      	lsls	r3, r3, #2
 8019640:	18c2      	adds	r2, r0, r3
 8019642:	7913      	ldrb	r3, [r2, #4]
 8019644:	f361 13c7 	bfi	r3, r1, #7, #1
 8019648:	7113      	strb	r3, [r2, #4]
        break;
 801964a:	e167      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 801964c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019650:	781a      	ldrb	r2, [r3, #0]
 8019652:	f107 030f 	add.w	r3, r7, #15
 8019656:	781b      	ldrb	r3, [r3, #0]
 8019658:	f002 0201 	and.w	r2, r2, #1
 801965c:	b2d1      	uxtb	r1, r2
 801965e:	4a77      	ldr	r2, [pc, #476]	; (801983c <Send_DpmConfigSetCnf+0x424>)
 8019660:	2074      	movs	r0, #116	; 0x74
 8019662:	fb00 f303 	mul.w	r3, r0, r3
 8019666:	441a      	add	r2, r3
 8019668:	7813      	ldrb	r3, [r2, #0]
 801966a:	f361 0341 	bfi	r3, r1, #1, #1
 801966e:	7013      	strb	r3, [r2, #0]
        break;
 8019670:	e154      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 8019672:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019676:	7819      	ldrb	r1, [r3, #0]
 8019678:	f107 030f 	add.w	r3, r7, #15
 801967c:	781a      	ldrb	r2, [r3, #0]
 801967e:	460b      	mov	r3, r1
 8019680:	f003 0301 	and.w	r3, r3, #1
 8019684:	b2d9      	uxtb	r1, r3
 8019686:	486c      	ldr	r0, [pc, #432]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 8019688:	4613      	mov	r3, r2
 801968a:	005b      	lsls	r3, r3, #1
 801968c:	4413      	add	r3, r2
 801968e:	009b      	lsls	r3, r3, #2
 8019690:	18c2      	adds	r2, r0, r3
 8019692:	7913      	ldrb	r3, [r2, #4]
 8019694:	f361 1386 	bfi	r3, r1, #6, #1
 8019698:	7113      	strb	r3, [r2, #4]
        break;
 801969a:	e13f      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 801969c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	b299      	uxth	r1, r3
 80196a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80196a8:	3301      	adds	r3, #1
 80196aa:	781b      	ldrb	r3, [r3, #0]
 80196ac:	b29b      	uxth	r3, r3
 80196ae:	021b      	lsls	r3, r3, #8
 80196b0:	b29b      	uxth	r3, r3
 80196b2:	f107 020f 	add.w	r2, r7, #15
 80196b6:	7812      	ldrb	r2, [r2, #0]
 80196b8:	440b      	add	r3, r1
 80196ba:	b298      	uxth	r0, r3
 80196bc:	495e      	ldr	r1, [pc, #376]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 80196be:	4613      	mov	r3, r2
 80196c0:	005b      	lsls	r3, r3, #1
 80196c2:	4413      	add	r3, r2
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	440b      	add	r3, r1
 80196c8:	3308      	adds	r3, #8
 80196ca:	4602      	mov	r2, r0
 80196cc:	801a      	strh	r2, [r3, #0]
        break;
 80196ce:	e125      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 80196d0:	221c      	movs	r2, #28
 80196d2:	2100      	movs	r1, #0
 80196d4:	485a      	ldr	r0, [pc, #360]	; (8019840 <Send_DpmConfigSetCnf+0x428>)
 80196d6:	f002 f8f5 	bl	801b8c4 <memset>
          index_pdo = 0;
 80196da:	2300      	movs	r3, #0
 80196dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80196e0:	2300      	movs	r3, #0
 80196e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80196e6:	e034      	b.n	8019752 <Send_DpmConfigSetCnf+0x33a>
          {
            pdo = USBPD_LE32(&value[index_gui]);
 80196e8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80196ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80196f0:	4413      	add	r3, r2
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	4619      	mov	r1, r3
 80196f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80196fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80196fe:	3301      	adds	r3, #1
 8019700:	4413      	add	r3, r2
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	021b      	lsls	r3, r3, #8
 8019706:	18ca      	adds	r2, r1, r3
 8019708:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801970c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019710:	3302      	adds	r3, #2
 8019712:	440b      	add	r3, r1
 8019714:	781b      	ldrb	r3, [r3, #0]
 8019716:	041b      	lsls	r3, r3, #16
 8019718:	441a      	add	r2, r3
 801971a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801971e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8019722:	3303      	adds	r3, #3
 8019724:	440b      	add	r3, r1
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	061b      	lsls	r3, r3, #24
 801972a:	4413      	add	r3, r2
 801972c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 8019730:	4943      	ldr	r1, [pc, #268]	; (8019840 <Send_DpmConfigSetCnf+0x428>)
 8019732:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019736:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801973a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            index_pdo++;
 801973e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019742:	3301      	adds	r3, #1
 8019744:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8019748:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801974c:	3304      	adds	r3, #4
 801974e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8019752:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8019756:	461a      	mov	r2, r3
 8019758:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801975c:	4293      	cmp	r3, r2
 801975e:	d3c3      	bcc.n	80196e8 <Send_DpmConfigSetCnf+0x2d0>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 8019760:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8019764:	089b      	lsrs	r3, r3, #2
 8019766:	b29b      	uxth	r3, r3
 8019768:	b2da      	uxtb	r2, r3
 801976a:	4b36      	ldr	r3, [pc, #216]	; (8019844 <Send_DpmConfigSetCnf+0x42c>)
 801976c:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 801976e:	f000 ff6f 	bl	801a650 <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 8019772:	e0d3      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
#endif /* USBPD_PORT_COUNT==2 */
        break;
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 8019774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 801977e:	f107 030f 	add.w	r3, r7, #15
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8019788:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801978c:	b2d1      	uxtb	r1, r2
 801978e:	4a2b      	ldr	r2, [pc, #172]	; (801983c <Send_DpmConfigSetCnf+0x424>)
 8019790:	2074      	movs	r0, #116	; 0x74
 8019792:	fb00 f303 	mul.w	r3, r0, r3
 8019796:	4413      	add	r3, r2
 8019798:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801979c:	7913      	ldrb	r3, [r2, #4]
 801979e:	f361 0347 	bfi	r3, r1, #1, #7
 80197a2:	7113      	strb	r3, [r2, #4]
        flag_drp = 1;
 80197a4:	2301      	movs	r3, #1
 80197a6:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
        break;
 80197aa:	e0b7      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 80197ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80197b0:	781b      	ldrb	r3, [r3, #0]
 80197b2:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 80197b6:	f107 030f 	add.w	r3, r7, #15
 80197ba:	781b      	ldrb	r3, [r3, #0]
 80197bc:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80197c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80197c4:	b2d1      	uxtb	r1, r2
 80197c6:	4a1d      	ldr	r2, [pc, #116]	; (801983c <Send_DpmConfigSetCnf+0x424>)
 80197c8:	2074      	movs	r0, #116	; 0x74
 80197ca:	fb00 f303 	mul.w	r3, r0, r3
 80197ce:	4413      	add	r3, r2
 80197d0:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80197d4:	7953      	ldrb	r3, [r2, #5]
 80197d6:	f361 0306 	bfi	r3, r1, #0, #7
 80197da:	7153      	strb	r3, [r2, #5]
        flag_drp = 1;
 80197dc:	2301      	movs	r3, #1
 80197de:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
        break;
 80197e2:	e09b      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 80197e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80197e8:	7819      	ldrb	r1, [r3, #0]
 80197ea:	f107 030f 	add.w	r3, r7, #15
 80197ee:	781a      	ldrb	r2, [r3, #0]
 80197f0:	460b      	mov	r3, r1
 80197f2:	f003 0301 	and.w	r3, r3, #1
 80197f6:	b2d9      	uxtb	r1, r3
 80197f8:	480f      	ldr	r0, [pc, #60]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 80197fa:	4613      	mov	r3, r2
 80197fc:	005b      	lsls	r3, r3, #1
 80197fe:	4413      	add	r3, r2
 8019800:	009b      	lsls	r3, r3, #2
 8019802:	18c2      	adds	r2, r0, r3
 8019804:	7953      	ldrb	r3, [r2, #5]
 8019806:	f361 0300 	bfi	r3, r1, #0, #1
 801980a:	7153      	strb	r3, [r2, #5]
        break;
 801980c:	e086      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 801980e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019812:	7819      	ldrb	r1, [r3, #0]
 8019814:	f107 030f 	add.w	r3, r7, #15
 8019818:	781a      	ldrb	r2, [r3, #0]
 801981a:	460b      	mov	r3, r1
 801981c:	f003 0301 	and.w	r3, r3, #1
 8019820:	b2d9      	uxtb	r1, r3
 8019822:	4805      	ldr	r0, [pc, #20]	; (8019838 <Send_DpmConfigSetCnf+0x420>)
 8019824:	4613      	mov	r3, r2
 8019826:	005b      	lsls	r3, r3, #1
 8019828:	4413      	add	r3, r2
 801982a:	009b      	lsls	r3, r3, #2
 801982c:	18c2      	adds	r2, r0, r3
 801982e:	7953      	ldrb	r3, [r2, #5]
 8019830:	f361 0341 	bfi	r3, r1, #1, #1
 8019834:	7153      	strb	r3, [r2, #5]
        break;
 8019836:	e071      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
 8019838:	20000144 	.word	0x20000144
 801983c:	20000158 	.word	0x20000158
 8019840:	2000023c 	.word	0x2000023c
 8019844:	20000238 	.word	0x20000238
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 8019848:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	461a      	mov	r2, r3
 8019850:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019854:	3301      	adds	r3, #1
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	021b      	lsls	r3, r3, #8
 801985a:	441a      	add	r2, r3
 801985c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019860:	3302      	adds	r3, #2
 8019862:	781b      	ldrb	r3, [r3, #0]
 8019864:	041b      	lsls	r3, r3, #16
 8019866:	18d1      	adds	r1, r2, r3
 8019868:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801986c:	3303      	adds	r3, #3
 801986e:	781b      	ldrb	r3, [r3, #0]
 8019870:	061a      	lsls	r2, r3, #24
 8019872:	f107 030f 	add.w	r3, r7, #15
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	440a      	add	r2, r1
 801987a:	499a      	ldr	r1, [pc, #616]	; (8019ae4 <Send_DpmConfigSetCnf+0x6cc>)
 801987c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        break;
 8019880:	e04c      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 8019882:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019886:	781b      	ldrb	r3, [r3, #0]
 8019888:	b299      	uxth	r1, r3
 801988a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801988e:	3301      	adds	r3, #1
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	b29b      	uxth	r3, r3
 8019894:	021b      	lsls	r3, r3, #8
 8019896:	b29a      	uxth	r2, r3
 8019898:	f107 030f 	add.w	r3, r7, #15
 801989c:	781b      	ldrb	r3, [r3, #0]
 801989e:	440a      	add	r2, r1
 80198a0:	b291      	uxth	r1, r2
 80198a2:	4a90      	ldr	r2, [pc, #576]	; (8019ae4 <Send_DpmConfigSetCnf+0x6cc>)
 80198a4:	00db      	lsls	r3, r3, #3
 80198a6:	4413      	add	r3, r2
 80198a8:	460a      	mov	r2, r1
 80198aa:	809a      	strh	r2, [r3, #4]
        break;
 80198ac:	e036      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 80198ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80198b2:	781b      	ldrb	r3, [r3, #0]
 80198b4:	b299      	uxth	r1, r3
 80198b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80198ba:	3301      	adds	r3, #1
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	b29b      	uxth	r3, r3
 80198c0:	021b      	lsls	r3, r3, #8
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	f107 030f 	add.w	r3, r7, #15
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	440a      	add	r2, r1
 80198cc:	b291      	uxth	r1, r2
 80198ce:	4a85      	ldr	r2, [pc, #532]	; (8019ae4 <Send_DpmConfigSetCnf+0x6cc>)
 80198d0:	00db      	lsls	r3, r3, #3
 80198d2:	4413      	add	r3, r2
 80198d4:	460a      	mov	r2, r1
 80198d6:	80da      	strh	r2, [r3, #6]
        break;
 80198d8:	e020      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 80198da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80198de:	f107 020f 	add.w	r2, r7, #15
 80198e2:	7812      	ldrb	r2, [r2, #0]
 80198e4:	7818      	ldrb	r0, [r3, #0]
 80198e6:	4980      	ldr	r1, [pc, #512]	; (8019ae8 <Send_DpmConfigSetCnf+0x6d0>)
 80198e8:	4613      	mov	r3, r2
 80198ea:	005b      	lsls	r3, r3, #1
 80198ec:	4413      	add	r3, r2
 80198ee:	005b      	lsls	r3, r3, #1
 80198f0:	440b      	add	r3, r1
 80198f2:	3304      	adds	r3, #4
 80198f4:	4602      	mov	r2, r0
 80198f6:	701a      	strb	r2, [r3, #0]
        break;
 80198f8:	e010      	b.n	801991c <Send_DpmConfigSetCnf+0x504>
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 80198fa:	2300      	movs	r3, #0
 80198fc:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
        param_not_applicated[counter_param_not_applicated] = tag;
 8019900:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8019904:	f107 0217 	add.w	r2, r7, #23
 8019908:	7811      	ldrb	r1, [r2, #0]
 801990a:	f107 0218 	add.w	r2, r7, #24
 801990e:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 8019910:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8019914:	3301      	adds	r3, #1
 8019916:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
        break;
 801991a:	bf00      	nop
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 801991c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8019920:	f507 728d 	add.w	r2, r7, #282	; 0x11a
 8019924:	f107 0117 	add.w	r1, r7, #23
 8019928:	f507 7090 	add.w	r0, r7, #288	; 0x120
 801992c:	f7fd fe94 	bl	8017658 <TLV_get>
 8019930:	4603      	mov	r3, r0
 8019932:	2bff      	cmp	r3, #255	; 0xff
 8019934:	f47f ada6 	bne.w	8019484 <Send_DpmConfigSetCnf+0x6c>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 8019938:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 801993c:	2b01      	cmp	r3, #1
 801993e:	f040 8085 	bne.w	8019a4c <Send_DpmConfigSetCnf+0x634>
  {
    uint16_t calcul;
    if (0U == tdrp)
 8019942:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8019946:	2b00      	cmp	r3, #0
 8019948:	d118      	bne.n	801997c <Send_DpmConfigSetCnf+0x564>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 801994a:	f107 030f 	add.w	r3, r7, #15
 801994e:	781a      	ldrb	r2, [r3, #0]
 8019950:	4966      	ldr	r1, [pc, #408]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 8019952:	4613      	mov	r3, r2
 8019954:	005b      	lsls	r3, r3, #1
 8019956:	4413      	add	r3, r2
 8019958:	009b      	lsls	r3, r3, #2
 801995a:	440b      	add	r3, r1
 801995c:	3306      	adds	r3, #6
 801995e:	7819      	ldrb	r1, [r3, #0]
 8019960:	f107 030f 	add.w	r3, r7, #15
 8019964:	781a      	ldrb	r2, [r3, #0]
 8019966:	4861      	ldr	r0, [pc, #388]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 8019968:	4613      	mov	r3, r2
 801996a:	005b      	lsls	r3, r3, #1
 801996c:	4413      	add	r3, r2
 801996e:	009b      	lsls	r3, r3, #2
 8019970:	4403      	add	r3, r0
 8019972:	3307      	adds	r3, #7
 8019974:	781b      	ldrb	r3, [r3, #0]
 8019976:	440b      	add	r3, r1
 8019978:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
    }
    if (0U == dcdrp)
 801997c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8019980:	2b00      	cmp	r3, #0
 8019982:	d12a      	bne.n	80199da <Send_DpmConfigSetCnf+0x5c2>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 8019984:	f107 030f 	add.w	r3, r7, #15
 8019988:	781a      	ldrb	r2, [r3, #0]
 801998a:	4958      	ldr	r1, [pc, #352]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 801998c:	4613      	mov	r3, r2
 801998e:	005b      	lsls	r3, r3, #1
 8019990:	4413      	add	r3, r2
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	440b      	add	r3, r1
 8019996:	3307      	adds	r3, #7
 8019998:	781b      	ldrb	r3, [r3, #0]
 801999a:	461a      	mov	r2, r3
 801999c:	2364      	movs	r3, #100	; 0x64
 801999e:	fb03 f102 	mul.w	r1, r3, r2
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 80199a2:	f107 030f 	add.w	r3, r7, #15
 80199a6:	781a      	ldrb	r2, [r3, #0]
 80199a8:	4850      	ldr	r0, [pc, #320]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 80199aa:	4613      	mov	r3, r2
 80199ac:	005b      	lsls	r3, r3, #1
 80199ae:	4413      	add	r3, r2
 80199b0:	009b      	lsls	r3, r3, #2
 80199b2:	4403      	add	r3, r0
 80199b4:	3306      	adds	r3, #6
 80199b6:	781b      	ldrb	r3, [r3, #0]
 80199b8:	461c      	mov	r4, r3
 80199ba:	f107 030f 	add.w	r3, r7, #15
 80199be:	781a      	ldrb	r2, [r3, #0]
 80199c0:	484a      	ldr	r0, [pc, #296]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 80199c2:	4613      	mov	r3, r2
 80199c4:	005b      	lsls	r3, r3, #1
 80199c6:	4413      	add	r3, r2
 80199c8:	009b      	lsls	r3, r3, #2
 80199ca:	4403      	add	r3, r0
 80199cc:	3307      	adds	r3, #7
 80199ce:	781b      	ldrb	r3, [r3, #0]
 80199d0:	4423      	add	r3, r4
 80199d2:	fbb1 f3f3 	udiv	r3, r1, r3
      dcdrp = (uint16_t)
 80199d6:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
    }
    calcul = (tdrp * dcdrp) / 100U;
 80199da:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80199de:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 80199e2:	fb02 f303 	mul.w	r3, r2, r3
 80199e6:	461a      	mov	r2, r3
 80199e8:	4b41      	ldr	r3, [pc, #260]	; (8019af0 <Send_DpmConfigSetCnf+0x6d8>)
 80199ea:	fba3 2302 	umull	r2, r3, r3, r2
 80199ee:	095b      	lsrs	r3, r3, #5
 80199f0:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 80199f4:	f107 030f 	add.w	r3, r7, #15
 80199f8:	781a      	ldrb	r2, [r3, #0]
 80199fa:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80199fe:	b2d8      	uxtb	r0, r3
 8019a00:	493a      	ldr	r1, [pc, #232]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 8019a02:	4613      	mov	r3, r2
 8019a04:	005b      	lsls	r3, r3, #1
 8019a06:	4413      	add	r3, r2
 8019a08:	009b      	lsls	r3, r3, #2
 8019a0a:	440b      	add	r3, r1
 8019a0c:	3307      	adds	r3, #7
 8019a0e:	4602      	mov	r2, r0
 8019a10:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 8019a12:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8019a16:	f8b7 214e 	ldrh.w	r2, [r7, #334]	; 0x14e
 8019a1a:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8019a1e:	fb02 f303 	mul.w	r3, r2, r3
 8019a22:	4a33      	ldr	r2, [pc, #204]	; (8019af0 <Send_DpmConfigSetCnf+0x6d8>)
 8019a24:	fba2 2303 	umull	r2, r3, r2, r3
 8019a28:	095b      	lsrs	r3, r3, #5
 8019a2a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8019a2e:	f107 030f 	add.w	r3, r7, #15
 8019a32:	781a      	ldrb	r2, [r3, #0]
 8019a34:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8019a38:	b2d8      	uxtb	r0, r3
 8019a3a:	492c      	ldr	r1, [pc, #176]	; (8019aec <Send_DpmConfigSetCnf+0x6d4>)
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	005b      	lsls	r3, r3, #1
 8019a40:	4413      	add	r3, r2
 8019a42:	009b      	lsls	r3, r3, #2
 8019a44:	440b      	add	r3, r1
 8019a46:	3306      	adds	r3, #6
 8019a48:	4602      	mov	r2, r0
 8019a4a:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8019a4c:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8019a50:	2bff      	cmp	r3, #255	; 0xff
 8019a52:	d041      	beq.n	8019ad8 <Send_DpmConfigSetCnf+0x6c0>
  {
    TLV_deinit_encode(&send_tlv);
 8019a54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8019a58:	4618      	mov	r0, r3
 8019a5a:	f7fd fdbb 	bl	80175d4 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 8019a5e:	f107 030f 	add.w	r3, r7, #15
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	3301      	adds	r3, #1
 8019a66:	015b      	lsls	r3, r3, #5
 8019a68:	b25b      	sxtb	r3, r3
 8019a6a:	f043 0308 	orr.w	r3, r3, #8
 8019a6e:	b25b      	sxtb	r3, r3
 8019a70:	b2d9      	uxtb	r1, r3
 8019a72:	1d3b      	adds	r3, r7, #4
 8019a74:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a7e:	f7fd fc02 	bl	8017286 <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 8019a82:	f207 1119 	addw	r1, r7, #281	; 0x119
 8019a86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8019a8a:	2201      	movs	r2, #1
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7fd fd11 	bl	80174b4 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 8019a92:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d019      	beq.n	8019ace <Send_DpmConfigSetCnf+0x6b6>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8019aa0:	e00f      	b.n	8019ac2 <Send_DpmConfigSetCnf+0x6aa>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 8019aa2:	f107 0218 	add.w	r2, r7, #24
 8019aa6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019aaa:	18d1      	adds	r1, r2, r3
 8019aac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8019ab0:	2201      	movs	r2, #1
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7fd fcfe 	bl	80174b4 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 8019ab8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019abc:	3301      	adds	r3, #1
 8019abe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8019ac2:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8019ac6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d3e9      	bcc.n	8019aa2 <Send_DpmConfigSetCnf+0x68a>
      }
    }
    TLV_deinit_encode(&send_tlv);
 8019ace:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7fd fd7e 	bl	80175d4 <TLV_deinit_encode>
  }
}
 8019ad8:	bf00      	nop
 8019ada:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd90      	pop	{r4, r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	20000150 	.word	0x20000150
 8019ae8:	20004990 	.word	0x20004990
 8019aec:	20000144 	.word	0x20000144
 8019af0:	51eb851f 	.word	0x51eb851f

08019af4 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b092      	sub	sp, #72	; 0x48
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	4603      	mov	r3, r0
 8019afc:	60b9      	str	r1, [r7, #8]
 8019afe:	607a      	str	r2, [r7, #4]
 8019b00:	73fb      	strb	r3, [r7, #15]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8019b02:	7bfb      	ldrb	r3, [r7, #15]
 8019b04:	3301      	adds	r3, #1
 8019b06:	015b      	lsls	r3, r3, #5
 8019b08:	b25b      	sxtb	r3, r3
 8019b0a:	f043 0305 	orr.w	r3, r3, #5
 8019b0e:	b25b      	sxtb	r3, r3
 8019b10:	b2d9      	uxtb	r1, r3
 8019b12:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019b1c:	f7fd fbb3 	bl	8017286 <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 8019b20:	68b8      	ldr	r0, [r7, #8]
 8019b22:	f7fd fe05 	bl	8017730 <TLV_get_string_length>
 8019b26:	4603      	mov	r3, r0
 8019b28:	3b03      	subs	r3, #3
 8019b2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint8_t index = 0;
 8019b2e:	2300      	movs	r3, #0
 8019b30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditionnal breaks) */
    if (0U == length)
 8019b34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d103      	bne.n	8019b44 <Send_DpmConfigGetCnf+0x50>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8019b3c:	23ff      	movs	r3, #255	; 0xff
 8019b3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8019b42:	e007      	b.n	8019b54 <Send_DpmConfigGetCnf+0x60>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8019b44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019b48:	3307      	adds	r3, #7
 8019b4a:	68ba      	ldr	r2, [r7, #8]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8019b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019b58:	2b1c      	cmp	r3, #28
 8019b5a:	dc43      	bgt.n	8019be4 <Send_DpmConfigGetCnf+0xf0>
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	f2c0 822e 	blt.w	8019fbe <Send_DpmConfigGetCnf+0x4ca>
 8019b62:	2b1c      	cmp	r3, #28
 8019b64:	f200 822b 	bhi.w	8019fbe <Send_DpmConfigGetCnf+0x4ca>
 8019b68:	a201      	add	r2, pc, #4	; (adr r2, 8019b70 <Send_DpmConfigGetCnf+0x7c>)
 8019b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b6e:	bf00      	nop
 8019b70:	08019beb 	.word	0x08019beb
 8019b74:	08019fbf 	.word	0x08019fbf
 8019b78:	08019c1b 	.word	0x08019c1b
 8019b7c:	08019c51 	.word	0x08019c51
 8019b80:	08019cb5 	.word	0x08019cb5
 8019b84:	08019ce9 	.word	0x08019ce9
 8019b88:	08019d1d 	.word	0x08019d1d
 8019b8c:	08019d51 	.word	0x08019d51
 8019b90:	08019de7 	.word	0x08019de7
 8019b94:	08019fbf 	.word	0x08019fbf
 8019b98:	08019d85 	.word	0x08019d85
 8019b9c:	08019db9 	.word	0x08019db9
 8019ba0:	08019e19 	.word	0x08019e19
 8019ba4:	08019fbf 	.word	0x08019fbf
 8019ba8:	08019e45 	.word	0x08019e45
 8019bac:	08019e79 	.word	0x08019e79
 8019bb0:	08019ead 	.word	0x08019ead
 8019bb4:	08019ee1 	.word	0x08019ee1
 8019bb8:	08019f13 	.word	0x08019f13
 8019bbc:	08019fbf 	.word	0x08019fbf
 8019bc0:	08019fbf 	.word	0x08019fbf
 8019bc4:	08019fbf 	.word	0x08019fbf
 8019bc8:	08019fbf 	.word	0x08019fbf
 8019bcc:	08019f35 	.word	0x08019f35
 8019bd0:	08019f59 	.word	0x08019f59
 8019bd4:	08019fbf 	.word	0x08019fbf
 8019bd8:	08019f93 	.word	0x08019f93
 8019bdc:	08019fbf 	.word	0x08019fbf
 8019be0:	08019c83 	.word	0x08019c83
 8019be4:	2bff      	cmp	r3, #255	; 0xff
 8019be6:	f040 81ea 	bne.w	8019fbe <Send_DpmConfigGetCnf+0x4ca>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8019bea:	7bfa      	ldrb	r2, [r7, #15]
 8019bec:	49dd      	ldr	r1, [pc, #884]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019bee:	4613      	mov	r3, r2
 8019bf0:	005b      	lsls	r3, r3, #1
 8019bf2:	4413      	add	r3, r2
 8019bf4:	009b      	lsls	r3, r3, #2
 8019bf6:	440b      	add	r3, r1
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	b2db      	uxtb	r3, r3
 8019bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 8019c00:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8019c04:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019c08:	2201      	movs	r2, #1
 8019c0a:	2100      	movs	r1, #0
 8019c0c:	f7fd fb94 	bl	8017338 <TLV_add>
        if (0U != length)
 8019c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	f040 81e2 	bne.w	8019fde <Send_DpmConfigGetCnf+0x4ea>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8019c1a:	7bfa      	ldrb	r2, [r7, #15]
 8019c1c:	49d1      	ldr	r1, [pc, #836]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019c1e:	4613      	mov	r3, r2
 8019c20:	005b      	lsls	r3, r3, #1
 8019c22:	4413      	add	r3, r2
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	440b      	add	r3, r1
 8019c28:	3308      	adds	r3, #8
 8019c2a:	781b      	ldrb	r3, [r3, #0]
 8019c2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019c30:	b2db      	uxtb	r3, r3
 8019c32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8019c36:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8019c3a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019c3e:	2201      	movs	r2, #1
 8019c40:	2102      	movs	r1, #2
 8019c42:	f7fd fb79 	bl	8017338 <TLV_add>
        if (0U != length)
 8019c46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	f040 81c9 	bne.w	8019fe2 <Send_DpmConfigGetCnf+0x4ee>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 8019c50:	7bfb      	ldrb	r3, [r7, #15]
 8019c52:	4ac5      	ldr	r2, [pc, #788]	; (8019f68 <Send_DpmConfigGetCnf+0x474>)
 8019c54:	2174      	movs	r1, #116	; 0x74
 8019c56:	fb01 f303 	mul.w	r3, r1, r3
 8019c5a:	4413      	add	r3, r2
 8019c5c:	781b      	ldrb	r3, [r3, #0]
 8019c5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019c62:	b2db      	uxtb	r3, r3
 8019c64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8019c68:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8019c6c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019c70:	2201      	movs	r2, #1
 8019c72:	2103      	movs	r1, #3
 8019c74:	f7fd fb60 	bl	8017338 <TLV_add>
        if (0U != length)
 8019c78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	f040 81b2 	bne.w	8019fe6 <Send_DpmConfigGetCnf+0x4f2>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8019c82:	7bfb      	ldrb	r3, [r7, #15]
 8019c84:	4ab8      	ldr	r2, [pc, #736]	; (8019f68 <Send_DpmConfigGetCnf+0x474>)
 8019c86:	2174      	movs	r1, #116	; 0x74
 8019c88:	fb01 f303 	mul.w	r3, r1, r3
 8019c8c:	4413      	add	r3, r2
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019c94:	b2db      	uxtb	r3, r3
 8019c96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8019c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019c9e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019ca2:	2201      	movs	r2, #1
 8019ca4:	211c      	movs	r1, #28
 8019ca6:	f7fd fb47 	bl	8017338 <TLV_add>
        if (0U != length)
 8019caa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f040 819b 	bne.w	8019fea <Send_DpmConfigGetCnf+0x4f6>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 8019cb4:	7bfa      	ldrb	r2, [r7, #15]
 8019cb6:	49ab      	ldr	r1, [pc, #684]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019cb8:	4613      	mov	r3, r2
 8019cba:	005b      	lsls	r3, r3, #1
 8019cbc:	4413      	add	r3, r2
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	440b      	add	r3, r1
 8019cc2:	791b      	ldrb	r3, [r3, #4]
 8019cc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8019cce:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8019cd2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019cd6:	2201      	movs	r2, #1
 8019cd8:	2104      	movs	r1, #4
 8019cda:	f7fd fb2d 	bl	8017338 <TLV_add>
        if (0U != length)
 8019cde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	f040 8183 	bne.w	8019fee <Send_DpmConfigGetCnf+0x4fa>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 8019ce8:	7bfa      	ldrb	r2, [r7, #15]
 8019cea:	499e      	ldr	r1, [pc, #632]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019cec:	4613      	mov	r3, r2
 8019cee:	005b      	lsls	r3, r3, #1
 8019cf0:	4413      	add	r3, r2
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	440b      	add	r3, r1
 8019cf6:	791b      	ldrb	r3, [r3, #4]
 8019cf8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 8019d02:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8019d06:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019d0a:	2201      	movs	r2, #1
 8019d0c:	2105      	movs	r1, #5
 8019d0e:	f7fd fb13 	bl	8017338 <TLV_add>
        if (0U != length)
 8019d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	f040 816b 	bne.w	8019ff2 <Send_DpmConfigGetCnf+0x4fe>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8019d1c:	7bfa      	ldrb	r2, [r7, #15]
 8019d1e:	4991      	ldr	r1, [pc, #580]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019d20:	4613      	mov	r3, r2
 8019d22:	005b      	lsls	r3, r3, #1
 8019d24:	4413      	add	r3, r2
 8019d26:	009b      	lsls	r3, r3, #2
 8019d28:	440b      	add	r3, r1
 8019d2a:	795b      	ldrb	r3, [r3, #5]
 8019d2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8019d36:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8019d3a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019d3e:	2201      	movs	r2, #1
 8019d40:	2106      	movs	r1, #6
 8019d42:	f7fd faf9 	bl	8017338 <TLV_add>
        if (0U != length)
 8019d46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	f040 8153 	bne.w	8019ff6 <Send_DpmConfigGetCnf+0x502>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 8019d50:	7bfa      	ldrb	r2, [r7, #15]
 8019d52:	4984      	ldr	r1, [pc, #528]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019d54:	4613      	mov	r3, r2
 8019d56:	005b      	lsls	r3, r3, #1
 8019d58:	4413      	add	r3, r2
 8019d5a:	009b      	lsls	r3, r3, #2
 8019d5c:	440b      	add	r3, r1
 8019d5e:	791b      	ldrb	r3, [r3, #4]
 8019d60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8019d64:	b2db      	uxtb	r3, r3
 8019d66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8019d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019d6e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019d72:	2201      	movs	r2, #1
 8019d74:	2107      	movs	r1, #7
 8019d76:	f7fd fadf 	bl	8017338 <TLV_add>
        if (0U != length)
 8019d7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f040 813b 	bne.w	8019ffa <Send_DpmConfigGetCnf+0x506>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8019d84:	7bfa      	ldrb	r2, [r7, #15]
 8019d86:	4977      	ldr	r1, [pc, #476]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019d88:	4613      	mov	r3, r2
 8019d8a:	005b      	lsls	r3, r3, #1
 8019d8c:	4413      	add	r3, r2
 8019d8e:	009b      	lsls	r3, r3, #2
 8019d90:	440b      	add	r3, r1
 8019d92:	791b      	ldrb	r3, [r3, #4]
 8019d94:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8019d9e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8019da2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019da6:	2201      	movs	r2, #1
 8019da8:	210a      	movs	r1, #10
 8019daa:	f7fd fac5 	bl	8017338 <TLV_add>
        if (0U != length)
 8019dae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	f040 8123 	bne.w	8019ffe <Send_DpmConfigGetCnf+0x50a>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8019db8:	7bfa      	ldrb	r2, [r7, #15]
 8019dba:	496a      	ldr	r1, [pc, #424]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019dbc:	4613      	mov	r3, r2
 8019dbe:	005b      	lsls	r3, r3, #1
 8019dc0:	4413      	add	r3, r2
 8019dc2:	009b      	lsls	r3, r3, #2
 8019dc4:	440b      	add	r3, r1
 8019dc6:	3308      	adds	r3, #8
 8019dc8:	881b      	ldrh	r3, [r3, #0]
 8019dca:	84bb      	strh	r3, [r7, #36]	; 0x24
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8019dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019dd0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019dd4:	2202      	movs	r2, #2
 8019dd6:	210b      	movs	r1, #11
 8019dd8:	f7fd faae 	bl	8017338 <TLV_add>
        if (0U != length)
 8019ddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	f040 810e 	bne.w	801a002 <Send_DpmConfigGetCnf+0x50e>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8019de6:	7bfb      	ldrb	r3, [r7, #15]
 8019de8:	4a5f      	ldr	r2, [pc, #380]	; (8019f68 <Send_DpmConfigGetCnf+0x474>)
 8019dea:	2174      	movs	r1, #116	; 0x74
 8019dec:	fb01 f303 	mul.w	r3, r1, r3
 8019df0:	4413      	add	r3, r2
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8019dfe:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8019e02:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019e06:	2201      	movs	r2, #1
 8019e08:	2108      	movs	r1, #8
 8019e0a:	f7fd fa95 	bl	8017338 <TLV_add>
        if (0U != length)
 8019e0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	f040 80f7 	bne.w	801a006 <Send_DpmConfigGetCnf+0x512>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8019e18:	4b54      	ldr	r3, [pc, #336]	; (8019f6c <Send_DpmConfigGetCnf+0x478>)
 8019e1a:	781b      	ldrb	r3, [r3, #0]
 8019e1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 8019e20:	4b53      	ldr	r3, [pc, #332]	; (8019f70 <Send_DpmConfigGetCnf+0x47c>)
 8019e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8019e24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8019e28:	b29b      	uxth	r3, r3
 8019e2a:	009b      	lsls	r3, r3, #2
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e34:	210c      	movs	r1, #12
 8019e36:	f7fd fa7f 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019e3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	f040 80e3 	bne.w	801a00a <Send_DpmConfigGetCnf+0x516>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8019e44:	7bfb      	ldrb	r3, [r7, #15]
 8019e46:	4a48      	ldr	r2, [pc, #288]	; (8019f68 <Send_DpmConfigGetCnf+0x474>)
 8019e48:	2174      	movs	r1, #116	; 0x74
 8019e4a:	fb01 f303 	mul.w	r3, r1, r3
 8019e4e:	4413      	add	r3, r2
 8019e50:	3368      	adds	r3, #104	; 0x68
 8019e52:	791b      	ldrb	r3, [r3, #4]
 8019e54:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8019e5e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8019e62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019e66:	2201      	movs	r2, #1
 8019e68:	210e      	movs	r1, #14
 8019e6a:	f7fd fa65 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019e6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	f040 80cb 	bne.w	801a00e <Send_DpmConfigGetCnf+0x51a>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8019e78:	7bfb      	ldrb	r3, [r7, #15]
 8019e7a:	4a3b      	ldr	r2, [pc, #236]	; (8019f68 <Send_DpmConfigGetCnf+0x474>)
 8019e7c:	2174      	movs	r1, #116	; 0x74
 8019e7e:	fb01 f303 	mul.w	r3, r1, r3
 8019e82:	4413      	add	r3, r2
 8019e84:	3368      	adds	r3, #104	; 0x68
 8019e86:	795b      	ldrb	r3, [r3, #5]
 8019e88:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8019e8c:	b2db      	uxtb	r3, r3
 8019e8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8019e92:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8019e96:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019e9a:	2201      	movs	r2, #1
 8019e9c:	210f      	movs	r1, #15
 8019e9e:	f7fd fa4b 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019ea2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	f040 80b3 	bne.w	801a012 <Send_DpmConfigGetCnf+0x51e>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8019eac:	7bfa      	ldrb	r2, [r7, #15]
 8019eae:	492d      	ldr	r1, [pc, #180]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019eb0:	4613      	mov	r3, r2
 8019eb2:	005b      	lsls	r3, r3, #1
 8019eb4:	4413      	add	r3, r2
 8019eb6:	009b      	lsls	r3, r3, #2
 8019eb8:	440b      	add	r3, r1
 8019eba:	795b      	ldrb	r3, [r3, #5]
 8019ebc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	f887 3020 	strb.w	r3, [r7, #32]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8019ec6:	f107 0320 	add.w	r3, r7, #32
 8019eca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019ece:	2201      	movs	r2, #1
 8019ed0:	2110      	movs	r1, #16
 8019ed2:	f7fd fa31 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019ed6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	f040 809b 	bne.w	801a016 <Send_DpmConfigGetCnf+0x522>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8019ee0:	7bfa      	ldrb	r2, [r7, #15]
 8019ee2:	4920      	ldr	r1, [pc, #128]	; (8019f64 <Send_DpmConfigGetCnf+0x470>)
 8019ee4:	4613      	mov	r3, r2
 8019ee6:	005b      	lsls	r3, r3, #1
 8019ee8:	4413      	add	r3, r2
 8019eea:	009b      	lsls	r3, r3, #2
 8019eec:	440b      	add	r3, r1
 8019eee:	795b      	ldrb	r3, [r3, #5]
 8019ef0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019ef4:	b2db      	uxtb	r3, r3
 8019ef6:	77fb      	strb	r3, [r7, #31]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8019ef8:	f107 031f 	add.w	r3, r7, #31
 8019efc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019f00:	2201      	movs	r2, #1
 8019f02:	2111      	movs	r1, #17
 8019f04:	f7fd fa18 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	f040 8084 	bne.w	801a01a <Send_DpmConfigGetCnf+0x526>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8019f12:	7bfb      	ldrb	r3, [r7, #15]
 8019f14:	4a17      	ldr	r2, [pc, #92]	; (8019f74 <Send_DpmConfigGetCnf+0x480>)
 8019f16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019f1a:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8019f1c:	f107 0318 	add.w	r3, r7, #24
 8019f20:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019f24:	2204      	movs	r2, #4
 8019f26:	2112      	movs	r1, #18
 8019f28:	f7fd fa06 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019f2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d174      	bne.n	801a01e <Send_DpmConfigGetCnf+0x52a>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8019f34:	7bfb      	ldrb	r3, [r7, #15]
 8019f36:	4a0f      	ldr	r2, [pc, #60]	; (8019f74 <Send_DpmConfigGetCnf+0x480>)
 8019f38:	00db      	lsls	r3, r3, #3
 8019f3a:	4413      	add	r3, r2
 8019f3c:	889b      	ldrh	r3, [r3, #4]
 8019f3e:	82fb      	strh	r3, [r7, #22]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8019f40:	f107 0316 	add.w	r3, r7, #22
 8019f44:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019f48:	2202      	movs	r2, #2
 8019f4a:	2117      	movs	r1, #23
 8019f4c:	f7fd f9f4 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019f50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d164      	bne.n	801a022 <Send_DpmConfigGetCnf+0x52e>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8019f58:	7bfb      	ldrb	r3, [r7, #15]
 8019f5a:	4a06      	ldr	r2, [pc, #24]	; (8019f74 <Send_DpmConfigGetCnf+0x480>)
 8019f5c:	00db      	lsls	r3, r3, #3
 8019f5e:	4413      	add	r3, r2
 8019f60:	88db      	ldrh	r3, [r3, #6]
 8019f62:	e009      	b.n	8019f78 <Send_DpmConfigGetCnf+0x484>
 8019f64:	20000144 	.word	0x20000144
 8019f68:	20000158 	.word	0x20000158
 8019f6c:	20000238 	.word	0x20000238
 8019f70:	2000023c 	.word	0x2000023c
 8019f74:	20000150 	.word	0x20000150
 8019f78:	82bb      	strh	r3, [r7, #20]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 8019f7a:	f107 0314 	add.w	r3, r7, #20
 8019f7e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019f82:	2202      	movs	r2, #2
 8019f84:	2118      	movs	r1, #24
 8019f86:	f7fd f9d7 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019f8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d149      	bne.n	801a026 <Send_DpmConfigGetCnf+0x532>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8019f92:	7bfa      	ldrb	r2, [r7, #15]
 8019f94:	4932      	ldr	r1, [pc, #200]	; (801a060 <Send_DpmConfigGetCnf+0x56c>)
 8019f96:	4613      	mov	r3, r2
 8019f98:	005b      	lsls	r3, r3, #1
 8019f9a:	4413      	add	r3, r2
 8019f9c:	005b      	lsls	r3, r3, #1
 8019f9e:	440b      	add	r3, r1
 8019fa0:	3304      	adds	r3, #4
 8019fa2:	781b      	ldrb	r3, [r3, #0]
 8019fa4:	74fb      	strb	r3, [r7, #19]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8019fa6:	f107 0313 	add.w	r3, r7, #19
 8019faa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8019fae:	2201      	movs	r2, #1
 8019fb0:	211a      	movs	r1, #26
 8019fb2:	f7fd f9c1 	bl	8017338 <TLV_add>
      }
      if (0U != length)
 8019fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d135      	bne.n	801a02a <Send_DpmConfigGetCnf+0x536>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8019fbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d033      	beq.n	801a02e <Send_DpmConfigGetCnf+0x53a>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8019fc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f7fd fb02 	bl	80175d4 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8019fd0:	7bfb      	ldrb	r3, [r7, #15]
 8019fd2:	2203      	movs	r2, #3
 8019fd4:	6879      	ldr	r1, [r7, #4]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f000 f844 	bl	801a064 <Send_DpmConfigGetRej>
          goto __end;
 8019fdc:	e036      	b.n	801a04c <Send_DpmConfigGetCnf+0x558>
          break;
 8019fde:	bf00      	nop
 8019fe0:	e026      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019fe2:	bf00      	nop
 8019fe4:	e024      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019fe6:	bf00      	nop
 8019fe8:	e022      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019fea:	bf00      	nop
 8019fec:	e020      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019fee:	bf00      	nop
 8019ff0:	e01e      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019ff2:	bf00      	nop
 8019ff4:	e01c      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019ff6:	bf00      	nop
 8019ff8:	e01a      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019ffa:	bf00      	nop
 8019ffc:	e018      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 8019ffe:	bf00      	nop
 801a000:	e016      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 801a002:	bf00      	nop
 801a004:	e014      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
          break;
 801a006:	bf00      	nop
 801a008:	e012      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a00a:	bf00      	nop
 801a00c:	e010      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a00e:	bf00      	nop
 801a010:	e00e      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a012:	bf00      	nop
 801a014:	e00c      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a016:	bf00      	nop
 801a018:	e00a      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a01a:	bf00      	nop
 801a01c:	e008      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a01e:	bf00      	nop
 801a020:	e006      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a022:	bf00      	nop
 801a024:	e004      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a026:	bf00      	nop
 801a028:	e002      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        break;
 801a02a:	bf00      	nop
 801a02c:	e000      	b.n	801a030 <Send_DpmConfigGetCnf+0x53c>
        }
        break;
 801a02e:	bf00      	nop
    }
    index++;
 801a030:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a034:	3301      	adds	r3, #1
 801a036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 801a03a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a03e:	b29b      	uxth	r3, r3
 801a040:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a044:	429a      	cmp	r2, r3
 801a046:	f63f ad75 	bhi.w	8019b34 <Send_DpmConfigGetCnf+0x40>

__end:
 801a04a:	bf00      	nop
  TLV_deinit_encode(&send_tlv);
 801a04c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a050:	4618      	mov	r0, r3
 801a052:	f7fd fabf 	bl	80175d4 <TLV_deinit_encode>
}
 801a056:	bf00      	nop
 801a058:	3748      	adds	r7, #72	; 0x48
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}
 801a05e:	bf00      	nop
 801a060:	20004990 	.word	0x20004990

0801a064 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b086      	sub	sp, #24
 801a068:	af00      	add	r7, sp, #0
 801a06a:	4603      	mov	r3, r0
 801a06c:	6039      	str	r1, [r7, #0]
 801a06e:	71fb      	strb	r3, [r7, #7]
 801a070:	4613      	mov	r3, r2
 801a072:	71bb      	strb	r3, [r7, #6]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 801a074:	f107 000c 	add.w	r0, r7, #12
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a07e:	2108      	movs	r1, #8
 801a080:	f7fd f901 	bl	8017286 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 801a084:	79b9      	ldrb	r1, [r7, #6]
 801a086:	f107 000c 	add.w	r0, r7, #12
 801a08a:	2300      	movs	r3, #0
 801a08c:	2200      	movs	r2, #0
 801a08e:	f7fd f953 	bl	8017338 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 801a092:	f107 030c 	add.w	r3, r7, #12
 801a096:	4618      	mov	r0, r3
 801a098:	f7fd fa9c 	bl	80175d4 <TLV_deinit_encode>
}
 801a09c:	bf00      	nop
 801a09e:	3718      	adds	r7, #24
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bd80      	pop	{r7, pc}

0801a0a4 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b086      	sub	sp, #24
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	6039      	str	r1, [r7, #0]
 801a0ae:	71fb      	strb	r3, [r7, #7]
 801a0b0:	4613      	mov	r3, r2
 801a0b2:	71bb      	strb	r3, [r7, #6]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 801a0b4:	f107 000c 	add.w	r0, r7, #12
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a0be:	210b      	movs	r1, #11
 801a0c0:	f7fd f8e1 	bl	8017286 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 801a0c4:	79b9      	ldrb	r1, [r7, #6]
 801a0c6:	f107 000c 	add.w	r0, r7, #12
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	f7fd f933 	bl	8017338 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 801a0d2:	f107 030c 	add.w	r3, r7, #12
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	f7fd fa7c 	bl	80175d4 <TLV_deinit_encode>
}
 801a0dc:	bf00      	nop
 801a0de:	3718      	adds	r7, #24
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	bd80      	pop	{r7, pc}

0801a0e4 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 801a0e4:	b5b0      	push	{r4, r5, r7, lr}
 801a0e6:	b090      	sub	sp, #64	; 0x40
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	6039      	str	r1, [r7, #0]
 801a0ee:	71fb      	strb	r3, [r7, #7]
 801a0f0:	4613      	mov	r3, r2
 801a0f2:	71bb      	strb	r3, [r7, #6]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801a0f4:	79fb      	ldrb	r3, [r7, #7]
 801a0f6:	3301      	adds	r3, #1
 801a0f8:	015b      	lsls	r3, r3, #5
 801a0fa:	b25b      	sxtb	r3, r3
 801a0fc:	f043 030f 	orr.w	r3, r3, #15
 801a100:	b25b      	sxtb	r3, r3
 801a102:	b2d9      	uxtb	r1, r3
 801a104:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a10e:	f7fd f8ba 	bl	8017286 <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 801a112:	4b9f      	ldr	r3, [pc, #636]	; (801a390 <Send_DpmRegisterReadCnf+0x2ac>)
 801a114:	f107 0408 	add.w	r4, r7, #8
 801a118:	461d      	mov	r5, r3
 801a11a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a11c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a11e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a122:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a126:	6020      	str	r0, [r4, #0]
 801a128:	3404      	adds	r4, #4
 801a12a:	8021      	strh	r1, [r4, #0]
 801a12c:	3402      	adds	r4, #2
 801a12e:	0c0b      	lsrs	r3, r1, #16
 801a130:	7023      	strb	r3, [r4, #0]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 801a132:	2300      	movs	r3, #0
 801a134:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 801a138:	79bb      	ldrb	r3, [r7, #6]
 801a13a:	2bff      	cmp	r3, #255	; 0xff
 801a13c:	d001      	beq.n	801a142 <Send_DpmRegisterReadCnf+0x5e>
  {
    *stateMachineArray = param;
 801a13e:	79bb      	ldrb	r3, [r7, #6]
 801a140:	723b      	strb	r3, [r7, #8]
  }

  do
  {
    switch (stateMachineArray[counter])
 801a142:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a146:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a14a:	4413      	add	r3, r2
 801a14c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 801a150:	2b80      	cmp	r3, #128	; 0x80
 801a152:	f200 8105 	bhi.w	801a360 <Send_DpmRegisterReadCnf+0x27c>
 801a156:	a201      	add	r2, pc, #4	; (adr r2, 801a15c <Send_DpmRegisterReadCnf+0x78>)
 801a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a15c:	0801a361 	.word	0x0801a361
 801a160:	0801a361 	.word	0x0801a361
 801a164:	0801a361 	.word	0x0801a361
 801a168:	0801a361 	.word	0x0801a361
 801a16c:	0801a361 	.word	0x0801a361
 801a170:	0801a361 	.word	0x0801a361
 801a174:	0801a361 	.word	0x0801a361
 801a178:	0801a361 	.word	0x0801a361
 801a17c:	0801a361 	.word	0x0801a361
 801a180:	0801a361 	.word	0x0801a361
 801a184:	0801a361 	.word	0x0801a361
 801a188:	0801a361 	.word	0x0801a361
 801a18c:	0801a361 	.word	0x0801a361
 801a190:	0801a361 	.word	0x0801a361
 801a194:	0801a361 	.word	0x0801a361
 801a198:	0801a361 	.word	0x0801a361
 801a19c:	0801a361 	.word	0x0801a361
 801a1a0:	0801a361 	.word	0x0801a361
 801a1a4:	0801a361 	.word	0x0801a361
 801a1a8:	0801a361 	.word	0x0801a361
 801a1ac:	0801a361 	.word	0x0801a361
 801a1b0:	0801a361 	.word	0x0801a361
 801a1b4:	0801a361 	.word	0x0801a361
 801a1b8:	0801a361 	.word	0x0801a361
 801a1bc:	0801a361 	.word	0x0801a361
 801a1c0:	0801a361 	.word	0x0801a361
 801a1c4:	0801a361 	.word	0x0801a361
 801a1c8:	0801a361 	.word	0x0801a361
 801a1cc:	0801a361 	.word	0x0801a361
 801a1d0:	0801a361 	.word	0x0801a361
 801a1d4:	0801a361 	.word	0x0801a361
 801a1d8:	0801a361 	.word	0x0801a361
 801a1dc:	0801a361 	.word	0x0801a361
 801a1e0:	0801a361 	.word	0x0801a361
 801a1e4:	0801a361 	.word	0x0801a361
 801a1e8:	0801a361 	.word	0x0801a361
 801a1ec:	0801a361 	.word	0x0801a361
 801a1f0:	0801a361 	.word	0x0801a361
 801a1f4:	0801a361 	.word	0x0801a361
 801a1f8:	0801a361 	.word	0x0801a361
 801a1fc:	0801a361 	.word	0x0801a361
 801a200:	0801a361 	.word	0x0801a361
 801a204:	0801a361 	.word	0x0801a361
 801a208:	0801a361 	.word	0x0801a361
 801a20c:	0801a361 	.word	0x0801a361
 801a210:	0801a361 	.word	0x0801a361
 801a214:	0801a361 	.word	0x0801a361
 801a218:	0801a361 	.word	0x0801a361
 801a21c:	0801a361 	.word	0x0801a361
 801a220:	0801a361 	.word	0x0801a361
 801a224:	0801a361 	.word	0x0801a361
 801a228:	0801a361 	.word	0x0801a361
 801a22c:	0801a361 	.word	0x0801a361
 801a230:	0801a361 	.word	0x0801a361
 801a234:	0801a361 	.word	0x0801a361
 801a238:	0801a361 	.word	0x0801a361
 801a23c:	0801a361 	.word	0x0801a361
 801a240:	0801a361 	.word	0x0801a361
 801a244:	0801a361 	.word	0x0801a361
 801a248:	0801a361 	.word	0x0801a361
 801a24c:	0801a361 	.word	0x0801a361
 801a250:	0801a361 	.word	0x0801a361
 801a254:	0801a361 	.word	0x0801a361
 801a258:	0801a361 	.word	0x0801a361
 801a25c:	0801a361 	.word	0x0801a361
 801a260:	0801a361 	.word	0x0801a361
 801a264:	0801a361 	.word	0x0801a361
 801a268:	0801a361 	.word	0x0801a361
 801a26c:	0801a361 	.word	0x0801a361
 801a270:	0801a361 	.word	0x0801a361
 801a274:	0801a361 	.word	0x0801a361
 801a278:	0801a361 	.word	0x0801a361
 801a27c:	0801a361 	.word	0x0801a361
 801a280:	0801a361 	.word	0x0801a361
 801a284:	0801a361 	.word	0x0801a361
 801a288:	0801a361 	.word	0x0801a361
 801a28c:	0801a361 	.word	0x0801a361
 801a290:	0801a361 	.word	0x0801a361
 801a294:	0801a361 	.word	0x0801a361
 801a298:	0801a361 	.word	0x0801a361
 801a29c:	0801a361 	.word	0x0801a361
 801a2a0:	0801a361 	.word	0x0801a361
 801a2a4:	0801a361 	.word	0x0801a361
 801a2a8:	0801a361 	.word	0x0801a361
 801a2ac:	0801a361 	.word	0x0801a361
 801a2b0:	0801a361 	.word	0x0801a361
 801a2b4:	0801a361 	.word	0x0801a361
 801a2b8:	0801a361 	.word	0x0801a361
 801a2bc:	0801a361 	.word	0x0801a361
 801a2c0:	0801a361 	.word	0x0801a361
 801a2c4:	0801a361 	.word	0x0801a361
 801a2c8:	0801a361 	.word	0x0801a361
 801a2cc:	0801a361 	.word	0x0801a361
 801a2d0:	0801a361 	.word	0x0801a361
 801a2d4:	0801a361 	.word	0x0801a361
 801a2d8:	0801a361 	.word	0x0801a361
 801a2dc:	0801a361 	.word	0x0801a361
 801a2e0:	0801a361 	.word	0x0801a361
 801a2e4:	0801a361 	.word	0x0801a361
 801a2e8:	0801a361 	.word	0x0801a361
 801a2ec:	0801a361 	.word	0x0801a361
 801a2f0:	0801a361 	.word	0x0801a361
 801a2f4:	0801a361 	.word	0x0801a361
 801a2f8:	0801a361 	.word	0x0801a361
 801a2fc:	0801a361 	.word	0x0801a361
 801a300:	0801a361 	.word	0x0801a361
 801a304:	0801a361 	.word	0x0801a361
 801a308:	0801a361 	.word	0x0801a361
 801a30c:	0801a361 	.word	0x0801a361
 801a310:	0801a361 	.word	0x0801a361
 801a314:	0801a361 	.word	0x0801a361
 801a318:	0801a361 	.word	0x0801a361
 801a31c:	0801a361 	.word	0x0801a361
 801a320:	0801a361 	.word	0x0801a361
 801a324:	0801a361 	.word	0x0801a361
 801a328:	0801a361 	.word	0x0801a361
 801a32c:	0801a361 	.word	0x0801a361
 801a330:	0801a361 	.word	0x0801a361
 801a334:	0801a361 	.word	0x0801a361
 801a338:	0801a361 	.word	0x0801a361
 801a33c:	0801a361 	.word	0x0801a361
 801a340:	0801a361 	.word	0x0801a361
 801a344:	0801a361 	.word	0x0801a361
 801a348:	0801a361 	.word	0x0801a361
 801a34c:	0801a361 	.word	0x0801a361
 801a350:	0801a361 	.word	0x0801a361
 801a354:	0801a361 	.word	0x0801a361
 801a358:	0801a361 	.word	0x0801a361
 801a35c:	0801a361 	.word	0x0801a361
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 801a360:	bf00      	nop
    }
    counter++;
 801a362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a366:	3301      	adds	r3, #1
 801a368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 801a36c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a370:	2b26      	cmp	r3, #38	; 0x26
 801a372:	d803      	bhi.n	801a37c <Send_DpmRegisterReadCnf+0x298>
 801a374:	79bb      	ldrb	r3, [r7, #6]
 801a376:	2bff      	cmp	r3, #255	; 0xff
 801a378:	f47f aee3 	bne.w	801a142 <Send_DpmRegisterReadCnf+0x5e>

  TLV_deinit_encode(&ToSendTLV);
 801a37c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a380:	4618      	mov	r0, r3
 801a382:	f7fd f927 	bl	80175d4 <TLV_deinit_encode>
}
 801a386:	bf00      	nop
 801a388:	3740      	adds	r7, #64	; 0x40
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bdb0      	pop	{r4, r5, r7, pc}
 801a38e:	bf00      	nop
 801a390:	0801ca90 	.word	0x0801ca90

0801a394 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b08c      	sub	sp, #48	; 0x30
 801a398:	af00      	add	r7, sp, #0
 801a39a:	4603      	mov	r3, r0
 801a39c:	60b9      	str	r1, [r7, #8]
 801a39e:	607a      	str	r2, [r7, #4]
 801a3a0:	73fb      	strb	r3, [r7, #15]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 801a3a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a3a6:	6879      	ldr	r1, [r7, #4]
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	f7fd f927 	bl	80175fc <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 801a3ae:	f107 0320 	add.w	r3, r7, #32
 801a3b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a3b6:	f107 0127 	add.w	r1, r7, #39	; 0x27
 801a3ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801a3be:	f7fd f94b 	bl	8017658 <TLV_get>

  switch (registerName)
 801a3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3c6:	2b80      	cmp	r3, #128	; 0x80
 801a3c8:	f200 8106 	bhi.w	801a5d8 <Send_DpmRegisterWriteCnf+0x244>
 801a3cc:	a201      	add	r2, pc, #4	; (adr r2, 801a3d4 <Send_DpmRegisterWriteCnf+0x40>)
 801a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3d2:	bf00      	nop
 801a3d4:	0801a5d9 	.word	0x0801a5d9
 801a3d8:	0801a5d9 	.word	0x0801a5d9
 801a3dc:	0801a5d9 	.word	0x0801a5d9
 801a3e0:	0801a5d9 	.word	0x0801a5d9
 801a3e4:	0801a5d9 	.word	0x0801a5d9
 801a3e8:	0801a5d9 	.word	0x0801a5d9
 801a3ec:	0801a5d9 	.word	0x0801a5d9
 801a3f0:	0801a5d9 	.word	0x0801a5d9
 801a3f4:	0801a5d9 	.word	0x0801a5d9
 801a3f8:	0801a5d9 	.word	0x0801a5d9
 801a3fc:	0801a5d9 	.word	0x0801a5d9
 801a400:	0801a5d9 	.word	0x0801a5d9
 801a404:	0801a5d9 	.word	0x0801a5d9
 801a408:	0801a5d9 	.word	0x0801a5d9
 801a40c:	0801a5d9 	.word	0x0801a5d9
 801a410:	0801a5d9 	.word	0x0801a5d9
 801a414:	0801a5d9 	.word	0x0801a5d9
 801a418:	0801a5d9 	.word	0x0801a5d9
 801a41c:	0801a5d9 	.word	0x0801a5d9
 801a420:	0801a5d9 	.word	0x0801a5d9
 801a424:	0801a5d9 	.word	0x0801a5d9
 801a428:	0801a5d9 	.word	0x0801a5d9
 801a42c:	0801a5d9 	.word	0x0801a5d9
 801a430:	0801a5d9 	.word	0x0801a5d9
 801a434:	0801a5d9 	.word	0x0801a5d9
 801a438:	0801a5d9 	.word	0x0801a5d9
 801a43c:	0801a5d9 	.word	0x0801a5d9
 801a440:	0801a5d9 	.word	0x0801a5d9
 801a444:	0801a5d9 	.word	0x0801a5d9
 801a448:	0801a5d9 	.word	0x0801a5d9
 801a44c:	0801a5d9 	.word	0x0801a5d9
 801a450:	0801a5d9 	.word	0x0801a5d9
 801a454:	0801a5d9 	.word	0x0801a5d9
 801a458:	0801a5d9 	.word	0x0801a5d9
 801a45c:	0801a5d9 	.word	0x0801a5d9
 801a460:	0801a5d9 	.word	0x0801a5d9
 801a464:	0801a5d9 	.word	0x0801a5d9
 801a468:	0801a5d9 	.word	0x0801a5d9
 801a46c:	0801a5d9 	.word	0x0801a5d9
 801a470:	0801a5d9 	.word	0x0801a5d9
 801a474:	0801a5d9 	.word	0x0801a5d9
 801a478:	0801a5d9 	.word	0x0801a5d9
 801a47c:	0801a5d9 	.word	0x0801a5d9
 801a480:	0801a5d9 	.word	0x0801a5d9
 801a484:	0801a5d9 	.word	0x0801a5d9
 801a488:	0801a5d9 	.word	0x0801a5d9
 801a48c:	0801a5d9 	.word	0x0801a5d9
 801a490:	0801a5d9 	.word	0x0801a5d9
 801a494:	0801a5d9 	.word	0x0801a5d9
 801a498:	0801a5d9 	.word	0x0801a5d9
 801a49c:	0801a5d9 	.word	0x0801a5d9
 801a4a0:	0801a5d9 	.word	0x0801a5d9
 801a4a4:	0801a5d9 	.word	0x0801a5d9
 801a4a8:	0801a5d9 	.word	0x0801a5d9
 801a4ac:	0801a5d9 	.word	0x0801a5d9
 801a4b0:	0801a5d9 	.word	0x0801a5d9
 801a4b4:	0801a5d9 	.word	0x0801a5d9
 801a4b8:	0801a5d9 	.word	0x0801a5d9
 801a4bc:	0801a5d9 	.word	0x0801a5d9
 801a4c0:	0801a5d9 	.word	0x0801a5d9
 801a4c4:	0801a5d9 	.word	0x0801a5d9
 801a4c8:	0801a5d9 	.word	0x0801a5d9
 801a4cc:	0801a5d9 	.word	0x0801a5d9
 801a4d0:	0801a5d9 	.word	0x0801a5d9
 801a4d4:	0801a5d9 	.word	0x0801a5d9
 801a4d8:	0801a5d9 	.word	0x0801a5d9
 801a4dc:	0801a5d9 	.word	0x0801a5d9
 801a4e0:	0801a5d9 	.word	0x0801a5d9
 801a4e4:	0801a5d9 	.word	0x0801a5d9
 801a4e8:	0801a5d9 	.word	0x0801a5d9
 801a4ec:	0801a5d9 	.word	0x0801a5d9
 801a4f0:	0801a5d9 	.word	0x0801a5d9
 801a4f4:	0801a5d9 	.word	0x0801a5d9
 801a4f8:	0801a5d9 	.word	0x0801a5d9
 801a4fc:	0801a5d9 	.word	0x0801a5d9
 801a500:	0801a5d9 	.word	0x0801a5d9
 801a504:	0801a5d9 	.word	0x0801a5d9
 801a508:	0801a5d9 	.word	0x0801a5d9
 801a50c:	0801a5d9 	.word	0x0801a5d9
 801a510:	0801a5d9 	.word	0x0801a5d9
 801a514:	0801a5d9 	.word	0x0801a5d9
 801a518:	0801a5d9 	.word	0x0801a5d9
 801a51c:	0801a5d9 	.word	0x0801a5d9
 801a520:	0801a5d9 	.word	0x0801a5d9
 801a524:	0801a5d9 	.word	0x0801a5d9
 801a528:	0801a5d9 	.word	0x0801a5d9
 801a52c:	0801a5d9 	.word	0x0801a5d9
 801a530:	0801a5d9 	.word	0x0801a5d9
 801a534:	0801a5d9 	.word	0x0801a5d9
 801a538:	0801a5d9 	.word	0x0801a5d9
 801a53c:	0801a5d9 	.word	0x0801a5d9
 801a540:	0801a5d9 	.word	0x0801a5d9
 801a544:	0801a5d9 	.word	0x0801a5d9
 801a548:	0801a5d9 	.word	0x0801a5d9
 801a54c:	0801a5d9 	.word	0x0801a5d9
 801a550:	0801a5d9 	.word	0x0801a5d9
 801a554:	0801a5d9 	.word	0x0801a5d9
 801a558:	0801a5d9 	.word	0x0801a5d9
 801a55c:	0801a5d9 	.word	0x0801a5d9
 801a560:	0801a5d9 	.word	0x0801a5d9
 801a564:	0801a5d9 	.word	0x0801a5d9
 801a568:	0801a5d9 	.word	0x0801a5d9
 801a56c:	0801a5d9 	.word	0x0801a5d9
 801a570:	0801a5d9 	.word	0x0801a5d9
 801a574:	0801a5d9 	.word	0x0801a5d9
 801a578:	0801a5d9 	.word	0x0801a5d9
 801a57c:	0801a5d9 	.word	0x0801a5d9
 801a580:	0801a5d9 	.word	0x0801a5d9
 801a584:	0801a5d9 	.word	0x0801a5d9
 801a588:	0801a5d9 	.word	0x0801a5d9
 801a58c:	0801a5d9 	.word	0x0801a5d9
 801a590:	0801a5d9 	.word	0x0801a5d9
 801a594:	0801a5d9 	.word	0x0801a5d9
 801a598:	0801a5d9 	.word	0x0801a5d9
 801a59c:	0801a5d9 	.word	0x0801a5d9
 801a5a0:	0801a5d9 	.word	0x0801a5d9
 801a5a4:	0801a5d9 	.word	0x0801a5d9
 801a5a8:	0801a5d9 	.word	0x0801a5d9
 801a5ac:	0801a5d9 	.word	0x0801a5d9
 801a5b0:	0801a5d9 	.word	0x0801a5d9
 801a5b4:	0801a5d9 	.word	0x0801a5d9
 801a5b8:	0801a5d9 	.word	0x0801a5d9
 801a5bc:	0801a5d9 	.word	0x0801a5d9
 801a5c0:	0801a5d9 	.word	0x0801a5d9
 801a5c4:	0801a5d9 	.word	0x0801a5d9
 801a5c8:	0801a5d9 	.word	0x0801a5d9
 801a5cc:	0801a5d9 	.word	0x0801a5d9
 801a5d0:	0801a5d9 	.word	0x0801a5d9
 801a5d4:	0801a5d9 	.word	0x0801a5d9
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 801a5d8:	bf00      	nop
  }
  TLV_deinit_decode(&ToProcessTLV);
 801a5da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7fd f896 	bl	8017710 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 801a5e4:	7bfb      	ldrb	r3, [r7, #15]
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	015b      	lsls	r3, r3, #5
 801a5ea:	b25b      	sxtb	r3, r3
 801a5ec:	f043 0311 	orr.w	r3, r3, #17
 801a5f0:	b25b      	sxtb	r3, r3
 801a5f2:	b2d9      	uxtb	r1, r3
 801a5f4:	f107 0014 	add.w	r0, r7, #20
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	220c      	movs	r2, #12
 801a5fc:	f7fc fe43 	bl	8017286 <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 801a600:	f107 0314 	add.w	r3, r7, #20
 801a604:	4618      	mov	r0, r3
 801a606:	f7fc ffe5 	bl	80175d4 <TLV_deinit_encode>
}
 801a60a:	bf00      	nop
 801a60c:	3730      	adds	r7, #48	; 0x30
 801a60e:	46bd      	mov	sp, r7
 801a610:	bd80      	pop	{r7, pc}
 801a612:	bf00      	nop

0801a614 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b084      	sub	sp, #16
 801a618:	af00      	add	r7, sp, #0
 801a61a:	4603      	mov	r3, r0
 801a61c:	6039      	str	r1, [r7, #0]
 801a61e:	71fb      	strb	r3, [r7, #7]
 801a620:	4613      	mov	r3, r2
 801a622:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 801a624:	2310      	movs	r3, #16
 801a626:	73fb      	strb	r3, [r7, #15]

  if (NULL != pCB_FreeText)
 801a628:	4b08      	ldr	r3, [pc, #32]	; (801a64c <Manage_FreeText+0x38>)
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d007      	beq.n	801a640 <Manage_FreeText+0x2c>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 801a630:	4b06      	ldr	r3, [pc, #24]	; (801a64c <Manage_FreeText+0x38>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	88ba      	ldrh	r2, [r7, #4]
 801a636:	79f8      	ldrb	r0, [r7, #7]
 801a638:	6839      	ldr	r1, [r7, #0]
 801a63a:	4798      	blx	r3
    _status = USBPD_OK;
 801a63c:	2300      	movs	r3, #0
 801a63e:	73fb      	strb	r3, [r7, #15]
  }

  return _status;
 801a640:	7bfb      	ldrb	r3, [r7, #15]
}
 801a642:	4618      	mov	r0, r3
 801a644:	3710      	adds	r7, #16
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}
 801a64a:	bf00      	nop
 801a64c:	20002bc0 	.word	0x20002bc0

0801a650 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 801a650:	b480      	push	{r7}
 801a652:	b089      	sub	sp, #36	; 0x24
 801a654:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 801a656:	2300      	movs	r3, #0
 801a658:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 801a65a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a65e:	837b      	strh	r3, [r7, #26]
  uint16_t _max_voltage = 0;
 801a660:	2300      	movs	r3, #0
 801a662:	833b      	strh	r3, [r7, #24]
  uint16_t _max_current = 0;
 801a664:	2300      	movs	r3, #0
 801a666:	82fb      	strh	r3, [r7, #22]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 801a668:	2300      	movs	r3, #0
 801a66a:	613b      	str	r3, [r7, #16]
 801a66c:	e0b8      	b.n	801a7e0 <UpdateSNKPowerPort0+0x190>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 801a66e:	4a6d      	ldr	r2, [pc, #436]	; (801a824 <UpdateSNKPowerPort0+0x1d4>)
 801a670:	693b      	ldr	r3, [r7, #16]
 801a672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a676:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 801a678:	79fb      	ldrb	r3, [r7, #7]
 801a67a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	2b02      	cmp	r3, #2
 801a682:	d06b      	beq.n	801a75c <UpdateSNKPowerPort0+0x10c>
 801a684:	2b02      	cmp	r3, #2
 801a686:	f300 80a1 	bgt.w	801a7cc <UpdateSNKPowerPort0+0x17c>
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d002      	beq.n	801a694 <UpdateSNKPowerPort0+0x44>
 801a68e:	2b01      	cmp	r3, #1
 801a690:	d02a      	beq.n	801a6e8 <UpdateSNKPowerPort0+0x98>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 801a692:	e09b      	b.n	801a7cc <UpdateSNKPowerPort0+0x17c>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	461a      	mov	r2, r3
 801a69e:	0092      	lsls	r2, r2, #2
 801a6a0:	4413      	add	r3, r2
 801a6a2:	461a      	mov	r2, r3
 801a6a4:	0091      	lsls	r1, r2, #2
 801a6a6:	461a      	mov	r2, r3
 801a6a8:	460b      	mov	r3, r1
 801a6aa:	4413      	add	r3, r2
 801a6ac:	005b      	lsls	r3, r3, #1
 801a6ae:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 801a6b0:	89fa      	ldrh	r2, [r7, #14]
 801a6b2:	8b7b      	ldrh	r3, [r7, #26]
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d201      	bcs.n	801a6bc <UpdateSNKPowerPort0+0x6c>
 801a6b8:	89fb      	ldrh	r3, [r7, #14]
 801a6ba:	837b      	strh	r3, [r7, #26]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 801a6bc:	89fa      	ldrh	r2, [r7, #14]
 801a6be:	8b3b      	ldrh	r3, [r7, #24]
 801a6c0:	429a      	cmp	r2, r3
 801a6c2:	d901      	bls.n	801a6c8 <UpdateSNKPowerPort0+0x78>
 801a6c4:	89fb      	ldrh	r3, [r7, #14]
 801a6c6:	833b      	strh	r3, [r7, #24]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 801a6c8:	88bb      	ldrh	r3, [r7, #4]
 801a6ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a6ce:	b29b      	uxth	r3, r3
 801a6d0:	461a      	mov	r2, r3
 801a6d2:	0092      	lsls	r2, r2, #2
 801a6d4:	4413      	add	r3, r2
 801a6d6:	005b      	lsls	r3, r3, #1
 801a6d8:	81bb      	strh	r3, [r7, #12]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 801a6da:	89ba      	ldrh	r2, [r7, #12]
 801a6dc:	8afb      	ldrh	r3, [r7, #22]
 801a6de:	429a      	cmp	r2, r3
 801a6e0:	d976      	bls.n	801a7d0 <UpdateSNKPowerPort0+0x180>
 801a6e2:	89bb      	ldrh	r3, [r7, #12]
 801a6e4:	82fb      	strh	r3, [r7, #22]
        break;
 801a6e6:	e073      	b.n	801a7d0 <UpdateSNKPowerPort0+0x180>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a6ee:	b29b      	uxth	r3, r3
 801a6f0:	461a      	mov	r2, r3
 801a6f2:	0092      	lsls	r2, r2, #2
 801a6f4:	4413      	add	r3, r2
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	0091      	lsls	r1, r2, #2
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	4413      	add	r3, r2
 801a700:	005b      	lsls	r3, r3, #1
 801a702:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 801a704:	89fa      	ldrh	r2, [r7, #14]
 801a706:	8b7b      	ldrh	r3, [r7, #26]
 801a708:	429a      	cmp	r2, r3
 801a70a:	d201      	bcs.n	801a710 <UpdateSNKPowerPort0+0xc0>
 801a70c:	89fb      	ldrh	r3, [r7, #14]
 801a70e:	837b      	strh	r3, [r7, #26]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 801a710:	88fb      	ldrh	r3, [r7, #6]
 801a712:	f3c3 1309 	ubfx	r3, r3, #4, #10
 801a716:	b29b      	uxth	r3, r3
 801a718:	461a      	mov	r2, r3
 801a71a:	0092      	lsls	r2, r2, #2
 801a71c:	4413      	add	r3, r2
 801a71e:	461a      	mov	r2, r3
 801a720:	0091      	lsls	r1, r2, #2
 801a722:	461a      	mov	r2, r3
 801a724:	460b      	mov	r3, r1
 801a726:	4413      	add	r3, r2
 801a728:	005b      	lsls	r3, r3, #1
 801a72a:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 801a72c:	89fa      	ldrh	r2, [r7, #14]
 801a72e:	8b3b      	ldrh	r3, [r7, #24]
 801a730:	429a      	cmp	r2, r3
 801a732:	d901      	bls.n	801a738 <UpdateSNKPowerPort0+0xe8>
 801a734:	89fb      	ldrh	r3, [r7, #14]
 801a736:	833b      	strh	r3, [r7, #24]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 801a738:	88bb      	ldrh	r3, [r7, #4]
 801a73a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a73e:	b29b      	uxth	r3, r3
 801a740:	461a      	mov	r2, r3
 801a742:	0152      	lsls	r2, r2, #5
 801a744:	1ad2      	subs	r2, r2, r3
 801a746:	0092      	lsls	r2, r2, #2
 801a748:	4413      	add	r3, r2
 801a74a:	005b      	lsls	r3, r3, #1
 801a74c:	817b      	strh	r3, [r7, #10]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 801a74e:	897b      	ldrh	r3, [r7, #10]
 801a750:	69fa      	ldr	r2, [r7, #28]
 801a752:	429a      	cmp	r2, r3
 801a754:	d23e      	bcs.n	801a7d4 <UpdateSNKPowerPort0+0x184>
 801a756:	897b      	ldrh	r3, [r7, #10]
 801a758:	61fb      	str	r3, [r7, #28]
        break;
 801a75a:	e03b      	b.n	801a7d4 <UpdateSNKPowerPort0+0x184>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a762:	b29b      	uxth	r3, r3
 801a764:	461a      	mov	r2, r3
 801a766:	0092      	lsls	r2, r2, #2
 801a768:	4413      	add	r3, r2
 801a76a:	461a      	mov	r2, r3
 801a76c:	0091      	lsls	r1, r2, #2
 801a76e:	461a      	mov	r2, r3
 801a770:	460b      	mov	r3, r1
 801a772:	4413      	add	r3, r2
 801a774:	005b      	lsls	r3, r3, #1
 801a776:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 801a778:	89fa      	ldrh	r2, [r7, #14]
 801a77a:	8b7b      	ldrh	r3, [r7, #26]
 801a77c:	429a      	cmp	r2, r3
 801a77e:	d201      	bcs.n	801a784 <UpdateSNKPowerPort0+0x134>
 801a780:	89fb      	ldrh	r3, [r7, #14]
 801a782:	837b      	strh	r3, [r7, #26]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 801a784:	88fb      	ldrh	r3, [r7, #6]
 801a786:	f3c3 1309 	ubfx	r3, r3, #4, #10
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	461a      	mov	r2, r3
 801a78e:	0092      	lsls	r2, r2, #2
 801a790:	4413      	add	r3, r2
 801a792:	461a      	mov	r2, r3
 801a794:	0091      	lsls	r1, r2, #2
 801a796:	461a      	mov	r2, r3
 801a798:	460b      	mov	r3, r1
 801a79a:	4413      	add	r3, r2
 801a79c:	005b      	lsls	r3, r3, #1
 801a79e:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 801a7a0:	89fa      	ldrh	r2, [r7, #14]
 801a7a2:	8b3b      	ldrh	r3, [r7, #24]
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d901      	bls.n	801a7ac <UpdateSNKPowerPort0+0x15c>
 801a7a8:	89fb      	ldrh	r3, [r7, #14]
 801a7aa:	833b      	strh	r3, [r7, #24]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 801a7ac:	88bb      	ldrh	r3, [r7, #4]
 801a7ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a7b2:	b29b      	uxth	r3, r3
 801a7b4:	461a      	mov	r2, r3
 801a7b6:	0092      	lsls	r2, r2, #2
 801a7b8:	4413      	add	r3, r2
 801a7ba:	005b      	lsls	r3, r3, #1
 801a7bc:	81bb      	strh	r3, [r7, #12]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 801a7be:	89ba      	ldrh	r2, [r7, #12]
 801a7c0:	8afb      	ldrh	r3, [r7, #22]
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	d908      	bls.n	801a7d8 <UpdateSNKPowerPort0+0x188>
 801a7c6:	89bb      	ldrh	r3, [r7, #12]
 801a7c8:	82fb      	strh	r3, [r7, #22]
        break;
 801a7ca:	e005      	b.n	801a7d8 <UpdateSNKPowerPort0+0x188>
        break;
 801a7cc:	bf00      	nop
 801a7ce:	e004      	b.n	801a7da <UpdateSNKPowerPort0+0x18a>
        break;
 801a7d0:	bf00      	nop
 801a7d2:	e002      	b.n	801a7da <UpdateSNKPowerPort0+0x18a>
        break;
 801a7d4:	bf00      	nop
 801a7d6:	e000      	b.n	801a7da <UpdateSNKPowerPort0+0x18a>
        break;
 801a7d8:	bf00      	nop
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 801a7da:	693b      	ldr	r3, [r7, #16]
 801a7dc:	3301      	adds	r3, #1
 801a7de:	613b      	str	r3, [r7, #16]
 801a7e0:	4b11      	ldr	r3, [pc, #68]	; (801a828 <UpdateSNKPowerPort0+0x1d8>)
 801a7e2:	781b      	ldrb	r3, [r3, #0]
 801a7e4:	461a      	mov	r2, r3
 801a7e6:	693b      	ldr	r3, [r7, #16]
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	f4ff af40 	bcc.w	801a66e <UpdateSNKPowerPort0+0x1e>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 801a7ee:	8b7b      	ldrh	r3, [r7, #26]
 801a7f0:	4a0e      	ldr	r2, [pc, #56]	; (801a82c <UpdateSNKPowerPort0+0x1dc>)
 801a7f2:	6113      	str	r3, [r2, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 801a7f4:	8b3b      	ldrh	r3, [r7, #24]
 801a7f6:	4a0d      	ldr	r2, [pc, #52]	; (801a82c <UpdateSNKPowerPort0+0x1dc>)
 801a7f8:	60d3      	str	r3, [r2, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 801a7fa:	8afb      	ldrh	r3, [r7, #22]
 801a7fc:	4a0b      	ldr	r2, [pc, #44]	; (801a82c <UpdateSNKPowerPort0+0x1dc>)
 801a7fe:	6053      	str	r3, [r2, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 801a800:	8b3b      	ldrh	r3, [r7, #24]
 801a802:	8afa      	ldrh	r2, [r7, #22]
 801a804:	fb02 f303 	mul.w	r3, r2, r3
 801a808:	4a09      	ldr	r2, [pc, #36]	; (801a830 <UpdateSNKPowerPort0+0x1e0>)
 801a80a:	fba2 2303 	umull	r2, r3, r2, r3
 801a80e:	099b      	lsrs	r3, r3, #6
 801a810:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 801a812:	4a06      	ldr	r2, [pc, #24]	; (801a82c <UpdateSNKPowerPort0+0x1dc>)
 801a814:	69fb      	ldr	r3, [r7, #28]
 801a816:	6193      	str	r3, [r2, #24]
}
 801a818:	bf00      	nop
 801a81a:	3724      	adds	r7, #36	; 0x24
 801a81c:	46bd      	mov	sp, r7
 801a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a822:	4770      	bx	lr
 801a824:	2000023c 	.word	0x2000023c
 801a828:	20000238 	.word	0x20000238
 801a82c:	20000158 	.word	0x20000158
 801a830:	10624dd3 	.word	0x10624dd3

0801a834 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 801a834:	b580      	push	{r7, lr}
 801a836:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 801a838:	f240 421c 	movw	r2, #1052	; 0x41c
 801a83c:	2100      	movs	r1, #0
 801a83e:	4804      	ldr	r0, [pc, #16]	; (801a850 <TRACER_EMB_Init+0x1c>)
 801a840:	f001 f840 	bl	801b8c4 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 801a844:	f000 fe36 	bl	801b4b4 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 801a848:	f000 f9d0 	bl	801abec <TRACER_EMB_LowPowerInit>
}
 801a84c:	bf00      	nop
 801a84e:	bd80      	pop	{r7, pc}
 801a850:	20002bcc 	.word	0x20002bcc

0801a854 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b086      	sub	sp, #24
 801a858:	af00      	add	r7, sp, #0
 801a85a:	6078      	str	r0, [r7, #4]
 801a85c:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 801a862:	f000 f8cd 	bl	801aa00 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 801a866:	6838      	ldr	r0, [r7, #0]
 801a868:	f000 f966 	bl	801ab38 <TRACER_EMB_AllocateBufer>
 801a86c:	6178      	str	r0, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a874:	d023      	beq.n	801a8be <TRACER_EMB_Add+0x6a>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 801a876:	2300      	movs	r3, #0
 801a878:	613b      	str	r3, [r7, #16]
 801a87a:	e01c      	b.n	801a8b6 <TRACER_EMB_Add+0x62>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 801a87c:	68fa      	ldr	r2, [r7, #12]
 801a87e:	693b      	ldr	r3, [r7, #16]
 801a880:	441a      	add	r2, r3
 801a882:	697b      	ldr	r3, [r7, #20]
 801a884:	4259      	negs	r1, r3
 801a886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a88a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a88e:	bf58      	it	pl
 801a890:	424b      	negpl	r3, r1
 801a892:	7811      	ldrb	r1, [r2, #0]
 801a894:	4a0e      	ldr	r2, [pc, #56]	; (801a8d0 <TRACER_EMB_Add+0x7c>)
 801a896:	4413      	add	r3, r2
 801a898:	460a      	mov	r2, r1
 801a89a:	76da      	strb	r2, [r3, #27]
 801a89c:	697b      	ldr	r3, [r7, #20]
 801a89e:	3301      	adds	r3, #1
 801a8a0:	425a      	negs	r2, r3
 801a8a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a8a6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a8aa:	bf58      	it	pl
 801a8ac:	4253      	negpl	r3, r2
 801a8ae:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 801a8b0:	693b      	ldr	r3, [r7, #16]
 801a8b2:	3301      	adds	r3, #1
 801a8b4:	613b      	str	r3, [r7, #16]
 801a8b6:	693a      	ldr	r2, [r7, #16]
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d3de      	bcc.n	801a87c <TRACER_EMB_Add+0x28>
    }
  }
  TRACER_EMB_UnLock();
 801a8be:	f000 f8bf 	bl	801aa40 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 801a8c2:	f000 f8dd 	bl	801aa80 <TRACER_EMB_SendData>
}
 801a8c6:	bf00      	nop
 801a8c8:	3718      	adds	r7, #24
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}
 801a8ce:	bf00      	nop
 801a8d0:	20002bcc 	.word	0x20002bcc

0801a8d4 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 801a8d8:	f000 feb6 	bl	801b648 <HW_TRACER_EMB_IRQHandlerDMA>
}
 801a8dc:	bf00      	nop
 801a8de:	bd80      	pop	{r7, pc}

0801a8e0 <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 801a8e4:	f000 fec4 	bl	801b670 <HW_TRACER_EMB_IRQHandlerUSART>
}
 801a8e8:	bf00      	nop
 801a8ea:	bd80      	pop	{r7, pc}

0801a8ec <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 801a8ec:	b480      	push	{r7}
 801a8ee:	b083      	sub	sp, #12
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	460a      	mov	r2, r1
 801a8f6:	80fb      	strh	r3, [r7, #6]
 801a8f8:	4613      	mov	r3, r2
 801a8fa:	717b      	strb	r3, [r7, #5]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 801a8fc:	88fb      	ldrh	r3, [r7, #6]
 801a8fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a902:	4a05      	ldr	r2, [pc, #20]	; (801a918 <TRACER_EMB_WriteData+0x2c>)
 801a904:	4413      	add	r3, r2
 801a906:	797a      	ldrb	r2, [r7, #5]
 801a908:	76da      	strb	r2, [r3, #27]
}
 801a90a:	bf00      	nop
 801a90c:	370c      	adds	r7, #12
 801a90e:	46bd      	mov	sp, r7
 801a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a914:	4770      	bx	lr
 801a916:	bf00      	nop
 801a918:	20002bcc 	.word	0x20002bcc

0801a91c <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b082      	sub	sp, #8
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 801a924:	6878      	ldr	r0, [r7, #4]
 801a926:	f000 fe69 	bl	801b5fc <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 801a92a:	f000 fe77 	bl	801b61c <HW_TRACER_EMB_StartRX>
}
 801a92e:	bf00      	nop
 801a930:	3708      	adds	r7, #8
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}
	...

0801a938 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 801a938:	b480      	push	{r7}
 801a93a:	b083      	sub	sp, #12
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
 801a940:	460b      	mov	r3, r1
 801a942:	70fb      	strb	r3, [r7, #3]
  if (Size != 0U)
 801a944:	78fb      	ldrb	r3, [r7, #3]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d007      	beq.n	801a95a <TRACER_EMB_EnableOverFlow+0x22>
  {
    TracerContext.OverFlow_Data = Data;
 801a94a:	4a08      	ldr	r2, [pc, #32]	; (801a96c <TRACER_EMB_EnableOverFlow+0x34>)
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6153      	str	r3, [r2, #20]
    TracerContext.OverFlow_Size = Size;
 801a950:	4a06      	ldr	r2, [pc, #24]	; (801a96c <TRACER_EMB_EnableOverFlow+0x34>)
 801a952:	78fb      	ldrb	r3, [r7, #3]
 801a954:	7613      	strb	r3, [r2, #24]
    return 0;
 801a956:	2300      	movs	r3, #0
 801a958:	e001      	b.n	801a95e <TRACER_EMB_EnableOverFlow+0x26>
  }
  return -1;
 801a95a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a95e:	4618      	mov	r0, r3
 801a960:	370c      	adds	r7, #12
 801a962:	46bd      	mov	sp, r7
 801a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a968:	4770      	bx	lr
 801a96a:	bf00      	nop
 801a96c:	20002bcc 	.word	0x20002bcc

0801a970 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b084      	sub	sp, #16
 801a974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a976:	f3ef 8310 	mrs	r3, PRIMASK
 801a97a:	60bb      	str	r3, [r7, #8]
  return(result);
 801a97c:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 801a97e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a980:	b672      	cpsid	i
}
 801a982:	bf00      	nop
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 801a984:	4b1d      	ldr	r3, [pc, #116]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a986:	681a      	ldr	r2, [r3, #0]
 801a988:	4b1c      	ldr	r3, [pc, #112]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a98a:	689b      	ldr	r3, [r3, #8]
 801a98c:	4413      	add	r3, r2
 801a98e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a992:	4a1a      	ldr	r2, [pc, #104]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a994:	6013      	str	r3, [r2, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 801a996:	4b19      	ldr	r3, [pc, #100]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a998:	695b      	ldr	r3, [r3, #20]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d019      	beq.n	801a9d2 <TRACER_EMB_CALLBACK_TX+0x62>
 801a99e:	4b17      	ldr	r3, [pc, #92]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9a0:	7e9b      	ldrb	r3, [r3, #26]
 801a9a2:	2b01      	cmp	r3, #1
 801a9a4:	d115      	bne.n	801a9d2 <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 801a9a6:	4b15      	ldr	r3, [pc, #84]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9a8:	7e5b      	ldrb	r3, [r3, #25]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d111      	bne.n	801a9d2 <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 801a9ae:	4b13      	ldr	r3, [pc, #76]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9b0:	2202      	movs	r2, #2
 801a9b2:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 801a9b4:	4b11      	ldr	r3, [pc, #68]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9b6:	695b      	ldr	r3, [r3, #20]
 801a9b8:	4a10      	ldr	r2, [pc, #64]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9ba:	7e12      	ldrb	r2, [r2, #24]
 801a9bc:	4611      	mov	r1, r2
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f000 ff0a 	bl	801b7d8 <HW_TRACER_EMB_SendData>
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	f383 8810 	msr	PRIMASK, r3
}
 801a9ce:	bf00      	nop
    TRACER_LEAVE_CRITICAL_SECTION();
 801a9d0:	e00f      	b.n	801a9f2 <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 801a9d2:	4b0a      	ldr	r3, [pc, #40]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9d4:	68db      	ldr	r3, [r3, #12]
 801a9d6:	3b01      	subs	r3, #1
 801a9d8:	4a08      	ldr	r2, [pc, #32]	; (801a9fc <TRACER_EMB_CALLBACK_TX+0x8c>)
 801a9da:	60d3      	str	r3, [r2, #12]
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	f383 8810 	msr	PRIMASK, r3
}
 801a9e6:	bf00      	nop
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 801a9e8:	f000 f82a 	bl	801aa40 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 801a9ec:	f000 f848 	bl	801aa80 <TRACER_EMB_SendData>
  }
}
 801a9f0:	bf00      	nop
 801a9f2:	bf00      	nop
 801a9f4:	3710      	adds	r7, #16
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}
 801a9fa:	bf00      	nop
 801a9fc:	20002bcc 	.word	0x20002bcc

0801aa00 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 801aa00:	b480      	push	{r7}
 801aa02:	b085      	sub	sp, #20
 801aa04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa06:	f3ef 8310 	mrs	r3, PRIMASK
 801aa0a:	607b      	str	r3, [r7, #4]
  return(result);
 801aa0c:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 801aa0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa10:	b672      	cpsid	i
}
 801aa12:	bf00      	nop
  TracerContext.Counter++;
 801aa14:	4b09      	ldr	r3, [pc, #36]	; (801aa3c <TRACER_EMB_Lock+0x3c>)
 801aa16:	7c1b      	ldrb	r3, [r3, #16]
 801aa18:	b2db      	uxtb	r3, r3
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	b2da      	uxtb	r2, r3
 801aa1e:	4b07      	ldr	r3, [pc, #28]	; (801aa3c <TRACER_EMB_Lock+0x3c>)
 801aa20:	741a      	strb	r2, [r3, #16]
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	f383 8810 	msr	PRIMASK, r3
}
 801aa2c:	bf00      	nop
  TRACER_LEAVE_CRITICAL_SECTION();
}
 801aa2e:	bf00      	nop
 801aa30:	3714      	adds	r7, #20
 801aa32:	46bd      	mov	sp, r7
 801aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa38:	4770      	bx	lr
 801aa3a:	bf00      	nop
 801aa3c:	20002bcc 	.word	0x20002bcc

0801aa40 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 801aa40:	b480      	push	{r7}
 801aa42:	b085      	sub	sp, #20
 801aa44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa46:	f3ef 8310 	mrs	r3, PRIMASK
 801aa4a:	607b      	str	r3, [r7, #4]
  return(result);
 801aa4c:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 801aa4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa50:	b672      	cpsid	i
}
 801aa52:	bf00      	nop
  TracerContext.Counter--;
 801aa54:	4b09      	ldr	r3, [pc, #36]	; (801aa7c <TRACER_EMB_UnLock+0x3c>)
 801aa56:	7c1b      	ldrb	r3, [r3, #16]
 801aa58:	b2db      	uxtb	r3, r3
 801aa5a:	3b01      	subs	r3, #1
 801aa5c:	b2da      	uxtb	r2, r3
 801aa5e:	4b07      	ldr	r3, [pc, #28]	; (801aa7c <TRACER_EMB_UnLock+0x3c>)
 801aa60:	741a      	strb	r2, [r3, #16]
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa66:	68bb      	ldr	r3, [r7, #8]
 801aa68:	f383 8810 	msr	PRIMASK, r3
}
 801aa6c:	bf00      	nop
  TRACER_LEAVE_CRITICAL_SECTION();
}
 801aa6e:	bf00      	nop
 801aa70:	3714      	adds	r7, #20
 801aa72:	46bd      	mov	sp, r7
 801aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa78:	4770      	bx	lr
 801aa7a:	bf00      	nop
 801aa7c:	20002bcc 	.word	0x20002bcc

0801aa80 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b086      	sub	sp, #24
 801aa84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa86:	f3ef 8310 	mrs	r3, PRIMASK
 801aa8a:	60bb      	str	r3, [r7, #8]
  return(result);
 801aa8c:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 801aa8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa90:	b672      	cpsid	i
}
 801aa92:	bf00      	nop

  if (0u == TracerContext.Counter)
 801aa94:	4b27      	ldr	r3, [pc, #156]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aa96:	7c1b      	ldrb	r3, [r3, #16]
 801aa98:	b2db      	uxtb	r3, r3
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d132      	bne.n	801ab04 <TRACER_EMB_SendData+0x84>
  {
    _begin = TracerContext.PtrTx_Read;
 801aa9e:	4b25      	ldr	r3, [pc, #148]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 801aaa4:	4b23      	ldr	r3, [pc, #140]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aaa6:	685b      	ldr	r3, [r3, #4]
 801aaa8:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 801aaaa:	693a      	ldr	r2, [r7, #16]
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	429a      	cmp	r2, r3
 801aab0:	d028      	beq.n	801ab04 <TRACER_EMB_SendData+0x84>
    {
      TRACER_EMB_Lock();
 801aab2:	f7ff ffa5 	bl	801aa00 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 801aab6:	68fa      	ldr	r2, [r7, #12]
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	429a      	cmp	r2, r3
 801aabc:	d908      	bls.n	801aad0 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 801aabe:	68fa      	ldr	r2, [r7, #12]
 801aac0:	693b      	ldr	r3, [r7, #16]
 801aac2:	1ad3      	subs	r3, r2, r3
 801aac4:	4a1b      	ldr	r2, [pc, #108]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aac6:	6093      	str	r3, [r2, #8]
        TracerContext.discontinue = 0;
 801aac8:	4b1a      	ldr	r3, [pc, #104]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aaca:	2200      	movs	r2, #0
 801aacc:	765a      	strb	r2, [r3, #25]
 801aace:	e007      	b.n	801aae0 <TRACER_EMB_SendData+0x60>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 801aad0:	693b      	ldr	r3, [r7, #16]
 801aad2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aad6:	4a17      	ldr	r2, [pc, #92]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aad8:	6093      	str	r3, [r2, #8]
        TracerContext.discontinue = 1;
 801aada:	4b16      	ldr	r3, [pc, #88]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aadc:	2201      	movs	r2, #1
 801aade:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 801aae0:	f000 f88b 	bl	801abfa <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 801aae4:	4b13      	ldr	r3, [pc, #76]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aae6:	68db      	ldr	r3, [r3, #12]
 801aae8:	3301      	adds	r3, #1
 801aaea:	4a12      	ldr	r2, [pc, #72]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aaec:	60d3      	str	r3, [r2, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 801aaee:	693b      	ldr	r3, [r7, #16]
 801aaf0:	3318      	adds	r3, #24
 801aaf2:	4a10      	ldr	r2, [pc, #64]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aaf4:	4413      	add	r3, r2
 801aaf6:	3303      	adds	r3, #3
 801aaf8:	4a0e      	ldr	r2, [pc, #56]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801aafa:	6892      	ldr	r2, [r2, #8]
 801aafc:	4611      	mov	r1, r2
 801aafe:	4618      	mov	r0, r3
 801ab00:	f000 fe6a 	bl	801b7d8 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 801ab04:	4b0b      	ldr	r3, [pc, #44]	; (801ab34 <TRACER_EMB_SendData+0xb4>)
 801ab06:	68db      	ldr	r3, [r3, #12]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d004      	beq.n	801ab16 <TRACER_EMB_SendData+0x96>
 801ab0c:	2b01      	cmp	r3, #1
 801ab0e:	d105      	bne.n	801ab1c <TRACER_EMB_SendData+0x9c>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 801ab10:	f000 f873 	bl	801abfa <TRACER_EMB_LowPowerSendData>
      break;
 801ab14:	e003      	b.n	801ab1e <TRACER_EMB_SendData+0x9e>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 801ab16:	f000 f877 	bl	801ac08 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 801ab1a:	e000      	b.n	801ab1e <TRACER_EMB_SendData+0x9e>
    default:
      break;
 801ab1c:	bf00      	nop
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	f383 8810 	msr	PRIMASK, r3
}
 801ab28:	bf00      	nop
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 801ab2a:	bf00      	nop
 801ab2c:	3718      	adds	r7, #24
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}
 801ab32:	bf00      	nop
 801ab34:	20002bcc 	.word	0x20002bcc

0801ab38 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 801ab38:	b480      	push	{r7}
 801ab3a:	b089      	sub	sp, #36	; 0x24
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 801ab40:	f04f 33ff 	mov.w	r3, #4294967295
 801ab44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab46:	f3ef 8310 	mrs	r3, PRIMASK
 801ab4a:	613b      	str	r3, [r7, #16]
  return(result);
 801ab4c:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 801ab4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab50:	b672      	cpsid	i
}
 801ab52:	bf00      	nop

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 801ab54:	4b24      	ldr	r3, [pc, #144]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab56:	685a      	ldr	r2, [r3, #4]
 801ab58:	4b23      	ldr	r3, [pc, #140]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	429a      	cmp	r2, r3
 801ab5e:	d103      	bne.n	801ab68 <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 801ab60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ab64:	61fb      	str	r3, [r7, #28]
 801ab66:	e014      	b.n	801ab92 <TRACER_EMB_AllocateBufer+0x5a>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 801ab68:	4b1f      	ldr	r3, [pc, #124]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab6a:	685a      	ldr	r2, [r3, #4]
 801ab6c:	4b1e      	ldr	r3, [pc, #120]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	429a      	cmp	r2, r3
 801ab72:	d908      	bls.n	801ab86 <TRACER_EMB_AllocateBufer+0x4e>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 801ab74:	4b1c      	ldr	r3, [pc, #112]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab76:	681a      	ldr	r2, [r3, #0]
 801ab78:	4b1b      	ldr	r3, [pc, #108]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	1ad3      	subs	r3, r2, r3
 801ab7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801ab82:	61fb      	str	r3, [r7, #28]
 801ab84:	e005      	b.n	801ab92 <TRACER_EMB_AllocateBufer+0x5a>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 801ab86:	4b18      	ldr	r3, [pc, #96]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab88:	681a      	ldr	r2, [r3, #0]
 801ab8a:	4b17      	ldr	r3, [pc, #92]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab8c:	685b      	ldr	r3, [r3, #4]
 801ab8e:	1ad3      	subs	r3, r2, r3
 801ab90:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 801ab92:	69fa      	ldr	r2, [r7, #28]
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d912      	bls.n	801abc0 <TRACER_EMB_AllocateBufer+0x88>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 801ab9a:	4b13      	ldr	r3, [pc, #76]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801ab9c:	685b      	ldr	r3, [r3, #4]
 801ab9e:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 801aba0:	4b11      	ldr	r3, [pc, #68]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801aba2:	685a      	ldr	r2, [r3, #4]
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	4413      	add	r3, r2
 801aba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801abac:	4a0e      	ldr	r2, [pc, #56]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801abae:	6053      	str	r3, [r2, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 801abb0:	4b0d      	ldr	r3, [pc, #52]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801abb2:	7e9b      	ldrb	r3, [r3, #26]
 801abb4:	2b02      	cmp	r3, #2
 801abb6:	d10a      	bne.n	801abce <TRACER_EMB_AllocateBufer+0x96>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 801abb8:	4b0b      	ldr	r3, [pc, #44]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801abba:	2200      	movs	r2, #0
 801abbc:	769a      	strb	r2, [r3, #26]
 801abbe:	e006      	b.n	801abce <TRACER_EMB_AllocateBufer+0x96>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 801abc0:	4b09      	ldr	r3, [pc, #36]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801abc2:	7e9b      	ldrb	r3, [r3, #26]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d102      	bne.n	801abce <TRACER_EMB_AllocateBufer+0x96>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 801abc8:	4b07      	ldr	r3, [pc, #28]	; (801abe8 <TRACER_EMB_AllocateBufer+0xb0>)
 801abca:	2201      	movs	r2, #1
 801abcc:	769a      	strb	r2, [r3, #26]
 801abce:	697b      	ldr	r3, [r7, #20]
 801abd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	f383 8810 	msr	PRIMASK, r3
}
 801abd8:	bf00      	nop
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 801abda:	69bb      	ldr	r3, [r7, #24]
}
 801abdc:	4618      	mov	r0, r3
 801abde:	3724      	adds	r7, #36	; 0x24
 801abe0:	46bd      	mov	sp, r7
 801abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe6:	4770      	bx	lr
 801abe8:	20002bcc 	.word	0x20002bcc

0801abec <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 801abec:	b480      	push	{r7}
 801abee:	af00      	add	r7, sp, #0
}
 801abf0:	bf00      	nop
 801abf2:	46bd      	mov	sp, r7
 801abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf8:	4770      	bx	lr

0801abfa <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 801abfa:	b480      	push	{r7}
 801abfc:	af00      	add	r7, sp, #0
}
 801abfe:	bf00      	nop
 801ac00:	46bd      	mov	sp, r7
 801ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac06:	4770      	bx	lr

0801ac08 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 801ac08:	b480      	push	{r7}
 801ac0a:	af00      	add	r7, sp, #0
}
 801ac0c:	bf00      	nop
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr
	...

0801ac18 <__NVIC_EnableIRQ>:
{
 801ac18:	b480      	push	{r7}
 801ac1a:	b083      	sub	sp, #12
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	4603      	mov	r3, r0
 801ac20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ac22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	db0b      	blt.n	801ac42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801ac2a:	79fb      	ldrb	r3, [r7, #7]
 801ac2c:	f003 021f 	and.w	r2, r3, #31
 801ac30:	4907      	ldr	r1, [pc, #28]	; (801ac50 <__NVIC_EnableIRQ+0x38>)
 801ac32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac36:	095b      	lsrs	r3, r3, #5
 801ac38:	2001      	movs	r0, #1
 801ac3a:	fa00 f202 	lsl.w	r2, r0, r2
 801ac3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801ac42:	bf00      	nop
 801ac44:	370c      	adds	r7, #12
 801ac46:	46bd      	mov	sp, r7
 801ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	e000e100 	.word	0xe000e100

0801ac54 <__NVIC_SetPriority>:
{
 801ac54:	b480      	push	{r7}
 801ac56:	b083      	sub	sp, #12
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	6039      	str	r1, [r7, #0]
 801ac5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ac60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	db0a      	blt.n	801ac7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	b2da      	uxtb	r2, r3
 801ac6c:	490c      	ldr	r1, [pc, #48]	; (801aca0 <__NVIC_SetPriority+0x4c>)
 801ac6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac72:	0112      	lsls	r2, r2, #4
 801ac74:	b2d2      	uxtb	r2, r2
 801ac76:	440b      	add	r3, r1
 801ac78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801ac7c:	e00a      	b.n	801ac94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ac7e:	683b      	ldr	r3, [r7, #0]
 801ac80:	b2da      	uxtb	r2, r3
 801ac82:	4908      	ldr	r1, [pc, #32]	; (801aca4 <__NVIC_SetPriority+0x50>)
 801ac84:	79fb      	ldrb	r3, [r7, #7]
 801ac86:	f003 030f 	and.w	r3, r3, #15
 801ac8a:	3b04      	subs	r3, #4
 801ac8c:	0112      	lsls	r2, r2, #4
 801ac8e:	b2d2      	uxtb	r2, r2
 801ac90:	440b      	add	r3, r1
 801ac92:	761a      	strb	r2, [r3, #24]
}
 801ac94:	bf00      	nop
 801ac96:	370c      	adds	r7, #12
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9e:	4770      	bx	lr
 801aca0:	e000e100 	.word	0xe000e100
 801aca4:	e000ed00 	.word	0xe000ed00

0801aca8 <LL_AHB1_GRP1_EnableClock>:
{
 801aca8:	b480      	push	{r7}
 801acaa:	b085      	sub	sp, #20
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 801acb0:	4b08      	ldr	r3, [pc, #32]	; (801acd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 801acb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801acb4:	4907      	ldr	r1, [pc, #28]	; (801acd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	4313      	orrs	r3, r2
 801acba:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 801acbc:	4b05      	ldr	r3, [pc, #20]	; (801acd4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 801acbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	4013      	ands	r3, r2
 801acc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801acc6:	68fb      	ldr	r3, [r7, #12]
}
 801acc8:	bf00      	nop
 801acca:	3714      	adds	r7, #20
 801accc:	46bd      	mov	sp, r7
 801acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd2:	4770      	bx	lr
 801acd4:	40021000 	.word	0x40021000

0801acd8 <LL_AHB2_GRP1_EnableClock>:
{
 801acd8:	b480      	push	{r7}
 801acda:	b085      	sub	sp, #20
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801ace0:	4b08      	ldr	r3, [pc, #32]	; (801ad04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801ace2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ace4:	4907      	ldr	r1, [pc, #28]	; (801ad04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	4313      	orrs	r3, r2
 801acea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801acec:	4b05      	ldr	r3, [pc, #20]	; (801ad04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801acee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	4013      	ands	r3, r2
 801acf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801acf6:	68fb      	ldr	r3, [r7, #12]
}
 801acf8:	bf00      	nop
 801acfa:	3714      	adds	r7, #20
 801acfc:	46bd      	mov	sp, r7
 801acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad02:	4770      	bx	lr
 801ad04:	40021000 	.word	0x40021000

0801ad08 <LL_APB1_GRP2_EnableClock>:
{
 801ad08:	b480      	push	{r7}
 801ad0a:	b085      	sub	sp, #20
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 801ad10:	4b08      	ldr	r3, [pc, #32]	; (801ad34 <LL_APB1_GRP2_EnableClock+0x2c>)
 801ad12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ad14:	4907      	ldr	r1, [pc, #28]	; (801ad34 <LL_APB1_GRP2_EnableClock+0x2c>)
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	4313      	orrs	r3, r2
 801ad1a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801ad1c:	4b05      	ldr	r3, [pc, #20]	; (801ad34 <LL_APB1_GRP2_EnableClock+0x2c>)
 801ad1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	4013      	ands	r3, r2
 801ad24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801ad26:	68fb      	ldr	r3, [r7, #12]
}
 801ad28:	bf00      	nop
 801ad2a:	3714      	adds	r7, #20
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad32:	4770      	bx	lr
 801ad34:	40021000 	.word	0x40021000

0801ad38 <LL_APB1_GRP2_DisableClock>:
{
 801ad38:	b480      	push	{r7}
 801ad3a:	b083      	sub	sp, #12
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 801ad40:	4b06      	ldr	r3, [pc, #24]	; (801ad5c <LL_APB1_GRP2_DisableClock+0x24>)
 801ad42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	43db      	mvns	r3, r3
 801ad48:	4904      	ldr	r1, [pc, #16]	; (801ad5c <LL_APB1_GRP2_DisableClock+0x24>)
 801ad4a:	4013      	ands	r3, r2
 801ad4c:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 801ad4e:	bf00      	nop
 801ad50:	370c      	adds	r7, #12
 801ad52:	46bd      	mov	sp, r7
 801ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad58:	4770      	bx	lr
 801ad5a:	bf00      	nop
 801ad5c:	40021000 	.word	0x40021000

0801ad60 <LL_DMA_EnableChannel>:
{
 801ad60:	b480      	push	{r7}
 801ad62:	b085      	sub	sp, #20
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	6078      	str	r0, [r7, #4]
 801ad68:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 801ad6e:	4a0c      	ldr	r2, [pc, #48]	; (801ada0 <LL_DMA_EnableChannel+0x40>)
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	4413      	add	r3, r2
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	461a      	mov	r2, r3
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	4413      	add	r3, r2
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	4908      	ldr	r1, [pc, #32]	; (801ada0 <LL_DMA_EnableChannel+0x40>)
 801ad80:	683a      	ldr	r2, [r7, #0]
 801ad82:	440a      	add	r2, r1
 801ad84:	7812      	ldrb	r2, [r2, #0]
 801ad86:	4611      	mov	r1, r2
 801ad88:	68fa      	ldr	r2, [r7, #12]
 801ad8a:	440a      	add	r2, r1
 801ad8c:	f043 0301 	orr.w	r3, r3, #1
 801ad90:	6013      	str	r3, [r2, #0]
}
 801ad92:	bf00      	nop
 801ad94:	3714      	adds	r7, #20
 801ad96:	46bd      	mov	sp, r7
 801ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9c:	4770      	bx	lr
 801ad9e:	bf00      	nop
 801ada0:	0801cbf4 	.word	0x0801cbf4

0801ada4 <LL_DMA_DisableChannel>:
{
 801ada4:	b480      	push	{r7}
 801ada6:	b085      	sub	sp, #20
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	6078      	str	r0, [r7, #4]
 801adac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 801adb2:	4a0c      	ldr	r2, [pc, #48]	; (801ade4 <LL_DMA_DisableChannel+0x40>)
 801adb4:	683b      	ldr	r3, [r7, #0]
 801adb6:	4413      	add	r3, r2
 801adb8:	781b      	ldrb	r3, [r3, #0]
 801adba:	461a      	mov	r2, r3
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	4413      	add	r3, r2
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	4908      	ldr	r1, [pc, #32]	; (801ade4 <LL_DMA_DisableChannel+0x40>)
 801adc4:	683a      	ldr	r2, [r7, #0]
 801adc6:	440a      	add	r2, r1
 801adc8:	7812      	ldrb	r2, [r2, #0]
 801adca:	4611      	mov	r1, r2
 801adcc:	68fa      	ldr	r2, [r7, #12]
 801adce:	440a      	add	r2, r1
 801add0:	f023 0301 	bic.w	r3, r3, #1
 801add4:	6013      	str	r3, [r2, #0]
}
 801add6:	bf00      	nop
 801add8:	3714      	adds	r7, #20
 801adda:	46bd      	mov	sp, r7
 801addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade0:	4770      	bx	lr
 801ade2:	bf00      	nop
 801ade4:	0801cbf4 	.word	0x0801cbf4

0801ade8 <LL_DMA_ConfigTransfer>:
{
 801ade8:	b480      	push	{r7}
 801adea:	b087      	sub	sp, #28
 801adec:	af00      	add	r7, sp, #0
 801adee:	60f8      	str	r0, [r7, #12]
 801adf0:	60b9      	str	r1, [r7, #8]
 801adf2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 801adf8:	4a0e      	ldr	r2, [pc, #56]	; (801ae34 <LL_DMA_ConfigTransfer+0x4c>)
 801adfa:	68bb      	ldr	r3, [r7, #8]
 801adfc:	4413      	add	r3, r2
 801adfe:	781b      	ldrb	r3, [r3, #0]
 801ae00:	461a      	mov	r2, r3
 801ae02:	697b      	ldr	r3, [r7, #20]
 801ae04:	4413      	add	r3, r2
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801ae0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ae10:	4908      	ldr	r1, [pc, #32]	; (801ae34 <LL_DMA_ConfigTransfer+0x4c>)
 801ae12:	68ba      	ldr	r2, [r7, #8]
 801ae14:	440a      	add	r2, r1
 801ae16:	7812      	ldrb	r2, [r2, #0]
 801ae18:	4611      	mov	r1, r2
 801ae1a:	697a      	ldr	r2, [r7, #20]
 801ae1c:	440a      	add	r2, r1
 801ae1e:	4611      	mov	r1, r2
 801ae20:	687a      	ldr	r2, [r7, #4]
 801ae22:	4313      	orrs	r3, r2
 801ae24:	600b      	str	r3, [r1, #0]
}
 801ae26:	bf00      	nop
 801ae28:	371c      	adds	r7, #28
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae30:	4770      	bx	lr
 801ae32:	bf00      	nop
 801ae34:	0801cbf4 	.word	0x0801cbf4

0801ae38 <LL_DMA_GetDataTransferDirection>:
{
 801ae38:	b480      	push	{r7}
 801ae3a:	b085      	sub	sp, #20
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
 801ae40:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 801ae46:	4a08      	ldr	r2, [pc, #32]	; (801ae68 <LL_DMA_GetDataTransferDirection+0x30>)
 801ae48:	683b      	ldr	r3, [r7, #0]
 801ae4a:	4413      	add	r3, r2
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	461a      	mov	r2, r3
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	4413      	add	r3, r2
 801ae54:	681a      	ldr	r2, [r3, #0]
 801ae56:	f244 0310 	movw	r3, #16400	; 0x4010
 801ae5a:	4013      	ands	r3, r2
}
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	3714      	adds	r7, #20
 801ae60:	46bd      	mov	sp, r7
 801ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae66:	4770      	bx	lr
 801ae68:	0801cbf4 	.word	0x0801cbf4

0801ae6c <LL_DMA_SetDataLength>:
{
 801ae6c:	b480      	push	{r7}
 801ae6e:	b087      	sub	sp, #28
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	60f8      	str	r0, [r7, #12]
 801ae74:	60b9      	str	r1, [r7, #8]
 801ae76:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 801ae7c:	4a0d      	ldr	r2, [pc, #52]	; (801aeb4 <LL_DMA_SetDataLength+0x48>)
 801ae7e:	68bb      	ldr	r3, [r7, #8]
 801ae80:	4413      	add	r3, r2
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	461a      	mov	r2, r3
 801ae86:	697b      	ldr	r3, [r7, #20]
 801ae88:	4413      	add	r3, r2
 801ae8a:	685b      	ldr	r3, [r3, #4]
 801ae8c:	0c1b      	lsrs	r3, r3, #16
 801ae8e:	041b      	lsls	r3, r3, #16
 801ae90:	4908      	ldr	r1, [pc, #32]	; (801aeb4 <LL_DMA_SetDataLength+0x48>)
 801ae92:	68ba      	ldr	r2, [r7, #8]
 801ae94:	440a      	add	r2, r1
 801ae96:	7812      	ldrb	r2, [r2, #0]
 801ae98:	4611      	mov	r1, r2
 801ae9a:	697a      	ldr	r2, [r7, #20]
 801ae9c:	440a      	add	r2, r1
 801ae9e:	4611      	mov	r1, r2
 801aea0:	687a      	ldr	r2, [r7, #4]
 801aea2:	4313      	orrs	r3, r2
 801aea4:	604b      	str	r3, [r1, #4]
}
 801aea6:	bf00      	nop
 801aea8:	371c      	adds	r7, #28
 801aeaa:	46bd      	mov	sp, r7
 801aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb0:	4770      	bx	lr
 801aeb2:	bf00      	nop
 801aeb4:	0801cbf4 	.word	0x0801cbf4

0801aeb8 <LL_DMA_ConfigAddresses>:
{
 801aeb8:	b480      	push	{r7}
 801aeba:	b087      	sub	sp, #28
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	60f8      	str	r0, [r7, #12]
 801aec0:	60b9      	str	r1, [r7, #8]
 801aec2:	607a      	str	r2, [r7, #4]
 801aec4:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 801aeca:	6a3b      	ldr	r3, [r7, #32]
 801aecc:	2b10      	cmp	r3, #16
 801aece:	d114      	bne.n	801aefa <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 801aed0:	4a17      	ldr	r2, [pc, #92]	; (801af30 <LL_DMA_ConfigAddresses+0x78>)
 801aed2:	68bb      	ldr	r3, [r7, #8]
 801aed4:	4413      	add	r3, r2
 801aed6:	781b      	ldrb	r3, [r3, #0]
 801aed8:	461a      	mov	r2, r3
 801aeda:	697b      	ldr	r3, [r7, #20]
 801aedc:	4413      	add	r3, r2
 801aede:	461a      	mov	r2, r3
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 801aee4:	4a12      	ldr	r2, [pc, #72]	; (801af30 <LL_DMA_ConfigAddresses+0x78>)
 801aee6:	68bb      	ldr	r3, [r7, #8]
 801aee8:	4413      	add	r3, r2
 801aeea:	781b      	ldrb	r3, [r3, #0]
 801aeec:	461a      	mov	r2, r3
 801aeee:	697b      	ldr	r3, [r7, #20]
 801aef0:	4413      	add	r3, r2
 801aef2:	461a      	mov	r2, r3
 801aef4:	683b      	ldr	r3, [r7, #0]
 801aef6:	6093      	str	r3, [r2, #8]
}
 801aef8:	e013      	b.n	801af22 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 801aefa:	4a0d      	ldr	r2, [pc, #52]	; (801af30 <LL_DMA_ConfigAddresses+0x78>)
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	4413      	add	r3, r2
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	461a      	mov	r2, r3
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	4413      	add	r3, r2
 801af08:	461a      	mov	r2, r3
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 801af0e:	4a08      	ldr	r2, [pc, #32]	; (801af30 <LL_DMA_ConfigAddresses+0x78>)
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	4413      	add	r3, r2
 801af14:	781b      	ldrb	r3, [r3, #0]
 801af16:	461a      	mov	r2, r3
 801af18:	697b      	ldr	r3, [r7, #20]
 801af1a:	4413      	add	r3, r2
 801af1c:	461a      	mov	r2, r3
 801af1e:	683b      	ldr	r3, [r7, #0]
 801af20:	60d3      	str	r3, [r2, #12]
}
 801af22:	bf00      	nop
 801af24:	371c      	adds	r7, #28
 801af26:	46bd      	mov	sp, r7
 801af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2c:	4770      	bx	lr
 801af2e:	bf00      	nop
 801af30:	0801cbf4 	.word	0x0801cbf4

0801af34 <LL_DMA_SetPeriphRequest>:
{
 801af34:	b480      	push	{r7}
 801af36:	b087      	sub	sp, #28
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	0a9b      	lsrs	r3, r3, #10
 801af44:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801af48:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 801af4c:	00db      	lsls	r3, r3, #3
 801af4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 801af50:	68ba      	ldr	r2, [r7, #8]
 801af52:	697b      	ldr	r3, [r7, #20]
 801af54:	4413      	add	r3, r2
 801af56:	009b      	lsls	r3, r3, #2
 801af58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801af5c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801af66:	68ba      	ldr	r2, [r7, #8]
 801af68:	697b      	ldr	r3, [r7, #20]
 801af6a:	4413      	add	r3, r2
 801af6c:	009b      	lsls	r3, r3, #2
 801af6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801af72:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801af76:	687a      	ldr	r2, [r7, #4]
 801af78:	430a      	orrs	r2, r1
 801af7a:	601a      	str	r2, [r3, #0]
}
 801af7c:	bf00      	nop
 801af7e:	371c      	adds	r7, #28
 801af80:	46bd      	mov	sp, r7
 801af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af86:	4770      	bx	lr

0801af88 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 801af88:	b480      	push	{r7}
 801af8a:	b083      	sub	sp, #12
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801af98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801af9c:	d101      	bne.n	801afa2 <LL_DMA_IsActiveFlag_TC3+0x1a>
 801af9e:	2301      	movs	r3, #1
 801afa0:	e000      	b.n	801afa4 <LL_DMA_IsActiveFlag_TC3+0x1c>
 801afa2:	2300      	movs	r3, #0
}
 801afa4:	4618      	mov	r0, r3
 801afa6:	370c      	adds	r7, #12
 801afa8:	46bd      	mov	sp, r7
 801afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afae:	4770      	bx	lr

0801afb0 <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 801afb0:	b480      	push	{r7}
 801afb2:	b083      	sub	sp, #12
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afbe:	605a      	str	r2, [r3, #4]
}
 801afc0:	bf00      	nop
 801afc2:	370c      	adds	r7, #12
 801afc4:	46bd      	mov	sp, r7
 801afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afca:	4770      	bx	lr

0801afcc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 801afcc:	b480      	push	{r7}
 801afce:	b085      	sub	sp, #20
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
 801afd4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 801afda:	4a0c      	ldr	r2, [pc, #48]	; (801b00c <LL_DMA_EnableIT_TC+0x40>)
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	4413      	add	r3, r2
 801afe0:	781b      	ldrb	r3, [r3, #0]
 801afe2:	461a      	mov	r2, r3
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	4413      	add	r3, r2
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	4908      	ldr	r1, [pc, #32]	; (801b00c <LL_DMA_EnableIT_TC+0x40>)
 801afec:	683a      	ldr	r2, [r7, #0]
 801afee:	440a      	add	r2, r1
 801aff0:	7812      	ldrb	r2, [r2, #0]
 801aff2:	4611      	mov	r1, r2
 801aff4:	68fa      	ldr	r2, [r7, #12]
 801aff6:	440a      	add	r2, r1
 801aff8:	f043 0302 	orr.w	r3, r3, #2
 801affc:	6013      	str	r3, [r2, #0]
}
 801affe:	bf00      	nop
 801b000:	3714      	adds	r7, #20
 801b002:	46bd      	mov	sp, r7
 801b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b008:	4770      	bx	lr
 801b00a:	bf00      	nop
 801b00c:	0801cbf4 	.word	0x0801cbf4

0801b010 <LL_GPIO_SetPinMode>:
{
 801b010:	b480      	push	{r7}
 801b012:	b08b      	sub	sp, #44	; 0x2c
 801b014:	af00      	add	r7, sp, #0
 801b016:	60f8      	str	r0, [r7, #12]
 801b018:	60b9      	str	r1, [r7, #8]
 801b01a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	681a      	ldr	r2, [r3, #0]
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b024:	697b      	ldr	r3, [r7, #20]
 801b026:	fa93 f3a3 	rbit	r3, r3
 801b02a:	613b      	str	r3, [r7, #16]
  return result;
 801b02c:	693b      	ldr	r3, [r7, #16]
 801b02e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b030:	69bb      	ldr	r3, [r7, #24]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d101      	bne.n	801b03a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801b036:	2320      	movs	r3, #32
 801b038:	e003      	b.n	801b042 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801b03a:	69bb      	ldr	r3, [r7, #24]
 801b03c:	fab3 f383 	clz	r3, r3
 801b040:	b2db      	uxtb	r3, r3
 801b042:	005b      	lsls	r3, r3, #1
 801b044:	2103      	movs	r1, #3
 801b046:	fa01 f303 	lsl.w	r3, r1, r3
 801b04a:	43db      	mvns	r3, r3
 801b04c:	401a      	ands	r2, r3
 801b04e:	68bb      	ldr	r3, [r7, #8]
 801b050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b052:	6a3b      	ldr	r3, [r7, #32]
 801b054:	fa93 f3a3 	rbit	r3, r3
 801b058:	61fb      	str	r3, [r7, #28]
  return result;
 801b05a:	69fb      	ldr	r3, [r7, #28]
 801b05c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b060:	2b00      	cmp	r3, #0
 801b062:	d101      	bne.n	801b068 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801b064:	2320      	movs	r3, #32
 801b066:	e003      	b.n	801b070 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b06a:	fab3 f383 	clz	r3, r3
 801b06e:	b2db      	uxtb	r3, r3
 801b070:	005b      	lsls	r3, r3, #1
 801b072:	6879      	ldr	r1, [r7, #4]
 801b074:	fa01 f303 	lsl.w	r3, r1, r3
 801b078:	431a      	orrs	r2, r3
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	601a      	str	r2, [r3, #0]
}
 801b07e:	bf00      	nop
 801b080:	372c      	adds	r7, #44	; 0x2c
 801b082:	46bd      	mov	sp, r7
 801b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b088:	4770      	bx	lr

0801b08a <LL_GPIO_SetPinOutputType>:
{
 801b08a:	b480      	push	{r7}
 801b08c:	b085      	sub	sp, #20
 801b08e:	af00      	add	r7, sp, #0
 801b090:	60f8      	str	r0, [r7, #12]
 801b092:	60b9      	str	r1, [r7, #8]
 801b094:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	685a      	ldr	r2, [r3, #4]
 801b09a:	68bb      	ldr	r3, [r7, #8]
 801b09c:	43db      	mvns	r3, r3
 801b09e:	401a      	ands	r2, r3
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	6879      	ldr	r1, [r7, #4]
 801b0a4:	fb01 f303 	mul.w	r3, r1, r3
 801b0a8:	431a      	orrs	r2, r3
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	605a      	str	r2, [r3, #4]
}
 801b0ae:	bf00      	nop
 801b0b0:	3714      	adds	r7, #20
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b8:	4770      	bx	lr

0801b0ba <LL_GPIO_SetPinSpeed>:
{
 801b0ba:	b480      	push	{r7}
 801b0bc:	b08b      	sub	sp, #44	; 0x2c
 801b0be:	af00      	add	r7, sp, #0
 801b0c0:	60f8      	str	r0, [r7, #12]
 801b0c2:	60b9      	str	r1, [r7, #8]
 801b0c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	689a      	ldr	r2, [r3, #8]
 801b0ca:	68bb      	ldr	r3, [r7, #8]
 801b0cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b0ce:	697b      	ldr	r3, [r7, #20]
 801b0d0:	fa93 f3a3 	rbit	r3, r3
 801b0d4:	613b      	str	r3, [r7, #16]
  return result;
 801b0d6:	693b      	ldr	r3, [r7, #16]
 801b0d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b0da:	69bb      	ldr	r3, [r7, #24]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d101      	bne.n	801b0e4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801b0e0:	2320      	movs	r3, #32
 801b0e2:	e003      	b.n	801b0ec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801b0e4:	69bb      	ldr	r3, [r7, #24]
 801b0e6:	fab3 f383 	clz	r3, r3
 801b0ea:	b2db      	uxtb	r3, r3
 801b0ec:	005b      	lsls	r3, r3, #1
 801b0ee:	2103      	movs	r1, #3
 801b0f0:	fa01 f303 	lsl.w	r3, r1, r3
 801b0f4:	43db      	mvns	r3, r3
 801b0f6:	401a      	ands	r2, r3
 801b0f8:	68bb      	ldr	r3, [r7, #8]
 801b0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b0fc:	6a3b      	ldr	r3, [r7, #32]
 801b0fe:	fa93 f3a3 	rbit	r3, r3
 801b102:	61fb      	str	r3, [r7, #28]
  return result;
 801b104:	69fb      	ldr	r3, [r7, #28]
 801b106:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d101      	bne.n	801b112 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801b10e:	2320      	movs	r3, #32
 801b110:	e003      	b.n	801b11a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b114:	fab3 f383 	clz	r3, r3
 801b118:	b2db      	uxtb	r3, r3
 801b11a:	005b      	lsls	r3, r3, #1
 801b11c:	6879      	ldr	r1, [r7, #4]
 801b11e:	fa01 f303 	lsl.w	r3, r1, r3
 801b122:	431a      	orrs	r2, r3
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	609a      	str	r2, [r3, #8]
}
 801b128:	bf00      	nop
 801b12a:	372c      	adds	r7, #44	; 0x2c
 801b12c:	46bd      	mov	sp, r7
 801b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b132:	4770      	bx	lr

0801b134 <LL_GPIO_SetPinPull>:
{
 801b134:	b480      	push	{r7}
 801b136:	b08b      	sub	sp, #44	; 0x2c
 801b138:	af00      	add	r7, sp, #0
 801b13a:	60f8      	str	r0, [r7, #12]
 801b13c:	60b9      	str	r1, [r7, #8]
 801b13e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	68da      	ldr	r2, [r3, #12]
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	fa93 f3a3 	rbit	r3, r3
 801b14e:	613b      	str	r3, [r7, #16]
  return result;
 801b150:	693b      	ldr	r3, [r7, #16]
 801b152:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b154:	69bb      	ldr	r3, [r7, #24]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d101      	bne.n	801b15e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801b15a:	2320      	movs	r3, #32
 801b15c:	e003      	b.n	801b166 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801b15e:	69bb      	ldr	r3, [r7, #24]
 801b160:	fab3 f383 	clz	r3, r3
 801b164:	b2db      	uxtb	r3, r3
 801b166:	005b      	lsls	r3, r3, #1
 801b168:	2103      	movs	r1, #3
 801b16a:	fa01 f303 	lsl.w	r3, r1, r3
 801b16e:	43db      	mvns	r3, r3
 801b170:	401a      	ands	r2, r3
 801b172:	68bb      	ldr	r3, [r7, #8]
 801b174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b176:	6a3b      	ldr	r3, [r7, #32]
 801b178:	fa93 f3a3 	rbit	r3, r3
 801b17c:	61fb      	str	r3, [r7, #28]
  return result;
 801b17e:	69fb      	ldr	r3, [r7, #28]
 801b180:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b184:	2b00      	cmp	r3, #0
 801b186:	d101      	bne.n	801b18c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801b188:	2320      	movs	r3, #32
 801b18a:	e003      	b.n	801b194 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18e:	fab3 f383 	clz	r3, r3
 801b192:	b2db      	uxtb	r3, r3
 801b194:	005b      	lsls	r3, r3, #1
 801b196:	6879      	ldr	r1, [r7, #4]
 801b198:	fa01 f303 	lsl.w	r3, r1, r3
 801b19c:	431a      	orrs	r2, r3
 801b19e:	68fb      	ldr	r3, [r7, #12]
 801b1a0:	60da      	str	r2, [r3, #12]
}
 801b1a2:	bf00      	nop
 801b1a4:	372c      	adds	r7, #44	; 0x2c
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ac:	4770      	bx	lr

0801b1ae <LL_GPIO_SetAFPin_0_7>:
{
 801b1ae:	b480      	push	{r7}
 801b1b0:	b08b      	sub	sp, #44	; 0x2c
 801b1b2:	af00      	add	r7, sp, #0
 801b1b4:	60f8      	str	r0, [r7, #12]
 801b1b6:	60b9      	str	r1, [r7, #8]
 801b1b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	6a1a      	ldr	r2, [r3, #32]
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	fa93 f3a3 	rbit	r3, r3
 801b1c8:	613b      	str	r3, [r7, #16]
  return result;
 801b1ca:	693b      	ldr	r3, [r7, #16]
 801b1cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b1ce:	69bb      	ldr	r3, [r7, #24]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d101      	bne.n	801b1d8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801b1d4:	2320      	movs	r3, #32
 801b1d6:	e003      	b.n	801b1e0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801b1d8:	69bb      	ldr	r3, [r7, #24]
 801b1da:	fab3 f383 	clz	r3, r3
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	009b      	lsls	r3, r3, #2
 801b1e2:	210f      	movs	r1, #15
 801b1e4:	fa01 f303 	lsl.w	r3, r1, r3
 801b1e8:	43db      	mvns	r3, r3
 801b1ea:	401a      	ands	r2, r3
 801b1ec:	68bb      	ldr	r3, [r7, #8]
 801b1ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b1f0:	6a3b      	ldr	r3, [r7, #32]
 801b1f2:	fa93 f3a3 	rbit	r3, r3
 801b1f6:	61fb      	str	r3, [r7, #28]
  return result;
 801b1f8:	69fb      	ldr	r3, [r7, #28]
 801b1fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d101      	bne.n	801b206 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801b202:	2320      	movs	r3, #32
 801b204:	e003      	b.n	801b20e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b208:	fab3 f383 	clz	r3, r3
 801b20c:	b2db      	uxtb	r3, r3
 801b20e:	009b      	lsls	r3, r3, #2
 801b210:	6879      	ldr	r1, [r7, #4]
 801b212:	fa01 f303 	lsl.w	r3, r1, r3
 801b216:	431a      	orrs	r2, r3
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	621a      	str	r2, [r3, #32]
}
 801b21c:	bf00      	nop
 801b21e:	372c      	adds	r7, #44	; 0x2c
 801b220:	46bd      	mov	sp, r7
 801b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b226:	4770      	bx	lr

0801b228 <LL_LPUART_Enable>:
{
 801b228:	b480      	push	{r7}
 801b22a:	b083      	sub	sp, #12
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	f043 0201 	orr.w	r2, r3, #1
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	601a      	str	r2, [r3, #0]
}
 801b23c:	bf00      	nop
 801b23e:	370c      	adds	r7, #12
 801b240:	46bd      	mov	sp, r7
 801b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b246:	4770      	bx	lr

0801b248 <LL_LPUART_Disable>:
{
 801b248:	b480      	push	{r7}
 801b24a:	b083      	sub	sp, #12
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	f023 0201 	bic.w	r2, r3, #1
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	601a      	str	r2, [r3, #0]
}
 801b25c:	bf00      	nop
 801b25e:	370c      	adds	r7, #12
 801b260:	46bd      	mov	sp, r7
 801b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b266:	4770      	bx	lr

0801b268 <LL_LPUART_EnableDirectionRx>:
{
 801b268:	b480      	push	{r7}
 801b26a:	b083      	sub	sp, #12
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	f043 0204 	orr.w	r2, r3, #4
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	601a      	str	r2, [r3, #0]
}
 801b27c:	bf00      	nop
 801b27e:	370c      	adds	r7, #12
 801b280:	46bd      	mov	sp, r7
 801b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b286:	4770      	bx	lr

0801b288 <LL_LPUART_IsActiveFlag_TEACK>:
{
 801b288:	b480      	push	{r7}
 801b28a:	b083      	sub	sp, #12
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	69db      	ldr	r3, [r3, #28]
 801b294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b29c:	d101      	bne.n	801b2a2 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 801b29e:	2301      	movs	r3, #1
 801b2a0:	e000      	b.n	801b2a4 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 801b2a2:	2300      	movs	r3, #0
}
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	370c      	adds	r7, #12
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ae:	4770      	bx	lr

0801b2b0 <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 801b2b0:	b480      	push	{r7}
 801b2b2:	b083      	sub	sp, #12
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2201      	movs	r2, #1
 801b2bc:	621a      	str	r2, [r3, #32]
}
 801b2be:	bf00      	nop
 801b2c0:	370c      	adds	r7, #12
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c8:	4770      	bx	lr

0801b2ca <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 801b2ca:	b480      	push	{r7}
 801b2cc:	b083      	sub	sp, #12
 801b2ce:	af00      	add	r7, sp, #0
 801b2d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	2202      	movs	r2, #2
 801b2d6:	621a      	str	r2, [r3, #32]
}
 801b2d8:	bf00      	nop
 801b2da:	370c      	adds	r7, #12
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e2:	4770      	bx	lr

0801b2e4 <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	b083      	sub	sp, #12
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	2204      	movs	r2, #4
 801b2f0:	621a      	str	r2, [r3, #32]
}
 801b2f2:	bf00      	nop
 801b2f4:	370c      	adds	r7, #12
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2fc:	4770      	bx	lr

0801b2fe <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 801b2fe:	b480      	push	{r7}
 801b300:	b083      	sub	sp, #12
 801b302:	af00      	add	r7, sp, #0
 801b304:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2208      	movs	r2, #8
 801b30a:	621a      	str	r2, [r3, #32]
}
 801b30c:	bf00      	nop
 801b30e:	370c      	adds	r7, #12
 801b310:	46bd      	mov	sp, r7
 801b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b316:	4770      	bx	lr

0801b318 <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 801b318:	b480      	push	{r7}
 801b31a:	b083      	sub	sp, #12
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	2240      	movs	r2, #64	; 0x40
 801b324:	621a      	str	r2, [r3, #32]
}
 801b326:	bf00      	nop
 801b328:	370c      	adds	r7, #12
 801b32a:	46bd      	mov	sp, r7
 801b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b330:	4770      	bx	lr

0801b332 <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 801b332:	b480      	push	{r7}
 801b334:	b083      	sub	sp, #12
 801b336:	af00      	add	r7, sp, #0
 801b338:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	f043 0220 	orr.w	r2, r3, #32
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	601a      	str	r2, [r3, #0]
}
 801b346:	bf00      	nop
 801b348:	370c      	adds	r7, #12
 801b34a:	46bd      	mov	sp, r7
 801b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b350:	4770      	bx	lr

0801b352 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 801b352:	b480      	push	{r7}
 801b354:	b083      	sub	sp, #12
 801b356:	af00      	add	r7, sp, #0
 801b358:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	601a      	str	r2, [r3, #0]
}
 801b366:	bf00      	nop
 801b368:	370c      	adds	r7, #12
 801b36a:	46bd      	mov	sp, r7
 801b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b370:	4770      	bx	lr

0801b372 <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 801b372:	b480      	push	{r7}
 801b374:	b083      	sub	sp, #12
 801b376:	af00      	add	r7, sp, #0
 801b378:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	689b      	ldr	r3, [r3, #8]
 801b37e:	f043 0201 	orr.w	r2, r3, #1
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	609a      	str	r2, [r3, #8]
}
 801b386:	bf00      	nop
 801b388:	370c      	adds	r7, #12
 801b38a:	46bd      	mov	sp, r7
 801b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b390:	4770      	bx	lr

0801b392 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 801b392:	b480      	push	{r7}
 801b394:	b083      	sub	sp, #12
 801b396:	af00      	add	r7, sp, #0
 801b398:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	601a      	str	r2, [r3, #0]
}
 801b3a6:	bf00      	nop
 801b3a8:	370c      	adds	r7, #12
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b0:	4770      	bx	lr

0801b3b2 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 801b3b2:	b480      	push	{r7}
 801b3b4:	b083      	sub	sp, #12
 801b3b6:	af00      	add	r7, sp, #0
 801b3b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	f003 0320 	and.w	r3, r3, #32
 801b3c2:	2b20      	cmp	r3, #32
 801b3c4:	d101      	bne.n	801b3ca <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 801b3c6:	2301      	movs	r3, #1
 801b3c8:	e000      	b.n	801b3cc <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 801b3ca:	2300      	movs	r3, #0
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	370c      	adds	r7, #12
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d6:	4770      	bx	lr

0801b3d8 <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(USART_TypeDef *LPUARTx)
{
 801b3d8:	b480      	push	{r7}
 801b3da:	b083      	sub	sp, #12
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3e8:	2b40      	cmp	r3, #64	; 0x40
 801b3ea:	d101      	bne.n	801b3f0 <LL_LPUART_IsEnabledIT_TC+0x18>
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	e000      	b.n	801b3f2 <LL_LPUART_IsEnabledIT_TC+0x1a>
 801b3f0:	2300      	movs	r3, #0
}
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	370c      	adds	r7, #12
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fc:	4770      	bx	lr

0801b3fe <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(USART_TypeDef *LPUARTx)
{
 801b3fe:	b480      	push	{r7}
 801b400:	b083      	sub	sp, #12
 801b402:	af00      	add	r7, sp, #0
 801b404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b412:	d101      	bne.n	801b418 <LL_LPUART_IsEnabledIT_PE+0x1a>
 801b414:	2301      	movs	r3, #1
 801b416:	e000      	b.n	801b41a <LL_LPUART_IsEnabledIT_PE+0x1c>
 801b418:	2300      	movs	r3, #0
}
 801b41a:	4618      	mov	r0, r3
 801b41c:	370c      	adds	r7, #12
 801b41e:	46bd      	mov	sp, r7
 801b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b424:	4770      	bx	lr

0801b426 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(USART_TypeDef *LPUARTx)
{
 801b426:	b480      	push	{r7}
 801b428:	b083      	sub	sp, #12
 801b42a:	af00      	add	r7, sp, #0
 801b42c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	689b      	ldr	r3, [r3, #8]
 801b432:	f003 0301 	and.w	r3, r3, #1
 801b436:	2b01      	cmp	r3, #1
 801b438:	d101      	bne.n	801b43e <LL_LPUART_IsEnabledIT_ERROR+0x18>
 801b43a:	2301      	movs	r3, #1
 801b43c:	e000      	b.n	801b440 <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 801b43e:	2300      	movs	r3, #0
}
 801b440:	4618      	mov	r0, r3
 801b442:	370c      	adds	r7, #12
 801b444:	46bd      	mov	sp, r7
 801b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b44a:	4770      	bx	lr

0801b44c <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 801b44c:	b480      	push	{r7}
 801b44e:	b083      	sub	sp, #12
 801b450:	af00      	add	r7, sp, #0
 801b452:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	689b      	ldr	r3, [r3, #8]
 801b458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	609a      	str	r2, [r3, #8]
}
 801b460:	bf00      	nop
 801b462:	370c      	adds	r7, #12
 801b464:	46bd      	mov	sp, r7
 801b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b46a:	4770      	bx	lr

0801b46c <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(USART_TypeDef *LPUARTx, uint32_t Direction)
{
 801b46c:	b480      	push	{r7}
 801b46e:	b085      	sub	sp, #20
 801b470:	af00      	add	r7, sp, #0
 801b472:	6078      	str	r0, [r7, #4]
 801b474:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 801b476:	683b      	ldr	r3, [r7, #0]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d103      	bne.n	801b484 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	3328      	adds	r3, #40	; 0x28
 801b480:	60fb      	str	r3, [r7, #12]
 801b482:	e002      	b.n	801b48a <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	3324      	adds	r3, #36	; 0x24
 801b488:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 801b48a:	68fb      	ldr	r3, [r7, #12]
}
 801b48c:	4618      	mov	r0, r3
 801b48e:	3714      	adds	r7, #20
 801b490:	46bd      	mov	sp, r7
 801b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b496:	4770      	bx	lr

0801b498 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(USART_TypeDef *LPUARTx)
{
 801b498:	b480      	push	{r7}
 801b49a:	b083      	sub	sp, #12
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4a4:	b2db      	uxtb	r3, r3
}
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	370c      	adds	r7, #12
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b0:	4770      	bx	lr
	...

0801b4b4 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b090      	sub	sp, #64	; 0x40
 801b4b8:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 801b4ba:	2001      	movs	r0, #1
 801b4bc:	f7ff fc0c 	bl	801acd8 <LL_AHB2_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 801b4c0:	2001      	movs	r0, #1
 801b4c2:	f7ff fc09 	bl	801acd8 <LL_AHB2_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 801b4c6:	220c      	movs	r2, #12
 801b4c8:	2104      	movs	r1, #4
 801b4ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b4ce:	f7ff fe6e 	bl	801b1ae <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 801b4d2:	2202      	movs	r2, #2
 801b4d4:	2104      	movs	r1, #4
 801b4d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b4da:	f7ff fd99 	bl	801b010 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801b4de:	2202      	movs	r2, #2
 801b4e0:	2104      	movs	r1, #4
 801b4e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b4e6:	f7ff fde8 	bl	801b0ba <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	2104      	movs	r1, #4
 801b4ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b4f2:	f7ff fdca 	bl	801b08a <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 801b4f6:	2201      	movs	r2, #1
 801b4f8:	2104      	movs	r1, #4
 801b4fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b4fe:	f7ff fe19 	bl	801b134 <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 801b502:	220c      	movs	r2, #12
 801b504:	2108      	movs	r1, #8
 801b506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b50a:	f7ff fe50 	bl	801b1ae <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 801b50e:	2202      	movs	r2, #2
 801b510:	2108      	movs	r1, #8
 801b512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b516:	f7ff fd7b 	bl	801b010 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801b51a:	2202      	movs	r2, #2
 801b51c:	2108      	movs	r1, #8
 801b51e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b522:	f7ff fdca 	bl	801b0ba <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801b526:	2200      	movs	r2, #0
 801b528:	2108      	movs	r1, #8
 801b52a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b52e:	f7ff fdac 	bl	801b08a <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 801b532:	2201      	movs	r2, #1
 801b534:	2108      	movs	r1, #8
 801b536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b53a:	f7ff fdfb 	bl	801b134 <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801b53e:	2001      	movs	r0, #1
 801b540:	f7ff fbe2 	bl	801ad08 <LL_APB1_GRP2_EnableClock>
  {
    /* Configure USART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 801b544:	482a      	ldr	r0, [pc, #168]	; (801b5f0 <HW_TRACER_EMB_Init+0x13c>)
 801b546:	f7ff fe7f 	bl	801b248 <LL_LPUART_Disable>
    /*  - Parity              : LL_USART_PARITY_NONE            */
    /*  - TransferDirection   : LL_USART_DIRECTION_TX           */
    /*  - HardwareFlowControl : LL_USART_HWCONTROL_NONE         */
    /*  - OverSampling        : LL_USART_OVERSAMPLING_16        */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_USART_PRESCALER_DIV1;
 801b54a:	2300      	movs	r3, #0
 801b54c:	623b      	str	r3, [r7, #32]
#endif /* USART_PRESC_PRESCALER */
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 801b54e:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 801b552:	627b      	str	r3, [r7, #36]	; 0x24
    lpuart_initstruct.DataWidth           = LL_USART_DATAWIDTH_8B;
 801b554:	2300      	movs	r3, #0
 801b556:	62bb      	str	r3, [r7, #40]	; 0x28
    lpuart_initstruct.StopBits            = LL_USART_STOPBITS_1;
 801b558:	2300      	movs	r3, #0
 801b55a:	62fb      	str	r3, [r7, #44]	; 0x2c
    lpuart_initstruct.Parity              = LL_USART_PARITY_NONE;
 801b55c:	2300      	movs	r3, #0
 801b55e:	633b      	str	r3, [r7, #48]	; 0x30
    lpuart_initstruct.TransferDirection   = LL_USART_DIRECTION_TX;
 801b560:	2308      	movs	r3, #8
 801b562:	637b      	str	r3, [r7, #52]	; 0x34
    lpuart_initstruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 801b564:	2300      	movs	r3, #0
 801b566:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 801b568:	f107 0320 	add.w	r3, r7, #32
 801b56c:	4619      	mov	r1, r3
 801b56e:	4820      	ldr	r0, [pc, #128]	; (801b5f0 <HW_TRACER_EMB_Init+0x13c>)
 801b570:	f7ef fc2e 	bl	800add0 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 801b574:	481e      	ldr	r0, [pc, #120]	; (801b5f0 <HW_TRACER_EMB_Init+0x13c>)
 801b576:	f7ff fe57 	bl	801b228 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801b57a:	481d      	ldr	r0, [pc, #116]	; (801b5f0 <HW_TRACER_EMB_Init+0x13c>)
 801b57c:	f7ff fe84 	bl	801b288 <LL_LPUART_IsActiveFlag_TEACK>
 801b580:	63f8      	str	r0, [r7, #60]	; 0x3c
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 801b582:	e003      	b.n	801b58c <HW_TRACER_EMB_Init+0xd8>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801b584:	481a      	ldr	r0, [pc, #104]	; (801b5f0 <HW_TRACER_EMB_Init+0x13c>)
 801b586:	f7ff fe7f 	bl	801b288 <LL_LPUART_IsActiveFlag_TEACK>
 801b58a:	63f8      	str	r0, [r7, #60]	; 0x3c
    while (_temp1 == 0U)
 801b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d0f8      	beq.n	801b584 <HW_TRACER_EMB_Init+0xd0>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 801b592:	2004      	movs	r0, #4
 801b594:	f7ff fb88 	bl	801aca8 <LL_AHB1_GRP1_EnableClock>
 801b598:	2001      	movs	r0, #1
 801b59a:	f7ff fb85 	bl	801aca8 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801b59e:	f242 0290 	movw	r2, #8336	; 0x2090
 801b5a2:	2102      	movs	r1, #2
 801b5a4:	4813      	ldr	r0, [pc, #76]	; (801b5f4 <HW_TRACER_EMB_Init+0x140>)
 801b5a6:	f7ff fc1f 	bl	801ade8 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 801b5aa:	2223      	movs	r2, #35	; 0x23
 801b5ac:	2102      	movs	r1, #2
 801b5ae:	4811      	ldr	r0, [pc, #68]	; (801b5f4 <HW_TRACER_EMB_Init+0x140>)
 801b5b0:	f7ff fcc0 	bl	801af34 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801b5b4:	2102      	movs	r1, #2
 801b5b6:	480f      	ldr	r0, [pc, #60]	; (801b5f4 <HW_TRACER_EMB_Init+0x140>)
 801b5b8:	f7ff fd08 	bl	801afcc <LL_DMA_EnableIT_TC>
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
 801b5bc:	2100      	movs	r1, #0
 801b5be:	200d      	movs	r0, #13
 801b5c0:	f7ff fb48 	bl	801ac54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 801b5c4:	200d      	movs	r0, #13
 801b5c6:	f7ff fb27 	bl	801ac18 <__NVIC_EnableIRQ>
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801b5ca:	2103      	movs	r1, #3
 801b5cc:	205b      	movs	r0, #91	; 0x5b
 801b5ce:	f7ff fb41 	bl	801ac54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801b5d2:	205b      	movs	r0, #91	; 0x5b
 801b5d4:	f7ff fb20 	bl	801ac18 <__NVIC_EnableIRQ>
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 801b5d8:	4b07      	ldr	r3, [pc, #28]	; (801b5f8 <HW_TRACER_EMB_Init+0x144>)
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d103      	bne.n	801b5e8 <HW_TRACER_EMB_Init+0x134>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 801b5e0:	2001      	movs	r0, #1
 801b5e2:	f7ff fba9 	bl	801ad38 <LL_APB1_GRP2_DisableClock>
  }
  return;
 801b5e6:	bf00      	nop
 801b5e8:	bf00      	nop
}
 801b5ea:	3740      	adds	r7, #64	; 0x40
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}
 801b5f0:	40008000 	.word	0x40008000
 801b5f4:	40020000 	.word	0x40020000
 801b5f8:	20002fe8 	.word	0x20002fe8

0801b5fc <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b082      	sub	sp, #8
 801b600:	af00      	add	r7, sp, #0
 801b602:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 801b604:	4a04      	ldr	r2, [pc, #16]	; (801b618 <HW_TRACER_EMB_RegisterRxCallback+0x1c>)
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	6013      	str	r3, [r2, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 801b60a:	2001      	movs	r0, #1
 801b60c:	f7ff fb7c 	bl	801ad08 <LL_APB1_GRP2_EnableClock>
}
 801b610:	bf00      	nop
 801b612:	3708      	adds	r7, #8
 801b614:	46bd      	mov	sp, r7
 801b616:	bd80      	pop	{r7, pc}
 801b618:	20002fe8 	.word	0x20002fe8

0801b61c <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 801b620:	4808      	ldr	r0, [pc, #32]	; (801b644 <HW_TRACER_EMB_StartRX+0x28>)
 801b622:	f7ff fe86 	bl	801b332 <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 801b626:	4807      	ldr	r0, [pc, #28]	; (801b644 <HW_TRACER_EMB_StartRX+0x28>)
 801b628:	f7ff fea3 	bl	801b372 <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 801b62c:	4805      	ldr	r0, [pc, #20]	; (801b644 <HW_TRACER_EMB_StartRX+0x28>)
 801b62e:	f7ff fe1b 	bl	801b268 <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801b632:	2103      	movs	r1, #3
 801b634:	205b      	movs	r0, #91	; 0x5b
 801b636:	f7ff fb0d 	bl	801ac54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801b63a:	205b      	movs	r0, #91	; 0x5b
 801b63c:	f7ff faec 	bl	801ac18 <__NVIC_EnableIRQ>
}
 801b640:	bf00      	nop
 801b642:	bd80      	pop	{r7, pc}
 801b644:	40008000 	.word	0x40008000

0801b648 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 801b64c:	4806      	ldr	r0, [pc, #24]	; (801b668 <HW_TRACER_EMB_IRQHandlerDMA+0x20>)
 801b64e:	f7ff fc9b 	bl	801af88 <LL_DMA_IsActiveFlag_TC3>
 801b652:	4603      	mov	r3, r0
 801b654:	2b01      	cmp	r3, #1
 801b656:	d105      	bne.n	801b664 <HW_TRACER_EMB_IRQHandlerDMA+0x1c>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 801b658:	4804      	ldr	r0, [pc, #16]	; (801b66c <HW_TRACER_EMB_IRQHandlerDMA+0x24>)
 801b65a:	f7ff fe7a 	bl	801b352 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 801b65e:	4802      	ldr	r0, [pc, #8]	; (801b668 <HW_TRACER_EMB_IRQHandlerDMA+0x20>)
 801b660:	f7ff fca6 	bl	801afb0 <LL_DMA_ClearFlag_TC3>
  }
}
 801b664:	bf00      	nop
 801b666:	bd80      	pop	{r7, pc}
 801b668:	40020000 	.word	0x40020000
 801b66c:	40008000 	.word	0x40008000

0801b670 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b086      	sub	sp, #24
 801b674:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 801b676:	2300      	movs	r3, #0
 801b678:	75fb      	strb	r3, [r7, #23]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 801b67a:	4b54      	ldr	r3, [pc, #336]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b67c:	69db      	ldr	r3, [r3, #28]
 801b67e:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 801b680:	4852      	ldr	r0, [pc, #328]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b682:	f7ff fe96 	bl	801b3b2 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 801b686:	60f8      	str	r0, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	2b01      	cmp	r3, #1
 801b68c:	d178      	bne.n	801b780 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 801b68e:	693b      	ldr	r3, [r7, #16]
 801b690:	f003 030f 	and.w	r3, r3, #15
 801b694:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801b696:	693b      	ldr	r3, [r7, #16]
 801b698:	f003 0320 	and.w	r3, r3, #32
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d014      	beq.n	801b6ca <HW_TRACER_EMB_IRQHandlerUSART+0x5a>
        && (_errorflags == 0UL))
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d111      	bne.n	801b6ca <HW_TRACER_EMB_IRQHandlerUSART+0x5a>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801b6a6:	4849      	ldr	r0, [pc, #292]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b6a8:	f7ff fef6 	bl	801b498 <LL_LPUART_ReceiveData8>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 801b6b0:	4b47      	ldr	r3, [pc, #284]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	f000 8083 	beq.w	801b7c0 <HW_TRACER_EMB_IRQHandlerUSART+0x150>
      {
        fptr_rx(received_char, 0U);
 801b6ba:	4b45      	ldr	r3, [pc, #276]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	683a      	ldr	r2, [r7, #0]
 801b6c0:	b2d2      	uxtb	r2, r2
 801b6c2:	2100      	movs	r1, #0
 801b6c4:	4610      	mov	r0, r2
 801b6c6:	4798      	blx	r3
      }
      return;
 801b6c8:	e07a      	b.n	801b7c0 <HW_TRACER_EMB_IRQHandlerUSART+0x150>
    }
    else if (_errorflags != 0UL)
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d057      	beq.n	801b780 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801b6d0:	693b      	ldr	r3, [r7, #16]
 801b6d2:	f003 0320 	and.w	r3, r3, #32
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d010      	beq.n	801b6fc <HW_TRACER_EMB_IRQHandlerUSART+0x8c>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801b6da:	483c      	ldr	r0, [pc, #240]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b6dc:	f7ff fedc 	bl	801b498 <LL_LPUART_ReceiveData8>
 801b6e0:	4603      	mov	r3, r0
 801b6e2:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 801b6e4:	4b3a      	ldr	r3, [pc, #232]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d06b      	beq.n	801b7c4 <HW_TRACER_EMB_IRQHandlerUSART+0x154>
        {
          fptr_rx(received_char, 0U);
 801b6ec:	4b38      	ldr	r3, [pc, #224]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	683a      	ldr	r2, [r7, #0]
 801b6f2:	b2d2      	uxtb	r2, r2
 801b6f4:	2100      	movs	r1, #0
 801b6f6:	4610      	mov	r0, r2
 801b6f8:	4798      	blx	r3
        }
        return;
 801b6fa:	e063      	b.n	801b7c4 <HW_TRACER_EMB_IRQHandlerUSART+0x154>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 801b6fc:	4833      	ldr	r0, [pc, #204]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b6fe:	f7ff fe7e 	bl	801b3fe <LL_LPUART_IsEnabledIT_PE>
 801b702:	6078      	str	r0, [r7, #4]
      if ((_temp2 == 1U)
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	2b01      	cmp	r3, #1
 801b708:	d109      	bne.n	801b71e <HW_TRACER_EMB_IRQHandlerUSART+0xae>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	f003 0301 	and.w	r3, r3, #1
 801b710:	2b00      	cmp	r3, #0
 801b712:	d004      	beq.n	801b71e <HW_TRACER_EMB_IRQHandlerUSART+0xae>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 801b714:	482d      	ldr	r0, [pc, #180]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b716:	f7ff fdcb 	bl	801b2b0 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 801b71a:	2301      	movs	r3, #1
 801b71c:	75fb      	strb	r3, [r7, #23]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 801b71e:	482b      	ldr	r0, [pc, #172]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b720:	f7ff fe81 	bl	801b426 <LL_LPUART_IsEnabledIT_ERROR>
 801b724:	6078      	str	r0, [r7, #4]
      if (_temp2 == 1U)
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	2b01      	cmp	r3, #1
 801b72a:	d11d      	bne.n	801b768 <HW_TRACER_EMB_IRQHandlerUSART+0xf8>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	f003 0302 	and.w	r3, r3, #2
 801b732:	2b00      	cmp	r3, #0
 801b734:	d004      	beq.n	801b740 <HW_TRACER_EMB_IRQHandlerUSART+0xd0>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 801b736:	4825      	ldr	r0, [pc, #148]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b738:	f7ff fdc7 	bl	801b2ca <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 801b73c:	2301      	movs	r3, #1
 801b73e:	75fb      	strb	r3, [r7, #23]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	f003 0308 	and.w	r3, r3, #8
 801b746:	2b00      	cmp	r3, #0
 801b748:	d004      	beq.n	801b754 <HW_TRACER_EMB_IRQHandlerUSART+0xe4>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 801b74a:	4820      	ldr	r0, [pc, #128]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b74c:	f7ff fdd7 	bl	801b2fe <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 801b750:	2301      	movs	r3, #1
 801b752:	75fb      	strb	r3, [r7, #23]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	f003 0304 	and.w	r3, r3, #4
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d004      	beq.n	801b768 <HW_TRACER_EMB_IRQHandlerUSART+0xf8>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 801b75e:	481b      	ldr	r0, [pc, #108]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b760:	f7ff fdc0 	bl	801b2e4 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 801b764:	2301      	movs	r3, #1
 801b766:	75fb      	strb	r3, [r7, #23]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 801b768:	7dfb      	ldrb	r3, [r7, #23]
 801b76a:	2b01      	cmp	r3, #1
 801b76c:	d108      	bne.n	801b780 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
 801b76e:	4b18      	ldr	r3, [pc, #96]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d004      	beq.n	801b780 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 801b776:	4b16      	ldr	r3, [pc, #88]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	2101      	movs	r1, #1
 801b77c:	2001      	movs	r0, #1
 801b77e:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 801b780:	4812      	ldr	r0, [pc, #72]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b782:	f7ff fe29 	bl	801b3d8 <LL_LPUART_IsEnabledIT_TC>
 801b786:	6078      	str	r0, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 801b788:	693b      	ldr	r3, [r7, #16]
 801b78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d019      	beq.n	801b7c6 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	2b01      	cmp	r3, #1
 801b796:	d116      	bne.n	801b7c6 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 801b798:	480c      	ldr	r0, [pc, #48]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b79a:	f7ff fdfa 	bl	801b392 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 801b79e:	480b      	ldr	r0, [pc, #44]	; (801b7cc <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801b7a0:	f7ff fdba 	bl	801b318 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801b7a4:	2102      	movs	r1, #2
 801b7a6:	480b      	ldr	r0, [pc, #44]	; (801b7d4 <HW_TRACER_EMB_IRQHandlerUSART+0x164>)
 801b7a8:	f7ff fafc 	bl	801ada4 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 801b7ac:	4b08      	ldr	r3, [pc, #32]	; (801b7d0 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d102      	bne.n	801b7ba <HW_TRACER_EMB_IRQHandlerUSART+0x14a>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 801b7b4:	2001      	movs	r0, #1
 801b7b6:	f7ff fabf 	bl	801ad38 <LL_APB1_GRP2_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 801b7ba:	f7ff f8d9 	bl	801a970 <TRACER_EMB_CALLBACK_TX>
 801b7be:	e002      	b.n	801b7c6 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
      return;
 801b7c0:	bf00      	nop
 801b7c2:	e000      	b.n	801b7c6 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
        return;
 801b7c4:	bf00      	nop
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 801b7c6:	3718      	adds	r7, #24
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	bd80      	pop	{r7, pc}
 801b7cc:	40008000 	.word	0x40008000
 801b7d0:	20002fe8 	.word	0x20002fe8
 801b7d4:	40020000 	.word	0x40020000

0801b7d8 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 801b7d8:	b5b0      	push	{r4, r5, r7, lr}
 801b7da:	b084      	sub	sp, #16
 801b7dc:	af02      	add	r7, sp, #8
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801b7e2:	2001      	movs	r0, #1
 801b7e4:	f7ff fa90 	bl	801ad08 <LL_APB1_GRP2_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801b7e8:	687c      	ldr	r4, [r7, #4]
 801b7ea:	2100      	movs	r1, #0
 801b7ec:	480f      	ldr	r0, [pc, #60]	; (801b82c <HW_TRACER_EMB_SendData+0x54>)
 801b7ee:	f7ff fe3d 	bl	801b46c <LL_LPUART_DMA_GetRegAddr>
 801b7f2:	4605      	mov	r5, r0
 801b7f4:	2102      	movs	r1, #2
 801b7f6:	480e      	ldr	r0, [pc, #56]	; (801b830 <HW_TRACER_EMB_SendData+0x58>)
 801b7f8:	f7ff fb1e 	bl	801ae38 <LL_DMA_GetDataTransferDirection>
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	9300      	str	r3, [sp, #0]
 801b800:	462b      	mov	r3, r5
 801b802:	4622      	mov	r2, r4
 801b804:	2102      	movs	r1, #2
 801b806:	480a      	ldr	r0, [pc, #40]	; (801b830 <HW_TRACER_EMB_SendData+0x58>)
 801b808:	f7ff fb56 	bl	801aeb8 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, LL_USART_DMA_REG_DATA_TRANSMIT),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 801b80c:	683a      	ldr	r2, [r7, #0]
 801b80e:	2102      	movs	r1, #2
 801b810:	4807      	ldr	r0, [pc, #28]	; (801b830 <HW_TRACER_EMB_SendData+0x58>)
 801b812:	f7ff fb2b 	bl	801ae6c <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 801b816:	4805      	ldr	r0, [pc, #20]	; (801b82c <HW_TRACER_EMB_SendData+0x54>)
 801b818:	f7ff fe18 	bl	801b44c <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801b81c:	2102      	movs	r1, #2
 801b81e:	4804      	ldr	r0, [pc, #16]	; (801b830 <HW_TRACER_EMB_SendData+0x58>)
 801b820:	f7ff fa9e 	bl	801ad60 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 801b824:	bf00      	nop
 801b826:	3708      	adds	r7, #8
 801b828:	46bd      	mov	sp, r7
 801b82a:	bdb0      	pop	{r4, r5, r7, pc}
 801b82c:	40008000 	.word	0x40008000
 801b830:	40020000 	.word	0x40020000

0801b834 <__aeabi_memclr>:
 801b834:	2200      	movs	r2, #0
 801b836:	f7ea b880 	b.w	800593a <__aeabi_memset>

0801b83a <__aeabi_memcpy>:
 801b83a:	f000 b835 	b.w	801b8a8 <memcpy>
	...

0801b840 <__errno>:
 801b840:	4b01      	ldr	r3, [pc, #4]	; (801b848 <__errno+0x8>)
 801b842:	6818      	ldr	r0, [r3, #0]
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	200002e4 	.word	0x200002e4

0801b84c <__libc_init_array>:
 801b84c:	b570      	push	{r4, r5, r6, lr}
 801b84e:	4d0d      	ldr	r5, [pc, #52]	; (801b884 <__libc_init_array+0x38>)
 801b850:	4c0d      	ldr	r4, [pc, #52]	; (801b888 <__libc_init_array+0x3c>)
 801b852:	1b64      	subs	r4, r4, r5
 801b854:	10a4      	asrs	r4, r4, #2
 801b856:	2600      	movs	r6, #0
 801b858:	42a6      	cmp	r6, r4
 801b85a:	d109      	bne.n	801b870 <__libc_init_array+0x24>
 801b85c:	4d0b      	ldr	r5, [pc, #44]	; (801b88c <__libc_init_array+0x40>)
 801b85e:	4c0c      	ldr	r4, [pc, #48]	; (801b890 <__libc_init_array+0x44>)
 801b860:	f000 fcd4 	bl	801c20c <_init>
 801b864:	1b64      	subs	r4, r4, r5
 801b866:	10a4      	asrs	r4, r4, #2
 801b868:	2600      	movs	r6, #0
 801b86a:	42a6      	cmp	r6, r4
 801b86c:	d105      	bne.n	801b87a <__libc_init_array+0x2e>
 801b86e:	bd70      	pop	{r4, r5, r6, pc}
 801b870:	f855 3b04 	ldr.w	r3, [r5], #4
 801b874:	4798      	blx	r3
 801b876:	3601      	adds	r6, #1
 801b878:	e7ee      	b.n	801b858 <__libc_init_array+0xc>
 801b87a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b87e:	4798      	blx	r3
 801b880:	3601      	adds	r6, #1
 801b882:	e7f2      	b.n	801b86a <__libc_init_array+0x1e>
 801b884:	0801cc98 	.word	0x0801cc98
 801b888:	0801cc98 	.word	0x0801cc98
 801b88c:	0801cc98 	.word	0x0801cc98
 801b890:	0801cc9c 	.word	0x0801cc9c

0801b894 <__retarget_lock_acquire_recursive>:
 801b894:	4770      	bx	lr

0801b896 <__retarget_lock_release_recursive>:
 801b896:	4770      	bx	lr

0801b898 <malloc>:
 801b898:	4b02      	ldr	r3, [pc, #8]	; (801b8a4 <malloc+0xc>)
 801b89a:	4601      	mov	r1, r0
 801b89c:	6818      	ldr	r0, [r3, #0]
 801b89e:	f000 b869 	b.w	801b974 <_malloc_r>
 801b8a2:	bf00      	nop
 801b8a4:	200002e4 	.word	0x200002e4

0801b8a8 <memcpy>:
 801b8a8:	440a      	add	r2, r1
 801b8aa:	4291      	cmp	r1, r2
 801b8ac:	f100 33ff 	add.w	r3, r0, #4294967295
 801b8b0:	d100      	bne.n	801b8b4 <memcpy+0xc>
 801b8b2:	4770      	bx	lr
 801b8b4:	b510      	push	{r4, lr}
 801b8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b8ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b8be:	4291      	cmp	r1, r2
 801b8c0:	d1f9      	bne.n	801b8b6 <memcpy+0xe>
 801b8c2:	bd10      	pop	{r4, pc}

0801b8c4 <memset>:
 801b8c4:	4402      	add	r2, r0
 801b8c6:	4603      	mov	r3, r0
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	d100      	bne.n	801b8ce <memset+0xa>
 801b8cc:	4770      	bx	lr
 801b8ce:	f803 1b01 	strb.w	r1, [r3], #1
 801b8d2:	e7f9      	b.n	801b8c8 <memset+0x4>

0801b8d4 <_free_r>:
 801b8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8d6:	2900      	cmp	r1, #0
 801b8d8:	d048      	beq.n	801b96c <_free_r+0x98>
 801b8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b8de:	9001      	str	r0, [sp, #4]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	f1a1 0404 	sub.w	r4, r1, #4
 801b8e6:	bfb8      	it	lt
 801b8e8:	18e4      	addlt	r4, r4, r3
 801b8ea:	f000 f94b 	bl	801bb84 <__malloc_lock>
 801b8ee:	4a20      	ldr	r2, [pc, #128]	; (801b970 <_free_r+0x9c>)
 801b8f0:	9801      	ldr	r0, [sp, #4]
 801b8f2:	6813      	ldr	r3, [r2, #0]
 801b8f4:	4615      	mov	r5, r2
 801b8f6:	b933      	cbnz	r3, 801b906 <_free_r+0x32>
 801b8f8:	6063      	str	r3, [r4, #4]
 801b8fa:	6014      	str	r4, [r2, #0]
 801b8fc:	b003      	add	sp, #12
 801b8fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b902:	f000 b945 	b.w	801bb90 <__malloc_unlock>
 801b906:	42a3      	cmp	r3, r4
 801b908:	d90b      	bls.n	801b922 <_free_r+0x4e>
 801b90a:	6821      	ldr	r1, [r4, #0]
 801b90c:	1862      	adds	r2, r4, r1
 801b90e:	4293      	cmp	r3, r2
 801b910:	bf04      	itt	eq
 801b912:	681a      	ldreq	r2, [r3, #0]
 801b914:	685b      	ldreq	r3, [r3, #4]
 801b916:	6063      	str	r3, [r4, #4]
 801b918:	bf04      	itt	eq
 801b91a:	1852      	addeq	r2, r2, r1
 801b91c:	6022      	streq	r2, [r4, #0]
 801b91e:	602c      	str	r4, [r5, #0]
 801b920:	e7ec      	b.n	801b8fc <_free_r+0x28>
 801b922:	461a      	mov	r2, r3
 801b924:	685b      	ldr	r3, [r3, #4]
 801b926:	b10b      	cbz	r3, 801b92c <_free_r+0x58>
 801b928:	42a3      	cmp	r3, r4
 801b92a:	d9fa      	bls.n	801b922 <_free_r+0x4e>
 801b92c:	6811      	ldr	r1, [r2, #0]
 801b92e:	1855      	adds	r5, r2, r1
 801b930:	42a5      	cmp	r5, r4
 801b932:	d10b      	bne.n	801b94c <_free_r+0x78>
 801b934:	6824      	ldr	r4, [r4, #0]
 801b936:	4421      	add	r1, r4
 801b938:	1854      	adds	r4, r2, r1
 801b93a:	42a3      	cmp	r3, r4
 801b93c:	6011      	str	r1, [r2, #0]
 801b93e:	d1dd      	bne.n	801b8fc <_free_r+0x28>
 801b940:	681c      	ldr	r4, [r3, #0]
 801b942:	685b      	ldr	r3, [r3, #4]
 801b944:	6053      	str	r3, [r2, #4]
 801b946:	4421      	add	r1, r4
 801b948:	6011      	str	r1, [r2, #0]
 801b94a:	e7d7      	b.n	801b8fc <_free_r+0x28>
 801b94c:	d902      	bls.n	801b954 <_free_r+0x80>
 801b94e:	230c      	movs	r3, #12
 801b950:	6003      	str	r3, [r0, #0]
 801b952:	e7d3      	b.n	801b8fc <_free_r+0x28>
 801b954:	6825      	ldr	r5, [r4, #0]
 801b956:	1961      	adds	r1, r4, r5
 801b958:	428b      	cmp	r3, r1
 801b95a:	bf04      	itt	eq
 801b95c:	6819      	ldreq	r1, [r3, #0]
 801b95e:	685b      	ldreq	r3, [r3, #4]
 801b960:	6063      	str	r3, [r4, #4]
 801b962:	bf04      	itt	eq
 801b964:	1949      	addeq	r1, r1, r5
 801b966:	6021      	streq	r1, [r4, #0]
 801b968:	6054      	str	r4, [r2, #4]
 801b96a:	e7c7      	b.n	801b8fc <_free_r+0x28>
 801b96c:	b003      	add	sp, #12
 801b96e:	bd30      	pop	{r4, r5, pc}
 801b970:	20002fec 	.word	0x20002fec

0801b974 <_malloc_r>:
 801b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b976:	1ccd      	adds	r5, r1, #3
 801b978:	f025 0503 	bic.w	r5, r5, #3
 801b97c:	3508      	adds	r5, #8
 801b97e:	2d0c      	cmp	r5, #12
 801b980:	bf38      	it	cc
 801b982:	250c      	movcc	r5, #12
 801b984:	2d00      	cmp	r5, #0
 801b986:	4606      	mov	r6, r0
 801b988:	db01      	blt.n	801b98e <_malloc_r+0x1a>
 801b98a:	42a9      	cmp	r1, r5
 801b98c:	d903      	bls.n	801b996 <_malloc_r+0x22>
 801b98e:	230c      	movs	r3, #12
 801b990:	6033      	str	r3, [r6, #0]
 801b992:	2000      	movs	r0, #0
 801b994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b996:	f000 f8f5 	bl	801bb84 <__malloc_lock>
 801b99a:	4921      	ldr	r1, [pc, #132]	; (801ba20 <_malloc_r+0xac>)
 801b99c:	680a      	ldr	r2, [r1, #0]
 801b99e:	4614      	mov	r4, r2
 801b9a0:	b99c      	cbnz	r4, 801b9ca <_malloc_r+0x56>
 801b9a2:	4f20      	ldr	r7, [pc, #128]	; (801ba24 <_malloc_r+0xb0>)
 801b9a4:	683b      	ldr	r3, [r7, #0]
 801b9a6:	b923      	cbnz	r3, 801b9b2 <_malloc_r+0x3e>
 801b9a8:	4621      	mov	r1, r4
 801b9aa:	4630      	mov	r0, r6
 801b9ac:	f000 f8a6 	bl	801bafc <_sbrk_r>
 801b9b0:	6038      	str	r0, [r7, #0]
 801b9b2:	4629      	mov	r1, r5
 801b9b4:	4630      	mov	r0, r6
 801b9b6:	f000 f8a1 	bl	801bafc <_sbrk_r>
 801b9ba:	1c43      	adds	r3, r0, #1
 801b9bc:	d123      	bne.n	801ba06 <_malloc_r+0x92>
 801b9be:	230c      	movs	r3, #12
 801b9c0:	6033      	str	r3, [r6, #0]
 801b9c2:	4630      	mov	r0, r6
 801b9c4:	f000 f8e4 	bl	801bb90 <__malloc_unlock>
 801b9c8:	e7e3      	b.n	801b992 <_malloc_r+0x1e>
 801b9ca:	6823      	ldr	r3, [r4, #0]
 801b9cc:	1b5b      	subs	r3, r3, r5
 801b9ce:	d417      	bmi.n	801ba00 <_malloc_r+0x8c>
 801b9d0:	2b0b      	cmp	r3, #11
 801b9d2:	d903      	bls.n	801b9dc <_malloc_r+0x68>
 801b9d4:	6023      	str	r3, [r4, #0]
 801b9d6:	441c      	add	r4, r3
 801b9d8:	6025      	str	r5, [r4, #0]
 801b9da:	e004      	b.n	801b9e6 <_malloc_r+0x72>
 801b9dc:	6863      	ldr	r3, [r4, #4]
 801b9de:	42a2      	cmp	r2, r4
 801b9e0:	bf0c      	ite	eq
 801b9e2:	600b      	streq	r3, [r1, #0]
 801b9e4:	6053      	strne	r3, [r2, #4]
 801b9e6:	4630      	mov	r0, r6
 801b9e8:	f000 f8d2 	bl	801bb90 <__malloc_unlock>
 801b9ec:	f104 000b 	add.w	r0, r4, #11
 801b9f0:	1d23      	adds	r3, r4, #4
 801b9f2:	f020 0007 	bic.w	r0, r0, #7
 801b9f6:	1ac2      	subs	r2, r0, r3
 801b9f8:	d0cc      	beq.n	801b994 <_malloc_r+0x20>
 801b9fa:	1a1b      	subs	r3, r3, r0
 801b9fc:	50a3      	str	r3, [r4, r2]
 801b9fe:	e7c9      	b.n	801b994 <_malloc_r+0x20>
 801ba00:	4622      	mov	r2, r4
 801ba02:	6864      	ldr	r4, [r4, #4]
 801ba04:	e7cc      	b.n	801b9a0 <_malloc_r+0x2c>
 801ba06:	1cc4      	adds	r4, r0, #3
 801ba08:	f024 0403 	bic.w	r4, r4, #3
 801ba0c:	42a0      	cmp	r0, r4
 801ba0e:	d0e3      	beq.n	801b9d8 <_malloc_r+0x64>
 801ba10:	1a21      	subs	r1, r4, r0
 801ba12:	4630      	mov	r0, r6
 801ba14:	f000 f872 	bl	801bafc <_sbrk_r>
 801ba18:	3001      	adds	r0, #1
 801ba1a:	d1dd      	bne.n	801b9d8 <_malloc_r+0x64>
 801ba1c:	e7cf      	b.n	801b9be <_malloc_r+0x4a>
 801ba1e:	bf00      	nop
 801ba20:	20002fec 	.word	0x20002fec
 801ba24:	20002ff0 	.word	0x20002ff0

0801ba28 <cleanup_glue>:
 801ba28:	b538      	push	{r3, r4, r5, lr}
 801ba2a:	460c      	mov	r4, r1
 801ba2c:	6809      	ldr	r1, [r1, #0]
 801ba2e:	4605      	mov	r5, r0
 801ba30:	b109      	cbz	r1, 801ba36 <cleanup_glue+0xe>
 801ba32:	f7ff fff9 	bl	801ba28 <cleanup_glue>
 801ba36:	4621      	mov	r1, r4
 801ba38:	4628      	mov	r0, r5
 801ba3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba3e:	f7ff bf49 	b.w	801b8d4 <_free_r>
	...

0801ba44 <_reclaim_reent>:
 801ba44:	4b2c      	ldr	r3, [pc, #176]	; (801baf8 <_reclaim_reent+0xb4>)
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	4283      	cmp	r3, r0
 801ba4a:	b570      	push	{r4, r5, r6, lr}
 801ba4c:	4604      	mov	r4, r0
 801ba4e:	d051      	beq.n	801baf4 <_reclaim_reent+0xb0>
 801ba50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ba52:	b143      	cbz	r3, 801ba66 <_reclaim_reent+0x22>
 801ba54:	68db      	ldr	r3, [r3, #12]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d14a      	bne.n	801baf0 <_reclaim_reent+0xac>
 801ba5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ba5c:	6819      	ldr	r1, [r3, #0]
 801ba5e:	b111      	cbz	r1, 801ba66 <_reclaim_reent+0x22>
 801ba60:	4620      	mov	r0, r4
 801ba62:	f7ff ff37 	bl	801b8d4 <_free_r>
 801ba66:	6961      	ldr	r1, [r4, #20]
 801ba68:	b111      	cbz	r1, 801ba70 <_reclaim_reent+0x2c>
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	f7ff ff32 	bl	801b8d4 <_free_r>
 801ba70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ba72:	b111      	cbz	r1, 801ba7a <_reclaim_reent+0x36>
 801ba74:	4620      	mov	r0, r4
 801ba76:	f7ff ff2d 	bl	801b8d4 <_free_r>
 801ba7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ba7c:	b111      	cbz	r1, 801ba84 <_reclaim_reent+0x40>
 801ba7e:	4620      	mov	r0, r4
 801ba80:	f7ff ff28 	bl	801b8d4 <_free_r>
 801ba84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ba86:	b111      	cbz	r1, 801ba8e <_reclaim_reent+0x4a>
 801ba88:	4620      	mov	r0, r4
 801ba8a:	f7ff ff23 	bl	801b8d4 <_free_r>
 801ba8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ba90:	b111      	cbz	r1, 801ba98 <_reclaim_reent+0x54>
 801ba92:	4620      	mov	r0, r4
 801ba94:	f7ff ff1e 	bl	801b8d4 <_free_r>
 801ba98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ba9a:	b111      	cbz	r1, 801baa2 <_reclaim_reent+0x5e>
 801ba9c:	4620      	mov	r0, r4
 801ba9e:	f7ff ff19 	bl	801b8d4 <_free_r>
 801baa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801baa4:	b111      	cbz	r1, 801baac <_reclaim_reent+0x68>
 801baa6:	4620      	mov	r0, r4
 801baa8:	f7ff ff14 	bl	801b8d4 <_free_r>
 801baac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801baae:	b111      	cbz	r1, 801bab6 <_reclaim_reent+0x72>
 801bab0:	4620      	mov	r0, r4
 801bab2:	f7ff ff0f 	bl	801b8d4 <_free_r>
 801bab6:	69a3      	ldr	r3, [r4, #24]
 801bab8:	b1e3      	cbz	r3, 801baf4 <_reclaim_reent+0xb0>
 801baba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801babc:	4620      	mov	r0, r4
 801babe:	4798      	blx	r3
 801bac0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bac2:	b1b9      	cbz	r1, 801baf4 <_reclaim_reent+0xb0>
 801bac4:	4620      	mov	r0, r4
 801bac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801baca:	f7ff bfad 	b.w	801ba28 <cleanup_glue>
 801bace:	5949      	ldr	r1, [r1, r5]
 801bad0:	b941      	cbnz	r1, 801bae4 <_reclaim_reent+0xa0>
 801bad2:	3504      	adds	r5, #4
 801bad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bad6:	2d80      	cmp	r5, #128	; 0x80
 801bad8:	68d9      	ldr	r1, [r3, #12]
 801bada:	d1f8      	bne.n	801bace <_reclaim_reent+0x8a>
 801badc:	4620      	mov	r0, r4
 801bade:	f7ff fef9 	bl	801b8d4 <_free_r>
 801bae2:	e7ba      	b.n	801ba5a <_reclaim_reent+0x16>
 801bae4:	680e      	ldr	r6, [r1, #0]
 801bae6:	4620      	mov	r0, r4
 801bae8:	f7ff fef4 	bl	801b8d4 <_free_r>
 801baec:	4631      	mov	r1, r6
 801baee:	e7ef      	b.n	801bad0 <_reclaim_reent+0x8c>
 801baf0:	2500      	movs	r5, #0
 801baf2:	e7ef      	b.n	801bad4 <_reclaim_reent+0x90>
 801baf4:	bd70      	pop	{r4, r5, r6, pc}
 801baf6:	bf00      	nop
 801baf8:	200002e4 	.word	0x200002e4

0801bafc <_sbrk_r>:
 801bafc:	b538      	push	{r3, r4, r5, lr}
 801bafe:	4d06      	ldr	r5, [pc, #24]	; (801bb18 <_sbrk_r+0x1c>)
 801bb00:	2300      	movs	r3, #0
 801bb02:	4604      	mov	r4, r0
 801bb04:	4608      	mov	r0, r1
 801bb06:	602b      	str	r3, [r5, #0]
 801bb08:	f7ea ff96 	bl	8006a38 <_sbrk>
 801bb0c:	1c43      	adds	r3, r0, #1
 801bb0e:	d102      	bne.n	801bb16 <_sbrk_r+0x1a>
 801bb10:	682b      	ldr	r3, [r5, #0]
 801bb12:	b103      	cbz	r3, 801bb16 <_sbrk_r+0x1a>
 801bb14:	6023      	str	r3, [r4, #0]
 801bb16:	bd38      	pop	{r3, r4, r5, pc}
 801bb18:	20004b1c 	.word	0x20004b1c

0801bb1c <sniprintf>:
 801bb1c:	b40c      	push	{r2, r3}
 801bb1e:	b530      	push	{r4, r5, lr}
 801bb20:	4b17      	ldr	r3, [pc, #92]	; (801bb80 <sniprintf+0x64>)
 801bb22:	1e0c      	subs	r4, r1, #0
 801bb24:	681d      	ldr	r5, [r3, #0]
 801bb26:	b09d      	sub	sp, #116	; 0x74
 801bb28:	da08      	bge.n	801bb3c <sniprintf+0x20>
 801bb2a:	238b      	movs	r3, #139	; 0x8b
 801bb2c:	602b      	str	r3, [r5, #0]
 801bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 801bb32:	b01d      	add	sp, #116	; 0x74
 801bb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bb38:	b002      	add	sp, #8
 801bb3a:	4770      	bx	lr
 801bb3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bb40:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bb44:	bf14      	ite	ne
 801bb46:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bb4a:	4623      	moveq	r3, r4
 801bb4c:	9304      	str	r3, [sp, #16]
 801bb4e:	9307      	str	r3, [sp, #28]
 801bb50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bb54:	9002      	str	r0, [sp, #8]
 801bb56:	9006      	str	r0, [sp, #24]
 801bb58:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bb5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb5e:	ab21      	add	r3, sp, #132	; 0x84
 801bb60:	a902      	add	r1, sp, #8
 801bb62:	4628      	mov	r0, r5
 801bb64:	9301      	str	r3, [sp, #4]
 801bb66:	f000 f875 	bl	801bc54 <_svfiprintf_r>
 801bb6a:	1c43      	adds	r3, r0, #1
 801bb6c:	bfbc      	itt	lt
 801bb6e:	238b      	movlt	r3, #139	; 0x8b
 801bb70:	602b      	strlt	r3, [r5, #0]
 801bb72:	2c00      	cmp	r4, #0
 801bb74:	d0dd      	beq.n	801bb32 <sniprintf+0x16>
 801bb76:	9b02      	ldr	r3, [sp, #8]
 801bb78:	2200      	movs	r2, #0
 801bb7a:	701a      	strb	r2, [r3, #0]
 801bb7c:	e7d9      	b.n	801bb32 <sniprintf+0x16>
 801bb7e:	bf00      	nop
 801bb80:	200002e4 	.word	0x200002e4

0801bb84 <__malloc_lock>:
 801bb84:	4801      	ldr	r0, [pc, #4]	; (801bb8c <__malloc_lock+0x8>)
 801bb86:	f7ff be85 	b.w	801b894 <__retarget_lock_acquire_recursive>
 801bb8a:	bf00      	nop
 801bb8c:	20004b14 	.word	0x20004b14

0801bb90 <__malloc_unlock>:
 801bb90:	4801      	ldr	r0, [pc, #4]	; (801bb98 <__malloc_unlock+0x8>)
 801bb92:	f7ff be80 	b.w	801b896 <__retarget_lock_release_recursive>
 801bb96:	bf00      	nop
 801bb98:	20004b14 	.word	0x20004b14

0801bb9c <__ssputs_r>:
 801bb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bba0:	688e      	ldr	r6, [r1, #8]
 801bba2:	429e      	cmp	r6, r3
 801bba4:	4682      	mov	sl, r0
 801bba6:	460c      	mov	r4, r1
 801bba8:	4690      	mov	r8, r2
 801bbaa:	461f      	mov	r7, r3
 801bbac:	d838      	bhi.n	801bc20 <__ssputs_r+0x84>
 801bbae:	898a      	ldrh	r2, [r1, #12]
 801bbb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bbb4:	d032      	beq.n	801bc1c <__ssputs_r+0x80>
 801bbb6:	6825      	ldr	r5, [r4, #0]
 801bbb8:	6909      	ldr	r1, [r1, #16]
 801bbba:	eba5 0901 	sub.w	r9, r5, r1
 801bbbe:	6965      	ldr	r5, [r4, #20]
 801bbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bbc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bbc8:	3301      	adds	r3, #1
 801bbca:	444b      	add	r3, r9
 801bbcc:	106d      	asrs	r5, r5, #1
 801bbce:	429d      	cmp	r5, r3
 801bbd0:	bf38      	it	cc
 801bbd2:	461d      	movcc	r5, r3
 801bbd4:	0553      	lsls	r3, r2, #21
 801bbd6:	d531      	bpl.n	801bc3c <__ssputs_r+0xa0>
 801bbd8:	4629      	mov	r1, r5
 801bbda:	f7ff fecb 	bl	801b974 <_malloc_r>
 801bbde:	4606      	mov	r6, r0
 801bbe0:	b950      	cbnz	r0, 801bbf8 <__ssputs_r+0x5c>
 801bbe2:	230c      	movs	r3, #12
 801bbe4:	f8ca 3000 	str.w	r3, [sl]
 801bbe8:	89a3      	ldrh	r3, [r4, #12]
 801bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbee:	81a3      	strh	r3, [r4, #12]
 801bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbf8:	6921      	ldr	r1, [r4, #16]
 801bbfa:	464a      	mov	r2, r9
 801bbfc:	f7ff fe54 	bl	801b8a8 <memcpy>
 801bc00:	89a3      	ldrh	r3, [r4, #12]
 801bc02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc0a:	81a3      	strh	r3, [r4, #12]
 801bc0c:	6126      	str	r6, [r4, #16]
 801bc0e:	6165      	str	r5, [r4, #20]
 801bc10:	444e      	add	r6, r9
 801bc12:	eba5 0509 	sub.w	r5, r5, r9
 801bc16:	6026      	str	r6, [r4, #0]
 801bc18:	60a5      	str	r5, [r4, #8]
 801bc1a:	463e      	mov	r6, r7
 801bc1c:	42be      	cmp	r6, r7
 801bc1e:	d900      	bls.n	801bc22 <__ssputs_r+0x86>
 801bc20:	463e      	mov	r6, r7
 801bc22:	4632      	mov	r2, r6
 801bc24:	6820      	ldr	r0, [r4, #0]
 801bc26:	4641      	mov	r1, r8
 801bc28:	f000 faa8 	bl	801c17c <memmove>
 801bc2c:	68a3      	ldr	r3, [r4, #8]
 801bc2e:	6822      	ldr	r2, [r4, #0]
 801bc30:	1b9b      	subs	r3, r3, r6
 801bc32:	4432      	add	r2, r6
 801bc34:	60a3      	str	r3, [r4, #8]
 801bc36:	6022      	str	r2, [r4, #0]
 801bc38:	2000      	movs	r0, #0
 801bc3a:	e7db      	b.n	801bbf4 <__ssputs_r+0x58>
 801bc3c:	462a      	mov	r2, r5
 801bc3e:	f000 fab7 	bl	801c1b0 <_realloc_r>
 801bc42:	4606      	mov	r6, r0
 801bc44:	2800      	cmp	r0, #0
 801bc46:	d1e1      	bne.n	801bc0c <__ssputs_r+0x70>
 801bc48:	6921      	ldr	r1, [r4, #16]
 801bc4a:	4650      	mov	r0, sl
 801bc4c:	f7ff fe42 	bl	801b8d4 <_free_r>
 801bc50:	e7c7      	b.n	801bbe2 <__ssputs_r+0x46>
	...

0801bc54 <_svfiprintf_r>:
 801bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc58:	4698      	mov	r8, r3
 801bc5a:	898b      	ldrh	r3, [r1, #12]
 801bc5c:	061b      	lsls	r3, r3, #24
 801bc5e:	b09d      	sub	sp, #116	; 0x74
 801bc60:	4607      	mov	r7, r0
 801bc62:	460d      	mov	r5, r1
 801bc64:	4614      	mov	r4, r2
 801bc66:	d50e      	bpl.n	801bc86 <_svfiprintf_r+0x32>
 801bc68:	690b      	ldr	r3, [r1, #16]
 801bc6a:	b963      	cbnz	r3, 801bc86 <_svfiprintf_r+0x32>
 801bc6c:	2140      	movs	r1, #64	; 0x40
 801bc6e:	f7ff fe81 	bl	801b974 <_malloc_r>
 801bc72:	6028      	str	r0, [r5, #0]
 801bc74:	6128      	str	r0, [r5, #16]
 801bc76:	b920      	cbnz	r0, 801bc82 <_svfiprintf_r+0x2e>
 801bc78:	230c      	movs	r3, #12
 801bc7a:	603b      	str	r3, [r7, #0]
 801bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc80:	e0d1      	b.n	801be26 <_svfiprintf_r+0x1d2>
 801bc82:	2340      	movs	r3, #64	; 0x40
 801bc84:	616b      	str	r3, [r5, #20]
 801bc86:	2300      	movs	r3, #0
 801bc88:	9309      	str	r3, [sp, #36]	; 0x24
 801bc8a:	2320      	movs	r3, #32
 801bc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bc90:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc94:	2330      	movs	r3, #48	; 0x30
 801bc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801be40 <_svfiprintf_r+0x1ec>
 801bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bc9e:	f04f 0901 	mov.w	r9, #1
 801bca2:	4623      	mov	r3, r4
 801bca4:	469a      	mov	sl, r3
 801bca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcaa:	b10a      	cbz	r2, 801bcb0 <_svfiprintf_r+0x5c>
 801bcac:	2a25      	cmp	r2, #37	; 0x25
 801bcae:	d1f9      	bne.n	801bca4 <_svfiprintf_r+0x50>
 801bcb0:	ebba 0b04 	subs.w	fp, sl, r4
 801bcb4:	d00b      	beq.n	801bcce <_svfiprintf_r+0x7a>
 801bcb6:	465b      	mov	r3, fp
 801bcb8:	4622      	mov	r2, r4
 801bcba:	4629      	mov	r1, r5
 801bcbc:	4638      	mov	r0, r7
 801bcbe:	f7ff ff6d 	bl	801bb9c <__ssputs_r>
 801bcc2:	3001      	adds	r0, #1
 801bcc4:	f000 80aa 	beq.w	801be1c <_svfiprintf_r+0x1c8>
 801bcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bcca:	445a      	add	r2, fp
 801bccc:	9209      	str	r2, [sp, #36]	; 0x24
 801bcce:	f89a 3000 	ldrb.w	r3, [sl]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	f000 80a2 	beq.w	801be1c <_svfiprintf_r+0x1c8>
 801bcd8:	2300      	movs	r3, #0
 801bcda:	f04f 32ff 	mov.w	r2, #4294967295
 801bcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bce2:	f10a 0a01 	add.w	sl, sl, #1
 801bce6:	9304      	str	r3, [sp, #16]
 801bce8:	9307      	str	r3, [sp, #28]
 801bcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bcee:	931a      	str	r3, [sp, #104]	; 0x68
 801bcf0:	4654      	mov	r4, sl
 801bcf2:	2205      	movs	r2, #5
 801bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcf8:	4851      	ldr	r0, [pc, #324]	; (801be40 <_svfiprintf_r+0x1ec>)
 801bcfa:	f7e9 fe79 	bl	80059f0 <memchr>
 801bcfe:	9a04      	ldr	r2, [sp, #16]
 801bd00:	b9d8      	cbnz	r0, 801bd3a <_svfiprintf_r+0xe6>
 801bd02:	06d0      	lsls	r0, r2, #27
 801bd04:	bf44      	itt	mi
 801bd06:	2320      	movmi	r3, #32
 801bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd0c:	0711      	lsls	r1, r2, #28
 801bd0e:	bf44      	itt	mi
 801bd10:	232b      	movmi	r3, #43	; 0x2b
 801bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd16:	f89a 3000 	ldrb.w	r3, [sl]
 801bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 801bd1c:	d015      	beq.n	801bd4a <_svfiprintf_r+0xf6>
 801bd1e:	9a07      	ldr	r2, [sp, #28]
 801bd20:	4654      	mov	r4, sl
 801bd22:	2000      	movs	r0, #0
 801bd24:	f04f 0c0a 	mov.w	ip, #10
 801bd28:	4621      	mov	r1, r4
 801bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd2e:	3b30      	subs	r3, #48	; 0x30
 801bd30:	2b09      	cmp	r3, #9
 801bd32:	d94e      	bls.n	801bdd2 <_svfiprintf_r+0x17e>
 801bd34:	b1b0      	cbz	r0, 801bd64 <_svfiprintf_r+0x110>
 801bd36:	9207      	str	r2, [sp, #28]
 801bd38:	e014      	b.n	801bd64 <_svfiprintf_r+0x110>
 801bd3a:	eba0 0308 	sub.w	r3, r0, r8
 801bd3e:	fa09 f303 	lsl.w	r3, r9, r3
 801bd42:	4313      	orrs	r3, r2
 801bd44:	9304      	str	r3, [sp, #16]
 801bd46:	46a2      	mov	sl, r4
 801bd48:	e7d2      	b.n	801bcf0 <_svfiprintf_r+0x9c>
 801bd4a:	9b03      	ldr	r3, [sp, #12]
 801bd4c:	1d19      	adds	r1, r3, #4
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	9103      	str	r1, [sp, #12]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	bfbb      	ittet	lt
 801bd56:	425b      	neglt	r3, r3
 801bd58:	f042 0202 	orrlt.w	r2, r2, #2
 801bd5c:	9307      	strge	r3, [sp, #28]
 801bd5e:	9307      	strlt	r3, [sp, #28]
 801bd60:	bfb8      	it	lt
 801bd62:	9204      	strlt	r2, [sp, #16]
 801bd64:	7823      	ldrb	r3, [r4, #0]
 801bd66:	2b2e      	cmp	r3, #46	; 0x2e
 801bd68:	d10c      	bne.n	801bd84 <_svfiprintf_r+0x130>
 801bd6a:	7863      	ldrb	r3, [r4, #1]
 801bd6c:	2b2a      	cmp	r3, #42	; 0x2a
 801bd6e:	d135      	bne.n	801bddc <_svfiprintf_r+0x188>
 801bd70:	9b03      	ldr	r3, [sp, #12]
 801bd72:	1d1a      	adds	r2, r3, #4
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	9203      	str	r2, [sp, #12]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	bfb8      	it	lt
 801bd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 801bd80:	3402      	adds	r4, #2
 801bd82:	9305      	str	r3, [sp, #20]
 801bd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801be50 <_svfiprintf_r+0x1fc>
 801bd88:	7821      	ldrb	r1, [r4, #0]
 801bd8a:	2203      	movs	r2, #3
 801bd8c:	4650      	mov	r0, sl
 801bd8e:	f7e9 fe2f 	bl	80059f0 <memchr>
 801bd92:	b140      	cbz	r0, 801bda6 <_svfiprintf_r+0x152>
 801bd94:	2340      	movs	r3, #64	; 0x40
 801bd96:	eba0 000a 	sub.w	r0, r0, sl
 801bd9a:	fa03 f000 	lsl.w	r0, r3, r0
 801bd9e:	9b04      	ldr	r3, [sp, #16]
 801bda0:	4303      	orrs	r3, r0
 801bda2:	3401      	adds	r4, #1
 801bda4:	9304      	str	r3, [sp, #16]
 801bda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdaa:	4826      	ldr	r0, [pc, #152]	; (801be44 <_svfiprintf_r+0x1f0>)
 801bdac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bdb0:	2206      	movs	r2, #6
 801bdb2:	f7e9 fe1d 	bl	80059f0 <memchr>
 801bdb6:	2800      	cmp	r0, #0
 801bdb8:	d038      	beq.n	801be2c <_svfiprintf_r+0x1d8>
 801bdba:	4b23      	ldr	r3, [pc, #140]	; (801be48 <_svfiprintf_r+0x1f4>)
 801bdbc:	bb1b      	cbnz	r3, 801be06 <_svfiprintf_r+0x1b2>
 801bdbe:	9b03      	ldr	r3, [sp, #12]
 801bdc0:	3307      	adds	r3, #7
 801bdc2:	f023 0307 	bic.w	r3, r3, #7
 801bdc6:	3308      	adds	r3, #8
 801bdc8:	9303      	str	r3, [sp, #12]
 801bdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdcc:	4433      	add	r3, r6
 801bdce:	9309      	str	r3, [sp, #36]	; 0x24
 801bdd0:	e767      	b.n	801bca2 <_svfiprintf_r+0x4e>
 801bdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 801bdd6:	460c      	mov	r4, r1
 801bdd8:	2001      	movs	r0, #1
 801bdda:	e7a5      	b.n	801bd28 <_svfiprintf_r+0xd4>
 801bddc:	2300      	movs	r3, #0
 801bdde:	3401      	adds	r4, #1
 801bde0:	9305      	str	r3, [sp, #20]
 801bde2:	4619      	mov	r1, r3
 801bde4:	f04f 0c0a 	mov.w	ip, #10
 801bde8:	4620      	mov	r0, r4
 801bdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bdee:	3a30      	subs	r2, #48	; 0x30
 801bdf0:	2a09      	cmp	r2, #9
 801bdf2:	d903      	bls.n	801bdfc <_svfiprintf_r+0x1a8>
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d0c5      	beq.n	801bd84 <_svfiprintf_r+0x130>
 801bdf8:	9105      	str	r1, [sp, #20]
 801bdfa:	e7c3      	b.n	801bd84 <_svfiprintf_r+0x130>
 801bdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 801be00:	4604      	mov	r4, r0
 801be02:	2301      	movs	r3, #1
 801be04:	e7f0      	b.n	801bde8 <_svfiprintf_r+0x194>
 801be06:	ab03      	add	r3, sp, #12
 801be08:	9300      	str	r3, [sp, #0]
 801be0a:	462a      	mov	r2, r5
 801be0c:	4b0f      	ldr	r3, [pc, #60]	; (801be4c <_svfiprintf_r+0x1f8>)
 801be0e:	a904      	add	r1, sp, #16
 801be10:	4638      	mov	r0, r7
 801be12:	f3af 8000 	nop.w
 801be16:	1c42      	adds	r2, r0, #1
 801be18:	4606      	mov	r6, r0
 801be1a:	d1d6      	bne.n	801bdca <_svfiprintf_r+0x176>
 801be1c:	89ab      	ldrh	r3, [r5, #12]
 801be1e:	065b      	lsls	r3, r3, #25
 801be20:	f53f af2c 	bmi.w	801bc7c <_svfiprintf_r+0x28>
 801be24:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be26:	b01d      	add	sp, #116	; 0x74
 801be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be2c:	ab03      	add	r3, sp, #12
 801be2e:	9300      	str	r3, [sp, #0]
 801be30:	462a      	mov	r2, r5
 801be32:	4b06      	ldr	r3, [pc, #24]	; (801be4c <_svfiprintf_r+0x1f8>)
 801be34:	a904      	add	r1, sp, #16
 801be36:	4638      	mov	r0, r7
 801be38:	f000 f87a 	bl	801bf30 <_printf_i>
 801be3c:	e7eb      	b.n	801be16 <_svfiprintf_r+0x1c2>
 801be3e:	bf00      	nop
 801be40:	0801cc5c 	.word	0x0801cc5c
 801be44:	0801cc66 	.word	0x0801cc66
 801be48:	00000000 	.word	0x00000000
 801be4c:	0801bb9d 	.word	0x0801bb9d
 801be50:	0801cc62 	.word	0x0801cc62

0801be54 <_printf_common>:
 801be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be58:	4616      	mov	r6, r2
 801be5a:	4699      	mov	r9, r3
 801be5c:	688a      	ldr	r2, [r1, #8]
 801be5e:	690b      	ldr	r3, [r1, #16]
 801be60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801be64:	4293      	cmp	r3, r2
 801be66:	bfb8      	it	lt
 801be68:	4613      	movlt	r3, r2
 801be6a:	6033      	str	r3, [r6, #0]
 801be6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801be70:	4607      	mov	r7, r0
 801be72:	460c      	mov	r4, r1
 801be74:	b10a      	cbz	r2, 801be7a <_printf_common+0x26>
 801be76:	3301      	adds	r3, #1
 801be78:	6033      	str	r3, [r6, #0]
 801be7a:	6823      	ldr	r3, [r4, #0]
 801be7c:	0699      	lsls	r1, r3, #26
 801be7e:	bf42      	ittt	mi
 801be80:	6833      	ldrmi	r3, [r6, #0]
 801be82:	3302      	addmi	r3, #2
 801be84:	6033      	strmi	r3, [r6, #0]
 801be86:	6825      	ldr	r5, [r4, #0]
 801be88:	f015 0506 	ands.w	r5, r5, #6
 801be8c:	d106      	bne.n	801be9c <_printf_common+0x48>
 801be8e:	f104 0a19 	add.w	sl, r4, #25
 801be92:	68e3      	ldr	r3, [r4, #12]
 801be94:	6832      	ldr	r2, [r6, #0]
 801be96:	1a9b      	subs	r3, r3, r2
 801be98:	42ab      	cmp	r3, r5
 801be9a:	dc26      	bgt.n	801beea <_printf_common+0x96>
 801be9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bea0:	1e13      	subs	r3, r2, #0
 801bea2:	6822      	ldr	r2, [r4, #0]
 801bea4:	bf18      	it	ne
 801bea6:	2301      	movne	r3, #1
 801bea8:	0692      	lsls	r2, r2, #26
 801beaa:	d42b      	bmi.n	801bf04 <_printf_common+0xb0>
 801beac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801beb0:	4649      	mov	r1, r9
 801beb2:	4638      	mov	r0, r7
 801beb4:	47c0      	blx	r8
 801beb6:	3001      	adds	r0, #1
 801beb8:	d01e      	beq.n	801bef8 <_printf_common+0xa4>
 801beba:	6823      	ldr	r3, [r4, #0]
 801bebc:	68e5      	ldr	r5, [r4, #12]
 801bebe:	6832      	ldr	r2, [r6, #0]
 801bec0:	f003 0306 	and.w	r3, r3, #6
 801bec4:	2b04      	cmp	r3, #4
 801bec6:	bf08      	it	eq
 801bec8:	1aad      	subeq	r5, r5, r2
 801beca:	68a3      	ldr	r3, [r4, #8]
 801becc:	6922      	ldr	r2, [r4, #16]
 801bece:	bf0c      	ite	eq
 801bed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bed4:	2500      	movne	r5, #0
 801bed6:	4293      	cmp	r3, r2
 801bed8:	bfc4      	itt	gt
 801beda:	1a9b      	subgt	r3, r3, r2
 801bedc:	18ed      	addgt	r5, r5, r3
 801bede:	2600      	movs	r6, #0
 801bee0:	341a      	adds	r4, #26
 801bee2:	42b5      	cmp	r5, r6
 801bee4:	d11a      	bne.n	801bf1c <_printf_common+0xc8>
 801bee6:	2000      	movs	r0, #0
 801bee8:	e008      	b.n	801befc <_printf_common+0xa8>
 801beea:	2301      	movs	r3, #1
 801beec:	4652      	mov	r2, sl
 801beee:	4649      	mov	r1, r9
 801bef0:	4638      	mov	r0, r7
 801bef2:	47c0      	blx	r8
 801bef4:	3001      	adds	r0, #1
 801bef6:	d103      	bne.n	801bf00 <_printf_common+0xac>
 801bef8:	f04f 30ff 	mov.w	r0, #4294967295
 801befc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf00:	3501      	adds	r5, #1
 801bf02:	e7c6      	b.n	801be92 <_printf_common+0x3e>
 801bf04:	18e1      	adds	r1, r4, r3
 801bf06:	1c5a      	adds	r2, r3, #1
 801bf08:	2030      	movs	r0, #48	; 0x30
 801bf0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bf0e:	4422      	add	r2, r4
 801bf10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bf14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bf18:	3302      	adds	r3, #2
 801bf1a:	e7c7      	b.n	801beac <_printf_common+0x58>
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	4622      	mov	r2, r4
 801bf20:	4649      	mov	r1, r9
 801bf22:	4638      	mov	r0, r7
 801bf24:	47c0      	blx	r8
 801bf26:	3001      	adds	r0, #1
 801bf28:	d0e6      	beq.n	801bef8 <_printf_common+0xa4>
 801bf2a:	3601      	adds	r6, #1
 801bf2c:	e7d9      	b.n	801bee2 <_printf_common+0x8e>
	...

0801bf30 <_printf_i>:
 801bf30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf34:	460c      	mov	r4, r1
 801bf36:	4691      	mov	r9, r2
 801bf38:	7e27      	ldrb	r7, [r4, #24]
 801bf3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bf3c:	2f78      	cmp	r7, #120	; 0x78
 801bf3e:	4680      	mov	r8, r0
 801bf40:	469a      	mov	sl, r3
 801bf42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf46:	d807      	bhi.n	801bf58 <_printf_i+0x28>
 801bf48:	2f62      	cmp	r7, #98	; 0x62
 801bf4a:	d80a      	bhi.n	801bf62 <_printf_i+0x32>
 801bf4c:	2f00      	cmp	r7, #0
 801bf4e:	f000 80d8 	beq.w	801c102 <_printf_i+0x1d2>
 801bf52:	2f58      	cmp	r7, #88	; 0x58
 801bf54:	f000 80a3 	beq.w	801c09e <_printf_i+0x16e>
 801bf58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bf5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bf60:	e03a      	b.n	801bfd8 <_printf_i+0xa8>
 801bf62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bf66:	2b15      	cmp	r3, #21
 801bf68:	d8f6      	bhi.n	801bf58 <_printf_i+0x28>
 801bf6a:	a001      	add	r0, pc, #4	; (adr r0, 801bf70 <_printf_i+0x40>)
 801bf6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801bf70:	0801bfc9 	.word	0x0801bfc9
 801bf74:	0801bfdd 	.word	0x0801bfdd
 801bf78:	0801bf59 	.word	0x0801bf59
 801bf7c:	0801bf59 	.word	0x0801bf59
 801bf80:	0801bf59 	.word	0x0801bf59
 801bf84:	0801bf59 	.word	0x0801bf59
 801bf88:	0801bfdd 	.word	0x0801bfdd
 801bf8c:	0801bf59 	.word	0x0801bf59
 801bf90:	0801bf59 	.word	0x0801bf59
 801bf94:	0801bf59 	.word	0x0801bf59
 801bf98:	0801bf59 	.word	0x0801bf59
 801bf9c:	0801c0e9 	.word	0x0801c0e9
 801bfa0:	0801c00d 	.word	0x0801c00d
 801bfa4:	0801c0cb 	.word	0x0801c0cb
 801bfa8:	0801bf59 	.word	0x0801bf59
 801bfac:	0801bf59 	.word	0x0801bf59
 801bfb0:	0801c10b 	.word	0x0801c10b
 801bfb4:	0801bf59 	.word	0x0801bf59
 801bfb8:	0801c00d 	.word	0x0801c00d
 801bfbc:	0801bf59 	.word	0x0801bf59
 801bfc0:	0801bf59 	.word	0x0801bf59
 801bfc4:	0801c0d3 	.word	0x0801c0d3
 801bfc8:	680b      	ldr	r3, [r1, #0]
 801bfca:	1d1a      	adds	r2, r3, #4
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	600a      	str	r2, [r1, #0]
 801bfd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bfd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bfd8:	2301      	movs	r3, #1
 801bfda:	e0a3      	b.n	801c124 <_printf_i+0x1f4>
 801bfdc:	6825      	ldr	r5, [r4, #0]
 801bfde:	6808      	ldr	r0, [r1, #0]
 801bfe0:	062e      	lsls	r6, r5, #24
 801bfe2:	f100 0304 	add.w	r3, r0, #4
 801bfe6:	d50a      	bpl.n	801bffe <_printf_i+0xce>
 801bfe8:	6805      	ldr	r5, [r0, #0]
 801bfea:	600b      	str	r3, [r1, #0]
 801bfec:	2d00      	cmp	r5, #0
 801bfee:	da03      	bge.n	801bff8 <_printf_i+0xc8>
 801bff0:	232d      	movs	r3, #45	; 0x2d
 801bff2:	426d      	negs	r5, r5
 801bff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bff8:	485e      	ldr	r0, [pc, #376]	; (801c174 <_printf_i+0x244>)
 801bffa:	230a      	movs	r3, #10
 801bffc:	e019      	b.n	801c032 <_printf_i+0x102>
 801bffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c002:	6805      	ldr	r5, [r0, #0]
 801c004:	600b      	str	r3, [r1, #0]
 801c006:	bf18      	it	ne
 801c008:	b22d      	sxthne	r5, r5
 801c00a:	e7ef      	b.n	801bfec <_printf_i+0xbc>
 801c00c:	680b      	ldr	r3, [r1, #0]
 801c00e:	6825      	ldr	r5, [r4, #0]
 801c010:	1d18      	adds	r0, r3, #4
 801c012:	6008      	str	r0, [r1, #0]
 801c014:	0628      	lsls	r0, r5, #24
 801c016:	d501      	bpl.n	801c01c <_printf_i+0xec>
 801c018:	681d      	ldr	r5, [r3, #0]
 801c01a:	e002      	b.n	801c022 <_printf_i+0xf2>
 801c01c:	0669      	lsls	r1, r5, #25
 801c01e:	d5fb      	bpl.n	801c018 <_printf_i+0xe8>
 801c020:	881d      	ldrh	r5, [r3, #0]
 801c022:	4854      	ldr	r0, [pc, #336]	; (801c174 <_printf_i+0x244>)
 801c024:	2f6f      	cmp	r7, #111	; 0x6f
 801c026:	bf0c      	ite	eq
 801c028:	2308      	moveq	r3, #8
 801c02a:	230a      	movne	r3, #10
 801c02c:	2100      	movs	r1, #0
 801c02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c032:	6866      	ldr	r6, [r4, #4]
 801c034:	60a6      	str	r6, [r4, #8]
 801c036:	2e00      	cmp	r6, #0
 801c038:	bfa2      	ittt	ge
 801c03a:	6821      	ldrge	r1, [r4, #0]
 801c03c:	f021 0104 	bicge.w	r1, r1, #4
 801c040:	6021      	strge	r1, [r4, #0]
 801c042:	b90d      	cbnz	r5, 801c048 <_printf_i+0x118>
 801c044:	2e00      	cmp	r6, #0
 801c046:	d04d      	beq.n	801c0e4 <_printf_i+0x1b4>
 801c048:	4616      	mov	r6, r2
 801c04a:	fbb5 f1f3 	udiv	r1, r5, r3
 801c04e:	fb03 5711 	mls	r7, r3, r1, r5
 801c052:	5dc7      	ldrb	r7, [r0, r7]
 801c054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c058:	462f      	mov	r7, r5
 801c05a:	42bb      	cmp	r3, r7
 801c05c:	460d      	mov	r5, r1
 801c05e:	d9f4      	bls.n	801c04a <_printf_i+0x11a>
 801c060:	2b08      	cmp	r3, #8
 801c062:	d10b      	bne.n	801c07c <_printf_i+0x14c>
 801c064:	6823      	ldr	r3, [r4, #0]
 801c066:	07df      	lsls	r7, r3, #31
 801c068:	d508      	bpl.n	801c07c <_printf_i+0x14c>
 801c06a:	6923      	ldr	r3, [r4, #16]
 801c06c:	6861      	ldr	r1, [r4, #4]
 801c06e:	4299      	cmp	r1, r3
 801c070:	bfde      	ittt	le
 801c072:	2330      	movle	r3, #48	; 0x30
 801c074:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c078:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c07c:	1b92      	subs	r2, r2, r6
 801c07e:	6122      	str	r2, [r4, #16]
 801c080:	f8cd a000 	str.w	sl, [sp]
 801c084:	464b      	mov	r3, r9
 801c086:	aa03      	add	r2, sp, #12
 801c088:	4621      	mov	r1, r4
 801c08a:	4640      	mov	r0, r8
 801c08c:	f7ff fee2 	bl	801be54 <_printf_common>
 801c090:	3001      	adds	r0, #1
 801c092:	d14c      	bne.n	801c12e <_printf_i+0x1fe>
 801c094:	f04f 30ff 	mov.w	r0, #4294967295
 801c098:	b004      	add	sp, #16
 801c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c09e:	4835      	ldr	r0, [pc, #212]	; (801c174 <_printf_i+0x244>)
 801c0a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c0a4:	6823      	ldr	r3, [r4, #0]
 801c0a6:	680e      	ldr	r6, [r1, #0]
 801c0a8:	061f      	lsls	r7, r3, #24
 801c0aa:	f856 5b04 	ldr.w	r5, [r6], #4
 801c0ae:	600e      	str	r6, [r1, #0]
 801c0b0:	d514      	bpl.n	801c0dc <_printf_i+0x1ac>
 801c0b2:	07d9      	lsls	r1, r3, #31
 801c0b4:	bf44      	itt	mi
 801c0b6:	f043 0320 	orrmi.w	r3, r3, #32
 801c0ba:	6023      	strmi	r3, [r4, #0]
 801c0bc:	b91d      	cbnz	r5, 801c0c6 <_printf_i+0x196>
 801c0be:	6823      	ldr	r3, [r4, #0]
 801c0c0:	f023 0320 	bic.w	r3, r3, #32
 801c0c4:	6023      	str	r3, [r4, #0]
 801c0c6:	2310      	movs	r3, #16
 801c0c8:	e7b0      	b.n	801c02c <_printf_i+0xfc>
 801c0ca:	6823      	ldr	r3, [r4, #0]
 801c0cc:	f043 0320 	orr.w	r3, r3, #32
 801c0d0:	6023      	str	r3, [r4, #0]
 801c0d2:	2378      	movs	r3, #120	; 0x78
 801c0d4:	4828      	ldr	r0, [pc, #160]	; (801c178 <_printf_i+0x248>)
 801c0d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c0da:	e7e3      	b.n	801c0a4 <_printf_i+0x174>
 801c0dc:	065e      	lsls	r6, r3, #25
 801c0de:	bf48      	it	mi
 801c0e0:	b2ad      	uxthmi	r5, r5
 801c0e2:	e7e6      	b.n	801c0b2 <_printf_i+0x182>
 801c0e4:	4616      	mov	r6, r2
 801c0e6:	e7bb      	b.n	801c060 <_printf_i+0x130>
 801c0e8:	680b      	ldr	r3, [r1, #0]
 801c0ea:	6826      	ldr	r6, [r4, #0]
 801c0ec:	6960      	ldr	r0, [r4, #20]
 801c0ee:	1d1d      	adds	r5, r3, #4
 801c0f0:	600d      	str	r5, [r1, #0]
 801c0f2:	0635      	lsls	r5, r6, #24
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	d501      	bpl.n	801c0fc <_printf_i+0x1cc>
 801c0f8:	6018      	str	r0, [r3, #0]
 801c0fa:	e002      	b.n	801c102 <_printf_i+0x1d2>
 801c0fc:	0671      	lsls	r1, r6, #25
 801c0fe:	d5fb      	bpl.n	801c0f8 <_printf_i+0x1c8>
 801c100:	8018      	strh	r0, [r3, #0]
 801c102:	2300      	movs	r3, #0
 801c104:	6123      	str	r3, [r4, #16]
 801c106:	4616      	mov	r6, r2
 801c108:	e7ba      	b.n	801c080 <_printf_i+0x150>
 801c10a:	680b      	ldr	r3, [r1, #0]
 801c10c:	1d1a      	adds	r2, r3, #4
 801c10e:	600a      	str	r2, [r1, #0]
 801c110:	681e      	ldr	r6, [r3, #0]
 801c112:	6862      	ldr	r2, [r4, #4]
 801c114:	2100      	movs	r1, #0
 801c116:	4630      	mov	r0, r6
 801c118:	f7e9 fc6a 	bl	80059f0 <memchr>
 801c11c:	b108      	cbz	r0, 801c122 <_printf_i+0x1f2>
 801c11e:	1b80      	subs	r0, r0, r6
 801c120:	6060      	str	r0, [r4, #4]
 801c122:	6863      	ldr	r3, [r4, #4]
 801c124:	6123      	str	r3, [r4, #16]
 801c126:	2300      	movs	r3, #0
 801c128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c12c:	e7a8      	b.n	801c080 <_printf_i+0x150>
 801c12e:	6923      	ldr	r3, [r4, #16]
 801c130:	4632      	mov	r2, r6
 801c132:	4649      	mov	r1, r9
 801c134:	4640      	mov	r0, r8
 801c136:	47d0      	blx	sl
 801c138:	3001      	adds	r0, #1
 801c13a:	d0ab      	beq.n	801c094 <_printf_i+0x164>
 801c13c:	6823      	ldr	r3, [r4, #0]
 801c13e:	079b      	lsls	r3, r3, #30
 801c140:	d413      	bmi.n	801c16a <_printf_i+0x23a>
 801c142:	68e0      	ldr	r0, [r4, #12]
 801c144:	9b03      	ldr	r3, [sp, #12]
 801c146:	4298      	cmp	r0, r3
 801c148:	bfb8      	it	lt
 801c14a:	4618      	movlt	r0, r3
 801c14c:	e7a4      	b.n	801c098 <_printf_i+0x168>
 801c14e:	2301      	movs	r3, #1
 801c150:	4632      	mov	r2, r6
 801c152:	4649      	mov	r1, r9
 801c154:	4640      	mov	r0, r8
 801c156:	47d0      	blx	sl
 801c158:	3001      	adds	r0, #1
 801c15a:	d09b      	beq.n	801c094 <_printf_i+0x164>
 801c15c:	3501      	adds	r5, #1
 801c15e:	68e3      	ldr	r3, [r4, #12]
 801c160:	9903      	ldr	r1, [sp, #12]
 801c162:	1a5b      	subs	r3, r3, r1
 801c164:	42ab      	cmp	r3, r5
 801c166:	dcf2      	bgt.n	801c14e <_printf_i+0x21e>
 801c168:	e7eb      	b.n	801c142 <_printf_i+0x212>
 801c16a:	2500      	movs	r5, #0
 801c16c:	f104 0619 	add.w	r6, r4, #25
 801c170:	e7f5      	b.n	801c15e <_printf_i+0x22e>
 801c172:	bf00      	nop
 801c174:	0801cc6d 	.word	0x0801cc6d
 801c178:	0801cc7e 	.word	0x0801cc7e

0801c17c <memmove>:
 801c17c:	4288      	cmp	r0, r1
 801c17e:	b510      	push	{r4, lr}
 801c180:	eb01 0402 	add.w	r4, r1, r2
 801c184:	d902      	bls.n	801c18c <memmove+0x10>
 801c186:	4284      	cmp	r4, r0
 801c188:	4623      	mov	r3, r4
 801c18a:	d807      	bhi.n	801c19c <memmove+0x20>
 801c18c:	1e43      	subs	r3, r0, #1
 801c18e:	42a1      	cmp	r1, r4
 801c190:	d008      	beq.n	801c1a4 <memmove+0x28>
 801c192:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c196:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c19a:	e7f8      	b.n	801c18e <memmove+0x12>
 801c19c:	4402      	add	r2, r0
 801c19e:	4601      	mov	r1, r0
 801c1a0:	428a      	cmp	r2, r1
 801c1a2:	d100      	bne.n	801c1a6 <memmove+0x2a>
 801c1a4:	bd10      	pop	{r4, pc}
 801c1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c1ae:	e7f7      	b.n	801c1a0 <memmove+0x24>

0801c1b0 <_realloc_r>:
 801c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1b2:	4607      	mov	r7, r0
 801c1b4:	4614      	mov	r4, r2
 801c1b6:	460e      	mov	r6, r1
 801c1b8:	b921      	cbnz	r1, 801c1c4 <_realloc_r+0x14>
 801c1ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c1be:	4611      	mov	r1, r2
 801c1c0:	f7ff bbd8 	b.w	801b974 <_malloc_r>
 801c1c4:	b922      	cbnz	r2, 801c1d0 <_realloc_r+0x20>
 801c1c6:	f7ff fb85 	bl	801b8d4 <_free_r>
 801c1ca:	4625      	mov	r5, r4
 801c1cc:	4628      	mov	r0, r5
 801c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1d0:	f000 f814 	bl	801c1fc <_malloc_usable_size_r>
 801c1d4:	42a0      	cmp	r0, r4
 801c1d6:	d20f      	bcs.n	801c1f8 <_realloc_r+0x48>
 801c1d8:	4621      	mov	r1, r4
 801c1da:	4638      	mov	r0, r7
 801c1dc:	f7ff fbca 	bl	801b974 <_malloc_r>
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	d0f2      	beq.n	801c1cc <_realloc_r+0x1c>
 801c1e6:	4631      	mov	r1, r6
 801c1e8:	4622      	mov	r2, r4
 801c1ea:	f7ff fb5d 	bl	801b8a8 <memcpy>
 801c1ee:	4631      	mov	r1, r6
 801c1f0:	4638      	mov	r0, r7
 801c1f2:	f7ff fb6f 	bl	801b8d4 <_free_r>
 801c1f6:	e7e9      	b.n	801c1cc <_realloc_r+0x1c>
 801c1f8:	4635      	mov	r5, r6
 801c1fa:	e7e7      	b.n	801c1cc <_realloc_r+0x1c>

0801c1fc <_malloc_usable_size_r>:
 801c1fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c200:	1f18      	subs	r0, r3, #4
 801c202:	2b00      	cmp	r3, #0
 801c204:	bfbc      	itt	lt
 801c206:	580b      	ldrlt	r3, [r1, r0]
 801c208:	18c0      	addlt	r0, r0, r3
 801c20a:	4770      	bx	lr

0801c20c <_init>:
 801c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c20e:	bf00      	nop
 801c210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c212:	bc08      	pop	{r3}
 801c214:	469e      	mov	lr, r3
 801c216:	4770      	bx	lr

0801c218 <_fini>:
 801c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c21a:	bf00      	nop
 801c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c21e:	bc08      	pop	{r3}
 801c220:	469e      	mov	lr, r3
 801c222:	4770      	bx	lr
