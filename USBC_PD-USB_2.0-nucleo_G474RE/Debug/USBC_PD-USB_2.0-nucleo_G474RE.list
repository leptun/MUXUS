
USBC_PD-USB_2.0-nucleo_G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf54  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c26c  0800c26c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c26c  0800c26c  0001c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c274  0800c274  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004108  200001ec  0800c468  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042f4  0800c468  000242f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e08b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055b5  00000000  00000000  0004e2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00053860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c10  00000000  00000000  00055658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006efe  00000000  00000000  00057268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021db1  00000000  00000000  0005e166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108495  00000000  00000000  0007ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001883ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080e8  00000000  00000000  00188400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c11c 	.word	0x0800c11c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800c11c 	.word	0x0800c11c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fabf 	bl	8000a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81a 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8d0 	bl	80006c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f884 	bl	8000634 <MX_LPUART1_UART_Init>
  MX_USB_Device_Init();
 800052c:	f00a fff6 	bl	800b51c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f008 fa76 	bl	8008a20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x34>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x38>)
 800053a:	f008 fabb 	bl	8008ab4 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x3c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f008 fa90 	bl	8008a68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x30>
 800054a:	bf00      	nop
 800054c:	0800c1a8 	.word	0x0800c1a8
 8000550:	080007a9 	.word	0x080007a9
 8000554:	20002a00 	.word	0x20002a00

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0a8      	sub	sp, #160	; 0xa0
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000562:	2238      	movs	r2, #56	; 0x38
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f00b fd0a 	bl	800bf80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2254      	movs	r2, #84	; 0x54
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f00b fcfc 	bl	800bf80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000588:	2000      	movs	r0, #0
 800058a:	f002 f9f1 	bl	8002970 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800058e:	2322      	movs	r3, #34	; 0x22
 8000590:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000596:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005b4:	2355      	movs	r3, #85	; 0x55
 80005b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fa81 	bl	8002ad8 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005dc:	f000 f906 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd84 	bl	8003108 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000606:	f000 f8f1 	bl	80007ec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
 800060a:	f242 0320 	movw	r3, #8224	; 0x2020
 800060e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000614:	2300      	movs	r3, #0
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffc2 	bl	80035a4 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000626:	f000 f8e1 	bl	80007ec <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	37a0      	adds	r7, #160	; 0xa0
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <MX_LPUART1_UART_Init+0x90>)
 800063c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 8000678:	f003 fd50 	bl	800411c <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000682:	f000 f8b3 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 800068a:	f004 fa07 	bl	8004a9c <HAL_UARTEx_SetTxFifoThreshold>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000694:	f000 f8aa 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 800069c:	f004 fa3c 	bl	8004b18 <HAL_UARTEx_SetRxFifoThreshold>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006a6:	f000 f8a1 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_LPUART1_UART_Init+0x8c>)
 80006ac:	f004 f9bd 	bl	8004a2a <HAL_UARTEx_DisableFifoMode>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006b6:	f000 f899 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20002a04 	.word	0x20002a04
 80006c4:	40008000 	.word	0x40008000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MX_GPIO_Init+0xd4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <MX_GPIO_Init+0xd4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <MX_GPIO_Init+0xd4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_GPIO_Init+0xd4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a28      	ldr	r2, [pc, #160]	; (800079c <MX_GPIO_Init+0xd4>)
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xd4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xd4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <MX_GPIO_Init+0xd4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xd4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_GPIO_Init+0xd4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f000 fc43 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_GPIO_Init+0xd8>)
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_GPIO_Init+0xdc>)
 8000760:	f000 fab4 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f000 faa5 	bl	8000ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f000 fa78 	bl	8000c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800078c:	2028      	movs	r0, #40	; 0x28
 800078e:	f000 fa8f 	bl	8000cb0 <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	10110000 	.word	0x10110000
 80007a4:	48000800 	.word	0x48000800

080007a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	CDC_Transmit_FS("TEST\r\n", 6);
 80007b0:	2106      	movs	r1, #6
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <StartDefaultTask+0x1c>)
 80007b4:	f00a ff70 	bl	800b698 <CDC_Transmit_FS>
    osDelay(1000);
 80007b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007bc:	f008 fa0c 	bl	8008bd8 <osDelay>
	CDC_Transmit_FS("TEST\r\n", 6);
 80007c0:	e7f6      	b.n	80007b0 <StartDefaultTask+0x8>
 80007c2:	bf00      	nop
 80007c4:	0800c140 	.word	0x0800c140

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 f979 	bl	8000ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40001000 	.word	0x40001000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x50>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <HAL_MspInit+0x50>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6613      	str	r3, [r2, #96]	; 0x60
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x50>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x50>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_MspInit+0x50>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_MspInit+0x50>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
 8000836:	f000 fa21 	bl	8000c7c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800083a:	f002 f93d 	bl	8002ab8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_UART_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d128      	bne.n	80008c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_UART_MspInit+0x80>)
 8000870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <HAL_UART_MspInit+0x80>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	65d3      	str	r3, [r2, #92]	; 0x5c
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_UART_MspInit+0x80>)
 800087c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_UART_MspInit+0x80>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_UART_MspInit+0x80>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_UART_MspInit+0x80>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800089e:	230c      	movs	r3, #12
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008ae:	230c      	movs	r3, #12
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fa06 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40008000 	.word	0x40008000
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_InitTick+0xcc>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a2c      	ldr	r2, [pc, #176]	; (800099c <HAL_InitTick+0xcc>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <HAL_InitTick+0xcc>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fe:	f107 020c 	add.w	r2, r7, #12
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fdd3 	bl	80034b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090e:	f002 fda5 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8000912:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <HAL_InitTick+0xd0>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_InitTick+0xd4>)
 8000924:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <HAL_InitTick+0xd8>)
 8000926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <HAL_InitTick+0xd4>)
 800092a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <HAL_InitTick+0xd4>)
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_InitTick+0xd4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_InitTick+0xd4>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000942:	4818      	ldr	r0, [pc, #96]	; (80009a4 <HAL_InitTick+0xd4>)
 8000944:	f003 f87a 	bl	8003a3c <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800094e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11b      	bne.n	800098e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <HAL_InitTick+0xd4>)
 8000958:	f003 f8d2 	bl	8003b00 <HAL_TIM_Base_Start_IT>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000966:	2b00      	cmp	r3, #0
 8000968:	d111      	bne.n	800098e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800096a:	2036      	movs	r0, #54	; 0x36
 800096c:	f000 f9a0 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b0f      	cmp	r3, #15
 8000974:	d808      	bhi.n	8000988 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000976:	2200      	movs	r2, #0
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	2036      	movs	r0, #54	; 0x36
 800097c:	f000 f97e 	bl	8000c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_InitTick+0xdc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	e002      	b.n	800098e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 800098e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000992:	4618      	mov	r0, r3
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	20002a94 	.word	0x20002a94
 80009a8:	40001000 	.word	0x40001000
 80009ac:	20000004 	.word	0x20000004

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <USB_HP_IRQHandler+0x10>)
 80009e2:	f000 fc37 	bl	8001254 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20003ff4 	.word	0x20003ff4

080009f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USB_LP_IRQHandler+0x10>)
 80009f6:	f000 fc2d 	bl	8001254 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20003ff4 	.word	0x20003ff4

08000a04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a0c:	f000 faf8 	bl	8001000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM6_DAC_IRQHandler+0x10>)
 8000a1a:	f003 f8e9 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20002a94 	.word	0x20002a94

08000a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0b      	ldr	r4, [pc, #44]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a76:	f7ff ffd7 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f00b fa4d 	bl	800bf18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fd4b 	bl	8000518 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000a90:	0800c27c 	.word	0x0800c27c
  ldr r2, =_sbss
 8000a94:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000a98:	200042f4 	.word	0x200042f4

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>

08000a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f8dc 	bl	8000c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff ff0e 	bl	80008d0 <HAL_InitTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac0:	f7ff fe9a 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x1c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x20>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_IncTick+0x1c>)
 8000ae0:	6013      	str	r3, [r2, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	20002ae0 	.word	0x20002ae0
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20002ae0 	.word	0x20002ae0

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff4c 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8a:	f7ff ff63 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	6978      	ldr	r0, [r7, #20]
 8000c96:	f7ff ffb3 	bl	8000c00 <NVIC_EncodePriority>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff82 	bl	8000bac <__NVIC_SetPriority>
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff56 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cda:	e15a      	b.n	8000f92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 814c 	beq.w	8000f8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00b      	beq.n	8000d14 <HAL_GPIO_Init+0x48>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	2b11      	cmp	r3, #17
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0xea>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d123      	bne.n	8000dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	6939      	ldr	r1, [r7, #16]
 8000dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0203 	and.w	r2, r3, #3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80a6 	beq.w	8000f8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <HAL_GPIO_Init+0x2e4>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	4a5a      	ldr	r2, [pc, #360]	; (8000fb0 <HAL_GPIO_Init+0x2e4>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4c:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <HAL_GPIO_Init+0x2e4>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e58:	4a56      	ldr	r2, [pc, #344]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e82:	d01f      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <HAL_GPIO_Init+0x2ec>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x1f4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4b      	ldr	r2, [pc, #300]	; (8000fbc <HAL_GPIO_Init+0x2f0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1f0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <HAL_GPIO_Init+0x2f4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1ec>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1e8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_GPIO_Init+0x2fc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1e4>
 8000eac:	2305      	movs	r3, #5
 8000eae:	e00a      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed6:	4937      	ldr	r1, [pc, #220]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f08:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f ae9d 	bne.w	8000cdc <HAL_GPIO_Init+0x10>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	48001400 	.word	0x48001400
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4013      	ands	r3, r2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f806 	bl	8001030 <HAL_GPIO_EXTI_Callback>
  }
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001048:	b08b      	sub	sp, #44	; 0x2c
 800104a:	af06      	add	r7, sp, #24
 800104c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0d7      	b.n	8001208 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d106      	bne.n	8001072 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f00a fc5b 	bl	800b928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fded 	bl	8004c5e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e04c      	b.n	8001124 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3301      	adds	r3, #1
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	b298      	uxth	r0, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	3336      	adds	r3, #54	; 0x36
 80010c8:	4602      	mov	r2, r0
 80010ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	3303      	adds	r3, #3
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	3338      	adds	r3, #56	; 0x38
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	333c      	adds	r3, #60	; 0x3c
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	3340      	adds	r3, #64	; 0x40
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3301      	adds	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3ad      	bcc.n	800108a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e044      	b.n	80011be <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	440b      	add	r3, r1
 800116e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3b5      	bcc.n	8001134 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	687e      	ldr	r6, [r7, #4]
 80011d0:	466d      	mov	r5, sp
 80011d2:	f106 0410 	add.w	r4, r6, #16
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	1d33      	adds	r3, r6, #4
 80011e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f003 fd56 	bl	8004c94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f001 fb8a 	bl	800291a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001210 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <HAL_PCD_Start+0x16>
 8001222:	2302      	movs	r3, #2
 8001224:	e012      	b.n	800124c <HAL_PCD_Start+0x3c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fcfc 	bl	8004c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f005 feb0 	bl	8006fa2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f005 feb5 	bl	8006fd0 <USB_ReadInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001270:	d102      	bne.n	8001278 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fb4d 	bl	8001912 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f005 fea7 	bl	8006fd0 <USB_ReadInterrupts>
 8001282:	4603      	mov	r3, r0
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128c:	d112      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a0:	b292      	uxth	r2, r2
 80012a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00a fbc1 	bl	800ba2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012ac:	2100      	movs	r1, #0
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f91e 	bl	80014f0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f005 fe89 	bl	8006fd0 <USB_ReadInterrupts>
 80012be:	4603      	mov	r3, r0
 80012c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012c8:	d10b      	bne.n	80012e2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012dc:	b292      	uxth	r2, r2
 80012de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 fe72 	bl	8006fd0 <USB_ReadInterrupts>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f6:	d10b      	bne.n	8001310 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800130a:	b292      	uxth	r2, r2
 800130c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f005 fe5b 	bl	8006fd0 <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001324:	d133      	bne.n	800138e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800132e:	b29a      	uxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	b292      	uxth	r2, r2
 800133a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0208 	bic.w	r2, r2, #8
 8001350:	b292      	uxth	r2, r2
 8001352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001368:	2100      	movs	r1, #0
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f00a fd54 	bl	800be18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f00a fb95 	bl	800baa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800137e:	b29a      	uxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001388:	b292      	uxth	r2, r2
 800138a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fe1c 	bl	8006fd0 <USB_ReadInterrupts>
 8001398:	4603      	mov	r3, r0
 800139a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800139e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013a2:	d126      	bne.n	80013f2 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0208 	orr.w	r2, r2, #8
 80013b6:	b292      	uxth	r2, r2
 80013b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	b292      	uxth	r2, r2
 80013e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f00a fb3d 	bl	800ba6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 fdea 	bl	8006fd0 <USB_ReadInterrupts>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b80      	cmp	r3, #128	; 0x80
 8001404:	d13f      	bne.n	8001486 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	b292      	uxth	r2, r2
 800141a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d12b      	bne.n	8001480 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0204 	orr.w	r2, r2, #4
 800143a:	b292      	uxth	r2, r2
 800143c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0208 	orr.w	r2, r2, #8
 8001452:	b292      	uxth	r2, r2
 8001454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001468:	b29b      	uxth	r3, r3
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001476:	2101      	movs	r1, #1
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f00a fccd 	bl	800be18 <HAL_PCDEx_LPM_Callback>
 800147e:	e002      	b.n	8001486 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f00a faf3 	bl	800ba6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f005 fda0 	bl	8006fd0 <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149a:	d10e      	bne.n	80014ba <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014ae:	b292      	uxth	r2, r2
 80014b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f00a faac 	bl	800ba12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fd86 	bl	8006fd0 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ce:	d10b      	bne.n	80014e8 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e2:	b292      	uxth	r2, r2
 80014e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_PCD_SetAddress+0x1a>
 8001506:	2302      	movs	r3, #2
 8001508:	e013      	b.n	8001532 <HAL_PCD_SetAddress+0x42>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	78fa      	ldrb	r2, [r7, #3]
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fd29 	bl	8006f7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	4608      	mov	r0, r1
 8001544:	4611      	mov	r1, r2
 8001546:	461a      	mov	r2, r3
 8001548:	4603      	mov	r3, r0
 800154a:	70fb      	strb	r3, [r7, #3]
 800154c:	460b      	mov	r3, r1
 800154e:	803b      	strh	r3, [r7, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da0e      	bge.n	800157e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	705a      	strb	r2, [r3, #1]
 800157c:	e00e      	b.n	800159c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	f003 0207 	and.w	r2, r3, #7
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015a8:	883a      	ldrh	r2, [r7, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	78ba      	ldrb	r2, [r7, #2]
 80015b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d102      	bne.n	80015d2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_PCD_EP_Open+0xa6>
 80015dc:	2302      	movs	r3, #2
 80015de:	e00e      	b.n	80015fe <HAL_PCD_EP_Open+0xc4>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fb72 	bl	8004cd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015fc:	7afb      	ldrb	r3, [r7, #11]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	da0e      	bge.n	8001638 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	705a      	strb	r2, [r3, #1]
 8001636:	e00e      	b.n	8001656 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 0207 	and.w	r2, r3, #7
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	b2da      	uxtb	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_PCD_EP_Close+0x6a>
 800166c:	2302      	movs	r3, #2
 800166e:	e00e      	b.n	800168e <HAL_PCD_EP_Close+0x88>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fe98 	bl	80053b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	460b      	mov	r3, r1
 80016a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	f003 0207 	and.w	r2, r3, #7
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2200      	movs	r2, #0
 80016d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016e2:	7afb      	ldrb	r3, [r7, #11]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6979      	ldr	r1, [r7, #20]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 f84b 	bl	800578e <USB_EPStartXfer>
 80016f8:	e005      	b.n	8001706 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6979      	ldr	r1, [r7, #20]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 f844 	bl	800578e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 0207 	and.w	r2, r3, #7
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	460b      	mov	r3, r1
 800174e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001750:	7afb      	ldrb	r3, [r7, #11]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2201      	movs	r2, #1
 800178a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	b2da      	uxtb	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001798:	7afb      	ldrb	r3, [r7, #11]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fff0 	bl	800578e <USB_EPStartXfer>
 80017ae:	e005      	b.n	80017bc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6979      	ldr	r1, [r7, #20]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 ffe9 	bl	800578e <USB_EPStartXfer>
  }

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 0207 	and.w	r2, r3, #7
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d901      	bls.n	80017e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e03e      	b.n	8001862 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da0e      	bge.n	800180a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	705a      	strb	r2, [r3, #1]
 8001808:	e00c      	b.n	8001824 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	b2da      	uxtb	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_PCD_EP_SetStall+0x7e>
 8001840:	2302      	movs	r3, #2
 8001842:	e00e      	b.n	8001862 <HAL_PCD_EP_SetStall+0x9c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f005 fa92 	bl	8006d7c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 020f 	and.w	r2, r3, #15
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	d901      	bls.n	8001888 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e040      	b.n	800190a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188c:	2b00      	cmp	r3, #0
 800188e:	da0e      	bge.n	80018ae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	705a      	strb	r2, [r3, #1]
 80018ac:	e00e      	b.n	80018cc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0207 	and.w	r2, r3, #7
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_PCD_EP_ClrStall+0x82>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e00e      	b.n	800190a <HAL_PCD_EP_ClrStall+0xa0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 fa8f 	bl	8006e1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b08e      	sub	sp, #56	; 0x38
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800191a:	e2d6      	b.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001924:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001926:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001932:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 815b 	bne.w	8001bf2 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800193c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d150      	bne.n	80019e8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001956:	81fb      	strh	r3, [r7, #14]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001966:	b29b      	uxth	r3, r3
 8001968:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3328      	adds	r3, #40	; 0x28
 800196e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001978:	b29b      	uxth	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4413      	add	r3, r2
 800198a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	441a      	add	r2, r3
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f00a f818 	bl	800b9de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8287 	beq.w	8001eca <PCD_EP_ISR_Handler+0x5b8>
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 8282 	bne.w	8001eca <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b292      	uxth	r2, r2
 80019da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019e6:	e270      	b.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d032      	beq.n	8001a68 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f005 fb19 	bl	8007074 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a4e:	4013      	ands	r3, r2
 8001a50:	823b      	strh	r3, [r7, #16]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	8a3a      	ldrh	r2, [r7, #16]
 8001a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f009 ff8f 	bl	800b984 <HAL_PCD_SetupStageCallback>
 8001a66:	e230      	b.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f280 822c 	bge.w	8001eca <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a7e:	4013      	ands	r3, r2
 8001a80:	83bb      	strh	r3, [r7, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	8bba      	ldrh	r2, [r7, #28]
 8001a88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d019      	beq.n	8001af4 <PCD_EP_ISR_Handler+0x1e2>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	6959      	ldr	r1, [r3, #20]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f005 facb 	bl	8007074 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	441a      	add	r2, r3
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001aec:	2100      	movs	r1, #0
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f009 ff5a 	bl	800b9a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 81e2 	bne.w	8001eca <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d112      	bne.n	8001b54 <PCD_EP_ISR_Handler+0x242>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	e02f      	b.n	8001bb4 <PCD_EP_ISR_Handler+0x2a2>
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b3e      	cmp	r3, #62	; 0x3e
 8001b5a:	d813      	bhi.n	8001b84 <PCD_EP_ISR_Handler+0x272>
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <PCD_EP_ISR_Handler+0x264>
 8001b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b72:	3301      	adds	r3, #1
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
 8001b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	e017      	b.n	8001bb4 <PCD_EP_ISR_Handler+0x2a2>
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <PCD_EP_ISR_Handler+0x28c>
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc4:	827b      	strh	r3, [r7, #18]
 8001bc6:	8a7b      	ldrh	r3, [r7, #18]
 8001bc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bcc:	827b      	strh	r3, [r7, #18]
 8001bce:	8a7b      	ldrh	r3, [r7, #18]
 8001bd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bd4:	827b      	strh	r3, [r7, #18]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	8a7b      	ldrh	r3, [r7, #18]
 8001bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	8013      	strh	r3, [r2, #0]
 8001bf0:	e16b      	b.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c04:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f280 80e4 	bge.w	8001dd6 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c24:	4013      	ands	r3, r2
 8001c26:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c40:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	7b1b      	ldrb	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d120      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c82:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8083 	beq.w	8001d92 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	6959      	ldr	r1, [r3, #20]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	88da      	ldrh	r2, [r3, #6]
 8001c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c9a:	f005 f9eb 	bl	8007074 <USB_ReadPMA>
 8001c9e:	e078      	b.n	8001d92 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d108      	bne.n	8001cba <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ca8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001caa:	461a      	mov	r2, r3
 8001cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f919 	bl	8001ee6 <HAL_PCD_EP_DB_Receive>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001cb8:	e06b      	b.n	8001d92 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	441a      	add	r2, r3
 8001ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01f      	beq.n	8001d54 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d38:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d028      	beq.n	8001d92 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	6959      	ldr	r1, [r3, #20]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	891a      	ldrh	r2, [r3, #8]
 8001d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d4e:	f005 f991 	bl	8007074 <USB_ReadPMA>
 8001d52:	e01e      	b.n	8001d92 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d78:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	6959      	ldr	r1, [r3, #20]
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	895a      	ldrh	r2, [r3, #10]
 8001d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d8e:	f005 f971 	bl	8007074 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d98:	441a      	add	r2, r3
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001da4:	441a      	add	r2, r3
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x4aa>
 8001db2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d206      	bcs.n	8001dca <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f009 fdf0 	bl	800b9a8 <HAL_PCD_DataOutStageCallback>
 8001dc8:	e005      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fcdc 	bl	800578e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d074      	beq.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8001de0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	843b      	strh	r3, [r7, #32]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	441a      	add	r2, r3
 8001e1e:	8c3b      	ldrh	r3, [r7, #32]
 8001e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	78db      	ldrb	r3, [r3, #3]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d144      	bne.n	8001ebe <PCD_EP_ISR_Handler+0x5ac>
 8001e34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d13f      	bne.n	8001ebe <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e62:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	8bfb      	ldrh	r3, [r7, #30]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d906      	bls.n	8001e7c <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	8bfb      	ldrh	r3, [r7, #30]
 8001e74:	1ad2      	subs	r2, r2, r3
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	e002      	b.n	8001e82 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f009 fda4 	bl	800b9de <HAL_PCD_DataInStageCallback>
 8001e96:	e018      	b.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	8bfb      	ldrh	r3, [r7, #30]
 8001e9e:	441a      	add	r2, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	8bfb      	ldrh	r3, [r7, #30]
 8001eaa:	441a      	add	r2, r3
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fc69 	bl	800578e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ebc:	e005      	b.n	8001eca <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f917 	bl	80020f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f6ff ad20 	blt.w	800191c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3738      	adds	r7, #56	; 0x38
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b088      	sub	sp, #32
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07c      	beq.n	8001ff8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	8b7b      	ldrh	r3, [r7, #26]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d306      	bcc.n	8001f3c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	8b7b      	ldrh	r3, [r7, #26]
 8001f34:	1ad2      	subs	r2, r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e002      	b.n	8001f42 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d123      	bne.n	8001f92 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f64:	833b      	strh	r3, [r7, #24]
 8001f66:	8b3b      	ldrh	r3, [r7, #24]
 8001f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f6c:	833b      	strh	r3, [r7, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	441a      	add	r2, r3
 8001f7c:	8b3b      	ldrh	r3, [r7, #24]
 8001f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01f      	beq.n	8001fdc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	82fb      	strh	r3, [r7, #22]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	8afb      	ldrh	r3, [r7, #22]
 8001fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fdc:	8b7b      	ldrh	r3, [r7, #26]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8085 	beq.w	80020ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	891a      	ldrh	r2, [r3, #8]
 8001ff0:	8b7b      	ldrh	r3, [r7, #26]
 8001ff2:	f005 f83f 	bl	8007074 <USB_ReadPMA>
 8001ff6:	e07a      	b.n	80020ee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	4413      	add	r3, r2
 8002012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	8b7b      	ldrh	r3, [r7, #26]
 8002024:	429a      	cmp	r2, r3
 8002026:	d306      	bcc.n	8002036 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	8b7b      	ldrh	r3, [r7, #26]
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	e002      	b.n	800203c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d123      	bne.n	800208c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	83fb      	strh	r3, [r7, #30]
 8002060:	8bfb      	ldrh	r3, [r7, #30]
 8002062:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002066:	83fb      	strh	r3, [r7, #30]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	8bfb      	ldrh	r3, [r7, #30]
 8002078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800207c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	b29b      	uxth	r3, r3
 800208a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11f      	bne.n	80020d6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b0:	83bb      	strh	r3, [r7, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	441a      	add	r2, r3
 80020c0:	8bbb      	ldrh	r3, [r7, #28]
 80020c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020d6:	8b7b      	ldrh	r3, [r7, #26]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6959      	ldr	r1, [r3, #20]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	895a      	ldrh	r2, [r3, #10]
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	f004 ffc3 	bl	8007074 <USB_ReadPMA>
    }
  }

  return count;
 80020ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b0a2      	sub	sp, #136	; 0x88
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 81c5 	beq.w	800249c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	4413      	add	r3, r2
 800212c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002142:	429a      	cmp	r2, r3
 8002144:	d907      	bls.n	8002156 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214e:	1ad2      	subs	r2, r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	619a      	str	r2, [r3, #24]
 8002154:	e002      	b.n	800215c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 80b9 	bne.w	80022d8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d126      	bne.n	80021bc <HAL_PCD_EP_DB_Transmit+0xc4>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	4413      	add	r3, r2
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	4413      	add	r3, r2
 8002190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	e01a      	b.n	80021f2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d116      	bne.n	80021f2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	4413      	add	r3, r2
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	00da      	lsls	r2, r3, #3
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	4413      	add	r3, r2
 80021e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d126      	bne.n	800224e <HAL_PCD_EP_DB_Transmit+0x156>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	00da      	lsls	r2, r3, #3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4413      	add	r3, r2
 8002222:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002232:	b29a      	uxth	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002246:	b29a      	uxth	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	e017      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x186>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d113      	bne.n	800227e <HAL_PCD_EP_DB_Transmit+0x186>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	4413      	add	r3, r2
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	00da      	lsls	r2, r3, #3
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	4413      	add	r3, r2
 8002272:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2200      	movs	r2, #0
 800227c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f009 fbaa 	bl	800b9de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 82d2 	beq.w	800283a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b0:	827b      	strh	r3, [r7, #18]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	441a      	add	r2, r3
 80022c0:	8a7b      	ldrh	r3, [r7, #18]
 80022c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	8013      	strh	r3, [r2, #0]
 80022d6:	e2b0      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d021      	beq.n	8002326 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 8284 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800233a:	441a      	add	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002348:	441a      	add	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6a1a      	ldr	r2, [r3, #32]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	429a      	cmp	r2, r3
 8002358:	d309      	bcc.n	800236e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	621a      	str	r2, [r3, #32]
 800236c:	e015      	b.n	800239a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800237a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002384:	e009      	b.n	800239a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	785b      	ldrb	r3, [r3, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d155      	bne.n	800244e <HAL_PCD_EP_DB_Transmit+0x356>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	4413      	add	r3, r2
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	00da      	lsls	r2, r3, #3
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	4413      	add	r3, r2
 80023c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d112      	bne.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x2fe>
 80023d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023da:	b29a      	uxth	r2, r3
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	e047      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x38e>
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	2b3e      	cmp	r3, #62	; 0x3e
 80023fa:	d811      	bhi.n	8002420 <HAL_PCD_EP_DB_Transmit+0x328>
 80023fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	64bb      	str	r3, [r7, #72]	; 0x48
 8002402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_PCD_EP_DB_Transmit+0x31a>
 800240c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240e:	3301      	adds	r3, #1
 8002410:	64bb      	str	r3, [r7, #72]	; 0x48
 8002412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002414:	b29b      	uxth	r3, r3
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	b29a      	uxth	r2, r3
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	e032      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
 8002426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <HAL_PCD_EP_DB_Transmit+0x33e>
 8002430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002432:	3b01      	subs	r3, #1
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	b29b      	uxth	r3, r3
 800243a:	029b      	lsls	r3, r3, #10
 800243c:	b29b      	uxth	r3, r3
 800243e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002446:	b29a      	uxth	r2, r3
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	e01b      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x38e>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d117      	bne.n	8002486 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	643b      	str	r3, [r7, #64]	; 0x40
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246a:	4413      	add	r3, r2
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	00da      	lsls	r2, r3, #3
 8002474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002476:	4413      	add	r3, r2
 8002478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002480:	b29a      	uxth	r2, r3
 8002482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002484:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6959      	ldr	r1, [r3, #20]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	891a      	ldrh	r2, [r3, #8]
 8002492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	f004 fdab 	bl	8006ff0 <USB_WritePMA>
 800249a:	e1ce      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d307      	bcc.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	619a      	str	r2, [r3, #24]
 80024de:	e002      	b.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80c4 	bne.w	8002678 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d126      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x44e>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	4413      	add	r3, r2
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	00da      	lsls	r2, r3, #3
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	4413      	add	r3, r2
 800251a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800251e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800252a:	b29a      	uxth	r2, r3
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253e:	b29a      	uxth	r2, r3
 8002540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e01a      	b.n	800257c <HAL_PCD_EP_DB_Transmit+0x484>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d116      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0x484>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	677b      	str	r3, [r7, #116]	; 0x74
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002562:	4413      	add	r3, r2
 8002564:	677b      	str	r3, [r7, #116]	; 0x74
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00da      	lsls	r2, r3, #3
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	4413      	add	r3, r2
 8002570:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002574:	673b      	str	r3, [r7, #112]	; 0x70
 8002576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002578:	2200      	movs	r2, #0
 800257a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	67bb      	str	r3, [r7, #120]	; 0x78
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d12f      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a2:	4413      	add	r3, r2
 80025a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	00da      	lsls	r2, r3, #3
 80025ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e017      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x522>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x522>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002600:	4413      	add	r3, r2
 8002602:	67bb      	str	r3, [r7, #120]	; 0x78
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	00da      	lsls	r2, r3, #3
 800260a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800260c:	4413      	add	r3, r2
 800260e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f009 f9dc 	bl	800b9de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 8104 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]
 8002676:	e0e0      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 80b4 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026da:	441a      	add	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e8:	441a      	add	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d309      	bcc.n	800270e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	621a      	str	r2, [r3, #32]
 800270c:	e015      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8002716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002724:	e009      	b.n	800273a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	667b      	str	r3, [r7, #100]	; 0x64
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d155      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275c:	4413      	add	r3, r2
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	00da      	lsls	r2, r3, #3
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	4413      	add	r3, r2
 800276a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800276e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_PCD_EP_DB_Transmit+0x6a4>
 8002776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002780:	b29a      	uxth	r2, r3
 8002782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002794:	b29a      	uxth	r2, r3
 8002796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	e044      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x72e>
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	2b3e      	cmp	r3, #62	; 0x3e
 80027a0:	d811      	bhi.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x6ce>
 80027a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_PCD_EP_DB_Transmit+0x6c0>
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	3301      	adds	r3, #1
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	b29a      	uxth	r2, r3
 80027c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c2:	801a      	strh	r2, [r3, #0]
 80027c4:	e02f      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_EP_DB_Transmit+0x6e4>
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	3b01      	subs	r3, #1
 80027da:	657b      	str	r3, [r7, #84]	; 0x54
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	e018      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d114      	bne.n	8002826 <HAL_PCD_EP_DB_Transmit+0x72e>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800280a:	4413      	add	r3, r2
 800280c:	667b      	str	r3, [r7, #100]	; 0x64
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00da      	lsls	r2, r3, #3
 8002814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002816:	4413      	add	r3, r2
 8002818:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800281c:	663b      	str	r3, [r7, #96]	; 0x60
 800281e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002820:	b29a      	uxth	r2, r3
 8002822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002824:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6959      	ldr	r1, [r3, #20]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	895a      	ldrh	r2, [r3, #10]
 8002832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	f004 fbdb 	bl	8006ff0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002854:	823b      	strh	r3, [r7, #16]
 8002856:	8a3b      	ldrh	r3, [r7, #16]
 8002858:	f083 0310 	eor.w	r3, r3, #16
 800285c:	823b      	strh	r3, [r7, #16]
 800285e:	8a3b      	ldrh	r3, [r7, #16]
 8002860:	f083 0320 	eor.w	r3, r3, #32
 8002864:	823b      	strh	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	441a      	add	r2, r3
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800287a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002886:	b29b      	uxth	r3, r3
 8002888:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3788      	adds	r7, #136	; 0x88
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	4613      	mov	r3, r2
 80028a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4413      	add	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e009      	b.n	80028de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ca:	897a      	ldrh	r2, [r7, #10]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	80da      	strh	r2, [r3, #6]
 80028f2:	e00b      	b.n	800290c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2201      	movs	r2, #1
 80028f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	b29a      	uxth	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800293e:	b29b      	uxth	r3, r3
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002952:	b29b      	uxth	r3, r3
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d141      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800297e:	4b4b      	ldr	r3, [pc, #300]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298a:	d131      	bne.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800298c:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002992:	4a46      	ldr	r2, [pc, #280]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029a4:	4a41      	ldr	r2, [pc, #260]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2232      	movs	r2, #50	; 0x32
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a3f      	ldr	r2, [pc, #252]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c2:	e002      	b.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d6:	d102      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f2      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029de:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	d158      	bne.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e057      	b.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a00:	e04d      	b.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a08:	d141      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a0a:	4b28      	ldr	r3, [pc, #160]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d131      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a30:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2232      	movs	r2, #50	; 0x32
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4e:	e002      	b.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d102      	bne.n	8002a6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f2      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a76:	d112      	bne.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e011      	b.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a8c:	e007      	b.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	431bde83 	.word	0x431bde83

08002ab8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac6:	6093      	str	r3, [r2, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40007000 	.word	0x40007000

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e308      	b.n	80030fc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af6:	4ba3      	ldr	r3, [pc, #652]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b00:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_OscConfig+0x3e>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d002      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b99      	ldr	r3, [pc, #612]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e2e3      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a90      	ldr	r2, [pc, #576]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a87      	ldr	r2, [pc, #540]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b84      	ldr	r3, [pc, #528]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a83      	ldr	r2, [pc, #524]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a80      	ldr	r2, [pc, #512]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fd ffb0 	bl	8000af4 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fd ffac 	bl	8000af4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e2a8      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fd ff9c 	bl	8000af4 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fd ff98 	bl	8000af4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e294      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b0c      	cmp	r3, #12
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0x136>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_OscConfig+0x13c>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11f      	bne.n	8002c54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x154>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e267      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	4952      	ldr	r1, [pc, #328]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c40:	4b51      	ldr	r3, [pc, #324]	; (8002d88 <HAL_RCC_OscConfig+0x2b0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fe43 	bl	80008d0 <HAL_InitTick>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d043      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e253      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5c:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fd ff44 	bl	8000af4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fd ff40 	bl	8000af4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e23c      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c82:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	4939      	ldr	r1, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
 8002ca2:	e01a      	b.n	8002cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a36      	ldr	r2, [pc, #216]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fd ff20 	bl	8000af4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fd ff1c 	bl	8000af4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e218      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1e0>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fd fef9 	bl	8000af4 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fd fef5 	bl	8000af4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1f1      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ef      	beq.n	8002d06 <HAL_RCC_OscConfig+0x22e>
 8002d26:	e01b      	b.n	8002d60 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fd fedc 	bl	8000af4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fd fed8 	bl	8000af4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1d4      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ef      	bne.n	8002d40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80ab 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2b4>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e005      	b.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4baf      	ldr	r3, [pc, #700]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	4aae      	ldr	r2, [pc, #696]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d9e:	4bac      	ldr	r3, [pc, #688]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dae:	4ba9      	ldr	r3, [pc, #676]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dba:	4ba6      	ldr	r3, [pc, #664]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4aa5      	ldr	r2, [pc, #660]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fd fe95 	bl	8000af4 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fd fe91 	bl	8000af4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e18d      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de0:	4b9c      	ldr	r3, [pc, #624]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d108      	bne.n	8002e06 <HAL_RCC_OscConfig+0x32e>
 8002df4:	4b96      	ldr	r3, [pc, #600]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	4a95      	ldr	r2, [pc, #596]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e04:	e024      	b.n	8002e50 <HAL_RCC_OscConfig+0x378>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d110      	bne.n	8002e30 <HAL_RCC_OscConfig+0x358>
 8002e0e:	4b90      	ldr	r3, [pc, #576]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	4a8e      	ldr	r2, [pc, #568]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e1e:	4b8c      	ldr	r3, [pc, #560]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	4a8a      	ldr	r2, [pc, #552]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2e:	e00f      	b.n	8002e50 <HAL_RCC_OscConfig+0x378>
 8002e30:	4b87      	ldr	r3, [pc, #540]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a86      	ldr	r2, [pc, #536]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	4b83      	ldr	r3, [pc, #524]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a82      	ldr	r2, [pc, #520]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d016      	beq.n	8002e86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fd fe4c 	bl	8000af4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fd fe48 	bl	8000af4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e142      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ed      	beq.n	8002e60 <HAL_RCC_OscConfig+0x388>
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fd fe35 	bl	8000af4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fd fe31 	bl	8000af4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e12b      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1ed      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d03c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ed8:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fd fe04 	bl	8000af4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef0:	f7fd fe00 	bl	8000af4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0fc      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f02:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ef      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x418>
 8002f10:	e01b      	b.n	8002f4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f12:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fd fde7 	bl	8000af4 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fd fde3 	bl	8000af4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0df      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f3c:	4b44      	ldr	r3, [pc, #272]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ef      	bne.n	8002f2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80d3 	beq.w	80030fa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	f000 808d 	beq.w	800307c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d15a      	bne.n	8003020 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b39      	ldr	r3, [pc, #228]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a38      	ldr	r2, [pc, #224]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fd fdbd 	bl	8000af4 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fd fdb9 	bl	8000af4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0b5      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_OscConfig+0x580>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6a11      	ldr	r1, [r2, #32]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fac:	3a01      	subs	r2, #1
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fb6:	0212      	lsls	r2, r2, #8
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0552      	lsls	r2, r2, #21
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0652      	lsls	r2, r2, #25
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fd6:	06d2      	lsls	r2, r2, #27
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	491d      	ldr	r1, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fd7c 	bl	8000af4 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fd fd78 	bl	8000af4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e074      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x528>
 800301e:	e06c      	b.n	80030fa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 800303e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd fd54 	bl	8000af4 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304e:	e00e      	b.n	800306e <HAL_RCC_OscConfig+0x596>
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fd fd4a 	bl	8000af4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e046      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_OscConfig+0x62c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x584>
 800307a:	e03e      	b.n	80030fa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e039      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_OscConfig+0x62c>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	429a      	cmp	r2, r3
 800309a:	d12c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	3b01      	subs	r3, #1
 80030a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d123      	bne.n	80030f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11b      	bne.n	80030f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d113      	bne.n	80030f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	3b01      	subs	r3, #1
 80030dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	3b01      	subs	r3, #1
 80030f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e11e      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b91      	ldr	r3, [pc, #580]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b8e      	ldr	r3, [pc, #568]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	498c      	ldr	r1, [pc, #560]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b8a      	ldr	r3, [pc, #552]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e106      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d073      	beq.n	8003244 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d129      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003164:	4b81      	ldr	r3, [pc, #516]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0f4      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003174:	f000 f9d0 	bl	8003518 <RCC_GetSysClockFreqFromPLLSource>
 8003178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4a7c      	ldr	r2, [pc, #496]	; (8003370 <HAL_RCC_ClockConfig+0x268>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d93f      	bls.n	8003202 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003182:	4b7a      	ldr	r3, [pc, #488]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d033      	beq.n	8003202 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d12f      	bne.n	8003202 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031a2:	4b72      	ldr	r3, [pc, #456]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031aa:	4a70      	ldr	r2, [pc, #448]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80031ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e024      	b.n	8003202 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0c6      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0be      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031e0:	f000 f8ce 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4a61      	ldr	r2, [pc, #388]	; (8003370 <HAL_RCC_ClockConfig+0x268>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d909      	bls.n	8003202 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ee:	4b5f      	ldr	r3, [pc, #380]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b5a      	ldr	r3, [pc, #360]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4957      	ldr	r1, [pc, #348]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003214:	f7fd fc6e 	bl	8000af4 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fd fc6a 	bl	8000af4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e095      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b4e      	ldr	r3, [pc, #312]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d023      	beq.n	8003298 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a42      	ldr	r2, [pc, #264]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003266:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003274:	4b3d      	ldr	r3, [pc, #244]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800327c:	4a3b      	ldr	r2, [pc, #236]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 800327e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b39      	ldr	r3, [pc, #228]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4936      	ldr	r1, [pc, #216]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
 8003296:	e008      	b.n	80032aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d105      	bne.n	80032aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4a32      	ldr	r2, [pc, #200]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 80032a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032aa:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d21d      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 020f 	bic.w	r2, r3, #15
 80032c0:	4929      	ldr	r1, [pc, #164]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032c8:	f7fd fc14 	bl	8000af4 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fd fc10 	bl	8000af4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e03b      	b.n	800335e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1ed      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4917      	ldr	r1, [pc, #92]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490f      	ldr	r1, [pc, #60]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003332:	f000 f825 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_RCC_ClockConfig+0x264>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490c      	ldr	r1, [pc, #48]	; (8003374 <HAL_RCC_ClockConfig+0x26c>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x270>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x274>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd faba 	bl	80008d0 <HAL_InitTick>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40022000 	.word	0x40022000
 800336c:	40021000 	.word	0x40021000
 8003370:	04c4b400 	.word	0x04c4b400
 8003374:	0800c1cc 	.word	0x0800c1cc
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d102      	bne.n	8003398 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e047      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e03e      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d136      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3301      	adds	r3, #1
 80033cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d10c      	bne.n	80033ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033de:	68d2      	ldr	r2, [r2, #12]
 80033e0:	0a12      	lsrs	r2, r2, #8
 80033e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	617b      	str	r3, [r7, #20]
      break;
 80033ec:	e00c      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ee:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f8:	68d2      	ldr	r2, [r2, #12]
 80033fa:	0a12      	lsrs	r2, r2, #8
 80033fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
      break;
 8003406:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0e5b      	lsrs	r3, r3, #25
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	3301      	adds	r3, #1
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e001      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003428:	693b      	ldr	r3, [r7, #16]
}
 800342a:	4618      	mov	r0, r3
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	00f42400 	.word	0x00f42400
 8003440:	016e3600 	.word	0x016e3600

08003444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4904      	ldr	r1, [pc, #16]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	0800c1dc 	.word	0x0800c1dc

08003488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800348c:	f7ff ffda 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0adb      	lsrs	r3, r3, #11
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	0800c1dc 	.word	0x0800c1dc

080034b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	220f      	movs	r2, #15
 80034c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_RCC_GetClockConfig+0x5c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0203 	and.w	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RCC_GetClockConfig+0x5c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_GetClockConfig+0x5c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	08db      	lsrs	r3, r3, #3
 80034ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_GetClockConfig+0x60>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 020f 	and.w	r2, r3, #15
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	40022000 	.word	0x40022000

08003518 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3301      	adds	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d10c      	bne.n	8003556 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003546:	68d2      	ldr	r2, [r2, #12]
 8003548:	0a12      	lsrs	r2, r2, #8
 800354a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	617b      	str	r3, [r7, #20]
    break;
 8003554:	e00c      	b.n	8003570 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	0a12      	lsrs	r2, r2, #8
 8003564:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
    break;
 800356e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0e5b      	lsrs	r3, r3, #25
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800358a:	687b      	ldr	r3, [r7, #4]
}
 800358c:	4618      	mov	r0, r3
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40021000 	.word	0x40021000
 800359c:	016e3600 	.word	0x016e3600
 80035a0:	00f42400 	.word	0x00f42400

080035a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ac:	2300      	movs	r3, #0
 80035ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035b0:	2300      	movs	r3, #0
 80035b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8098 	beq.w	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b40      	ldr	r3, [pc, #256]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a3f      	ldr	r2, [pc, #252]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
 80035de:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ee:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a39      	ldr	r2, [pc, #228]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035fa:	f7fd fa7b 	bl	8000af4 <HAL_GetTick>
 80035fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003600:	e009      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fd fa77 	bl	8000af4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d902      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	74fb      	strb	r3, [r7, #19]
        break;
 8003614:	e005      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003616:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ef      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d159      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01e      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	d019      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fa37 	bl	8000af4 <HAL_GetTick>
 8003686:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003688:	e00b      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fd fa33 	bl	8000af4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d902      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	74fb      	strb	r3, [r7, #19]
            break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ec      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036cc:	e008      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	74bb      	strb	r3, [r7, #18]
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e0:	7c7b      	ldrb	r3, [r7, #17]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e6:	4baf      	ldr	r3, [pc, #700]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	4aae      	ldr	r2, [pc, #696]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036fe:	4ba9      	ldr	r3, [pc, #676]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f023 0203 	bic.w	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	49a5      	ldr	r1, [pc, #660]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003720:	4ba0      	ldr	r3, [pc, #640]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f023 020c 	bic.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	499d      	ldr	r1, [pc, #628]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003742:	4b98      	ldr	r3, [pc, #608]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4994      	ldr	r1, [pc, #592]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003764:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	498c      	ldr	r1, [pc, #560]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003786:	4b87      	ldr	r3, [pc, #540]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4983      	ldr	r1, [pc, #524]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a8:	4b7e      	ldr	r3, [pc, #504]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	497b      	ldr	r1, [pc, #492]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4972      	ldr	r1, [pc, #456]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ec:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	496a      	ldr	r1, [pc, #424]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800380e:	4b65      	ldr	r3, [pc, #404]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	4961      	ldr	r1, [pc, #388]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	4959      	ldr	r1, [pc, #356]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003852:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4950      	ldr	r1, [pc, #320]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003874:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4948      	ldr	r1, [pc, #288]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a42      	ldr	r2, [pc, #264]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ac:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	493a      	ldr	r1, [pc, #232]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038e4:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	492c      	ldr	r1, [pc, #176]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003902:	d105      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	491e      	ldr	r1, [pc, #120]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393a:	d105      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003946:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4910      	ldr	r1, [pc, #64]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800397e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4902      	ldr	r1, [pc, #8]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039a2:	e001      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80039a4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b0:	d105      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	4917      	ldr	r1, [pc, #92]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d105      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d015      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	4909      	ldr	r1, [pc, #36]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a20:	d105      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e049      	b.n	8003ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f841 	bl	8003aea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f000 fa60 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d001      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e054      	b.n	8003bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d01d      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d115      	bne.n	8003bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_TIM_Base_Start_IT+0xec>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d015      	beq.n	8003bbe <HAL_TIM_Base_Start_IT+0xbe>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d011      	beq.n	8003bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003baa:	e008      	b.n	8003bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e000      	b.n	8003bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40013400 	.word	0x40013400
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40015000 	.word	0x40015000
 8003bec:	00010007 	.word	0x00010007

08003bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0202 	mvn.w	r2, #2
 8003c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f965 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f957 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f968 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0204 	mvn.w	r2, #4
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f93b 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f92d 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f93e 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0208 	mvn.w	r2, #8
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f911 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f903 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f914 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d122      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d11b      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0210 	mvn.w	r2, #16
 8003d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8e7 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003d34:	e005      	b.n	8003d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8d9 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8ea 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d10e      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d107      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0201 	mvn.w	r2, #1
 8003d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fd2a 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d10e      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d107      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f982 	bl	80040a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dae:	d10e      	bne.n	8003dce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f975 	bl	80040b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d10e      	bne.n	8003dfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d107      	bne.n	8003dfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f898 	bl	8003f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d10e      	bne.n	8003e26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d107      	bne.n	8003e26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f06f 0220 	mvn.w	r2, #32
 8003e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f935 	bl	8004090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e34:	d10f      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f93b 	bl	80040cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e64:	d10f      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f92d 	bl	80040e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e94:	d10f      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea4:	d107      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f91f 	bl	80040f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f911 	bl	8004108 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a46      	ldr	r2, [pc, #280]	; (800406c <TIM_Base_SetConfig+0x12c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d017      	beq.n	8003f88 <TIM_Base_SetConfig+0x48>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d013      	beq.n	8003f88 <TIM_Base_SetConfig+0x48>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a43      	ldr	r2, [pc, #268]	; (8004070 <TIM_Base_SetConfig+0x130>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00f      	beq.n	8003f88 <TIM_Base_SetConfig+0x48>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a42      	ldr	r2, [pc, #264]	; (8004074 <TIM_Base_SetConfig+0x134>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_Base_SetConfig+0x48>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a41      	ldr	r2, [pc, #260]	; (8004078 <TIM_Base_SetConfig+0x138>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_Base_SetConfig+0x48>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <TIM_Base_SetConfig+0x13c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0x48>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <TIM_Base_SetConfig+0x140>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a33      	ldr	r2, [pc, #204]	; (800406c <TIM_Base_SetConfig+0x12c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d023      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d01f      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a30      	ldr	r2, [pc, #192]	; (8004070 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01b      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d017      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	; (800407c <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00f      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <TIM_Base_SetConfig+0x144>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a2c      	ldr	r2, [pc, #176]	; (8004088 <TIM_Base_SetConfig+0x148>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	; (800408c <TIM_Base_SetConfig+0x14c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_Base_SetConfig+0xaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_Base_SetConfig+0x140>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d108      	bne.n	8003ffc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <TIM_Base_SetConfig+0x12c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <TIM_Base_SetConfig+0x110>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a14      	ldr	r2, [pc, #80]	; (800407c <TIM_Base_SetConfig+0x13c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00f      	beq.n	8004050 <TIM_Base_SetConfig+0x110>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a14      	ldr	r2, [pc, #80]	; (8004084 <TIM_Base_SetConfig+0x144>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_Base_SetConfig+0x110>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <TIM_Base_SetConfig+0x148>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0x110>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <TIM_Base_SetConfig+0x14c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0x110>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <TIM_Base_SetConfig+0x140>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40015000 	.word	0x40015000
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e042      	b.n	80041b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fc fb83 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2224      	movs	r2, #36	; 0x24
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f82c 	bl	80041bc <UART_SetConfig>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e022      	b.n	80041b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 faea 	bl	8004750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fb71 	bl	8004894 <UART_CheckIdleState>
 80041b2:	4603      	mov	r3, r0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	b5b0      	push	{r4, r5, r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4bb1      	ldr	r3, [pc, #708]	; (80044ac <UART_SetConfig+0x2f0>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	69f9      	ldr	r1, [r7, #28]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4aa6      	ldr	r2, [pc, #664]	; (80044b0 <UART_SetConfig+0x2f4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800422e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	430b      	orrs	r3, r1
 800423a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f023 010f 	bic.w	r1, r3, #15
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a97      	ldr	r2, [pc, #604]	; (80044b4 <UART_SetConfig+0x2f8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d120      	bne.n	800429e <UART_SetConfig+0xe2>
 800425c:	4b96      	ldr	r3, [pc, #600]	; (80044b8 <UART_SetConfig+0x2fc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b03      	cmp	r3, #3
 8004268:	d816      	bhi.n	8004298 <UART_SetConfig+0xdc>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0xb4>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	0800428d 	.word	0x0800428d
 8004278:	08004287 	.word	0x08004287
 800427c:	08004293 	.word	0x08004293
 8004280:	2301      	movs	r3, #1
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	e0e7      	b.n	8004456 <UART_SetConfig+0x29a>
 8004286:	2302      	movs	r3, #2
 8004288:	76fb      	strb	r3, [r7, #27]
 800428a:	e0e4      	b.n	8004456 <UART_SetConfig+0x29a>
 800428c:	2304      	movs	r3, #4
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e0e1      	b.n	8004456 <UART_SetConfig+0x29a>
 8004292:	2308      	movs	r3, #8
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e0de      	b.n	8004456 <UART_SetConfig+0x29a>
 8004298:	2310      	movs	r3, #16
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e0db      	b.n	8004456 <UART_SetConfig+0x29a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a86      	ldr	r2, [pc, #536]	; (80044bc <UART_SetConfig+0x300>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d132      	bne.n	800430e <UART_SetConfig+0x152>
 80042a8:	4b83      	ldr	r3, [pc, #524]	; (80044b8 <UART_SetConfig+0x2fc>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d828      	bhi.n	8004308 <UART_SetConfig+0x14c>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x100>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004309 	.word	0x08004309
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004309 	.word	0x08004309
 80042cc:	080042fd 	.word	0x080042fd
 80042d0:	08004309 	.word	0x08004309
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004309 	.word	0x08004309
 80042dc:	080042f7 	.word	0x080042f7
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004309 	.word	0x08004309
 80042ec:	08004303 	.word	0x08004303
 80042f0:	2300      	movs	r3, #0
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	e0af      	b.n	8004456 <UART_SetConfig+0x29a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	76fb      	strb	r3, [r7, #27]
 80042fa:	e0ac      	b.n	8004456 <UART_SetConfig+0x29a>
 80042fc:	2304      	movs	r3, #4
 80042fe:	76fb      	strb	r3, [r7, #27]
 8004300:	e0a9      	b.n	8004456 <UART_SetConfig+0x29a>
 8004302:	2308      	movs	r3, #8
 8004304:	76fb      	strb	r3, [r7, #27]
 8004306:	e0a6      	b.n	8004456 <UART_SetConfig+0x29a>
 8004308:	2310      	movs	r3, #16
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e0a3      	b.n	8004456 <UART_SetConfig+0x29a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6b      	ldr	r2, [pc, #428]	; (80044c0 <UART_SetConfig+0x304>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d120      	bne.n	800435a <UART_SetConfig+0x19e>
 8004318:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <UART_SetConfig+0x2fc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d013      	beq.n	800434e <UART_SetConfig+0x192>
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d814      	bhi.n	8004354 <UART_SetConfig+0x198>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d009      	beq.n	8004342 <UART_SetConfig+0x186>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d810      	bhi.n	8004354 <UART_SetConfig+0x198>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0x180>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d006      	beq.n	8004348 <UART_SetConfig+0x18c>
 800433a:	e00b      	b.n	8004354 <UART_SetConfig+0x198>
 800433c:	2300      	movs	r3, #0
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	e089      	b.n	8004456 <UART_SetConfig+0x29a>
 8004342:	2302      	movs	r3, #2
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e086      	b.n	8004456 <UART_SetConfig+0x29a>
 8004348:	2304      	movs	r3, #4
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e083      	b.n	8004456 <UART_SetConfig+0x29a>
 800434e:	2308      	movs	r3, #8
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e080      	b.n	8004456 <UART_SetConfig+0x29a>
 8004354:	2310      	movs	r3, #16
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e07d      	b.n	8004456 <UART_SetConfig+0x29a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a59      	ldr	r2, [pc, #356]	; (80044c4 <UART_SetConfig+0x308>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d120      	bne.n	80043a6 <UART_SetConfig+0x1ea>
 8004364:	4b54      	ldr	r3, [pc, #336]	; (80044b8 <UART_SetConfig+0x2fc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800436e:	2bc0      	cmp	r3, #192	; 0xc0
 8004370:	d013      	beq.n	800439a <UART_SetConfig+0x1de>
 8004372:	2bc0      	cmp	r3, #192	; 0xc0
 8004374:	d814      	bhi.n	80043a0 <UART_SetConfig+0x1e4>
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d009      	beq.n	800438e <UART_SetConfig+0x1d2>
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d810      	bhi.n	80043a0 <UART_SetConfig+0x1e4>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <UART_SetConfig+0x1cc>
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d006      	beq.n	8004394 <UART_SetConfig+0x1d8>
 8004386:	e00b      	b.n	80043a0 <UART_SetConfig+0x1e4>
 8004388:	2300      	movs	r3, #0
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	e063      	b.n	8004456 <UART_SetConfig+0x29a>
 800438e:	2302      	movs	r3, #2
 8004390:	76fb      	strb	r3, [r7, #27]
 8004392:	e060      	b.n	8004456 <UART_SetConfig+0x29a>
 8004394:	2304      	movs	r3, #4
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	e05d      	b.n	8004456 <UART_SetConfig+0x29a>
 800439a:	2308      	movs	r3, #8
 800439c:	76fb      	strb	r3, [r7, #27]
 800439e:	e05a      	b.n	8004456 <UART_SetConfig+0x29a>
 80043a0:	2310      	movs	r3, #16
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e057      	b.n	8004456 <UART_SetConfig+0x29a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a47      	ldr	r2, [pc, #284]	; (80044c8 <UART_SetConfig+0x30c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d125      	bne.n	80043fc <UART_SetConfig+0x240>
 80043b0:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <UART_SetConfig+0x2fc>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043be:	d017      	beq.n	80043f0 <UART_SetConfig+0x234>
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c4:	d817      	bhi.n	80043f6 <UART_SetConfig+0x23a>
 80043c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ca:	d00b      	beq.n	80043e4 <UART_SetConfig+0x228>
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d811      	bhi.n	80043f6 <UART_SetConfig+0x23a>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <UART_SetConfig+0x222>
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043da:	d006      	beq.n	80043ea <UART_SetConfig+0x22e>
 80043dc:	e00b      	b.n	80043f6 <UART_SetConfig+0x23a>
 80043de:	2300      	movs	r3, #0
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e038      	b.n	8004456 <UART_SetConfig+0x29a>
 80043e4:	2302      	movs	r3, #2
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e035      	b.n	8004456 <UART_SetConfig+0x29a>
 80043ea:	2304      	movs	r3, #4
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e032      	b.n	8004456 <UART_SetConfig+0x29a>
 80043f0:	2308      	movs	r3, #8
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	e02f      	b.n	8004456 <UART_SetConfig+0x29a>
 80043f6:	2310      	movs	r3, #16
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e02c      	b.n	8004456 <UART_SetConfig+0x29a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <UART_SetConfig+0x2f4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d125      	bne.n	8004452 <UART_SetConfig+0x296>
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <UART_SetConfig+0x2fc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004414:	d017      	beq.n	8004446 <UART_SetConfig+0x28a>
 8004416:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800441a:	d817      	bhi.n	800444c <UART_SetConfig+0x290>
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004420:	d00b      	beq.n	800443a <UART_SetConfig+0x27e>
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004426:	d811      	bhi.n	800444c <UART_SetConfig+0x290>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x278>
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d006      	beq.n	8004440 <UART_SetConfig+0x284>
 8004432:	e00b      	b.n	800444c <UART_SetConfig+0x290>
 8004434:	2300      	movs	r3, #0
 8004436:	76fb      	strb	r3, [r7, #27]
 8004438:	e00d      	b.n	8004456 <UART_SetConfig+0x29a>
 800443a:	2302      	movs	r3, #2
 800443c:	76fb      	strb	r3, [r7, #27]
 800443e:	e00a      	b.n	8004456 <UART_SetConfig+0x29a>
 8004440:	2304      	movs	r3, #4
 8004442:	76fb      	strb	r3, [r7, #27]
 8004444:	e007      	b.n	8004456 <UART_SetConfig+0x29a>
 8004446:	2308      	movs	r3, #8
 8004448:	76fb      	strb	r3, [r7, #27]
 800444a:	e004      	b.n	8004456 <UART_SetConfig+0x29a>
 800444c:	2310      	movs	r3, #16
 800444e:	76fb      	strb	r3, [r7, #27]
 8004450:	e001      	b.n	8004456 <UART_SetConfig+0x29a>
 8004452:	2310      	movs	r3, #16
 8004454:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <UART_SetConfig+0x2f4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	f040 809f 	bne.w	80045a0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004462:	7efb      	ldrb	r3, [r7, #27]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d837      	bhi.n	80044d8 <UART_SetConfig+0x31c>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x2b4>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004495 	.word	0x08004495
 8004474:	080044d9 	.word	0x080044d9
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044d9 	.word	0x080044d9
 8004480:	080044a3 	.word	0x080044a3
 8004484:	080044d9 	.word	0x080044d9
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044d1 	.word	0x080044d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004494:	f7fe ffe2 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004498:	6178      	str	r0, [r7, #20]
        break;
 800449a:	e022      	b.n	80044e2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <UART_SetConfig+0x310>)
 800449e:	617b      	str	r3, [r7, #20]
        break;
 80044a0:	e01f      	b.n	80044e2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a2:	f7fe ff6d 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80044a6:	6178      	str	r0, [r7, #20]
        break;
 80044a8:	e01b      	b.n	80044e2 <UART_SetConfig+0x326>
 80044aa:	bf00      	nop
 80044ac:	cfff69f3 	.word	0xcfff69f3
 80044b0:	40008000 	.word	0x40008000
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40004800 	.word	0x40004800
 80044c4:	40004c00 	.word	0x40004c00
 80044c8:	40005000 	.word	0x40005000
 80044cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d4:	617b      	str	r3, [r7, #20]
        break;
 80044d6:	e004      	b.n	80044e2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	76bb      	strb	r3, [r7, #26]
        break;
 80044e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 811b 	beq.w	8004720 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	4a96      	ldr	r2, [pc, #600]	; (8004748 <UART_SetConfig+0x58c>)
 80044f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044f4:	461a      	mov	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	d305      	bcc.n	800451a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d902      	bls.n	8004520 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	76bb      	strb	r3, [r7, #26]
 800451e:	e0ff      	b.n	8004720 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4618      	mov	r0, r3
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	4a86      	ldr	r2, [pc, #536]	; (8004748 <UART_SetConfig+0x58c>)
 800452e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004532:	b29a      	uxth	r2, r3
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	f7fb fe72 	bl	8000220 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	020b      	lsls	r3, r1, #8
 800454e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004552:	0202      	lsls	r2, r0, #8
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	6849      	ldr	r1, [r1, #4]
 8004558:	0849      	lsrs	r1, r1, #1
 800455a:	4608      	mov	r0, r1
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	1814      	adds	r4, r2, r0
 8004562:	eb43 0501 	adc.w	r5, r3, r1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	461a      	mov	r2, r3
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb fe54 	bl	8000220 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004586:	d308      	bcc.n	800459a <UART_SetConfig+0x3de>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d204      	bcs.n	800459a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	60da      	str	r2, [r3, #12]
 8004598:	e0c2      	b.n	8004720 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	76bb      	strb	r3, [r7, #26]
 800459e:	e0bf      	b.n	8004720 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a8:	d165      	bne.n	8004676 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80045aa:	7efb      	ldrb	r3, [r7, #27]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d828      	bhi.n	8004602 <UART_SetConfig+0x446>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0x3fc>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	08004603 	.word	0x08004603
 80045c8:	080045f3 	.word	0x080045f3
 80045cc:	08004603 	.word	0x08004603
 80045d0:	08004603 	.word	0x08004603
 80045d4:	08004603 	.word	0x08004603
 80045d8:	080045fb 	.word	0x080045fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045dc:	f7fe ff3e 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80045e0:	6178      	str	r0, [r7, #20]
        break;
 80045e2:	e013      	b.n	800460c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7fe ff50 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 80045e8:	6178      	str	r0, [r7, #20]
        break;
 80045ea:	e00f      	b.n	800460c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ec:	4b57      	ldr	r3, [pc, #348]	; (800474c <UART_SetConfig+0x590>)
 80045ee:	617b      	str	r3, [r7, #20]
        break;
 80045f0:	e00c      	b.n	800460c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f2:	f7fe fec5 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80045f6:	6178      	str	r0, [r7, #20]
        break;
 80045f8:	e008      	b.n	800460c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fe:	617b      	str	r3, [r7, #20]
        break;
 8004600:	e004      	b.n	800460c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	76bb      	strb	r3, [r7, #26]
        break;
 800460a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8086 	beq.w	8004720 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	4a4b      	ldr	r2, [pc, #300]	; (8004748 <UART_SetConfig+0x58c>)
 800461a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461e:	461a      	mov	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fbb3 f3f2 	udiv	r3, r3, r2
 8004626:	005a      	lsls	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	441a      	add	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	b29b      	uxth	r3, r3
 800463a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d916      	bls.n	8004670 <UART_SetConfig+0x4b4>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d212      	bcs.n	8004670 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f023 030f 	bic.w	r3, r3, #15
 8004652:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	b29b      	uxth	r3, r3
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	b29a      	uxth	r2, r3
 8004660:	89fb      	ldrh	r3, [r7, #14]
 8004662:	4313      	orrs	r3, r2
 8004664:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	89fa      	ldrh	r2, [r7, #14]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e057      	b.n	8004720 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	76bb      	strb	r3, [r7, #26]
 8004674:	e054      	b.n	8004720 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004676:	7efb      	ldrb	r3, [r7, #27]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d828      	bhi.n	80046ce <UART_SetConfig+0x512>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0x4c8>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046cf 	.word	0x080046cf
 8004694:	080046bf 	.word	0x080046bf
 8004698:	080046cf 	.word	0x080046cf
 800469c:	080046cf 	.word	0x080046cf
 80046a0:	080046cf 	.word	0x080046cf
 80046a4:	080046c7 	.word	0x080046c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fe fed8 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80046ac:	6178      	str	r0, [r7, #20]
        break;
 80046ae:	e013      	b.n	80046d8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b0:	f7fe feea 	bl	8003488 <HAL_RCC_GetPCLK2Freq>
 80046b4:	6178      	str	r0, [r7, #20]
        break;
 80046b6:	e00f      	b.n	80046d8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <UART_SetConfig+0x590>)
 80046ba:	617b      	str	r3, [r7, #20]
        break;
 80046bc:	e00c      	b.n	80046d8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046be:	f7fe fe5f 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80046c2:	6178      	str	r0, [r7, #20]
        break;
 80046c4:	e008      	b.n	80046d8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ca:	617b      	str	r3, [r7, #20]
        break;
 80046cc:	e004      	b.n	80046d8 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	76bb      	strb	r3, [r7, #26]
        break;
 80046d6:	bf00      	nop
    }

    if (pclk != 0U)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d020      	beq.n	8004720 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	4a19      	ldr	r2, [pc, #100]	; (8004748 <UART_SetConfig+0x58c>)
 80046e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e8:	461a      	mov	r2, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	d908      	bls.n	800471c <UART_SetConfig+0x560>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d204      	bcs.n	800471c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	e001      	b.n	8004720 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800473c:	7ebb      	ldrb	r3, [r7, #26]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bdb0      	pop	{r4, r5, r7, pc}
 8004746:	bf00      	nop
 8004748:	0800c1e4 	.word	0x0800c1e4
 800474c:	00f42400 	.word	0x00f42400

08004750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01a      	beq.n	8004866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484e:	d10a      	bne.n	8004866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	605a      	str	r2, [r3, #4]
  }
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a4:	f7fc f926 	bl	8000af4 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d10e      	bne.n	80048d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f82f 	bl	800492a <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e025      	b.n	8004922 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d10e      	bne.n	8004902 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f819 	bl	800492a <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e00f      	b.n	8004922 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	e062      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d05e      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fc f8d6 	bl	8000af4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <UART_WaitOnFlagUntilTimeout+0x30>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004968:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e045      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02e      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d126      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d08d      	beq.n	800493c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e027      	b.n	8004a90 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e02d      	b.n	8004b10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f84f 	bl	8004b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e02d      	b.n	8004b8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	; 0x24
 8004b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f811 	bl	8004b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d108      	bne.n	8004bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bb4:	e031      	b.n	8004c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bba:	2308      	movs	r3, #8
 8004bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	0e5b      	lsrs	r3, r3, #25
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	0f5b      	lsrs	r3, r3, #29
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	7b3a      	ldrb	r2, [r7, #12]
 8004be2:	4911      	ldr	r1, [pc, #68]	; (8004c28 <UARTEx_SetNbDataToProcess+0x94>)
 8004be4:	5c8a      	ldrb	r2, [r1, r2]
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bea:	7b3a      	ldrb	r2, [r7, #12]
 8004bec:	490f      	ldr	r1, [pc, #60]	; (8004c2c <UARTEx_SetNbDataToProcess+0x98>)
 8004bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	7b7a      	ldrb	r2, [r7, #13]
 8004c00:	4909      	ldr	r1, [pc, #36]	; (8004c28 <UARTEx_SetNbDataToProcess+0x94>)
 8004c02:	5c8a      	ldrb	r2, [r1, r2]
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c08:	7b7a      	ldrb	r2, [r7, #13]
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <UARTEx_SetNbDataToProcess+0x98>)
 8004c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	0800c1fc 	.word	0x0800c1fc
 8004c2c:	0800c204 	.word	0x0800c204

08004c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c66:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c94:	b084      	sub	sp, #16
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	f107 0014 	add.w	r0, r7, #20
 8004ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	b004      	add	sp, #16
 8004cd4:	4770      	bx	lr
	...

08004cd8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b09b      	sub	sp, #108	; 0x6c
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	78db      	ldrb	r3, [r3, #3]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d81f      	bhi.n	8004d4a <USB_ActivateEndpoint+0x72>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <USB_ActivateEndpoint+0x38>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d53 	.word	0x08004d53
 8004d1c:	08004d2f 	.word	0x08004d2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d2c:	e012      	b.n	8004d54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d3a:	e00b      	b.n	8004d54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d48:	e004      	b.n	8004d54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d50:	e000      	b.n	8004d54 <USB_ActivateEndpoint+0x7c>
      break;
 8004d52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	4313      	orrs	r3, r2
 8004d98:	b21b      	sxth	r3, r3
 8004d9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	7b1b      	ldrb	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8149 	bne.w	800505c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8084 	beq.w	8004edc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4413      	add	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	00da      	lsls	r2, r3, #3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	88db      	ldrh	r3, [r3, #6]
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	81fb      	strh	r3, [r7, #14]
 8004e16:	89fb      	ldrh	r3, [r7, #14]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01b      	beq.n	8004e58 <USB_ActivateEndpoint+0x180>
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	81bb      	strh	r3, [r7, #12]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	89bb      	ldrh	r3, [r7, #12]
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	78db      	ldrb	r3, [r3, #3]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d020      	beq.n	8004ea2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e76:	813b      	strh	r3, [r7, #8]
 8004e78:	893b      	ldrh	r3, [r7, #8]
 8004e7a:	f083 0320 	eor.w	r3, r3, #32
 8004e7e:	813b      	strh	r3, [r7, #8]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	893b      	ldrh	r3, [r7, #8]
 8004e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	8013      	strh	r3, [r2, #0]
 8004ea0:	e27f      	b.n	80053a2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	817b      	strh	r3, [r7, #10]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	897b      	ldrh	r3, [r7, #10]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
 8004eda:	e262      	b.n	80053a2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	4413      	add	r3, r2
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	00da      	lsls	r2, r3, #3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	4413      	add	r3, r2
 8004efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	88db      	ldrh	r3, [r3, #6]
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	4413      	add	r3, r2
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	00da      	lsls	r2, r3, #3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f32:	623b      	str	r3, [r7, #32]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d112      	bne.n	8004f62 <USB_ActivateEndpoint+0x28a>
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	e02f      	b.n	8004fc2 <USB_ActivateEndpoint+0x2ea>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b3e      	cmp	r3, #62	; 0x3e
 8004f68:	d813      	bhi.n	8004f92 <USB_ActivateEndpoint+0x2ba>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	663b      	str	r3, [r7, #96]	; 0x60
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <USB_ActivateEndpoint+0x2ac>
 8004f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f80:	3301      	adds	r3, #1
 8004f82:	663b      	str	r3, [r7, #96]	; 0x60
 8004f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e017      	b.n	8004fc2 <USB_ActivateEndpoint+0x2ea>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	663b      	str	r3, [r7, #96]	; 0x60
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <USB_ActivateEndpoint+0x2d4>
 8004fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	663b      	str	r3, [r7, #96]	; 0x60
 8004fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	83fb      	strh	r3, [r7, #30]
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01b      	beq.n	8005012 <USB_ActivateEndpoint+0x33a>
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	83bb      	strh	r3, [r7, #28]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8bbb      	ldrh	r3, [r7, #28]
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	837b      	strh	r3, [r7, #26]
 800502a:	8b7b      	ldrh	r3, [r7, #26]
 800502c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005030:	837b      	strh	r3, [r7, #26]
 8005032:	8b7b      	ldrh	r3, [r7, #26]
 8005034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005038:	837b      	strh	r3, [r7, #26]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8b7b      	ldrh	r3, [r7, #26]
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
 800505a:	e1a2      	b.n	80053a2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	65bb      	str	r3, [r7, #88]	; 0x58
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a8:	4413      	add	r3, r2
 80050aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	00da      	lsls	r2, r3, #3
 80050b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	891b      	ldrh	r3, [r3, #8]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	653b      	str	r3, [r7, #80]	; 0x50
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050dc:	4413      	add	r3, r2
 80050de:	653b      	str	r3, [r7, #80]	; 0x50
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	00da      	lsls	r2, r3, #3
 80050e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	895b      	ldrh	r3, [r3, #10]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 8091 	bne.w	800522c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005118:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800511a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <USB_ActivateEndpoint+0x482>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	877b      	strh	r3, [r7, #58]	; 0x3a
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	873b      	strh	r3, [r7, #56]	; 0x38
 8005168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01b      	beq.n	80051aa <USB_ActivateEndpoint+0x4d2>
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	86fb      	strh	r3, [r7, #54]	; 0x36
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005208:	867b      	strh	r3, [r7, #50]	; 0x32
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005226:	b29b      	uxth	r3, r3
 8005228:	8013      	strh	r3, [r2, #0]
 800522a:	e0ba      	b.n	80053a2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800523c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01d      	beq.n	8005284 <USB_ActivateEndpoint+0x5ac>
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005294:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01d      	beq.n	80052dc <USB_ActivateEndpoint+0x604>
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d8:	b29b      	uxth	r3, r3
 80052da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d024      	beq.n	800532e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005302:	f083 0320 	eor.w	r3, r3, #32
 8005306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	441a      	add	r2, r3
 8005314:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]
 800532c:	e01d      	b.n	800536a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005344:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80053a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	376c      	adds	r7, #108	; 0x6c
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop

080053b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b08d      	sub	sp, #52	; 0x34
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	7b1b      	ldrb	r3, [r3, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 808e 	bne.w	80054e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d044      	beq.n	800545a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	81bb      	strh	r3, [r7, #12]
 80053de:	89bb      	ldrh	r3, [r7, #12]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <USB_DeactivateEndpoint+0x6c>
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	817b      	strh	r3, [r7, #10]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	813b      	strh	r3, [r7, #8]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	893b      	ldrh	r3, [r7, #8]
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	e192      	b.n	8005780 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	827b      	strh	r3, [r7, #18]
 8005468:	8a7b      	ldrh	r3, [r7, #18]
 800546a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <USB_DeactivateEndpoint+0xf6>
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	823b      	strh	r3, [r7, #16]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	441a      	add	r2, r3
 8005494:	8a3b      	ldrh	r3, [r7, #16]
 8005496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c0:	81fb      	strh	r3, [r7, #14]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]
 80054e2:	e14d      	b.n	8005780 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 80a5 	bne.w	8005638 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	843b      	strh	r3, [r7, #32]
 80054fc:	8c3b      	ldrh	r3, [r7, #32]
 80054fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01b      	beq.n	800553e <USB_DeactivateEndpoint+0x18a>
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	83fb      	strh	r3, [r7, #30]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	441a      	add	r2, r3
 8005528:	8bfb      	ldrh	r3, [r7, #30]
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	83bb      	strh	r3, [r7, #28]
 800554c:	8bbb      	ldrh	r3, [r7, #28]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01b      	beq.n	800558e <USB_DeactivateEndpoint+0x1da>
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556c:	837b      	strh	r3, [r7, #26]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	8b7b      	ldrh	r3, [r7, #26]
 800557a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a4:	833b      	strh	r3, [r7, #24]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	8b3b      	ldrh	r3, [r7, #24]
 80055b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055dc:	82fb      	strh	r3, [r7, #22]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	8afb      	ldrh	r3, [r7, #22]
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005614:	82bb      	strh	r3, [r7, #20]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	8abb      	ldrh	r3, [r7, #20]
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]
 8005636:	e0a3      	b.n	8005780 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <USB_DeactivateEndpoint+0x2d4>
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	441a      	add	r2, r3
 8005672:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005684:	b29b      	uxth	r3, r3
 8005686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005696:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <USB_DeactivateEndpoint+0x324>
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b6:	853b      	strh	r3, [r7, #40]	; 0x28
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	441a      	add	r2, r3
 80056fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	b29b      	uxth	r3, r3
 800570e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005726:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800576c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577c:	b29b      	uxth	r3, r3
 800577e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3734      	adds	r7, #52	; 0x34
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b0cc      	sub	sp, #304	; 0x130
 8005792:	af00      	add	r7, sp, #0
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	6018      	str	r0, [r3, #0]
 8005798:	463b      	mov	r3, r7
 800579a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	f040 872e 	bne.w	8006604 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d905      	bls.n	80057c4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80057c2:	e004      	b.n	80057ce <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	7b1b      	ldrb	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d134      	bne.n	8005842 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6959      	ldr	r1, [r3, #20]
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	88da      	ldrh	r2, [r3, #6]
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	1d38      	adds	r0, r7, #4
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f001 fbff 	bl	8006ff0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057f2:	f107 0310 	add.w	r3, r7, #16
 80057f6:	1d3a      	adds	r2, r7, #4
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	f107 0210 	add.w	r2, r7, #16
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	440a      	add	r2, r1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	00da      	lsls	r2, r3, #3
 800581e:	f107 0310 	add.w	r3, r7, #16
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4413      	add	r3, r2
 8005826:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800582a:	f107 030c 	add.w	r3, r7, #12
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	b29a      	uxth	r2, r3
 8005836:	f107 030c 	add.w	r3, r7, #12
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	f000 beac 	b.w	800659a <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005842:	463b      	mov	r3, r7
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	2b02      	cmp	r3, #2
 800584a:	f040 838c 	bne.w	8005f66 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	463b      	mov	r3, r7
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	f240 8330 	bls.w	8005ec0 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005898:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80058a4:	463b      	mov	r3, r7
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a1a      	ldr	r2, [r3, #32]
 80058aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ae:	1ad2      	subs	r2, r2, r3
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058b6:	1d3b      	adds	r3, r7, #4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 819e 	beq.w	8005c0e <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058d6:	1d3a      	adds	r2, r7, #4
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d17a      	bne.n	80059dc <USB_EPStartXfer+0x24e>
 80058e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ea:	1d3a      	adds	r2, r7, #4
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005900:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	440a      	add	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	00da      	lsls	r2, r3, #3
 8005912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4413      	add	r3, r2
 800591a:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800591e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11a      	bne.n	8005962 <USB_EPStartXfer+0x1d4>
 800592c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593a:	b29a      	uxth	r2, r3
 800593c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e062      	b.n	8005a28 <USB_EPStartXfer+0x29a>
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	2b3e      	cmp	r3, #62	; 0x3e
 8005968:	d819      	bhi.n	800599e <USB_EPStartXfer+0x210>
 800596a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_EPStartXfer+0x1fc>
 8005980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800598a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29a      	uxth	r2, r3
 8005994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e044      	b.n	8005a28 <USB_EPStartXfer+0x29a>
 800599e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <USB_EPStartXfer+0x230>
 80059b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80059be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e025      	b.n	8005a28 <USB_EPStartXfer+0x29a>
 80059dc:	463b      	mov	r3, r7
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d120      	bne.n	8005a28 <USB_EPStartXfer+0x29a>
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	440a      	add	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	00da      	lsls	r2, r3, #3
 8005a08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	895b      	ldrh	r3, [r3, #10]
 8005a2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a32:	463b      	mov	r3, r7
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6959      	ldr	r1, [r3, #20]
 8005a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a42:	1d38      	adds	r0, r7, #4
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f001 fad3 	bl	8006ff0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a54:	441a      	add	r2, r3
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a1a      	ldr	r2, [r3, #32]
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d909      	bls.n	8005a80 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	621a      	str	r2, [r3, #32]
 8005a7e:	e008      	b.n	8005a92 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d17a      	bne.n	8005b92 <USB_EPStartXfer+0x404>
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	1d3a      	adds	r2, r7, #4
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f107 0318 	add.w	r3, r7, #24
 8005ab6:	f107 0218 	add.w	r2, r7, #24
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	440a      	add	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	00da      	lsls	r2, r3, #3
 8005ac8:	f107 0318 	add.w	r3, r7, #24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005ad4:	f107 0314 	add.w	r3, r7, #20
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11a      	bne.n	8005b18 <USB_EPStartXfer+0x38a>
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f107 0314 	add.w	r3, r7, #20
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	f107 0314 	add.w	r3, r7, #20
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	f107 0314 	add.w	r3, r7, #20
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e067      	b.n	8005be8 <USB_EPStartXfer+0x45a>
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b1e:	d819      	bhi.n	8005b54 <USB_EPStartXfer+0x3c6>
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <USB_EPStartXfer+0x3b2>
 8005b36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	029b      	lsls	r3, r3, #10
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f107 0314 	add.w	r3, r7, #20
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e049      	b.n	8005be8 <USB_EPStartXfer+0x45a>
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <USB_EPStartXfer+0x3e6>
 8005b6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e02a      	b.n	8005be8 <USB_EPStartXfer+0x45a>
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d125      	bne.n	8005be8 <USB_EPStartXfer+0x45a>
 8005b9c:	f107 0320 	add.w	r3, r7, #32
 8005ba0:	1d3a      	adds	r2, r7, #4
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f107 0320 	add.w	r3, r7, #32
 8005bb6:	f107 0220 	add.w	r2, r7, #32
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	00da      	lsls	r2, r3, #3
 8005bc8:	f107 0320 	add.w	r3, r7, #32
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005bd4:	f107 031c 	add.w	r3, r7, #28
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f107 031c 	add.w	r3, r7, #28
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	891b      	ldrh	r3, [r3, #8]
 8005bee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6959      	ldr	r1, [r3, #20]
 8005bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c02:	1d38      	adds	r0, r7, #4
 8005c04:	6800      	ldr	r0, [r0, #0]
 8005c06:	f001 f9f3 	bl	8006ff0 <USB_WritePMA>
 8005c0a:	f000 bcc6 	b.w	800659a <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d164      	bne.n	8005ce2 <USB_EPStartXfer+0x554>
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	4413      	add	r3, r2
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c40:	647b      	str	r3, [r7, #68]	; 0x44
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d112      	bne.n	8005c70 <USB_EPStartXfer+0x4e2>
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e057      	b.n	8005d20 <USB_EPStartXfer+0x592>
 8005c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c74:	2b3e      	cmp	r3, #62	; 0x3e
 8005c76:	d817      	bhi.n	8005ca8 <USB_EPStartXfer+0x51a>
 8005c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <USB_EPStartXfer+0x50a>
 8005c8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e03b      	b.n	8005d20 <USB_EPStartXfer+0x592>
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <USB_EPStartXfer+0x53a>
 8005cbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e01e      	b.n	8005d20 <USB_EPStartXfer+0x592>
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d119      	bne.n	8005d20 <USB_EPStartXfer+0x592>
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d00:	4413      	add	r3, r2
 8005d02:	653b      	str	r3, [r7, #80]	; 0x50
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	891b      	ldrh	r3, [r3, #8]
 8005d26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6959      	ldr	r1, [r3, #20]
 8005d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d3a:	1d38      	adds	r0, r7, #4
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f001 f957 	bl	8006ff0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4c:	441a      	add	r2, r3
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d909      	bls.n	8005d78 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	621a      	str	r2, [r3, #32]
 8005d76:	e008      	b.n	8005d8a <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d164      	bne.n	8005e64 <USB_EPStartXfer+0x6d6>
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da0:	1d3b      	adds	r3, r7, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	4413      	add	r3, r2
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	00da      	lsls	r2, r3, #3
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d112      	bne.n	8005df2 <USB_EPStartXfer+0x664>
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e054      	b.n	8005e9c <USB_EPStartXfer+0x70e>
 8005df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df6:	2b3e      	cmp	r3, #62	; 0x3e
 8005df8:	d817      	bhi.n	8005e2a <USB_EPStartXfer+0x69c>
 8005dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <USB_EPStartXfer+0x68c>
 8005e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e14:	3301      	adds	r3, #1
 8005e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e038      	b.n	8005e9c <USB_EPStartXfer+0x70e>
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <USB_EPStartXfer+0x6bc>
 8005e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e44:	3b01      	subs	r3, #1
 8005e46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	e01b      	b.n	8005e9c <USB_EPStartXfer+0x70e>
 8005e64:	463b      	mov	r3, r7
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d116      	bne.n	8005e9c <USB_EPStartXfer+0x70e>
 8005e6e:	1d3b      	adds	r3, r7, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7c:	4413      	add	r3, r2
 8005e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e80:	463b      	mov	r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	00da      	lsls	r2, r3, #3
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	895b      	ldrh	r3, [r3, #10]
 8005ea2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6959      	ldr	r1, [r3, #20]
 8005eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005eb6:	1d38      	adds	r0, r7, #4
 8005eb8:	6800      	ldr	r0, [r0, #0]
 8005eba:	f001 f899 	bl	8006ff0 <USB_WritePMA>
 8005ebe:	e36c      	b.n	800659a <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	463b      	mov	r3, r7
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f22:	4413      	add	r3, r2
 8005f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f26:	463b      	mov	r3, r7
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	00da      	lsls	r2, r3, #3
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f30:	4413      	add	r3, r2
 8005f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	891b      	ldrh	r3, [r3, #8]
 8005f48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6959      	ldr	r1, [r3, #20]
 8005f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f5c:	1d38      	adds	r0, r7, #4
 8005f5e:	6800      	ldr	r0, [r0, #0]
 8005f60:	f001 f846 	bl	8006ff0 <USB_WritePMA>
 8005f64:	e319      	b.n	800659a <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8162 	beq.w	800629c <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d164      	bne.n	80060b4 <USB_EPStartXfer+0x926>
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffe:	4413      	add	r3, r2
 8006000:	67bb      	str	r3, [r7, #120]	; 0x78
 8006002:	463b      	mov	r3, r7
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	00da      	lsls	r2, r3, #3
 800600a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800600c:	4413      	add	r3, r2
 800600e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006012:	677b      	str	r3, [r7, #116]	; 0x74
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d112      	bne.n	8006042 <USB_EPStartXfer+0x8b4>
 800601c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006026:	b29a      	uxth	r2, r3
 8006028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603a:	b29a      	uxth	r2, r3
 800603c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e057      	b.n	80060f2 <USB_EPStartXfer+0x964>
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	2b3e      	cmp	r3, #62	; 0x3e
 8006048:	d817      	bhi.n	800607a <USB_EPStartXfer+0x8ec>
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <USB_EPStartXfer+0x8dc>
 8006060:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800606a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29a      	uxth	r2, r3
 8006074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	e03b      	b.n	80060f2 <USB_EPStartXfer+0x964>
 800607a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <USB_EPStartXfer+0x90c>
 8006090:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006094:	3b01      	subs	r3, #1
 8006096:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800609a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e01e      	b.n	80060f2 <USB_EPStartXfer+0x964>
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d119      	bne.n	80060f2 <USB_EPStartXfer+0x964>
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ce:	4413      	add	r3, r2
 80060d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	00da      	lsls	r2, r3, #3
 80060dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e0:	4413      	add	r3, r2
 80060e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060f2:	463b      	mov	r3, r7
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	895b      	ldrh	r3, [r3, #10]
 80060f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6959      	ldr	r1, [r3, #20]
 8006102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006106:	b29b      	uxth	r3, r3
 8006108:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800610c:	1d38      	adds	r0, r7, #4
 800610e:	6800      	ldr	r0, [r0, #0]
 8006110:	f000 ff6e 	bl	8006ff0 <USB_WritePMA>
          ep->xfer_buff += len;
 8006114:	463b      	mov	r3, r7
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611e:	441a      	add	r2, r3
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d909      	bls.n	800614a <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006140:	1ad2      	subs	r2, r2, r3
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	621a      	str	r2, [r3, #32]
 8006148:	e008      	b.n	800615c <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800614a:	463b      	mov	r3, r7
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006154:	463b      	mov	r3, r7
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2200      	movs	r2, #0
 800615a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800615c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 821a 	beq.w	800659a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006166:	463b      	mov	r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d164      	bne.n	800623a <USB_EPStartXfer+0xaac>
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	66bb      	str	r3, [r7, #104]	; 0x68
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006184:	4413      	add	r3, r2
 8006186:	66bb      	str	r3, [r7, #104]	; 0x68
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006192:	4413      	add	r3, r2
 8006194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006198:	667b      	str	r3, [r7, #100]	; 0x64
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d112      	bne.n	80061c8 <USB_EPStartXfer+0xa3a>
 80061a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e057      	b.n	8006278 <USB_EPStartXfer+0xaea>
 80061c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061cc:	2b3e      	cmp	r3, #62	; 0x3e
 80061ce:	d817      	bhi.n	8006200 <USB_EPStartXfer+0xa72>
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <USB_EPStartXfer+0xa62>
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ea:	3301      	adds	r3, #1
 80061ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	029b      	lsls	r3, r3, #10
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e03b      	b.n	8006278 <USB_EPStartXfer+0xaea>
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800620a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <USB_EPStartXfer+0xa92>
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621a:	3b01      	subs	r3, #1
 800621c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e01e      	b.n	8006278 <USB_EPStartXfer+0xaea>
 800623a:	463b      	mov	r3, r7
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d119      	bne.n	8006278 <USB_EPStartXfer+0xaea>
 8006244:	1d3b      	adds	r3, r7, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	673b      	str	r3, [r7, #112]	; 0x70
 800624a:	1d3b      	adds	r3, r7, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006252:	b29b      	uxth	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006258:	4413      	add	r3, r2
 800625a:	673b      	str	r3, [r7, #112]	; 0x70
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	00da      	lsls	r2, r3, #3
 8006264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006266:	4413      	add	r3, r2
 8006268:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800626c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800626e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006272:	b29a      	uxth	r2, r3
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006278:	463b      	mov	r3, r7
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	891b      	ldrh	r3, [r3, #8]
 800627e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6959      	ldr	r1, [r3, #20]
 8006288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628c:	b29b      	uxth	r3, r3
 800628e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006292:	1d38      	adds	r0, r7, #4
 8006294:	6800      	ldr	r0, [r0, #0]
 8006296:	f000 feab 	bl	8006ff0 <USB_WritePMA>
 800629a:	e17e      	b.n	800659a <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d16f      	bne.n	8006386 <USB_EPStartXfer+0xbf8>
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062be:	4413      	add	r3, r2
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	00da      	lsls	r2, r3, #3
 80062cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <USB_EPStartXfer+0xb82>
 80062e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006306:	b29a      	uxth	r2, r3
 8006308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	e05f      	b.n	80063d0 <USB_EPStartXfer+0xc42>
 8006310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006314:	2b3e      	cmp	r3, #62	; 0x3e
 8006316:	d818      	bhi.n	800634a <USB_EPStartXfer+0xbbc>
 8006318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <USB_EPStartXfer+0xbaa>
 800632e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006332:	3301      	adds	r3, #1
 8006334:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006338:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800633c:	b29b      	uxth	r3, r3
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e042      	b.n	80063d0 <USB_EPStartXfer+0xc42>
 800634a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USB_EPStartXfer+0xbdc>
 8006360:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006364:	3b01      	subs	r3, #1
 8006366:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800636a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e024      	b.n	80063d0 <USB_EPStartXfer+0xc42>
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d11f      	bne.n	80063d0 <USB_EPStartXfer+0xc42>
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063a8:	4413      	add	r3, r2
 80063aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	00da      	lsls	r2, r3, #3
 80063b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	891b      	ldrh	r3, [r3, #8]
 80063d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6959      	ldr	r1, [r3, #20]
 80063e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063ea:	1d38      	adds	r0, r7, #4
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f000 fdff 	bl	8006ff0 <USB_WritePMA>
          ep->xfer_buff += len;
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fc:	441a      	add	r2, r3
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	429a      	cmp	r2, r3
 8006412:	d909      	bls.n	8006428 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	621a      	str	r2, [r3, #32]
 8006426:	e008      	b.n	800643a <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800643a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80ab 	beq.w	800659a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d16f      	bne.n	8006536 <USB_EPStartXfer+0xda8>
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800646e:	4413      	add	r3, r2
 8006470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	00da      	lsls	r2, r3, #3
 800647c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006480:	4413      	add	r3, r2
 8006482:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800648a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <USB_EPStartXfer+0xd32>
 8006492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e05b      	b.n	8006578 <USB_EPStartXfer+0xdea>
 80064c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c4:	2b3e      	cmp	r3, #62	; 0x3e
 80064c6:	d818      	bhi.n	80064fa <USB_EPStartXfer+0xd6c>
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <USB_EPStartXfer+0xd5a>
 80064de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e2:	3301      	adds	r3, #1
 80064e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e03e      	b.n	8006578 <USB_EPStartXfer+0xdea>
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <USB_EPStartXfer+0xd8c>
 8006510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006514:	3b01      	subs	r3, #1
 8006516:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651e:	b29b      	uxth	r3, r3
 8006520:	029b      	lsls	r3, r3, #10
 8006522:	b29b      	uxth	r3, r3
 8006524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652c:	b29a      	uxth	r2, r3
 800652e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	e020      	b.n	8006578 <USB_EPStartXfer+0xdea>
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d11b      	bne.n	8006578 <USB_EPStartXfer+0xdea>
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006550:	4413      	add	r3, r2
 8006552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006556:	463b      	mov	r3, r7
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	00da      	lsls	r2, r3, #3
 800655e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006562:	4413      	add	r3, r2
 8006564:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006576:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	895b      	ldrh	r3, [r3, #10]
 800657e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6959      	ldr	r1, [r3, #20]
 8006588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658c:	b29b      	uxth	r3, r3
 800658e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006592:	1d38      	adds	r0, r7, #4
 8006594:	6800      	ldr	r0, [r0, #0]
 8006596:	f000 fd2b 	bl	8006ff0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f107 020a 	add.w	r2, r7, #10
 80065b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	f107 030a 	add.w	r3, r7, #10
 80065be:	f107 020a 	add.w	r2, r7, #10
 80065c2:	8812      	ldrh	r2, [r2, #0]
 80065c4:	f082 0210 	eor.w	r2, r2, #16
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f107 030a 	add.w	r3, r7, #10
 80065ce:	f107 020a 	add.w	r2, r7, #10
 80065d2:	8812      	ldrh	r2, [r2, #0]
 80065d4:	f082 0220 	eor.w	r2, r2, #32
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	f107 030a 	add.w	r3, r7, #10
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]
 8006602:	e3b5      	b.n	8006d70 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006604:	463b      	mov	r3, r7
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	7b1b      	ldrb	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f040 8090 	bne.w	8006730 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	429a      	cmp	r2, r3
 800661e:	d90e      	bls.n	800663e <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	619a      	str	r2, [r3, #24]
 800663c:	e008      	b.n	8006650 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800663e:	463b      	mov	r3, r7
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006648:	463b      	mov	r3, r7
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006658:	1d3b      	adds	r3, r7, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006668:	4413      	add	r3, r2
 800666a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800666e:	463b      	mov	r3, r7
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	00da      	lsls	r2, r3, #3
 8006676:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800667a:	4413      	add	r3, r2
 800667c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d116      	bne.n	80066ba <USB_EPStartXfer+0xf2c>
 800668c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006698:	b29a      	uxth	r2, r3
 800669a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	e32c      	b.n	8006d14 <USB_EPStartXfer+0x1586>
 80066ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066be:	2b3e      	cmp	r3, #62	; 0x3e
 80066c0:	d818      	bhi.n	80066f4 <USB_EPStartXfer+0xf66>
 80066c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <USB_EPStartXfer+0xf54>
 80066d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066dc:	3301      	adds	r3, #1
 80066de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	029b      	lsls	r3, r3, #10
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	e30f      	b.n	8006d14 <USB_EPStartXfer+0x1586>
 80066f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <USB_EPStartXfer+0xf86>
 800670a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670e:	3b01      	subs	r3, #1
 8006710:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006718:	b29b      	uxth	r3, r3
 800671a:	029b      	lsls	r3, r3, #10
 800671c:	b29b      	uxth	r3, r3
 800671e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e2f1      	b.n	8006d14 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	78db      	ldrb	r3, [r3, #3]
 8006736:	2b02      	cmp	r3, #2
 8006738:	f040 818f 	bne.w	8006a5a <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800673c:	463b      	mov	r3, r7
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d175      	bne.n	8006832 <USB_EPStartXfer+0x10a4>
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800675e:	4413      	add	r3, r2
 8006760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006764:	463b      	mov	r3, r7
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	00da      	lsls	r2, r3, #3
 800676c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006770:	4413      	add	r3, r2
 8006772:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800677a:	463b      	mov	r3, r7
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d116      	bne.n	80067b2 <USB_EPStartXfer+0x1024>
 8006784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006790:	b29a      	uxth	r2, r3
 8006792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e065      	b.n	800687e <USB_EPStartXfer+0x10f0>
 80067b2:	463b      	mov	r3, r7
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ba:	d81a      	bhi.n	80067f2 <USB_EPStartXfer+0x1064>
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067c8:	463b      	mov	r3, r7
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <USB_EPStartXfer+0x1052>
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	3301      	adds	r3, #1
 80067dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e045      	b.n	800687e <USB_EPStartXfer+0x10f0>
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <USB_EPStartXfer+0x1088>
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	3b01      	subs	r3, #1
 8006812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681a:	b29b      	uxth	r3, r3
 800681c:	029b      	lsls	r3, r3, #10
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e025      	b.n	800687e <USB_EPStartXfer+0x10f0>
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d120      	bne.n	800687e <USB_EPStartXfer+0x10f0>
 800683c:	1d3b      	adds	r3, r7, #4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006844:	1d3b      	adds	r3, r7, #4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006854:	4413      	add	r3, r2
 8006856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	00da      	lsls	r2, r3, #3
 8006862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006866:	4413      	add	r3, r2
 8006868:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800686c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006870:	463b      	mov	r3, r7
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	b29a      	uxth	r2, r3
 8006878:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d175      	bne.n	800697c <USB_EPStartXfer+0x11ee>
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006898:	1d3b      	adds	r3, r7, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068a8:	4413      	add	r3, r2
 80068aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	00da      	lsls	r2, r3, #3
 80068b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068ba:	4413      	add	r3, r2
 80068bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d116      	bne.n	80068fc <USB_EPStartXfer+0x116e>
 80068ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e061      	b.n	80069c0 <USB_EPStartXfer+0x1232>
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b3e      	cmp	r3, #62	; 0x3e
 8006904:	d81a      	bhi.n	800693c <USB_EPStartXfer+0x11ae>
 8006906:	463b      	mov	r3, r7
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006912:	463b      	mov	r3, r7
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <USB_EPStartXfer+0x119c>
 8006920:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800692a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29a      	uxth	r2, r3
 8006934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	e041      	b.n	80069c0 <USB_EPStartXfer+0x1232>
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <USB_EPStartXfer+0x11d2>
 8006956:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800695a:	3b01      	subs	r3, #1
 800695c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e021      	b.n	80069c0 <USB_EPStartXfer+0x1232>
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d11c      	bne.n	80069c0 <USB_EPStartXfer+0x1232>
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006996:	4413      	add	r3, r2
 8006998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	00da      	lsls	r2, r3, #3
 80069a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80069c0:	463b      	mov	r3, r7
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 81a4 	beq.w	8006d14 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <USB_EPStartXfer+0x126a>
 80069ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 8187 	bne.w	8006d14 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a06:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 8180 	bne.w	8006d14 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a14:	1d3b      	adds	r3, r7, #4
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	463b      	mov	r3, r7
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	463b      	mov	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	8013      	strh	r3, [r2, #0]
 8006a58:	e15c      	b.n	8006d14 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	78db      	ldrb	r3, [r3, #3]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	f040 8155 	bne.w	8006d10 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a66:	463b      	mov	r3, r7
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699a      	ldr	r2, [r3, #24]
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d90e      	bls.n	8006a94 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8a:	1ad2      	subs	r2, r2, r3
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	619a      	str	r2, [r3, #24]
 8006a92:	e008      	b.n	8006aa6 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d16f      	bne.n	8006b90 <USB_EPStartXfer+0x1402>
 8006ab0:	1d3b      	adds	r3, r7, #4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ab8:	1d3b      	adds	r3, r7, #4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ac8:	4413      	add	r3, r2
 8006aca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00da      	lsls	r2, r3, #3
 8006ad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ada:	4413      	add	r3, r2
 8006adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ae0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d116      	bne.n	8006b1a <USB_EPStartXfer+0x138c>
 8006aec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e05f      	b.n	8006bda <USB_EPStartXfer+0x144c>
 8006b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b20:	d818      	bhi.n	8006b54 <USB_EPStartXfer+0x13c6>
 8006b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <USB_EPStartXfer+0x13b4>
 8006b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	029b      	lsls	r3, r3, #10
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b50:	801a      	strh	r2, [r3, #0]
 8006b52:	e042      	b.n	8006bda <USB_EPStartXfer+0x144c>
 8006b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d104      	bne.n	8006b74 <USB_EPStartXfer+0x13e6>
 8006b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	029b      	lsls	r3, r3, #10
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	e024      	b.n	8006bda <USB_EPStartXfer+0x144c>
 8006b90:	463b      	mov	r3, r7
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d11f      	bne.n	8006bda <USB_EPStartXfer+0x144c>
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ba2:	1d3b      	adds	r3, r7, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	00da      	lsls	r2, r3, #3
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	1d3b      	adds	r3, r7, #4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006be2:	463b      	mov	r3, r7
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d16f      	bne.n	8006ccc <USB_EPStartXfer+0x153e>
 8006bec:	1d3b      	adds	r3, r7, #4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	4413      	add	r3, r2
 8006c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	00da      	lsls	r2, r3, #3
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d116      	bne.n	8006c56 <USB_EPStartXfer+0x14c8>
 8006c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e05e      	b.n	8006d14 <USB_EPStartXfer+0x1586>
 8006c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c5c:	d818      	bhi.n	8006c90 <USB_EPStartXfer+0x1502>
 8006c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <USB_EPStartXfer+0x14f0>
 8006c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	029b      	lsls	r3, r3, #10
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	e041      	b.n	8006d14 <USB_EPStartXfer+0x1586>
 8006c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <USB_EPStartXfer+0x1522>
 8006ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006caa:	3b01      	subs	r3, #1
 8006cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	029b      	lsls	r3, r3, #10
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e023      	b.n	8006d14 <USB_EPStartXfer+0x1586>
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d11e      	bne.n	8006d14 <USB_EPStartXfer+0x1586>
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e001      	b.n	8006d14 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e02e      	b.n	8006d72 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d14:	1d3b      	adds	r3, r7, #4
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	463b      	mov	r3, r7
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d32:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d3e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d46:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d020      	beq.n	8006dd0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da4:	81bb      	strh	r3, [r7, #12]
 8006da6:	89bb      	ldrh	r3, [r7, #12]
 8006da8:	f083 0310 	eor.w	r3, r3, #16
 8006dac:	81bb      	strh	r3, [r7, #12]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	89bb      	ldrh	r3, [r7, #12]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]
 8006dce:	e01f      	b.n	8006e10 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	81fb      	strh	r3, [r7, #14]
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dee:	81fb      	strh	r3, [r7, #14]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	7b1b      	ldrb	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 809d 	bne.w	8006f6c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04c      	beq.n	8006ed4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	823b      	strh	r3, [r7, #16]
 8006e48:	8a3b      	ldrh	r3, [r7, #16]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <USB_EPClearStall+0x6c>
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	81fb      	strh	r3, [r7, #14]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	78db      	ldrb	r3, [r3, #3]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d06c      	beq.n	8006f6c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea8:	81bb      	strh	r3, [r7, #12]
 8006eaa:	89bb      	ldrh	r3, [r7, #12]
 8006eac:	f083 0320 	eor.w	r3, r3, #32
 8006eb0:	81bb      	strh	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	89bb      	ldrh	r3, [r7, #12]
 8006ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
 8006ed2:	e04b      	b.n	8006f6c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	82fb      	strh	r3, [r7, #22]
 8006ee2:	8afb      	ldrh	r3, [r7, #22]
 8006ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <USB_EPClearStall+0x106>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	82bb      	strh	r3, [r7, #20]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	8abb      	ldrh	r3, [r7, #20]
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	827b      	strh	r3, [r7, #18]
 8006f3c:	8a7b      	ldrh	r3, [r7, #18]
 8006f3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f42:	827b      	strh	r3, [r7, #18]
 8006f44:	8a7b      	ldrh	r3, [r7, #18]
 8006f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f4a:	827b      	strh	r3, [r7, #18]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	8a7b      	ldrh	r3, [r7, #18]
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2280      	movs	r2, #128	; 0x80
 8006f90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b08d      	sub	sp, #52	; 0x34
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	460b      	mov	r3, r1
 8007000:	80fb      	strh	r3, [r7, #6]
 8007002:	4613      	mov	r3, r2
 8007004:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007006:	88bb      	ldrh	r3, [r7, #4]
 8007008:	3301      	adds	r3, #1
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007026:	e01b      	b.n	8007060 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	3301      	adds	r3, #1
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	b29a      	uxth	r2, r3
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	3302      	adds	r3, #2
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	3301      	adds	r3, #1
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	3b01      	subs	r3, #1
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e0      	bne.n	8007028 <USB_WritePMA+0x38>
  }
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	3734      	adds	r7, #52	; 0x34
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007074:	b480      	push	{r7}
 8007076:	b08b      	sub	sp, #44	; 0x2c
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4611      	mov	r1, r2
 8007080:	461a      	mov	r2, r3
 8007082:	460b      	mov	r3, r1
 8007084:	80fb      	strh	r3, [r7, #6]
 8007086:	4613      	mov	r3, r2
 8007088:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800708a:	88bb      	ldrh	r3, [r7, #4]
 800708c:	085b      	lsrs	r3, r3, #1
 800708e:	b29b      	uxth	r3, r3
 8007090:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070a4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
 80070aa:	e018      	b.n	80070de <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	3302      	adds	r3, #2
 80070b8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	3b01      	subs	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e3      	bne.n	80070ac <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070e4:	88bb      	ldrh	r3, [r7, #4]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	701a      	strb	r2, [r3, #0]
  }
}
 8007100:	bf00      	nop
 8007102:	372c      	adds	r7, #44	; 0x2c
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007118:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800711c:	f004 feb2 	bl	800be84 <USBD_static_malloc>
 8007120:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007130:	2302      	movs	r3, #2
 8007132:	e066      	b.n	8007202 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7c1b      	ldrb	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d119      	bne.n	8007178 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007148:	2202      	movs	r2, #2
 800714a:	2181      	movs	r1, #129	; 0x81
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f004 fd3e 	bl	800bbce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800715c:	2202      	movs	r2, #2
 800715e:	2101      	movs	r1, #1
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f004 fd34 	bl	800bbce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2210      	movs	r2, #16
 8007172:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007176:	e016      	b.n	80071a6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	2202      	movs	r2, #2
 800717c:	2181      	movs	r1, #129	; 0x81
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f004 fd25 	bl	800bbce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	2202      	movs	r2, #2
 800718e:	2101      	movs	r1, #1
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f004 fd1c 	bl	800bbce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2210      	movs	r2, #16
 80071a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071a6:	2308      	movs	r3, #8
 80071a8:	2203      	movs	r2, #3
 80071aa:	2182      	movs	r1, #130	; 0x82
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f004 fd0e 	bl	800bbce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	7c1b      	ldrb	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e6:	2101      	movs	r1, #1
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f004 fde0 	bl	800bdae <USBD_LL_PrepareReceive>
 80071ee:	e007      	b.n	8007200 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	2101      	movs	r1, #1
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f004 fdd7 	bl	800bdae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	460b      	mov	r3, r1
 8007214:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007216:	2181      	movs	r1, #129	; 0x81
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f004 fcfe 	bl	800bc1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007224:	2101      	movs	r1, #1
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f004 fcf7 	bl	800bc1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007234:	2182      	movs	r1, #130	; 0x82
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f004 fcef 	bl	800bc1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00e      	beq.n	8007274 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007266:	4618      	mov	r0, r3
 8007268:	f004 fe1a 	bl	800bea0 <USBD_static_free>
    pdev->pClassData = NULL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007290:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e0af      	b.n	8007408 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d03f      	beq.n	8007334 <USBD_CDC_Setup+0xb4>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	f040 809f 	bne.w	80073f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	88db      	ldrh	r3, [r3, #6]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02e      	beq.n	8007320 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da16      	bge.n	80072fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80072d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	88d2      	ldrh	r2, [r2, #6]
 80072de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	88db      	ldrh	r3, [r3, #6]
 80072e4:	2b07      	cmp	r3, #7
 80072e6:	bf28      	it	cs
 80072e8:	2307      	movcs	r3, #7
 80072ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	89fa      	ldrh	r2, [r7, #14]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 facf 	bl	8008896 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80072f8:	e085      	b.n	8007406 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	785a      	ldrb	r2, [r3, #1]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	88db      	ldrh	r3, [r3, #6]
 8007308:	b2da      	uxtb	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007310:	6939      	ldr	r1, [r7, #16]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	461a      	mov	r2, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fae8 	bl	80088ee <USBD_CtlPrepareRx>
      break;
 800731e:	e072      	b.n	8007406 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	7850      	ldrb	r0, [r2, #1]
 800732c:	2200      	movs	r2, #0
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	4798      	blx	r3
      break;
 8007332:	e068      	b.n	8007406 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b0b      	cmp	r3, #11
 800733a:	d852      	bhi.n	80073e2 <USBD_CDC_Setup+0x162>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <USBD_CDC_Setup+0xc4>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007375 	.word	0x08007375
 8007348:	080073f1 	.word	0x080073f1
 800734c:	080073e3 	.word	0x080073e3
 8007350:	080073e3 	.word	0x080073e3
 8007354:	080073e3 	.word	0x080073e3
 8007358:	080073e3 	.word	0x080073e3
 800735c:	080073e3 	.word	0x080073e3
 8007360:	080073e3 	.word	0x080073e3
 8007364:	080073e3 	.word	0x080073e3
 8007368:	080073e3 	.word	0x080073e3
 800736c:	0800739f 	.word	0x0800739f
 8007370:	080073c9 	.word	0x080073c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b03      	cmp	r3, #3
 800737e:	d107      	bne.n	8007390 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007380:	f107 030a 	add.w	r3, r7, #10
 8007384:	2202      	movs	r2, #2
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 fa84 	bl	8008896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800738e:	e032      	b.n	80073f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fa0e 	bl	80087b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	75fb      	strb	r3, [r7, #23]
          break;
 800739c:	e02b      	b.n	80073f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d107      	bne.n	80073ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073aa:	f107 030d 	add.w	r3, r7, #13
 80073ae:	2201      	movs	r2, #1
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 fa6f 	bl	8008896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073b8:	e01d      	b.n	80073f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f9f9 	bl	80087b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80073c2:	2303      	movs	r3, #3
 80073c4:	75fb      	strb	r3, [r7, #23]
          break;
 80073c6:	e016      	b.n	80073f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d00f      	beq.n	80073f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 f9ec 	bl	80087b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80073dc:	2303      	movs	r3, #3
 80073de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073e0:	e008      	b.n	80073f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f9e5 	bl	80087b4 <USBD_CtlError>
          ret = USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	75fb      	strb	r3, [r7, #23]
          break;
 80073ee:	e002      	b.n	80073f6 <USBD_CDC_Setup+0x176>
          break;
 80073f0:	bf00      	nop
 80073f2:	e008      	b.n	8007406 <USBD_CDC_Setup+0x186>
          break;
 80073f4:	bf00      	nop
      }
      break;
 80073f6:	e006      	b.n	8007406 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 f9da 	bl	80087b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007400:	2303      	movs	r3, #3
 8007402:	75fb      	strb	r3, [r7, #23]
      break;
 8007404:	bf00      	nop
  }

  return (uint8_t)ret;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800742e:	2303      	movs	r3, #3
 8007430:	e04f      	b.n	80074d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	3318      	adds	r3, #24
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d029      	beq.n	80074a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	3318      	adds	r3, #24
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	78f9      	ldrb	r1, [r7, #3]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	460b      	mov	r3, r1
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	4403      	add	r3, r0
 8007470:	3338      	adds	r3, #56	; 0x38
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	fbb2 f1f3 	udiv	r1, r2, r3
 8007478:	fb03 f301 	mul.w	r3, r3, r1
 800747c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800747e:	2b00      	cmp	r3, #0
 8007480:	d110      	bne.n	80074a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	3318      	adds	r3, #24
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007496:	78f9      	ldrb	r1, [r7, #3]
 8007498:	2300      	movs	r3, #0
 800749a:	2200      	movs	r2, #0
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f004 fc65 	bl	800bd6c <USBD_LL_Transmit>
 80074a2:	e015      	b.n	80074d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e015      	b.n	8007528 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f004 fc75 	bl	800bdf0 <USBD_LL_GetRxDataSize>
 8007506:	4602      	mov	r2, r0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007522:	4611      	mov	r1, r2
 8007524:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007546:	2303      	movs	r3, #3
 8007548:	e01b      	b.n	8007582 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d015      	beq.n	8007580 <USBD_CDC_EP0_RxReady+0x50>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800755a:	2bff      	cmp	r3, #255	; 0xff
 800755c:	d010      	beq.n	8007580 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800756c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007574:	b292      	uxth	r2, r2
 8007576:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	22ff      	movs	r2, #255	; 0xff
 800757c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2243      	movs	r2, #67	; 0x43
 8007598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800759a:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	20000094 	.word	0x20000094

080075ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2243      	movs	r2, #67	; 0x43
 80075b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075ba:	4b03      	ldr	r3, [pc, #12]	; (80075c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20000050 	.word	0x20000050

080075cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2243      	movs	r2, #67	; 0x43
 80075d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80075da:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	200000d8 	.word	0x200000d8

080075ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	220a      	movs	r2, #10
 80075f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075fa:	4b03      	ldr	r3, [pc, #12]	; (8007608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	2000000c 	.word	0x2000000c

0800760c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	e004      	b.n	800762a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007636:	b480      	push	{r7}
 8007638:	b087      	sub	sp, #28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007648:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	e008      	b.n	8007666 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007682:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800768a:	2303      	movs	r3, #3
 800768c:	e004      	b.n	8007698 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e01a      	b.n	80076fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d114      	bne.n	80076fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076ee:	2181      	movs	r1, #129	; 0x81
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f004 fb3b 	bl	800bd6c <USBD_LL_Transmit>

    ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800771e:	2303      	movs	r3, #3
 8007720:	e016      	b.n	8007750 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7c1b      	ldrb	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007734:	2101      	movs	r1, #1
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f004 fb39 	bl	800bdae <USBD_LL_PrepareReceive>
 800773c:	e007      	b.n	800774e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	2101      	movs	r1, #1
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f004 fb30 	bl	800bdae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	e01f      	b.n	80077b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	79fa      	ldrb	r2, [r7, #7]
 80077a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f004 f997 	bl	800bad8 <USBD_LL_Init>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e016      	b.n	80077fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	f107 020e 	add.w	r2, r7, #14
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	4602      	mov	r2, r0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f004 f9c2 	bl	800bb98 <USBD_LL_Start>
 8007814:	4603      	mov	r3, r0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	4611      	mov	r1, r2
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
  }

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff46 	bl	8008740 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d01a      	beq.n	800790e <USBD_LL_SetupStage+0x72>
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d822      	bhi.n	8007922 <USBD_LL_SetupStage+0x86>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <USBD_LL_SetupStage+0x4a>
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d00a      	beq.n	80078fa <USBD_LL_SetupStage+0x5e>
 80078e4:	e01d      	b.n	8007922 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9ee 	bl	8007cd0 <USBD_StdDevReq>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e020      	b.n	800793c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa52 	bl	8007dac <USBD_StdItfReq>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
      break;
 800790c:	e016      	b.n	800793c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa91 	bl	8007e3e <USBD_StdEPReq>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
      break;
 8007920:	e00c      	b.n	800793c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007928:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f004 f991 	bl	800bc58 <USBD_LL_StallEP>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	bf00      	nop
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	460b      	mov	r3, r1
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d138      	bne.n	80079cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007960:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007968:	2b03      	cmp	r3, #3
 800796a:	d14a      	bne.n	8007a02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	429a      	cmp	r2, r3
 8007976:	d913      	bls.n	80079a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	1ad2      	subs	r2, r2, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4293      	cmp	r3, r2
 8007990:	bf28      	it	cs
 8007992:	4613      	movcs	r3, r2
 8007994:	461a      	mov	r2, r3
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 ffc5 	bl	8008928 <USBD_CtlContinueRx>
 800799e:	e030      	b.n	8007a02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d10b      	bne.n	80079c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 ffc0 	bl	800894a <USBD_CtlSendStatus>
 80079ca:	e01a      	b.n	8007a02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d114      	bne.n	8007a02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00e      	beq.n	8007a02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	7afa      	ldrb	r2, [r7, #11]
 80079ee:	4611      	mov	r1, r2
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	4798      	blx	r3
 80079f4:	4603      	mov	r3, r0
 80079f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	e000      	b.n	8007a04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	460b      	mov	r3, r1
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d16b      	bne.n	8007af8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3314      	adds	r3, #20
 8007a24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d156      	bne.n	8007ade <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d914      	bls.n	8007a66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	1ad2      	subs	r2, r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 ff3a 	bl	80088cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f004 f9a5 	bl	800bdae <USBD_LL_PrepareReceive>
 8007a64:	e03b      	b.n	8007ade <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d11c      	bne.n	8007aac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d316      	bcc.n	8007aac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d20f      	bcs.n	8007aac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 ff1b 	bl	80088cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f004 f982 	bl	800bdae <USBD_LL_PrepareReceive>
 8007aaa:	e018      	b.n	8007ade <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d10b      	bne.n	8007ad0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad0:	2180      	movs	r1, #128	; 0x80
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f004 f8c0 	bl	800bc58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 ff49 	bl	8008970 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d122      	bne.n	8007b2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fe98 	bl	800781e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007af6:	e01a      	b.n	8007b2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d114      	bne.n	8007b2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00e      	beq.n	8007b2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	7afa      	ldrb	r2, [r7, #11]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	4798      	blx	r3
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	e000      	b.n	8007b30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e02f      	b.n	8007bcc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00f      	beq.n	8007b96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6852      	ldr	r2, [r2, #4]
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	4611      	mov	r1, r2
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f004 f816 	bl	800bbce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2240      	movs	r2, #64	; 0x40
 8007bae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bb2:	2340      	movs	r3, #64	; 0x40
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2180      	movs	r1, #128	; 0x80
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f004 f808 	bl	800bbce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2240      	movs	r2, #64	; 0x40
 8007bc8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d106      	bne.n	8007c42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e012      	b.n	8007c8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d10b      	bne.n	8007c8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cb2:	8a3b      	ldrh	r3, [r7, #16]
 8007cb4:	021b      	lsls	r3, r3, #8
 8007cb6:	b21a      	sxth	r2, r3
 8007cb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	b21b      	sxth	r3, r3
 8007cc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cc2:	89fb      	ldrh	r3, [r7, #14]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d005      	beq.n	8007cf6 <USBD_StdDevReq+0x26>
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d853      	bhi.n	8007d96 <USBD_StdDevReq+0xc6>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <USBD_StdDevReq+0x3a>
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d14f      	bne.n	8007d96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
      break;
 8007d08:	e04a      	b.n	8007da0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	2b09      	cmp	r3, #9
 8007d10:	d83b      	bhi.n	8007d8a <USBD_StdDevReq+0xba>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <USBD_StdDevReq+0x48>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d6d 	.word	0x08007d6d
 8007d1c:	08007d81 	.word	0x08007d81
 8007d20:	08007d8b 	.word	0x08007d8b
 8007d24:	08007d77 	.word	0x08007d77
 8007d28:	08007d8b 	.word	0x08007d8b
 8007d2c:	08007d4b 	.word	0x08007d4b
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d8b 	.word	0x08007d8b
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d55 	.word	0x08007d55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9de 	bl	8008104 <USBD_GetDescriptor>
          break;
 8007d48:	e024      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fb6d 	bl	800842c <USBD_SetAddress>
          break;
 8007d52:	e01f      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fbac 	bl	80084b4 <USBD_SetConfig>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d60:	e018      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fc4b 	bl	8008600 <USBD_GetConfig>
          break;
 8007d6a:	e013      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fc7c 	bl	800866c <USBD_GetStatus>
          break;
 8007d74:	e00e      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fcab 	bl	80086d4 <USBD_SetFeature>
          break;
 8007d7e:	e009      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fcba 	bl	80086fc <USBD_ClrFeature>
          break;
 8007d88:	e004      	b.n	8007d94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fd11 	bl	80087b4 <USBD_CtlError>
          break;
 8007d92:	bf00      	nop
      }
      break;
 8007d94:	e004      	b.n	8007da0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fd0b 	bl	80087b4 <USBD_CtlError>
      break;
 8007d9e:	bf00      	nop
  }

  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop

08007dac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d005      	beq.n	8007dd2 <USBD_StdItfReq+0x26>
 8007dc6:	2b40      	cmp	r3, #64	; 0x40
 8007dc8:	d82f      	bhi.n	8007e2a <USBD_StdItfReq+0x7e>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <USBD_StdItfReq+0x26>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d12b      	bne.n	8007e2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d81d      	bhi.n	8007e1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	889b      	ldrh	r3, [r3, #4]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d813      	bhi.n	8007e12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	88db      	ldrh	r3, [r3, #6]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d110      	bne.n	8007e26 <USBD_StdItfReq+0x7a>
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10d      	bne.n	8007e26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fd9d 	bl	800894a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e10:	e009      	b.n	8007e26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fccd 	bl	80087b4 <USBD_CtlError>
          break;
 8007e1a:	e004      	b.n	8007e26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fcc8 	bl	80087b4 <USBD_CtlError>
          break;
 8007e24:	e000      	b.n	8007e28 <USBD_StdItfReq+0x7c>
          break;
 8007e26:	bf00      	nop
      }
      break;
 8007e28:	e004      	b.n	8007e34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fcc1 	bl	80087b4 <USBD_CtlError>
      break;
 8007e32:	bf00      	nop
  }

  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	889b      	ldrh	r3, [r3, #4]
 8007e50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e5a:	2b40      	cmp	r3, #64	; 0x40
 8007e5c:	d007      	beq.n	8007e6e <USBD_StdEPReq+0x30>
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	f200 8145 	bhi.w	80080ee <USBD_StdEPReq+0x2b0>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00c      	beq.n	8007e82 <USBD_StdEPReq+0x44>
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	f040 8140 	bne.w	80080ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e13a      	b.n	80080f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d007      	beq.n	8007e9a <USBD_StdEPReq+0x5c>
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	f300 8129 	bgt.w	80080e2 <USBD_StdEPReq+0x2a4>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d07f      	beq.n	8007f94 <USBD_StdEPReq+0x156>
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d03c      	beq.n	8007f12 <USBD_StdEPReq+0xd4>
 8007e98:	e123      	b.n	80080e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d002      	beq.n	8007eac <USBD_StdEPReq+0x6e>
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d016      	beq.n	8007ed8 <USBD_StdEPReq+0x9a>
 8007eaa:	e02c      	b.n	8007f06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <USBD_StdEPReq+0x90>
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b80      	cmp	r3, #128	; 0x80
 8007eb6:	d00a      	beq.n	8007ece <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f003 fecb 	bl	800bc58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ec2:	2180      	movs	r1, #128	; 0x80
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f003 fec7 	bl	800bc58 <USBD_LL_StallEP>
 8007eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ecc:	e020      	b.n	8007f10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc6f 	bl	80087b4 <USBD_CtlError>
              break;
 8007ed6:	e01b      	b.n	8007f10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10e      	bne.n	8007efe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <USBD_StdEPReq+0xc0>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d008      	beq.n	8007efe <USBD_StdEPReq+0xc0>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f003 fead 	bl	800bc58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fd23 	bl	800894a <USBD_CtlSendStatus>

              break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fc53 	bl	80087b4 <USBD_CtlError>
              break;
 8007f0e:	bf00      	nop
          }
          break;
 8007f10:	e0ec      	b.n	80080ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d002      	beq.n	8007f24 <USBD_StdEPReq+0xe6>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d016      	beq.n	8007f50 <USBD_StdEPReq+0x112>
 8007f22:	e030      	b.n	8007f86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00d      	beq.n	8007f46 <USBD_StdEPReq+0x108>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b80      	cmp	r3, #128	; 0x80
 8007f2e:	d00a      	beq.n	8007f46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f003 fe8f 	bl	800bc58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f003 fe8b 	bl	800bc58 <USBD_LL_StallEP>
 8007f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f44:	e025      	b.n	8007f92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc33 	bl	80087b4 <USBD_CtlError>
              break;
 8007f4e:	e020      	b.n	8007f92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	885b      	ldrh	r3, [r3, #2]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11b      	bne.n	8007f90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f003 fe95 	bl	800bc96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fcec 	bl	800894a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f84:	e004      	b.n	8007f90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc13 	bl	80087b4 <USBD_CtlError>
              break;
 8007f8e:	e000      	b.n	8007f92 <USBD_StdEPReq+0x154>
              break;
 8007f90:	bf00      	nop
          }
          break;
 8007f92:	e0ab      	b.n	80080ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d002      	beq.n	8007fa6 <USBD_StdEPReq+0x168>
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d032      	beq.n	800800a <USBD_StdEPReq+0x1cc>
 8007fa4:	e097      	b.n	80080d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <USBD_StdEPReq+0x17e>
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	2b80      	cmp	r3, #128	; 0x80
 8007fb0:	d004      	beq.n	8007fbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fbfd 	bl	80087b4 <USBD_CtlError>
                break;
 8007fba:	e091      	b.n	80080e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da0b      	bge.n	8007fdc <USBD_StdEPReq+0x19e>
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	3310      	adds	r3, #16
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3304      	adds	r3, #4
 8007fda:	e00b      	b.n	8007ff4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2202      	movs	r2, #2
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fc47 	bl	8008896 <USBD_CtlSendData>
              break;
 8008008:	e06a      	b.n	80080e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800800a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800800e:	2b00      	cmp	r3, #0
 8008010:	da11      	bge.n	8008036 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	f003 020f 	and.w	r2, r3, #15
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3324      	adds	r3, #36	; 0x24
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d117      	bne.n	800805c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fbc0 	bl	80087b4 <USBD_CtlError>
                  break;
 8008034:	e054      	b.n	80080e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	f003 020f 	and.w	r2, r3, #15
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d104      	bne.n	800805c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fbad 	bl	80087b4 <USBD_CtlError>
                  break;
 800805a:	e041      	b.n	80080e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800805c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da0b      	bge.n	800807c <USBD_StdEPReq+0x23e>
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	3310      	adds	r3, #16
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	e00b      	b.n	8008094 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	3304      	adds	r3, #4
 8008094:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <USBD_StdEPReq+0x264>
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d103      	bne.n	80080aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e00e      	b.n	80080c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f003 fe10 	bl	800bcd4 <USBD_LL_IsStallEP>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2201      	movs	r2, #1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e002      	b.n	80080c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2202      	movs	r2, #2
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fbe1 	bl	8008896 <USBD_CtlSendData>
              break;
 80080d4:	e004      	b.n	80080e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb6b 	bl	80087b4 <USBD_CtlError>
              break;
 80080de:	bf00      	nop
          }
          break;
 80080e0:	e004      	b.n	80080ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fb65 	bl	80087b4 <USBD_CtlError>
          break;
 80080ea:	bf00      	nop
      }
      break;
 80080ec:	e004      	b.n	80080f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb5f 	bl	80087b4 <USBD_CtlError>
      break;
 80080f6:	bf00      	nop
  }

  return ret;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	885b      	ldrh	r3, [r3, #2]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	2b0e      	cmp	r3, #14
 8008126:	f200 8152 	bhi.w	80083ce <USBD_GetDescriptor+0x2ca>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <USBD_GetDescriptor+0x2c>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	080081a1 	.word	0x080081a1
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080081f9 	.word	0x080081f9
 800813c:	080083cf 	.word	0x080083cf
 8008140:	080083cf 	.word	0x080083cf
 8008144:	0800836f 	.word	0x0800836f
 8008148:	0800839b 	.word	0x0800839b
 800814c:	080083cf 	.word	0x080083cf
 8008150:	080083cf 	.word	0x080083cf
 8008154:	080083cf 	.word	0x080083cf
 8008158:	080083cf 	.word	0x080083cf
 800815c:	080083cf 	.word	0x080083cf
 8008160:	080083cf 	.word	0x080083cf
 8008164:	080083cf 	.word	0x080083cf
 8008168:	0800816d 	.word	0x0800816d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	7c12      	ldrb	r2, [r2, #16]
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800818e:	e126      	b.n	80083de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fb0e 	bl	80087b4 <USBD_CtlError>
        err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
      break;
 800819e:	e11e      	b.n	80083de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	7c12      	ldrb	r2, [r2, #16]
 80081ac:	f107 0108 	add.w	r1, r7, #8
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	60f8      	str	r0, [r7, #12]
      break;
 80081b6:	e112      	b.n	80083de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7c1b      	ldrb	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	f107 0208 	add.w	r2, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	2202      	movs	r2, #2
 80081d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081da:	e100      	b.n	80083de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	f107 0208 	add.w	r2, r7, #8
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3301      	adds	r3, #1
 80081f2:	2202      	movs	r2, #2
 80081f4:	701a      	strb	r2, [r3, #0]
      break;
 80081f6:	e0f2      	b.n	80083de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	885b      	ldrh	r3, [r3, #2]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b05      	cmp	r3, #5
 8008200:	f200 80ac 	bhi.w	800835c <USBD_GetDescriptor+0x258>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_GetDescriptor+0x108>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008225 	.word	0x08008225
 8008210:	08008259 	.word	0x08008259
 8008214:	0800828d 	.word	0x0800828d
 8008218:	080082c1 	.word	0x080082c1
 800821c:	080082f5 	.word	0x080082f5
 8008220:	08008329 	.word	0x08008329
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	7c12      	ldrb	r2, [r2, #16]
 800823c:	f107 0108 	add.w	r1, r7, #8
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008246:	e091      	b.n	800836c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fab2 	bl	80087b4 <USBD_CtlError>
            err++;
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	3301      	adds	r3, #1
 8008254:	72fb      	strb	r3, [r7, #11]
          break;
 8008256:	e089      	b.n	800836c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e077      	b.n	800836c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa98 	bl	80087b4 <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e06f      	b.n	800836c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7c12      	ldrb	r2, [r2, #16]
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
 80082ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ae:	e05d      	b.n	800836c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa7e 	bl	80087b4 <USBD_CtlError>
            err++;
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	3301      	adds	r3, #1
 80082bc:	72fb      	strb	r3, [r7, #11]
          break;
 80082be:	e055      	b.n	800836c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e2:	e043      	b.n	800836c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa64 	bl	80087b4 <USBD_CtlError>
            err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
          break;
 80082f2:	e03b      	b.n	800836c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e029      	b.n	800836c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa4a 	bl	80087b4 <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e021      	b.n	800836c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e00f      	b.n	800836c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa30 	bl	80087b4 <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e007      	b.n	800836c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa28 	bl	80087b4 <USBD_CtlError>
          err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800836a:	bf00      	nop
      }
      break;
 800836c:	e037      	b.n	80083de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	7c1b      	ldrb	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837e:	f107 0208 	add.w	r2, r7, #8
 8008382:	4610      	mov	r0, r2
 8008384:	4798      	blx	r3
 8008386:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008388:	e029      	b.n	80083de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa11 	bl	80087b4 <USBD_CtlError>
        err++;
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	3301      	adds	r3, #1
 8008396:	72fb      	strb	r3, [r7, #11]
      break;
 8008398:	e021      	b.n	80083de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7c1b      	ldrb	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10d      	bne.n	80083be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	f107 0208 	add.w	r2, r7, #8
 80083ae:	4610      	mov	r0, r2
 80083b0:	4798      	blx	r3
 80083b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	2207      	movs	r2, #7
 80083ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083bc:	e00f      	b.n	80083de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f9f7 	bl	80087b4 <USBD_CtlError>
        err++;
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	3301      	adds	r3, #1
 80083ca:	72fb      	strb	r3, [r7, #11]
      break;
 80083cc:	e007      	b.n	80083de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f9ef 	bl	80087b4 <USBD_CtlError>
      err++;
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	3301      	adds	r3, #1
 80083da:	72fb      	strb	r3, [r7, #11]
      break;
 80083dc:	bf00      	nop
  }

  if (err != 0U)
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11e      	bne.n	8008422 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	88db      	ldrh	r3, [r3, #6]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d016      	beq.n	800841a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80083ec:	893b      	ldrh	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00e      	beq.n	8008410 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88da      	ldrh	r2, [r3, #6]
 80083f6:	893b      	ldrh	r3, [r7, #8]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	bf28      	it	cs
 80083fc:	4613      	movcs	r3, r2
 80083fe:	b29b      	uxth	r3, r3
 8008400:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008402:	893b      	ldrh	r3, [r7, #8]
 8008404:	461a      	mov	r2, r3
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fa44 	bl	8008896 <USBD_CtlSendData>
 800840e:	e009      	b.n	8008424 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f9ce 	bl	80087b4 <USBD_CtlError>
 8008418:	e004      	b.n	8008424 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa95 	bl	800894a <USBD_CtlSendStatus>
 8008420:	e000      	b.n	8008424 <USBD_GetDescriptor+0x320>
    return;
 8008422:	bf00      	nop
  }
}
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop

0800842c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	889b      	ldrh	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d131      	bne.n	80084a2 <USBD_SetAddress+0x76>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88db      	ldrh	r3, [r3, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d12d      	bne.n	80084a2 <USBD_SetAddress+0x76>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	885b      	ldrh	r3, [r3, #2]
 800844a:	2b7f      	cmp	r3, #127	; 0x7f
 800844c:	d829      	bhi.n	80084a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b03      	cmp	r3, #3
 8008464:	d104      	bne.n	8008470 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f9a3 	bl	80087b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846e:	e01d      	b.n	80084ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7bfa      	ldrb	r2, [r7, #15]
 8008474:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f003 fc56 	bl	800bd2e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa61 	bl	800894a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2202      	movs	r2, #2
 8008492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008496:	e009      	b.n	80084ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a0:	e004      	b.n	80084ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f985 	bl	80087b4 <USBD_CtlError>
  }
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	4b4c      	ldr	r3, [pc, #304]	; (80085fc <USBD_SetConfig+0x148>)
 80084ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084cc:	4b4b      	ldr	r3, [pc, #300]	; (80085fc <USBD_SetConfig+0x148>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d905      	bls.n	80084e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f96c 	bl	80087b4 <USBD_CtlError>
    return USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	e088      	b.n	80085f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d002      	beq.n	80084f2 <USBD_SetConfig+0x3e>
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d025      	beq.n	800853c <USBD_SetConfig+0x88>
 80084f0:	e071      	b.n	80085d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084f2:	4b42      	ldr	r3, [pc, #264]	; (80085fc <USBD_SetConfig+0x148>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01c      	beq.n	8008534 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80084fa:	4b40      	ldr	r3, [pc, #256]	; (80085fc <USBD_SetConfig+0x148>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008504:	4b3d      	ldr	r3, [pc, #244]	; (80085fc <USBD_SetConfig+0x148>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff f992 	bl	8007834 <USBD_SetClassConfig>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d004      	beq.n	8008524 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f949 	bl	80087b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008522:	e065      	b.n	80085f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa10 	bl	800894a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2203      	movs	r2, #3
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008532:	e05d      	b.n	80085f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa08 	bl	800894a <USBD_CtlSendStatus>
      break;
 800853a:	e059      	b.n	80085f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800853c:	4b2f      	ldr	r3, [pc, #188]	; (80085fc <USBD_SetConfig+0x148>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d112      	bne.n	800856a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800854c:	4b2b      	ldr	r3, [pc, #172]	; (80085fc <USBD_SetConfig+0x148>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008556:	4b29      	ldr	r3, [pc, #164]	; (80085fc <USBD_SetConfig+0x148>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff f985 	bl	800786c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f9f1 	bl	800894a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008568:	e042      	b.n	80085f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800856a:	4b24      	ldr	r3, [pc, #144]	; (80085fc <USBD_SetConfig+0x148>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d02a      	beq.n	80085ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff f973 	bl	800786c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008586:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <USBD_SetConfig+0x148>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008590:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <USBD_SetConfig+0x148>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff f94c 	bl	8007834 <USBD_SetClassConfig>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00f      	beq.n	80085c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f903 	bl	80087b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff f958 	bl	800786c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085c4:	e014      	b.n	80085f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f9bf 	bl	800894a <USBD_CtlSendStatus>
      break;
 80085cc:	e010      	b.n	80085f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f9bb 	bl	800894a <USBD_CtlSendStatus>
      break;
 80085d4:	e00c      	b.n	80085f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8eb 	bl	80087b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085de:	4b07      	ldr	r3, [pc, #28]	; (80085fc <USBD_SetConfig+0x148>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff f941 	bl	800786c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	73fb      	strb	r3, [r7, #15]
      break;
 80085ee:	bf00      	nop
  }

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000208 	.word	0x20000208

08008600 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	88db      	ldrh	r3, [r3, #6]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d004      	beq.n	800861c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f8cd 	bl	80087b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800861a:	e023      	b.n	8008664 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	dc02      	bgt.n	800862e <USBD_GetConfig+0x2e>
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc03      	bgt.n	8008634 <USBD_GetConfig+0x34>
 800862c:	e015      	b.n	800865a <USBD_GetConfig+0x5a>
 800862e:	2b03      	cmp	r3, #3
 8008630:	d00b      	beq.n	800864a <USBD_GetConfig+0x4a>
 8008632:	e012      	b.n	800865a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3308      	adds	r3, #8
 800863e:	2201      	movs	r2, #1
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f927 	bl	8008896 <USBD_CtlSendData>
        break;
 8008648:	e00c      	b.n	8008664 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3304      	adds	r3, #4
 800864e:	2201      	movs	r2, #1
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f91f 	bl	8008896 <USBD_CtlSendData>
        break;
 8008658:	e004      	b.n	8008664 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f8a9 	bl	80087b4 <USBD_CtlError>
        break;
 8008662:	bf00      	nop
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	2b02      	cmp	r3, #2
 8008682:	d81e      	bhi.n	80086c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	88db      	ldrh	r3, [r3, #6]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d004      	beq.n	8008696 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f890 	bl	80087b4 <USBD_CtlError>
        break;
 8008694:	e01a      	b.n	80086cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f043 0202 	orr.w	r2, r3, #2
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	330c      	adds	r3, #12
 80086b6:	2202      	movs	r2, #2
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f8eb 	bl	8008896 <USBD_CtlSendData>
      break;
 80086c0:	e004      	b.n	80086cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f875 	bl	80087b4 <USBD_CtlError>
      break;
 80086ca:	bf00      	nop
  }
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	885b      	ldrh	r3, [r3, #2]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d106      	bne.n	80086f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f92b 	bl	800894a <USBD_CtlSendStatus>
  }
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870c:	b2db      	uxtb	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	2b02      	cmp	r3, #2
 8008712:	d80b      	bhi.n	800872c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	885b      	ldrh	r3, [r3, #2]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d10c      	bne.n	8008736 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f910 	bl	800894a <USBD_CtlSendStatus>
      }
      break;
 800872a:	e004      	b.n	8008736 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f840 	bl	80087b4 <USBD_CtlError>
      break;
 8008734:	e000      	b.n	8008738 <USBD_ClrFeature+0x3c>
      break;
 8008736:	bf00      	nop
  }
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	781a      	ldrb	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fa92 	bl	8007c94 <SWAPBYTE>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fa85 	bl	8007c94 <SWAPBYTE>
 800878a:	4603      	mov	r3, r0
 800878c:	461a      	mov	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff fa78 	bl	8007c94 <SWAPBYTE>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	80da      	strh	r2, [r3, #6]
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087be:	2180      	movs	r1, #128	; 0x80
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f003 fa49 	bl	800bc58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087c6:	2100      	movs	r1, #0
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f003 fa45 	bl	800bc58 <USBD_LL_StallEP>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d036      	beq.n	800885a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087f0:	6938      	ldr	r0, [r7, #16]
 80087f2:	f000 f836 	bl	8008862 <USBD_GetLen>
 80087f6:	4603      	mov	r3, r0
 80087f8:	3301      	adds	r3, #1
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	4413      	add	r3, r2
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	3301      	adds	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	4413      	add	r3, r2
 800881c:	2203      	movs	r2, #3
 800881e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	3301      	adds	r3, #1
 8008824:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008826:	e013      	b.n	8008850 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	7812      	ldrb	r2, [r2, #0]
 8008832:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	3301      	adds	r3, #1
 8008838:	613b      	str	r3, [r7, #16]
    idx++;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	3301      	adds	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	4413      	add	r3, r2
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
    idx++;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	3301      	adds	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e7      	bne.n	8008828 <USBD_GetString+0x52>
 8008858:	e000      	b.n	800885c <USBD_GetString+0x86>
    return;
 800885a:	bf00      	nop
  }
}
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008872:	e005      	b.n	8008880 <USBD_GetLen+0x1e>
  {
    len++;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	3301      	adds	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	3301      	adds	r3, #1
 800887e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f5      	bne.n	8008874 <USBD_GetLen+0x12>
  }

  return len;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f003 fa55 	bl	800bd6c <USBD_LL_Transmit>

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	2100      	movs	r1, #0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f003 fa44 	bl	800bd6c <USBD_LL_Transmit>

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2203      	movs	r2, #3
 80088fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	2100      	movs	r1, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f003 fa48 	bl	800bdae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f003 fa37 	bl	800bdae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2204      	movs	r2, #4
 8008956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800895a:	2300      	movs	r3, #0
 800895c:	2200      	movs	r2, #0
 800895e:	2100      	movs	r1, #0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f003 fa03 	bl	800bd6c <USBD_LL_Transmit>

  return USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2205      	movs	r2, #5
 800897c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008980:	2300      	movs	r3, #0
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f003 fa11 	bl	800bdae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <__NVIC_SetPriority>:
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	db0a      	blt.n	80089c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	490c      	ldr	r1, [pc, #48]	; (80089e4 <__NVIC_SetPriority+0x4c>)
 80089b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b6:	0112      	lsls	r2, r2, #4
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	440b      	add	r3, r1
 80089bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089c0:	e00a      	b.n	80089d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	4908      	ldr	r1, [pc, #32]	; (80089e8 <__NVIC_SetPriority+0x50>)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	3b04      	subs	r3, #4
 80089d0:	0112      	lsls	r2, r2, #4
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	440b      	add	r3, r1
 80089d6:	761a      	strb	r2, [r3, #24]
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	e000e100 	.word	0xe000e100
 80089e8:	e000ed00 	.word	0xe000ed00

080089ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <SysTick_Handler+0x1c>)
 80089f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80089f4:	f001 fd28 	bl	800a448 <xTaskGetSchedulerState>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d001      	beq.n	8008a02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80089fe:	f002 fb13 	bl	800b028 <xPortSysTickHandler>
  }
}
 8008a02:	bf00      	nop
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	e000e010 	.word	0xe000e010

08008a0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a10:	2100      	movs	r1, #0
 8008a12:	f06f 0004 	mvn.w	r0, #4
 8008a16:	f7ff ffbf 	bl	8008998 <__NVIC_SetPriority>
#endif
}
 8008a1a:	bf00      	nop
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a26:	f3ef 8305 	mrs	r3, IPSR
 8008a2a:	603b      	str	r3, [r7, #0]
  return(result);
 8008a2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a32:	f06f 0305 	mvn.w	r3, #5
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	e00c      	b.n	8008a54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <osKernelInitialize+0x44>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d105      	bne.n	8008a4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <osKernelInitialize+0x44>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	607b      	str	r3, [r7, #4]
 8008a4c:	e002      	b.n	8008a54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a54:	687b      	ldr	r3, [r7, #4]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	2000020c 	.word	0x2000020c

08008a68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6e:	f3ef 8305 	mrs	r3, IPSR
 8008a72:	603b      	str	r3, [r7, #0]
  return(result);
 8008a74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a7a:	f06f 0305 	mvn.w	r3, #5
 8008a7e:	607b      	str	r3, [r7, #4]
 8008a80:	e010      	b.n	8008aa4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <osKernelStart+0x48>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d109      	bne.n	8008a9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a8a:	f7ff ffbf 	bl	8008a0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a8e:	4b08      	ldr	r3, [pc, #32]	; (8008ab0 <osKernelStart+0x48>)
 8008a90:	2202      	movs	r2, #2
 8008a92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a94:	f001 f87c 	bl	8009b90 <vTaskStartScheduler>
      stat = osOK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	e002      	b.n	8008aa4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008aa4:	687b      	ldr	r3, [r7, #4]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	2000020c 	.word	0x2000020c

08008ab4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af04      	add	r7, sp, #16
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac4:	f3ef 8305 	mrs	r3, IPSR
 8008ac8:	617b      	str	r3, [r7, #20]
  return(result);
 8008aca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d17e      	bne.n	8008bce <osThreadNew+0x11a>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d07b      	beq.n	8008bce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ada:	2318      	movs	r3, #24
 8008adc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d045      	beq.n	8008b7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <osThreadNew+0x48>
        name = attr->name;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <osThreadNew+0x6e>
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	2b38      	cmp	r3, #56	; 0x38
 8008b14:	d805      	bhi.n	8008b22 <osThreadNew+0x6e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <osThreadNew+0x72>
        return (NULL);
 8008b22:	2300      	movs	r3, #0
 8008b24:	e054      	b.n	8008bd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00e      	beq.n	8008b5c <osThreadNew+0xa8>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	2bbb      	cmp	r3, #187	; 0xbb
 8008b44:	d90a      	bls.n	8008b5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d006      	beq.n	8008b5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <osThreadNew+0xa8>
        mem = 1;
 8008b56:	2301      	movs	r3, #1
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	e010      	b.n	8008b7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10c      	bne.n	8008b7e <osThreadNew+0xca>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d108      	bne.n	8008b7e <osThreadNew+0xca>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <osThreadNew+0xca>
          mem = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	61bb      	str	r3, [r7, #24]
 8008b78:	e001      	b.n	8008b7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d110      	bne.n	8008ba6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b8c:	9202      	str	r2, [sp, #8]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6a3a      	ldr	r2, [r7, #32]
 8008b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fe0c 	bl	80097b8 <xTaskCreateStatic>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	e013      	b.n	8008bce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d110      	bne.n	8008bce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	f107 0310 	add.w	r3, r7, #16
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fe57 	bl	8009872 <xTaskCreate>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d001      	beq.n	8008bce <osThreadNew+0x11a>
            hTask = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008bce:	693b      	ldr	r3, [r7, #16]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3728      	adds	r7, #40	; 0x28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008be0:	f3ef 8305 	mrs	r3, IPSR
 8008be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008be6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <osDelay+0x1c>
    stat = osErrorISR;
 8008bec:	f06f 0305 	mvn.w	r3, #5
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e007      	b.n	8008c04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 ff92 	bl	8009b28 <vTaskDelay>
    }
  }

  return (stat);
 8008c04:	68fb      	ldr	r3, [r7, #12]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a07      	ldr	r2, [pc, #28]	; (8008c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8008c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	4a06      	ldr	r2, [pc, #24]	; (8008c40 <vApplicationGetIdleTaskMemory+0x30>)
 8008c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2280      	movs	r2, #128	; 0x80
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000210 	.word	0x20000210
 8008c40:	200002cc 	.word	0x200002cc

08008c44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4a07      	ldr	r2, [pc, #28]	; (8008c70 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	4a06      	ldr	r2, [pc, #24]	; (8008c74 <vApplicationGetTimerTaskMemory+0x30>)
 8008c5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c62:	601a      	str	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	200004cc 	.word	0x200004cc
 8008c74:	20000588 	.word	0x20000588

08008c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f103 0208 	add.w	r2, r3, #8
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f103 0208 	add.w	r2, r3, #8
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f103 0208 	add.w	r2, r3, #8
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	601a      	str	r2, [r3, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d103      	bne.n	8008d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e00c      	b.n	8008d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	e002      	b.n	8008d48 <vListInsert+0x2e>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d2f6      	bcs.n	8008d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	601a      	str	r2, [r3, #0]
}
 8008d80:	bf00      	nop
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6892      	ldr	r2, [r2, #8]
 8008da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6852      	ldr	r2, [r2, #4]
 8008dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d103      	bne.n	8008dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	1e5a      	subs	r2, r3, #1
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e0a:	f002 f87b 	bl	800af04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	441a      	add	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	68f9      	ldr	r1, [r7, #12]
 8008e3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	441a      	add	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	22ff      	movs	r2, #255	; 0xff
 8008e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	22ff      	movs	r2, #255	; 0xff
 8008e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d114      	bne.n	8008e8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01a      	beq.n	8008e9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3310      	adds	r3, #16
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 f929 	bl	800a0c4 <xTaskRemoveFromEventList>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d012      	beq.n	8008e9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e78:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <xQueueGenericReset+0xcc>)
 8008e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	e009      	b.n	8008e9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff fef2 	bl	8008c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3324      	adds	r3, #36	; 0x24
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff feed 	bl	8008c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e9e:	f002 f861 	bl	800af64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ea2:	2301      	movs	r3, #1
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08e      	sub	sp, #56	; 0x38
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <xQueueGenericCreateStatic+0x52>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <xQueueGenericCreateStatic+0x56>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <xQueueGenericCreateStatic+0x58>
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10a      	bne.n	8008f22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	623b      	str	r3, [r7, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <xQueueGenericCreateStatic+0x7e>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <xQueueGenericCreateStatic+0x82>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueGenericCreateStatic+0x84>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61fb      	str	r3, [r7, #28]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f4e:	2350      	movs	r3, #80	; 0x50
 8008f50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b50      	cmp	r3, #80	; 0x50
 8008f56:	d00a      	beq.n	8008f6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	61bb      	str	r3, [r7, #24]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00d      	beq.n	8008f96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f805 	bl	8008fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3730      	adds	r7, #48	; 0x30
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d103      	bne.n	8008fbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e002      	b.n	8008fc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fce:	2101      	movs	r1, #1
 8008fd0:	69b8      	ldr	r0, [r7, #24]
 8008fd2:	f7ff ff05 	bl	8008de0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	78fa      	ldrb	r2, [r7, #3]
 8008fda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08e      	sub	sp, #56	; 0x38
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xQueueGenericSend+0x32>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d103      	bne.n	8009028 <xQueueGenericSend+0x40>
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <xQueueGenericSend+0x44>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <xQueueGenericSend+0x46>
 800902c:	2300      	movs	r3, #0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xQueueGenericSend+0x60>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d103      	bne.n	8009056 <xQueueGenericSend+0x6e>
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d101      	bne.n	800905a <xQueueGenericSend+0x72>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueGenericSend+0x74>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xQueueGenericSend+0x8e>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	623b      	str	r3, [r7, #32]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009076:	f001 f9e7 	bl	800a448 <xTaskGetSchedulerState>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <xQueueGenericSend+0x9e>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <xQueueGenericSend+0xa2>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueGenericSend+0xa4>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	61fb      	str	r3, [r7, #28]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a6:	f001 ff2d 	bl	800af04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d302      	bcc.n	80090bc <xQueueGenericSend+0xd4>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d129      	bne.n	8009110 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c2:	f000 fa0b 	bl	80094dc <prvCopyDataToQueue>
 80090c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fff5 	bl	800a0c4 <xTaskRemoveFromEventList>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d013      	beq.n	8009108 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090e0:	4b3f      	ldr	r3, [pc, #252]	; (80091e0 <xQueueGenericSend+0x1f8>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	e00a      	b.n	8009108 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090f8:	4b39      	ldr	r3, [pc, #228]	; (80091e0 <xQueueGenericSend+0x1f8>)
 80090fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009108:	f001 ff2c 	bl	800af64 <vPortExitCritical>
				return pdPASS;
 800910c:	2301      	movs	r3, #1
 800910e:	e063      	b.n	80091d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009116:	f001 ff25 	bl	800af64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800911a:	2300      	movs	r3, #0
 800911c:	e05c      	b.n	80091d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009120:	2b00      	cmp	r3, #0
 8009122:	d106      	bne.n	8009132 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	4618      	mov	r0, r3
 800912a:	f001 f82f 	bl	800a18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800912e:	2301      	movs	r3, #1
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009132:	f001 ff17 	bl	800af64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009136:	f000 fd9b 	bl	8009c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800913a:	f001 fee3 	bl	800af04 <vPortEnterCritical>
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009144:	b25b      	sxtb	r3, r3
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d103      	bne.n	8009154 <xQueueGenericSend+0x16c>
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915a:	b25b      	sxtb	r3, r3
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d103      	bne.n	800916a <xQueueGenericSend+0x182>
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800916a:	f001 fefb 	bl	800af64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800916e:	1d3a      	adds	r2, r7, #4
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f001 f81e 	bl	800a1b8 <xTaskCheckForTimeOut>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d124      	bne.n	80091cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009184:	f000 faa2 	bl	80096cc <prvIsQueueFull>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d018      	beq.n	80091c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	3310      	adds	r3, #16
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f000 ff44 	bl	800a024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800919c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800919e:	f000 fa2d 	bl	80095fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091a2:	f000 fd73 	bl	8009c8c <xTaskResumeAll>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f47f af7c 	bne.w	80090a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <xQueueGenericSend+0x1f8>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	e772      	b.n	80090a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c2:	f000 fa1b 	bl	80095fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091c6:	f000 fd61 	bl	8009c8c <xTaskResumeAll>
 80091ca:	e76c      	b.n	80090a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ce:	f000 fa15 	bl	80095fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091d2:	f000 fd5b 	bl	8009c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3738      	adds	r7, #56	; 0x38
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	e000ed04 	.word	0xe000ed04

080091e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b090      	sub	sp, #64	; 0x40
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <xQueueGenericSendFromISR+0x3c>
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <xQueueGenericSendFromISR+0x40>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <xQueueGenericSendFromISR+0x42>
 8009224:	2300      	movs	r3, #0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d103      	bne.n	800924e <xQueueGenericSendFromISR+0x6a>
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <xQueueGenericSendFromISR+0x6e>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueGenericSendFromISR+0x70>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	623b      	str	r3, [r7, #32]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800926e:	f001 ff2b 	bl	800b0c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009272:	f3ef 8211 	mrs	r2, BASEPRI
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	61fa      	str	r2, [r7, #28]
 8009288:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800928a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	429a      	cmp	r2, r3
 8009298:	d302      	bcc.n	80092a0 <xQueueGenericSendFromISR+0xbc>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d12f      	bne.n	8009300 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092b6:	f000 f911 	bl	80094dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c2:	d112      	bne.n	80092ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d016      	beq.n	80092fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	3324      	adds	r3, #36	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fef7 	bl	800a0c4 <xTaskRemoveFromEventList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00b      	beq.n	80092fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	e007      	b.n	80092fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ee:	3301      	adds	r3, #1
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	b25a      	sxtb	r2, r3
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092fa:	2301      	movs	r3, #1
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092fe:	e001      	b.n	8009304 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009306:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800930e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009312:	4618      	mov	r0, r3
 8009314:	3740      	adds	r7, #64	; 0x40
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08c      	sub	sp, #48	; 0x30
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009328:	2300      	movs	r3, #0
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10a      	bne.n	800934c <xQueueReceive+0x30>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	623b      	str	r3, [r7, #32]
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <xQueueReceive+0x3e>
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <xQueueReceive+0x42>
 800935a:	2301      	movs	r3, #1
 800935c:	e000      	b.n	8009360 <xQueueReceive+0x44>
 800935e:	2300      	movs	r3, #0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <xQueueReceive+0x5e>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	61fb      	str	r3, [r7, #28]
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800937a:	f001 f865 	bl	800a448 <xTaskGetSchedulerState>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d102      	bne.n	800938a <xQueueReceive+0x6e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <xQueueReceive+0x72>
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <xQueueReceive+0x74>
 800938e:	2300      	movs	r3, #0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <xQueueReceive+0x8e>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	61bb      	str	r3, [r7, #24]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093aa:	f001 fdab 	bl	800af04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d01f      	beq.n	80093fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093be:	f000 f8f7 	bl	80095b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	1e5a      	subs	r2, r3, #1
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	3310      	adds	r3, #16
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fe74 	bl	800a0c4 <xTaskRemoveFromEventList>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d007      	beq.n	80093f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093e2:	4b3d      	ldr	r3, [pc, #244]	; (80094d8 <xQueueReceive+0x1bc>)
 80093e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093f2:	f001 fdb7 	bl	800af64 <vPortExitCritical>
				return pdPASS;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e069      	b.n	80094ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009400:	f001 fdb0 	bl	800af64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009404:	2300      	movs	r3, #0
 8009406:	e062      	b.n	80094ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800940e:	f107 0310 	add.w	r3, r7, #16
 8009412:	4618      	mov	r0, r3
 8009414:	f000 feba 	bl	800a18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800941c:	f001 fda2 	bl	800af64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009420:	f000 fc26 	bl	8009c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009424:	f001 fd6e 	bl	800af04 <vPortEnterCritical>
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800942e:	b25b      	sxtb	r3, r3
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009434:	d103      	bne.n	800943e <xQueueReceive+0x122>
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009444:	b25b      	sxtb	r3, r3
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d103      	bne.n	8009454 <xQueueReceive+0x138>
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009454:	f001 fd86 	bl	800af64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009458:	1d3a      	adds	r2, r7, #4
 800945a:	f107 0310 	add.w	r3, r7, #16
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f000 fea9 	bl	800a1b8 <xTaskCheckForTimeOut>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d123      	bne.n	80094b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800946c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946e:	f000 f917 	bl	80096a0 <prvIsQueueEmpty>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d017      	beq.n	80094a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	3324      	adds	r3, #36	; 0x24
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fdcf 	bl	800a024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009488:	f000 f8b8 	bl	80095fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800948c:	f000 fbfe 	bl	8009c8c <xTaskResumeAll>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d189      	bne.n	80093aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <xQueueReceive+0x1bc>)
 8009498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	e780      	b.n	80093aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094aa:	f000 f8a7 	bl	80095fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ae:	f000 fbed 	bl	8009c8c <xTaskResumeAll>
 80094b2:	e77a      	b.n	80093aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b6:	f000 f8a1 	bl	80095fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094ba:	f000 fbe7 	bl	8009c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c0:	f000 f8ee 	bl	80096a0 <prvIsQueueEmpty>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f43f af6f 	beq.w	80093aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3730      	adds	r7, #48	; 0x30
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10d      	bne.n	8009516 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d14d      	bne.n	800959e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 ffbc 	bl	800a484 <xTaskPriorityDisinherit>
 800950c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	609a      	str	r2, [r3, #8]
 8009514:	e043      	b.n	800959e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d119      	bne.n	8009550 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6858      	ldr	r0, [r3, #4]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009524:	461a      	mov	r2, r3
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	f002 fd1c 	bl	800bf64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d32b      	bcc.n	800959e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	e026      	b.n	800959e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68d8      	ldr	r0, [r3, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	461a      	mov	r2, r3
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	f002 fd02 	bl	800bf64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	425b      	negs	r3, r3
 800956a:	441a      	add	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d207      	bcs.n	800958c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	425b      	negs	r3, r3
 8009586:	441a      	add	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d105      	bne.n	800959e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	3b01      	subs	r3, #1
 800959c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095a6:	697b      	ldr	r3, [r7, #20]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	441a      	add	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d303      	bcc.n	80095e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68d9      	ldr	r1, [r3, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	461a      	mov	r2, r3
 80095ee:	6838      	ldr	r0, [r7, #0]
 80095f0:	f002 fcb8 	bl	800bf64 <memcpy>
	}
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009604:	f001 fc7e 	bl	800af04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009610:	e011      	b.n	8009636 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009616:	2b00      	cmp	r3, #0
 8009618:	d012      	beq.n	8009640 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3324      	adds	r3, #36	; 0x24
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fd50 	bl	800a0c4 <xTaskRemoveFromEventList>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800962a:	f000 fe27 	bl	800a27c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	3b01      	subs	r3, #1
 8009632:	b2db      	uxtb	r3, r3
 8009634:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dce9      	bgt.n	8009612 <prvUnlockQueue+0x16>
 800963e:	e000      	b.n	8009642 <prvUnlockQueue+0x46>
					break;
 8009640:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800964a:	f001 fc8b 	bl	800af64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800964e:	f001 fc59 	bl	800af04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009658:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800965a:	e011      	b.n	8009680 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d012      	beq.n	800968a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3310      	adds	r3, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fd2b 	bl	800a0c4 <xTaskRemoveFromEventList>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009674:	f000 fe02 	bl	800a27c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	3b01      	subs	r3, #1
 800967c:	b2db      	uxtb	r3, r3
 800967e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dce9      	bgt.n	800965c <prvUnlockQueue+0x60>
 8009688:	e000      	b.n	800968c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800968a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	22ff      	movs	r2, #255	; 0xff
 8009690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009694:	f001 fc66 	bl	800af64 <vPortExitCritical>
}
 8009698:	bf00      	nop
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096a8:	f001 fc2c 	bl	800af04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	e001      	b.n	80096be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096be:	f001 fc51 	bl	800af64 <vPortExitCritical>

	return xReturn;
 80096c2:	68fb      	ldr	r3, [r7, #12]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096d4:	f001 fc16 	bl	800af04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d102      	bne.n	80096ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096e4:	2301      	movs	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e001      	b.n	80096ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ee:	f001 fc39 	bl	800af64 <vPortExitCritical>

	return xReturn;
 80096f2:	68fb      	ldr	r3, [r7, #12]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	e014      	b.n	8009736 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800970c:	4a0f      	ldr	r2, [pc, #60]	; (800974c <vQueueAddToRegistry+0x50>)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10b      	bne.n	8009730 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009718:	490c      	ldr	r1, [pc, #48]	; (800974c <vQueueAddToRegistry+0x50>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009722:	4a0a      	ldr	r2, [pc, #40]	; (800974c <vQueueAddToRegistry+0x50>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4413      	add	r3, r2
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800972e:	e006      	b.n	800973e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b07      	cmp	r3, #7
 800973a:	d9e7      	bls.n	800970c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800973c:	bf00      	nop
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20002ae4 	.word	0x20002ae4

08009750 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009760:	f001 fbd0 	bl	800af04 <vPortEnterCritical>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800976a:	b25b      	sxtb	r3, r3
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d103      	bne.n	800977a <vQueueWaitForMessageRestricted+0x2a>
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009780:	b25b      	sxtb	r3, r3
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d103      	bne.n	8009790 <vQueueWaitForMessageRestricted+0x40>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009790:	f001 fbe8 	bl	800af64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fc61 	bl	800a06c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097aa:	6978      	ldr	r0, [r7, #20]
 80097ac:	f7ff ff26 	bl	80095fc <prvUnlockQueue>
	}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08e      	sub	sp, #56	; 0x38
 80097bc:	af04      	add	r7, sp, #16
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	623b      	str	r3, [r7, #32]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <xTaskCreateStatic+0x46>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	61fb      	str	r3, [r7, #28]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097fe:	23bc      	movs	r3, #188	; 0xbc
 8009800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2bbc      	cmp	r3, #188	; 0xbc
 8009806:	d00a      	beq.n	800981e <xTaskCreateStatic+0x66>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	61bb      	str	r3, [r7, #24]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800981e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01e      	beq.n	8009864 <xTaskCreateStatic+0xac>
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01b      	beq.n	8009864 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	2202      	movs	r2, #2
 800983a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800983e:	2300      	movs	r3, #0
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	f107 0314 	add.w	r3, r7, #20
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f850 	bl	80098fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800985c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985e:	f000 f8f3 	bl	8009a48 <prvAddNewTaskToReadyList>
 8009862:	e001      	b.n	8009868 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009868:	697b      	ldr	r3, [r7, #20]
	}
 800986a:	4618      	mov	r0, r3
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009872:	b580      	push	{r7, lr}
 8009874:	b08c      	sub	sp, #48	; 0x30
 8009876:	af04      	add	r7, sp, #16
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4618      	mov	r0, r3
 8009888:	f001 fc5e 	bl	800b148 <pvPortMalloc>
 800988c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00e      	beq.n	80098b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009894:	20bc      	movs	r0, #188	; 0xbc
 8009896:	f001 fc57 	bl	800b148 <pvPortMalloc>
 800989a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
 80098a8:	e005      	b.n	80098b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	f001 fd18 	bl	800b2e0 <vPortFree>
 80098b0:	e001      	b.n	80098b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d017      	beq.n	80098ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098c4:	88fa      	ldrh	r2, [r7, #6]
 80098c6:	2300      	movs	r3, #0
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f80e 	bl	80098fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098e0:	69f8      	ldr	r0, [r7, #28]
 80098e2:	f000 f8b1 	bl	8009a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e002      	b.n	80098f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295
 80098f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098f2:	69bb      	ldr	r3, [r7, #24]
	}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	461a      	mov	r2, r3
 8009914:	21a5      	movs	r1, #165	; 0xa5
 8009916:	f002 fb33 	bl	800bf80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009924:	3b01      	subs	r3, #1
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	f023 0307 	bic.w	r3, r3, #7
 8009932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <prvInitialiseNewTask+0x58>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	617b      	str	r3, [r7, #20]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01f      	beq.n	800999a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e012      	b.n	8009986 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	7819      	ldrb	r1, [r3, #0]
 8009968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	3334      	adds	r3, #52	; 0x34
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b0f      	cmp	r3, #15
 800998a:	d9e9      	bls.n	8009960 <prvInitialiseNewTask+0x64>
 800998c:	e000      	b.n	8009990 <prvInitialiseNewTask+0x94>
			{
				break;
 800998e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009998:	e003      	b.n	80099a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	2b37      	cmp	r3, #55	; 0x37
 80099a6:	d901      	bls.n	80099ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099a8:	2337      	movs	r3, #55	; 0x37
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	2200      	movs	r2, #0
 80099bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff f978 	bl	8008cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	3318      	adds	r3, #24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff f973 	bl	8008cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	2200      	movs	r2, #0
 80099ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	3354      	adds	r3, #84	; 0x54
 80099fc:	2260      	movs	r2, #96	; 0x60
 80099fe:	2100      	movs	r1, #0
 8009a00:	4618      	mov	r0, r3
 8009a02:	f002 fabd 	bl	800bf80 <memset>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <prvInitialiseNewTask+0x140>)
 8009a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	4a0c      	ldr	r2, [pc, #48]	; (8009a40 <prvInitialiseNewTask+0x144>)
 8009a10:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	4a0b      	ldr	r2, [pc, #44]	; (8009a44 <prvInitialiseNewTask+0x148>)
 8009a16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f001 f941 	bl	800aca4 <pxPortInitialiseStack>
 8009a22:	4602      	mov	r2, r0
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a34:	bf00      	nop
 8009a36:	3720      	adds	r7, #32
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	0800c22c 	.word	0x0800c22c
 8009a40:	0800c24c 	.word	0x0800c24c
 8009a44:	0800c20c 	.word	0x0800c20c

08009a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a50:	f001 fa58 	bl	800af04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a54:	4b2d      	ldr	r3, [pc, #180]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a2c      	ldr	r2, [pc, #176]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a5e:	4b2c      	ldr	r3, [pc, #176]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a66:	4a2a      	ldr	r2, [pc, #168]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d110      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a74:	f000 fc26 	bl	800a2c4 <prvInitialiseTaskLists>
 8009a78:	e00d      	b.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a7a:	4b26      	ldr	r3, [pc, #152]	; (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d802      	bhi.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a90:	4a1f      	ldr	r2, [pc, #124]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a96:	4b20      	ldr	r3, [pc, #128]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <prvAddNewTaskToReadyList+0x74>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	4a18      	ldr	r2, [pc, #96]	; (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <prvAddNewTaskToReadyList+0xd8>)
 8009aca:	441a      	add	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7ff f8fd 	bl	8008cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 fa44 	bl	800af64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d207      	bcs.n	8009b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <prvAddNewTaskToReadyList+0xdc>)
 8009af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000e5c 	.word	0x20000e5c
 8009b10:	20000988 	.word	0x20000988
 8009b14:	20000e68 	.word	0x20000e68
 8009b18:	20000e78 	.word	0x20000e78
 8009b1c:	20000e64 	.word	0x20000e64
 8009b20:	2000098c 	.word	0x2000098c
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d017      	beq.n	8009b6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <vTaskDelay+0x60>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <vTaskDelay+0x30>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b58:	f000 f88a 	bl	8009c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fcfe 	bl	800a560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b64:	f000 f892 	bl	8009c8c <xTaskResumeAll>
 8009b68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d107      	bne.n	8009b80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <vTaskDelay+0x64>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000e84 	.word	0x20000e84
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	1d39      	adds	r1, r7, #4
 8009ba2:	f107 0308 	add.w	r3, r7, #8
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff f832 	bl	8008c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	9202      	str	r2, [sp, #8]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	460a      	mov	r2, r1
 8009bbe:	4924      	ldr	r1, [pc, #144]	; (8009c50 <vTaskStartScheduler+0xc0>)
 8009bc0:	4824      	ldr	r0, [pc, #144]	; (8009c54 <vTaskStartScheduler+0xc4>)
 8009bc2:	f7ff fdf9 	bl	80097b8 <xTaskCreateStatic>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a23      	ldr	r2, [pc, #140]	; (8009c58 <vTaskStartScheduler+0xc8>)
 8009bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bcc:	4b22      	ldr	r3, [pc, #136]	; (8009c58 <vTaskStartScheduler+0xc8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	e001      	b.n	8009bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d102      	bne.n	8009bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009be4:	f000 fd10 	bl	800a608 <xTimerCreateTimerTask>
 8009be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d11b      	bne.n	8009c28 <vTaskStartScheduler+0x98>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	613b      	str	r3, [r7, #16]
}
 8009c02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c04:	4b15      	ldr	r3, [pc, #84]	; (8009c5c <vTaskStartScheduler+0xcc>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3354      	adds	r3, #84	; 0x54
 8009c0a:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <vTaskStartScheduler+0xd0>)
 8009c0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c0e:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <vTaskStartScheduler+0xd4>)
 8009c10:	f04f 32ff 	mov.w	r2, #4294967295
 8009c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c16:	4b14      	ldr	r3, [pc, #80]	; (8009c68 <vTaskStartScheduler+0xd8>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c1c:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <vTaskStartScheduler+0xdc>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c22:	f001 f8cd 	bl	800adc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c26:	e00e      	b.n	8009c46 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d10a      	bne.n	8009c46 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <vTaskStartScheduler+0xb4>
}
 8009c46:	bf00      	nop
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	0800c148 	.word	0x0800c148
 8009c54:	0800a295 	.word	0x0800a295
 8009c58:	20000e80 	.word	0x20000e80
 8009c5c:	20000988 	.word	0x20000988
 8009c60:	20000188 	.word	0x20000188
 8009c64:	20000e7c 	.word	0x20000e7c
 8009c68:	20000e68 	.word	0x20000e68
 8009c6c:	20000e60 	.word	0x20000e60

08009c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c70:	b480      	push	{r7}
 8009c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c74:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <vTaskSuspendAll+0x18>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	4a03      	ldr	r2, [pc, #12]	; (8009c88 <vTaskSuspendAll+0x18>)
 8009c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c7e:	bf00      	nop
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	20000e84 	.word	0x20000e84

08009c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c9a:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <xTaskResumeAll+0x118>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	603b      	str	r3, [r7, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cb8:	f001 f924 	bl	800af04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cbc:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <xTaskResumeAll+0x118>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4a38      	ldr	r2, [pc, #224]	; (8009da4 <xTaskResumeAll+0x118>)
 8009cc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc6:	4b37      	ldr	r3, [pc, #220]	; (8009da4 <xTaskResumeAll+0x118>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d162      	bne.n	8009d94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cce:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <xTaskResumeAll+0x11c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d05e      	beq.n	8009d94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cd6:	e02f      	b.n	8009d38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd8:	4b34      	ldr	r3, [pc, #208]	; (8009dac <xTaskResumeAll+0x120>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3318      	adds	r3, #24
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff f851 	bl	8008d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff f84c 	bl	8008d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	4b2d      	ldr	r3, [pc, #180]	; (8009db0 <xTaskResumeAll+0x124>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d903      	bls.n	8009d08 <xTaskResumeAll+0x7c>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	4a2a      	ldr	r2, [pc, #168]	; (8009db0 <xTaskResumeAll+0x124>)
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <xTaskResumeAll+0x128>)
 8009d16:	441a      	add	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f7fe ffd7 	bl	8008cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d28:	4b23      	ldr	r3, [pc, #140]	; (8009db8 <xTaskResumeAll+0x12c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d32:	4b22      	ldr	r3, [pc, #136]	; (8009dbc <xTaskResumeAll+0x130>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d38:	4b1c      	ldr	r3, [pc, #112]	; (8009dac <xTaskResumeAll+0x120>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1cb      	bne.n	8009cd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d46:	f000 fb5f 	bl	800a408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d4a:	4b1d      	ldr	r3, [pc, #116]	; (8009dc0 <xTaskResumeAll+0x134>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d010      	beq.n	8009d78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d56:	f000 f847 	bl	8009de8 <xTaskIncrementTick>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d60:	4b16      	ldr	r3, [pc, #88]	; (8009dbc <xTaskResumeAll+0x130>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f1      	bne.n	8009d56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d72:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <xTaskResumeAll+0x134>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d78:	4b10      	ldr	r3, [pc, #64]	; (8009dbc <xTaskResumeAll+0x130>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <xTaskResumeAll+0x138>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d94:	f001 f8e6 	bl	800af64 <vPortExitCritical>

	return xAlreadyYielded;
 8009d98:	68bb      	ldr	r3, [r7, #8]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000e84 	.word	0x20000e84
 8009da8:	20000e5c 	.word	0x20000e5c
 8009dac:	20000e1c 	.word	0x20000e1c
 8009db0:	20000e64 	.word	0x20000e64
 8009db4:	2000098c 	.word	0x2000098c
 8009db8:	20000988 	.word	0x20000988
 8009dbc:	20000e70 	.word	0x20000e70
 8009dc0:	20000e6c 	.word	0x20000e6c
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <xTaskGetTickCount+0x1c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dd4:	687b      	ldr	r3, [r7, #4]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000e60 	.word	0x20000e60

08009de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df2:	4b4f      	ldr	r3, [pc, #316]	; (8009f30 <xTaskIncrementTick+0x148>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 808f 	bne.w	8009f1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dfc:	4b4d      	ldr	r3, [pc, #308]	; (8009f34 <xTaskIncrementTick+0x14c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e04:	4a4b      	ldr	r2, [pc, #300]	; (8009f34 <xTaskIncrementTick+0x14c>)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d120      	bne.n	8009e52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e10:	4b49      	ldr	r3, [pc, #292]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	603b      	str	r3, [r7, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xTaskIncrementTick+0x46>
 8009e30:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	4b41      	ldr	r3, [pc, #260]	; (8009f3c <xTaskIncrementTick+0x154>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4a3f      	ldr	r2, [pc, #252]	; (8009f3c <xTaskIncrementTick+0x154>)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <xTaskIncrementTick+0x158>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	4a3d      	ldr	r2, [pc, #244]	; (8009f40 <xTaskIncrementTick+0x158>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	f000 fadb 	bl	800a408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e52:	4b3c      	ldr	r3, [pc, #240]	; (8009f44 <xTaskIncrementTick+0x15c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d349      	bcc.n	8009ef0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e5c:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e66:	4b37      	ldr	r3, [pc, #220]	; (8009f44 <xTaskIncrementTick+0x15c>)
 8009e68:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6c:	601a      	str	r2, [r3, #0]
					break;
 8009e6e:	e03f      	b.n	8009ef0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e70:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d203      	bcs.n	8009e90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e88:	4a2e      	ldr	r2, [pc, #184]	; (8009f44 <xTaskIncrementTick+0x15c>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e8e:	e02f      	b.n	8009ef0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe ff79 	bl	8008d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d004      	beq.n	8009eac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3318      	adds	r3, #24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe ff70 	bl	8008d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <xTaskIncrementTick+0x160>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d903      	bls.n	8009ec0 <xTaskIncrementTick+0xd8>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4a22      	ldr	r2, [pc, #136]	; (8009f48 <xTaskIncrementTick+0x160>)
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <xTaskIncrementTick+0x164>)
 8009ece:	441a      	add	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f7fe fefb 	bl	8008cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	4b1b      	ldr	r3, [pc, #108]	; (8009f50 <xTaskIncrementTick+0x168>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d3b8      	bcc.n	8009e5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009eea:	2301      	movs	r3, #1
 8009eec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eee:	e7b5      	b.n	8009e5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <xTaskIncrementTick+0x168>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	4915      	ldr	r1, [pc, #84]	; (8009f4c <xTaskIncrementTick+0x164>)
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d901      	bls.n	8009f0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f0c:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <xTaskIncrementTick+0x16c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f14:	2301      	movs	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e004      	b.n	8009f24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <xTaskIncrementTick+0x170>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	4a0d      	ldr	r2, [pc, #52]	; (8009f58 <xTaskIncrementTick+0x170>)
 8009f22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f24:	697b      	ldr	r3, [r7, #20]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000e84 	.word	0x20000e84
 8009f34:	20000e60 	.word	0x20000e60
 8009f38:	20000e14 	.word	0x20000e14
 8009f3c:	20000e18 	.word	0x20000e18
 8009f40:	20000e74 	.word	0x20000e74
 8009f44:	20000e7c 	.word	0x20000e7c
 8009f48:	20000e64 	.word	0x20000e64
 8009f4c:	2000098c 	.word	0x2000098c
 8009f50:	20000988 	.word	0x20000988
 8009f54:	20000e70 	.word	0x20000e70
 8009f58:	20000e6c 	.word	0x20000e6c

08009f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f62:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <vTaskSwitchContext+0xb0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f6a:	4b29      	ldr	r3, [pc, #164]	; (800a010 <vTaskSwitchContext+0xb4>)
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f70:	e046      	b.n	800a000 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f72:	4b27      	ldr	r3, [pc, #156]	; (800a010 <vTaskSwitchContext+0xb4>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f78:	4b26      	ldr	r3, [pc, #152]	; (800a014 <vTaskSwitchContext+0xb8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e010      	b.n	8009fa2 <vTaskSwitchContext+0x46>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <vTaskSwitchContext+0x40>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	607b      	str	r3, [r7, #4]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <vTaskSwitchContext+0x3e>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	491d      	ldr	r1, [pc, #116]	; (800a018 <vTaskSwitchContext+0xbc>)
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0e4      	beq.n	8009f80 <vTaskSwitchContext+0x24>
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4a15      	ldr	r2, [pc, #84]	; (800a018 <vTaskSwitchContext+0xbc>)
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60bb      	str	r3, [r7, #8]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	605a      	str	r2, [r3, #4]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d104      	bne.n	8009fe6 <vTaskSwitchContext+0x8a>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a0b      	ldr	r2, [pc, #44]	; (800a01c <vTaskSwitchContext+0xc0>)
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	4a08      	ldr	r2, [pc, #32]	; (800a014 <vTaskSwitchContext+0xb8>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ff6:	4b09      	ldr	r3, [pc, #36]	; (800a01c <vTaskSwitchContext+0xc0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3354      	adds	r3, #84	; 0x54
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <vTaskSwitchContext+0xc4>)
 8009ffe:	6013      	str	r3, [r2, #0]
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000e84 	.word	0x20000e84
 800a010:	20000e70 	.word	0x20000e70
 800a014:	20000e64 	.word	0x20000e64
 800a018:	2000098c 	.word	0x2000098c
 800a01c:	20000988 	.word	0x20000988
 800a020:	20000188 	.word	0x20000188

0800a024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a04a:	4b07      	ldr	r3, [pc, #28]	; (800a068 <vTaskPlaceOnEventList+0x44>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3318      	adds	r3, #24
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7fe fe61 	bl	8008d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a058:	2101      	movs	r1, #1
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f000 fa80 	bl	800a560 <prvAddCurrentTaskToDelayedList>
}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000988 	.word	0x20000988

0800a06c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	617b      	str	r3, [r7, #20]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a094:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3318      	adds	r3, #24
 800a09a:	4619      	mov	r1, r3
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7fe fe18 	bl	8008cd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	68b8      	ldr	r0, [r7, #8]
 800a0b2:	f000 fa55 	bl	800a560 <prvAddCurrentTaskToDelayedList>
	}
 800a0b6:	bf00      	nop
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000988 	.word	0x20000988

0800a0c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60fb      	str	r3, [r7, #12]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	3318      	adds	r3, #24
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fe49 	bl	8008d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0fa:	4b1e      	ldr	r3, [pc, #120]	; (800a174 <xTaskRemoveFromEventList+0xb0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d11d      	bne.n	800a13e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3304      	adds	r3, #4
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fe40 	bl	8008d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	4b19      	ldr	r3, [pc, #100]	; (800a178 <xTaskRemoveFromEventList+0xb4>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d903      	bls.n	800a120 <xTaskRemoveFromEventList+0x5c>
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	4a16      	ldr	r2, [pc, #88]	; (800a178 <xTaskRemoveFromEventList+0xb4>)
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4a13      	ldr	r2, [pc, #76]	; (800a17c <xTaskRemoveFromEventList+0xb8>)
 800a12e:	441a      	add	r2, r3
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fe fdcb 	bl	8008cd2 <vListInsertEnd>
 800a13c:	e005      	b.n	800a14a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	3318      	adds	r3, #24
 800a142:	4619      	mov	r1, r3
 800a144:	480e      	ldr	r0, [pc, #56]	; (800a180 <xTaskRemoveFromEventList+0xbc>)
 800a146:	f7fe fdc4 	bl	8008cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14e:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <xTaskRemoveFromEventList+0xc0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	429a      	cmp	r2, r3
 800a156:	d905      	bls.n	800a164 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <xTaskRemoveFromEventList+0xc4>)
 800a15e:	2201      	movs	r2, #1
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	e001      	b.n	800a168 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a168:	697b      	ldr	r3, [r7, #20]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000e84 	.word	0x20000e84
 800a178:	20000e64 	.word	0x20000e64
 800a17c:	2000098c 	.word	0x2000098c
 800a180:	20000e1c 	.word	0x20000e1c
 800a184:	20000988 	.word	0x20000988
 800a188:	20000e70 	.word	0x20000e70

0800a18c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a194:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <vTaskInternalSetTimeOutState+0x24>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a19c:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <vTaskInternalSetTimeOutState+0x28>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	605a      	str	r2, [r3, #4]
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	20000e74 	.word	0x20000e74
 800a1b4:	20000e60 	.word	0x20000e60

0800a1b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	613b      	str	r3, [r7, #16]
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10a      	bne.n	800a1fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	60fb      	str	r3, [r7, #12]
}
 800a1f6:	bf00      	nop
 800a1f8:	e7fe      	b.n	800a1f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1fa:	f000 fe83 	bl	800af04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1fe:	4b1d      	ldr	r3, [pc, #116]	; (800a274 <xTaskCheckForTimeOut+0xbc>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a216:	d102      	bne.n	800a21e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a218:	2300      	movs	r3, #0
 800a21a:	61fb      	str	r3, [r7, #28]
 800a21c:	e023      	b.n	800a266 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4b15      	ldr	r3, [pc, #84]	; (800a278 <xTaskCheckForTimeOut+0xc0>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d007      	beq.n	800a23a <xTaskCheckForTimeOut+0x82>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	429a      	cmp	r2, r3
 800a232:	d302      	bcc.n	800a23a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a234:	2301      	movs	r3, #1
 800a236:	61fb      	str	r3, [r7, #28]
 800a238:	e015      	b.n	800a266 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	429a      	cmp	r2, r3
 800a242:	d20b      	bcs.n	800a25c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	1ad2      	subs	r2, r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff ff9b 	bl	800a18c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a256:	2300      	movs	r3, #0
 800a258:	61fb      	str	r3, [r7, #28]
 800a25a:	e004      	b.n	800a266 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a262:	2301      	movs	r3, #1
 800a264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a266:	f000 fe7d 	bl	800af64 <vPortExitCritical>

	return xReturn;
 800a26a:	69fb      	ldr	r3, [r7, #28]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000e60 	.word	0x20000e60
 800a278:	20000e74 	.word	0x20000e74

0800a27c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a280:	4b03      	ldr	r3, [pc, #12]	; (800a290 <vTaskMissedYield+0x14>)
 800a282:	2201      	movs	r2, #1
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	20000e70 	.word	0x20000e70

0800a294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a29c:	f000 f852 	bl	800a344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2a0:	4b06      	ldr	r3, [pc, #24]	; (800a2bc <prvIdleTask+0x28>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d9f9      	bls.n	800a29c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <prvIdleTask+0x2c>)
 800a2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2b8:	e7f0      	b.n	800a29c <prvIdleTask+0x8>
 800a2ba:	bf00      	nop
 800a2bc:	2000098c 	.word	0x2000098c
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	607b      	str	r3, [r7, #4]
 800a2ce:	e00c      	b.n	800a2ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4a12      	ldr	r2, [pc, #72]	; (800a324 <prvInitialiseTaskLists+0x60>)
 800a2dc:	4413      	add	r3, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fcca 	bl	8008c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b37      	cmp	r3, #55	; 0x37
 800a2ee:	d9ef      	bls.n	800a2d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2f0:	480d      	ldr	r0, [pc, #52]	; (800a328 <prvInitialiseTaskLists+0x64>)
 800a2f2:	f7fe fcc1 	bl	8008c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2f6:	480d      	ldr	r0, [pc, #52]	; (800a32c <prvInitialiseTaskLists+0x68>)
 800a2f8:	f7fe fcbe 	bl	8008c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2fc:	480c      	ldr	r0, [pc, #48]	; (800a330 <prvInitialiseTaskLists+0x6c>)
 800a2fe:	f7fe fcbb 	bl	8008c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a302:	480c      	ldr	r0, [pc, #48]	; (800a334 <prvInitialiseTaskLists+0x70>)
 800a304:	f7fe fcb8 	bl	8008c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a308:	480b      	ldr	r0, [pc, #44]	; (800a338 <prvInitialiseTaskLists+0x74>)
 800a30a:	f7fe fcb5 	bl	8008c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <prvInitialiseTaskLists+0x78>)
 800a310:	4a05      	ldr	r2, [pc, #20]	; (800a328 <prvInitialiseTaskLists+0x64>)
 800a312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a314:	4b0a      	ldr	r3, [pc, #40]	; (800a340 <prvInitialiseTaskLists+0x7c>)
 800a316:	4a05      	ldr	r2, [pc, #20]	; (800a32c <prvInitialiseTaskLists+0x68>)
 800a318:	601a      	str	r2, [r3, #0]
}
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	2000098c 	.word	0x2000098c
 800a328:	20000dec 	.word	0x20000dec
 800a32c:	20000e00 	.word	0x20000e00
 800a330:	20000e1c 	.word	0x20000e1c
 800a334:	20000e30 	.word	0x20000e30
 800a338:	20000e48 	.word	0x20000e48
 800a33c:	20000e14 	.word	0x20000e14
 800a340:	20000e18 	.word	0x20000e18

0800a344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a34a:	e019      	b.n	800a380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a34c:	f000 fdda 	bl	800af04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a350:	4b10      	ldr	r3, [pc, #64]	; (800a394 <prvCheckTasksWaitingTermination+0x50>)
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe fd15 	bl	8008d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a362:	4b0d      	ldr	r3, [pc, #52]	; (800a398 <prvCheckTasksWaitingTermination+0x54>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3b01      	subs	r3, #1
 800a368:	4a0b      	ldr	r2, [pc, #44]	; (800a398 <prvCheckTasksWaitingTermination+0x54>)
 800a36a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a36c:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <prvCheckTasksWaitingTermination+0x58>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3b01      	subs	r3, #1
 800a372:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <prvCheckTasksWaitingTermination+0x58>)
 800a374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a376:	f000 fdf5 	bl	800af64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f810 	bl	800a3a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a380:	4b06      	ldr	r3, [pc, #24]	; (800a39c <prvCheckTasksWaitingTermination+0x58>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e1      	bne.n	800a34c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000e30 	.word	0x20000e30
 800a398:	20000e5c 	.word	0x20000e5c
 800a39c:	20000e44 	.word	0x20000e44

0800a3a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3354      	adds	r3, #84	; 0x54
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f001 fdfd 	bl	800bfac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d108      	bne.n	800a3ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 ff8d 	bl	800b2e0 <vPortFree>
				vPortFree( pxTCB );
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 ff8a 	bl	800b2e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3cc:	e018      	b.n	800a400 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d103      	bne.n	800a3e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 ff81 	bl	800b2e0 <vPortFree>
	}
 800a3de:	e00f      	b.n	800a400 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d00a      	beq.n	800a400 <prvDeleteTCB+0x60>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	60fb      	str	r3, [r7, #12]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <prvDeleteTCB+0x5e>
	}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a40e:	4b0c      	ldr	r3, [pc, #48]	; (800a440 <prvResetNextTaskUnblockTime+0x38>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d104      	bne.n	800a422 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a418:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <prvResetNextTaskUnblockTime+0x3c>)
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295
 800a41e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a420:	e008      	b.n	800a434 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a422:	4b07      	ldr	r3, [pc, #28]	; (800a440 <prvResetNextTaskUnblockTime+0x38>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	4a04      	ldr	r2, [pc, #16]	; (800a444 <prvResetNextTaskUnblockTime+0x3c>)
 800a432:	6013      	str	r3, [r2, #0]
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20000e14 	.word	0x20000e14
 800a444:	20000e7c 	.word	0x20000e7c

0800a448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a44e:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <xTaskGetSchedulerState+0x34>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d102      	bne.n	800a45c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a456:	2301      	movs	r3, #1
 800a458:	607b      	str	r3, [r7, #4]
 800a45a:	e008      	b.n	800a46e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45c:	4b08      	ldr	r3, [pc, #32]	; (800a480 <xTaskGetSchedulerState+0x38>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d102      	bne.n	800a46a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a464:	2302      	movs	r3, #2
 800a466:	607b      	str	r3, [r7, #4]
 800a468:	e001      	b.n	800a46e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a46a:	2300      	movs	r3, #0
 800a46c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a46e:	687b      	ldr	r3, [r7, #4]
	}
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	20000e68 	.word	0x20000e68
 800a480:	20000e84 	.word	0x20000e84

0800a484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a490:	2300      	movs	r3, #0
 800a492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d056      	beq.n	800a548 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a49a:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <xTaskPriorityDisinherit+0xd0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d00a      	beq.n	800a4ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	60fb      	str	r3, [r7, #12]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60bb      	str	r3, [r7, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4dc:	1e5a      	subs	r2, r3, #1
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d02c      	beq.n	800a548 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d128      	bne.n	800a548 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fc46 	bl	8008d8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <xTaskPriorityDisinherit+0xd4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d903      	bls.n	800a528 <xTaskPriorityDisinherit+0xa4>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a0c      	ldr	r2, [pc, #48]	; (800a558 <xTaskPriorityDisinherit+0xd4>)
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4a09      	ldr	r2, [pc, #36]	; (800a55c <xTaskPriorityDisinherit+0xd8>)
 800a536:	441a      	add	r2, r3
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f7fe fbc7 	bl	8008cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a548:	697b      	ldr	r3, [r7, #20]
	}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20000988 	.word	0x20000988
 800a558:	20000e64 	.word	0x20000e64
 800a55c:	2000098c 	.word	0x2000098c

0800a560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a56a:	4b21      	ldr	r3, [pc, #132]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a570:	4b20      	ldr	r3, [pc, #128]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3304      	adds	r3, #4
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fc08 	bl	8008d8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d10a      	bne.n	800a59a <prvAddCurrentTaskToDelayedList+0x3a>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d007      	beq.n	800a59a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a58a:	4b1a      	ldr	r3, [pc, #104]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3304      	adds	r3, #4
 800a590:	4619      	mov	r1, r3
 800a592:	4819      	ldr	r0, [pc, #100]	; (800a5f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a594:	f7fe fb9d 	bl	8008cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a598:	e026      	b.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d209      	bcs.n	800a5c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5b2:	4b12      	ldr	r3, [pc, #72]	; (800a5fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7fe fbab 	bl	8008d1a <vListInsert>
}
 800a5c4:	e010      	b.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5c6:	4b0e      	ldr	r3, [pc, #56]	; (800a600 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	f7fe fba1 	bl	8008d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5d8:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d202      	bcs.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5e2:	4a08      	ldr	r2, [pc, #32]	; (800a604 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6013      	str	r3, [r2, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	20000e60 	.word	0x20000e60
 800a5f4:	20000988 	.word	0x20000988
 800a5f8:	20000e48 	.word	0x20000e48
 800a5fc:	20000e18 	.word	0x20000e18
 800a600:	20000e14 	.word	0x20000e14
 800a604:	20000e7c 	.word	0x20000e7c

0800a608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a612:	f000 fb07 	bl	800ac24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a616:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <xTimerCreateTimerTask+0x80>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d021      	beq.n	800a662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a626:	1d3a      	adds	r2, r7, #4
 800a628:	f107 0108 	add.w	r1, r7, #8
 800a62c:	f107 030c 	add.w	r3, r7, #12
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fb07 	bl	8008c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	9202      	str	r2, [sp, #8]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	2302      	movs	r3, #2
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	2300      	movs	r3, #0
 800a646:	460a      	mov	r2, r1
 800a648:	4910      	ldr	r1, [pc, #64]	; (800a68c <xTimerCreateTimerTask+0x84>)
 800a64a:	4811      	ldr	r0, [pc, #68]	; (800a690 <xTimerCreateTimerTask+0x88>)
 800a64c:	f7ff f8b4 	bl	80097b8 <xTaskCreateStatic>
 800a650:	4603      	mov	r3, r0
 800a652:	4a10      	ldr	r2, [pc, #64]	; (800a694 <xTimerCreateTimerTask+0x8c>)
 800a654:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <xTimerCreateTimerTask+0x8c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a65e:	2301      	movs	r3, #1
 800a660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	613b      	str	r3, [r7, #16]
}
 800a67a:	bf00      	nop
 800a67c:	e7fe      	b.n	800a67c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a67e:	697b      	ldr	r3, [r7, #20]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000eb8 	.word	0x20000eb8
 800a68c:	0800c150 	.word	0x0800c150
 800a690:	0800a7cd 	.word	0x0800a7cd
 800a694:	20000ebc 	.word	0x20000ebc

0800a698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	; 0x28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	623b      	str	r3, [r7, #32]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <xTimerGenericCommand+0x98>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d02a      	beq.n	800a724 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b05      	cmp	r3, #5
 800a6de:	dc18      	bgt.n	800a712 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6e0:	f7ff feb2 	bl	800a448 <xTaskGetSchedulerState>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d109      	bne.n	800a6fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6ea:	4b11      	ldr	r3, [pc, #68]	; (800a730 <xTimerGenericCommand+0x98>)
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f107 0110 	add.w	r1, r7, #16
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f6:	f7fe fc77 	bl	8008fe8 <xQueueGenericSend>
 800a6fa:	6278      	str	r0, [r7, #36]	; 0x24
 800a6fc:	e012      	b.n	800a724 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <xTimerGenericCommand+0x98>)
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	f107 0110 	add.w	r1, r7, #16
 800a706:	2300      	movs	r3, #0
 800a708:	2200      	movs	r2, #0
 800a70a:	f7fe fc6d 	bl	8008fe8 <xQueueGenericSend>
 800a70e:	6278      	str	r0, [r7, #36]	; 0x24
 800a710:	e008      	b.n	800a724 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a712:	4b07      	ldr	r3, [pc, #28]	; (800a730 <xTimerGenericCommand+0x98>)
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	f107 0110 	add.w	r1, r7, #16
 800a71a:	2300      	movs	r3, #0
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	f7fe fd61 	bl	80091e4 <xQueueGenericSendFromISR>
 800a722:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a726:	4618      	mov	r0, r3
 800a728:	3728      	adds	r7, #40	; 0x28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20000eb8 	.word	0x20000eb8

0800a734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af02      	add	r7, sp, #8
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73e:	4b22      	ldr	r3, [pc, #136]	; (800a7c8 <prvProcessExpiredTimer+0x94>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fe fb1d 	bl	8008d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d022      	beq.n	800a7a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	699a      	ldr	r2, [r3, #24]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	18d1      	adds	r1, r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	6978      	ldr	r0, [r7, #20]
 800a76e:	f000 f8d1 	bl	800a914 <prvInsertTimerInActiveList>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d01f      	beq.n	800a7b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a778:	2300      	movs	r3, #0
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	2100      	movs	r1, #0
 800a782:	6978      	ldr	r0, [r7, #20]
 800a784:	f7ff ff88 	bl	800a698 <xTimerGenericCommand>
 800a788:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d113      	bne.n	800a7b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ac:	f023 0301 	bic.w	r3, r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	6978      	ldr	r0, [r7, #20]
 800a7be:	4798      	blx	r3
}
 800a7c0:	bf00      	nop
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000eb0 	.word	0x20000eb0

0800a7cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7d4:	f107 0308 	add.w	r3, r7, #8
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 f857 	bl	800a88c <prvGetNextExpireTime>
 800a7de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 f803 	bl	800a7f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7ea:	f000 f8d5 	bl	800a998 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7ee:	e7f1      	b.n	800a7d4 <prvTimerTask+0x8>

0800a7f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7fa:	f7ff fa39 	bl	8009c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f866 	bl	800a8d4 <prvSampleTimeNow>
 800a808:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d130      	bne.n	800a872 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <prvProcessTimerOrBlockTask+0x3c>
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d806      	bhi.n	800a82c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a81e:	f7ff fa35 	bl	8009c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a822:	68f9      	ldr	r1, [r7, #12]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff ff85 	bl	800a734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a82a:	e024      	b.n	800a876 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d008      	beq.n	800a844 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <prvProcessTimerOrBlockTask+0x90>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <prvProcessTimerOrBlockTask+0x50>
 800a83c:	2301      	movs	r3, #1
 800a83e:	e000      	b.n	800a842 <prvProcessTimerOrBlockTask+0x52>
 800a840:	2300      	movs	r3, #0
 800a842:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a844:	4b0f      	ldr	r3, [pc, #60]	; (800a884 <prvProcessTimerOrBlockTask+0x94>)
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	4619      	mov	r1, r3
 800a852:	f7fe ff7d 	bl	8009750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a856:	f7ff fa19 	bl	8009c8c <xTaskResumeAll>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a860:	4b09      	ldr	r3, [pc, #36]	; (800a888 <prvProcessTimerOrBlockTask+0x98>)
 800a862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
}
 800a870:	e001      	b.n	800a876 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a872:	f7ff fa0b 	bl	8009c8c <xTaskResumeAll>
}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000eb4 	.word	0x20000eb4
 800a884:	20000eb8 	.word	0x20000eb8
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a894:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <prvGetNextExpireTime+0x44>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <prvGetNextExpireTime+0x16>
 800a89e:	2201      	movs	r2, #1
 800a8a0:	e000      	b.n	800a8a4 <prvGetNextExpireTime+0x18>
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d105      	bne.n	800a8bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <prvGetNextExpireTime+0x44>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	e001      	b.n	800a8c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	20000eb0 	.word	0x20000eb0

0800a8d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8dc:	f7ff fa74 	bl	8009dc8 <xTaskGetTickCount>
 800a8e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <prvSampleTimeNow+0x3c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d205      	bcs.n	800a8f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8ec:	f000 f936 	bl	800ab5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	e002      	b.n	800a8fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8fe:	4a04      	ldr	r2, [pc, #16]	; (800a910 <prvSampleTimeNow+0x3c>)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a904:	68fb      	ldr	r3, [r7, #12]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000ec0 	.word	0x20000ec0

0800a914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d812      	bhi.n	800a960 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	1ad2      	subs	r2, r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	429a      	cmp	r2, r3
 800a946:	d302      	bcc.n	800a94e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a948:	2301      	movs	r3, #1
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	e01b      	b.n	800a986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a94e:	4b10      	ldr	r3, [pc, #64]	; (800a990 <prvInsertTimerInActiveList+0x7c>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3304      	adds	r3, #4
 800a956:	4619      	mov	r1, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	f7fe f9de 	bl	8008d1a <vListInsert>
 800a95e:	e012      	b.n	800a986 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d206      	bcs.n	800a976 <prvInsertTimerInActiveList+0x62>
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d302      	bcc.n	800a976 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e007      	b.n	800a986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <prvInsertTimerInActiveList+0x80>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fe f9ca 	bl	8008d1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a986:	697b      	ldr	r3, [r7, #20]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	20000eb4 	.word	0x20000eb4
 800a994:	20000eb0 	.word	0x20000eb0

0800a998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08e      	sub	sp, #56	; 0x38
 800a99c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a99e:	e0ca      	b.n	800ab36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	da18      	bge.n	800a9d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9a6:	1d3b      	adds	r3, r7, #4
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	61fb      	str	r3, [r7, #28]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ce:	6850      	ldr	r0, [r2, #4]
 800a9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d2:	6892      	ldr	r2, [r2, #8]
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f2c0 80aa 	blt.w	800ab34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d004      	beq.n	800a9f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe f9cb 	bl	8008d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff ff6b 	bl	800a8d4 <prvSampleTimeNow>
 800a9fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b09      	cmp	r3, #9
 800aa04:	f200 8097 	bhi.w	800ab36 <prvProcessReceivedCommands+0x19e>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <prvProcessReceivedCommands+0x78>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa39 	.word	0x0800aa39
 800aa14:	0800aa39 	.word	0x0800aa39
 800aa18:	0800aa39 	.word	0x0800aa39
 800aa1c:	0800aaad 	.word	0x0800aaad
 800aa20:	0800aac1 	.word	0x0800aac1
 800aa24:	0800ab0b 	.word	0x0800ab0b
 800aa28:	0800aa39 	.word	0x0800aa39
 800aa2c:	0800aa39 	.word	0x0800aa39
 800aa30:	0800aaad 	.word	0x0800aaad
 800aa34:	0800aac1 	.word	0x0800aac1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	18d1      	adds	r1, r2, r3
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa58:	f7ff ff5c 	bl	800a914 <prvInsertTimerInActiveList>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d069      	beq.n	800ab36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d05e      	beq.n	800ab36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	441a      	add	r2, r3
 800aa80:	2300      	movs	r3, #0
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	2300      	movs	r3, #0
 800aa86:	2100      	movs	r1, #0
 800aa88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa8a:	f7ff fe05 	bl	800a698 <xTimerGenericCommand>
 800aa8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d14f      	bne.n	800ab36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	61bb      	str	r3, [r7, #24]
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab2:	f023 0301 	bic.w	r3, r3, #1
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aabe:	e03a      	b.n	800ab36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10a      	bne.n	800aaf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	617b      	str	r3, [r7, #20]
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	699a      	ldr	r2, [r3, #24]
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	18d1      	adds	r1, r2, r3
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab04:	f7ff ff06 	bl	800a914 <prvInsertTimerInActiveList>
					break;
 800ab08:	e015      	b.n	800ab36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d103      	bne.n	800ab20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab1a:	f000 fbe1 	bl	800b2e0 <vPortFree>
 800ab1e:	e00a      	b.n	800ab36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab26:	f023 0301 	bic.w	r3, r3, #1
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab32:	e000      	b.n	800ab36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ab34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab36:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <prvProcessReceivedCommands+0x1c0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	1d39      	adds	r1, r7, #4
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe fbec 	bl	800931c <xQueueReceive>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f47f af2a 	bne.w	800a9a0 <prvProcessReceivedCommands+0x8>
	}
}
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	3730      	adds	r7, #48	; 0x30
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000eb8 	.word	0x20000eb8

0800ab5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b088      	sub	sp, #32
 800ab60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab62:	e048      	b.n	800abf6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab64:	4b2d      	ldr	r3, [pc, #180]	; (800ac1c <prvSwitchTimerLists+0xc0>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab6e:	4b2b      	ldr	r3, [pc, #172]	; (800ac1c <prvSwitchTimerLists+0xc0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe f905 	bl	8008d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d02e      	beq.n	800abf6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	4413      	add	r3, r2
 800aba0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d90e      	bls.n	800abc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abb6:	4b19      	ldr	r3, [pc, #100]	; (800ac1c <prvSwitchTimerLists+0xc0>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f7fe f8aa 	bl	8008d1a <vListInsert>
 800abc6:	e016      	b.n	800abf6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abc8:	2300      	movs	r3, #0
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	2300      	movs	r3, #0
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	2100      	movs	r1, #0
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7ff fd60 	bl	800a698 <xTimerGenericCommand>
 800abd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	603b      	str	r3, [r7, #0]
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <prvSwitchTimerLists+0xc0>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1b1      	bne.n	800ab64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac00:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <prvSwitchTimerLists+0xc0>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <prvSwitchTimerLists+0xc4>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a04      	ldr	r2, [pc, #16]	; (800ac1c <prvSwitchTimerLists+0xc0>)
 800ac0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac0e:	4a04      	ldr	r2, [pc, #16]	; (800ac20 <prvSwitchTimerLists+0xc4>)
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	6013      	str	r3, [r2, #0]
}
 800ac14:	bf00      	nop
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	20000eb0 	.word	0x20000eb0
 800ac20:	20000eb4 	.word	0x20000eb4

0800ac24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac2a:	f000 f96b 	bl	800af04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac2e:	4b15      	ldr	r3, [pc, #84]	; (800ac84 <prvCheckForValidListAndQueue+0x60>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d120      	bne.n	800ac78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac36:	4814      	ldr	r0, [pc, #80]	; (800ac88 <prvCheckForValidListAndQueue+0x64>)
 800ac38:	f7fe f81e 	bl	8008c78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac3c:	4813      	ldr	r0, [pc, #76]	; (800ac8c <prvCheckForValidListAndQueue+0x68>)
 800ac3e:	f7fe f81b 	bl	8008c78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac42:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <prvCheckForValidListAndQueue+0x6c>)
 800ac44:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <prvCheckForValidListAndQueue+0x64>)
 800ac46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac48:	4b12      	ldr	r3, [pc, #72]	; (800ac94 <prvCheckForValidListAndQueue+0x70>)
 800ac4a:	4a10      	ldr	r2, [pc, #64]	; (800ac8c <prvCheckForValidListAndQueue+0x68>)
 800ac4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <prvCheckForValidListAndQueue+0x74>)
 800ac54:	4a11      	ldr	r2, [pc, #68]	; (800ac9c <prvCheckForValidListAndQueue+0x78>)
 800ac56:	2110      	movs	r1, #16
 800ac58:	200a      	movs	r0, #10
 800ac5a:	f7fe f929 	bl	8008eb0 <xQueueGenericCreateStatic>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4a08      	ldr	r2, [pc, #32]	; (800ac84 <prvCheckForValidListAndQueue+0x60>)
 800ac62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac64:	4b07      	ldr	r3, [pc, #28]	; (800ac84 <prvCheckForValidListAndQueue+0x60>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac6c:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <prvCheckForValidListAndQueue+0x60>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	490b      	ldr	r1, [pc, #44]	; (800aca0 <prvCheckForValidListAndQueue+0x7c>)
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe fd42 	bl	80096fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac78:	f000 f974 	bl	800af64 <vPortExitCritical>
}
 800ac7c:	bf00      	nop
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20000eb8 	.word	0x20000eb8
 800ac88:	20000e88 	.word	0x20000e88
 800ac8c:	20000e9c 	.word	0x20000e9c
 800ac90:	20000eb0 	.word	0x20000eb0
 800ac94:	20000eb4 	.word	0x20000eb4
 800ac98:	20000f64 	.word	0x20000f64
 800ac9c:	20000ec4 	.word	0x20000ec4
 800aca0:	0800c158 	.word	0x0800c158

0800aca4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3b04      	subs	r3, #4
 800acb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3b04      	subs	r3, #4
 800acc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f023 0201 	bic.w	r2, r3, #1
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3b04      	subs	r3, #4
 800acd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acd4:	4a0c      	ldr	r2, [pc, #48]	; (800ad08 <pxPortInitialiseStack+0x64>)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3b14      	subs	r3, #20
 800acde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3b04      	subs	r3, #4
 800acea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f06f 0202 	mvn.w	r2, #2
 800acf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3b20      	subs	r3, #32
 800acf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acfa:	68fb      	ldr	r3, [r7, #12]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	0800ad0d 	.word	0x0800ad0d

0800ad0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad16:	4b12      	ldr	r3, [pc, #72]	; (800ad60 <prvTaskExitError+0x54>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1e:	d00a      	beq.n	800ad36 <prvTaskExitError+0x2a>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	60fb      	str	r3, [r7, #12]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <prvTaskExitError+0x28>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60bb      	str	r3, [r7, #8]
}
 800ad48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad4a:	bf00      	nop
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0fc      	beq.n	800ad4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad52:	bf00      	nop
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	2000011c 	.word	0x2000011c
	...

0800ad70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <pxCurrentTCBConst2>)
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	6808      	ldr	r0, [r1, #0]
 800ad76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	f380 8809 	msr	PSP, r0
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f04f 0000 	mov.w	r0, #0
 800ad86:	f380 8811 	msr	BASEPRI, r0
 800ad8a:	4770      	bx	lr
 800ad8c:	f3af 8000 	nop.w

0800ad90 <pxCurrentTCBConst2>:
 800ad90:	20000988 	.word	0x20000988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop

0800ad98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad98:	4808      	ldr	r0, [pc, #32]	; (800adbc <prvPortStartFirstTask+0x24>)
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	6800      	ldr	r0, [r0, #0]
 800ad9e:	f380 8808 	msr	MSP, r0
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8814 	msr	CONTROL, r0
 800adaa:	b662      	cpsie	i
 800adac:	b661      	cpsie	f
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	df00      	svc	0
 800adb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adba:	bf00      	nop
 800adbc:	e000ed08 	.word	0xe000ed08

0800adc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adc6:	4b46      	ldr	r3, [pc, #280]	; (800aee0 <xPortStartScheduler+0x120>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a46      	ldr	r2, [pc, #280]	; (800aee4 <xPortStartScheduler+0x124>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d10a      	bne.n	800ade6 <xPortStartScheduler+0x26>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	613b      	str	r3, [r7, #16]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ade6:	4b3e      	ldr	r3, [pc, #248]	; (800aee0 <xPortStartScheduler+0x120>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a3f      	ldr	r2, [pc, #252]	; (800aee8 <xPortStartScheduler+0x128>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d10a      	bne.n	800ae06 <xPortStartScheduler+0x46>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	60fb      	str	r3, [r7, #12]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae06:	4b39      	ldr	r3, [pc, #228]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	22ff      	movs	r2, #255	; 0xff
 800ae16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	4b31      	ldr	r3, [pc, #196]	; (800aef0 <xPortStartScheduler+0x130>)
 800ae2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae2e:	4b31      	ldr	r3, [pc, #196]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae30:	2207      	movs	r2, #7
 800ae32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae34:	e009      	b.n	800ae4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae36:	4b2f      	ldr	r3, [pc, #188]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	4a2d      	ldr	r2, [pc, #180]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b80      	cmp	r3, #128	; 0x80
 800ae54:	d0ef      	beq.n	800ae36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae56:	4b27      	ldr	r3, [pc, #156]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f1c3 0307 	rsb	r3, r3, #7
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d00a      	beq.n	800ae78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	60bb      	str	r3, [r7, #8]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae78:	4b1e      	ldr	r3, [pc, #120]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	4a1d      	ldr	r2, [pc, #116]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae82:	4b1c      	ldr	r3, [pc, #112]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae8a:	4a1a      	ldr	r2, [pc, #104]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae96:	4b18      	ldr	r3, [pc, #96]	; (800aef8 <xPortStartScheduler+0x138>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <xPortStartScheduler+0x138>)
 800ae9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aea2:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <xPortStartScheduler+0x138>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a14      	ldr	r2, [pc, #80]	; (800aef8 <xPortStartScheduler+0x138>)
 800aea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aeac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aeae:	f000 f8dd 	bl	800b06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aeb2:	4b12      	ldr	r3, [pc, #72]	; (800aefc <xPortStartScheduler+0x13c>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aeb8:	f000 f8fc 	bl	800b0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aebc:	4b10      	ldr	r3, [pc, #64]	; (800af00 <xPortStartScheduler+0x140>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a0f      	ldr	r2, [pc, #60]	; (800af00 <xPortStartScheduler+0x140>)
 800aec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aec8:	f7ff ff66 	bl	800ad98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aecc:	f7ff f846 	bl	8009f5c <vTaskSwitchContext>
	prvTaskExitError();
 800aed0:	f7ff ff1c 	bl	800ad0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	e000ed00 	.word	0xe000ed00
 800aee4:	410fc271 	.word	0x410fc271
 800aee8:	410fc270 	.word	0x410fc270
 800aeec:	e000e400 	.word	0xe000e400
 800aef0:	20000fb4 	.word	0x20000fb4
 800aef4:	20000fb8 	.word	0x20000fb8
 800aef8:	e000ed20 	.word	0xe000ed20
 800aefc:	2000011c 	.word	0x2000011c
 800af00:	e000ef34 	.word	0xe000ef34

0800af04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	607b      	str	r3, [r7, #4]
}
 800af1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af1e:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <vPortEnterCritical+0x58>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3301      	adds	r3, #1
 800af24:	4a0d      	ldr	r2, [pc, #52]	; (800af5c <vPortEnterCritical+0x58>)
 800af26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <vPortEnterCritical+0x58>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d10f      	bne.n	800af50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <vPortEnterCritical+0x5c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <vPortEnterCritical+0x4c>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	603b      	str	r3, [r7, #0]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <vPortEnterCritical+0x4a>
	}
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	2000011c 	.word	0x2000011c
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <vPortExitCritical+0x50>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <vPortExitCritical+0x24>
	__asm volatile
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	607b      	str	r3, [r7, #4]
}
 800af84:	bf00      	nop
 800af86:	e7fe      	b.n	800af86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <vPortExitCritical+0x50>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	4a09      	ldr	r2, [pc, #36]	; (800afb4 <vPortExitCritical+0x50>)
 800af90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af92:	4b08      	ldr	r3, [pc, #32]	; (800afb4 <vPortExitCritical+0x50>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d105      	bne.n	800afa6 <vPortExitCritical+0x42>
 800af9a:	2300      	movs	r3, #0
 800af9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	f383 8811 	msr	BASEPRI, r3
}
 800afa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	2000011c 	.word	0x2000011c
	...

0800afc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afc0:	f3ef 8009 	mrs	r0, PSP
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	4b15      	ldr	r3, [pc, #84]	; (800b020 <pxCurrentTCBConst>)
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	f01e 0f10 	tst.w	lr, #16
 800afd0:	bf08      	it	eq
 800afd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afda:	6010      	str	r0, [r2, #0]
 800afdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afe4:	f380 8811 	msr	BASEPRI, r0
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f7fe ffb4 	bl	8009f5c <vTaskSwitchContext>
 800aff4:	f04f 0000 	mov.w	r0, #0
 800aff8:	f380 8811 	msr	BASEPRI, r0
 800affc:	bc09      	pop	{r0, r3}
 800affe:	6819      	ldr	r1, [r3, #0]
 800b000:	6808      	ldr	r0, [r1, #0]
 800b002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b006:	f01e 0f10 	tst.w	lr, #16
 800b00a:	bf08      	it	eq
 800b00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b010:	f380 8809 	msr	PSP, r0
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	f3af 8000 	nop.w

0800b020 <pxCurrentTCBConst>:
 800b020:	20000988 	.word	0x20000988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b024:	bf00      	nop
 800b026:	bf00      	nop

0800b028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	607b      	str	r3, [r7, #4]
}
 800b040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b042:	f7fe fed1 	bl	8009de8 <xTaskIncrementTick>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <xPortSysTickHandler+0x40>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	2300      	movs	r3, #0
 800b056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f383 8811 	msr	BASEPRI, r3
}
 800b05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b070:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <vPortSetupTimerInterrupt+0x34>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b076:	4b0b      	ldr	r3, [pc, #44]	; (800b0a4 <vPortSetupTimerInterrupt+0x38>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <vPortSetupTimerInterrupt+0x3c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <vPortSetupTimerInterrupt+0x40>)
 800b082:	fba2 2303 	umull	r2, r3, r2, r3
 800b086:	099b      	lsrs	r3, r3, #6
 800b088:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <vPortSetupTimerInterrupt+0x44>)
 800b08a:	3b01      	subs	r3, #1
 800b08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b08e:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <vPortSetupTimerInterrupt+0x34>)
 800b090:	2207      	movs	r2, #7
 800b092:	601a      	str	r2, [r3, #0]
}
 800b094:	bf00      	nop
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	e000e010 	.word	0xe000e010
 800b0a4:	e000e018 	.word	0xe000e018
 800b0a8:	20000000 	.word	0x20000000
 800b0ac:	10624dd3 	.word	0x10624dd3
 800b0b0:	e000e014 	.word	0xe000e014

0800b0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0c4 <vPortEnableVFP+0x10>
 800b0b8:	6801      	ldr	r1, [r0, #0]
 800b0ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0be:	6001      	str	r1, [r0, #0]
 800b0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0c2:	bf00      	nop
 800b0c4:	e000ed88 	.word	0xe000ed88

0800b0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0ce:	f3ef 8305 	mrs	r3, IPSR
 800b0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b0f      	cmp	r3, #15
 800b0d8:	d914      	bls.n	800b104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0da:	4a17      	ldr	r2, [pc, #92]	; (800b138 <vPortValidateInterruptPriority+0x70>)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4413      	add	r3, r2
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0e4:	4b15      	ldr	r3, [pc, #84]	; (800b13c <vPortValidateInterruptPriority+0x74>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	7afa      	ldrb	r2, [r7, #11]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d20a      	bcs.n	800b104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	607b      	str	r3, [r7, #4]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b104:	4b0e      	ldr	r3, [pc, #56]	; (800b140 <vPortValidateInterruptPriority+0x78>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b10c:	4b0d      	ldr	r3, [pc, #52]	; (800b144 <vPortValidateInterruptPriority+0x7c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d90a      	bls.n	800b12a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	603b      	str	r3, [r7, #0]
}
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <vPortValidateInterruptPriority+0x60>
	}
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	e000e3f0 	.word	0xe000e3f0
 800b13c:	20000fb4 	.word	0x20000fb4
 800b140:	e000ed0c 	.word	0xe000ed0c
 800b144:	20000fb8 	.word	0x20000fb8

0800b148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08a      	sub	sp, #40	; 0x28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b154:	f7fe fd8c 	bl	8009c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b158:	4b5b      	ldr	r3, [pc, #364]	; (800b2c8 <pvPortMalloc+0x180>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b160:	f000 f920 	bl	800b3a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b164:	4b59      	ldr	r3, [pc, #356]	; (800b2cc <pvPortMalloc+0x184>)
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f040 8093 	bne.w	800b298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d01d      	beq.n	800b1b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b178:	2208      	movs	r2, #8
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4413      	add	r3, r2
 800b17e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	2b00      	cmp	r3, #0
 800b188:	d014      	beq.n	800b1b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f023 0307 	bic.w	r3, r3, #7
 800b190:	3308      	adds	r3, #8
 800b192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	617b      	str	r3, [r7, #20]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d06e      	beq.n	800b298 <pvPortMalloc+0x150>
 800b1ba:	4b45      	ldr	r3, [pc, #276]	; (800b2d0 <pvPortMalloc+0x188>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d869      	bhi.n	800b298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1c4:	4b43      	ldr	r3, [pc, #268]	; (800b2d4 <pvPortMalloc+0x18c>)
 800b1c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1c8:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <pvPortMalloc+0x18c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ce:	e004      	b.n	800b1da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d903      	bls.n	800b1ec <pvPortMalloc+0xa4>
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1f1      	bne.n	800b1d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1ec:	4b36      	ldr	r3, [pc, #216]	; (800b2c8 <pvPortMalloc+0x180>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d050      	beq.n	800b298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2208      	movs	r2, #8
 800b1fc:	4413      	add	r3, r2
 800b1fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	1ad2      	subs	r2, r2, r3
 800b210:	2308      	movs	r3, #8
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	429a      	cmp	r2, r3
 800b216:	d91f      	bls.n	800b258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <pvPortMalloc+0xf8>
	__asm volatile
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	613b      	str	r3, [r7, #16]
}
 800b23c:	bf00      	nop
 800b23e:	e7fe      	b.n	800b23e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1ad2      	subs	r2, r2, r3
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b252:	69b8      	ldr	r0, [r7, #24]
 800b254:	f000 f908 	bl	800b468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b258:	4b1d      	ldr	r3, [pc, #116]	; (800b2d0 <pvPortMalloc+0x188>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	4a1b      	ldr	r2, [pc, #108]	; (800b2d0 <pvPortMalloc+0x188>)
 800b264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b266:	4b1a      	ldr	r3, [pc, #104]	; (800b2d0 <pvPortMalloc+0x188>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	4b1b      	ldr	r3, [pc, #108]	; (800b2d8 <pvPortMalloc+0x190>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d203      	bcs.n	800b27a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b272:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <pvPortMalloc+0x188>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a18      	ldr	r2, [pc, #96]	; (800b2d8 <pvPortMalloc+0x190>)
 800b278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <pvPortMalloc+0x184>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	431a      	orrs	r2, r3
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <pvPortMalloc+0x194>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3301      	adds	r3, #1
 800b294:	4a11      	ldr	r2, [pc, #68]	; (800b2dc <pvPortMalloc+0x194>)
 800b296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b298:	f7fe fcf8 	bl	8009c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00a      	beq.n	800b2bc <pvPortMalloc+0x174>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	60fb      	str	r3, [r7, #12]
}
 800b2b8:	bf00      	nop
 800b2ba:	e7fe      	b.n	800b2ba <pvPortMalloc+0x172>
	return pvReturn;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3728      	adds	r7, #40	; 0x28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200027c4 	.word	0x200027c4
 800b2cc:	200027d8 	.word	0x200027d8
 800b2d0:	200027c8 	.word	0x200027c8
 800b2d4:	200027bc 	.word	0x200027bc
 800b2d8:	200027cc 	.word	0x200027cc
 800b2dc:	200027d0 	.word	0x200027d0

0800b2e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d04d      	beq.n	800b38e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2f2:	2308      	movs	r3, #8
 800b2f4:	425b      	negs	r3, r3
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	4b24      	ldr	r3, [pc, #144]	; (800b398 <vPortFree+0xb8>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4013      	ands	r3, r2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <vPortFree+0x44>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	60fb      	str	r3, [r7, #12]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00a      	beq.n	800b342 <vPortFree+0x62>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	60bb      	str	r3, [r7, #8]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	4b14      	ldr	r3, [pc, #80]	; (800b398 <vPortFree+0xb8>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4013      	ands	r3, r2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01e      	beq.n	800b38e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d11a      	bne.n	800b38e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	4b0e      	ldr	r3, [pc, #56]	; (800b398 <vPortFree+0xb8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	43db      	mvns	r3, r3
 800b362:	401a      	ands	r2, r3
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b368:	f7fe fc82 	bl	8009c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <vPortFree+0xbc>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4413      	add	r3, r2
 800b376:	4a09      	ldr	r2, [pc, #36]	; (800b39c <vPortFree+0xbc>)
 800b378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b37a:	6938      	ldr	r0, [r7, #16]
 800b37c:	f000 f874 	bl	800b468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <vPortFree+0xc0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	4a06      	ldr	r2, [pc, #24]	; (800b3a0 <vPortFree+0xc0>)
 800b388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b38a:	f7fe fc7f 	bl	8009c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b38e:	bf00      	nop
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	200027d8 	.word	0x200027d8
 800b39c:	200027c8 	.word	0x200027c8
 800b3a0:	200027d4 	.word	0x200027d4

0800b3a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3b0:	4b27      	ldr	r3, [pc, #156]	; (800b450 <prvHeapInit+0xac>)
 800b3b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00c      	beq.n	800b3d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0307 	bic.w	r3, r3, #7
 800b3ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	4a1f      	ldr	r2, [pc, #124]	; (800b450 <prvHeapInit+0xac>)
 800b3d4:	4413      	add	r3, r2
 800b3d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3dc:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <prvHeapInit+0xb0>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3e2:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <prvHeapInit+0xb0>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3f0:	2208      	movs	r2, #8
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 0307 	bic.w	r3, r3, #7
 800b3fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4a15      	ldr	r2, [pc, #84]	; (800b458 <prvHeapInit+0xb4>)
 800b404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b406:	4b14      	ldr	r3, [pc, #80]	; (800b458 <prvHeapInit+0xb4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2200      	movs	r2, #0
 800b40c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b40e:	4b12      	ldr	r3, [pc, #72]	; (800b458 <prvHeapInit+0xb4>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b424:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <prvHeapInit+0xb4>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4a0a      	ldr	r2, [pc, #40]	; (800b45c <prvHeapInit+0xb8>)
 800b432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	4a09      	ldr	r2, [pc, #36]	; (800b460 <prvHeapInit+0xbc>)
 800b43a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b43c:	4b09      	ldr	r3, [pc, #36]	; (800b464 <prvHeapInit+0xc0>)
 800b43e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b442:	601a      	str	r2, [r3, #0]
}
 800b444:	bf00      	nop
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	20000fbc 	.word	0x20000fbc
 800b454:	200027bc 	.word	0x200027bc
 800b458:	200027c4 	.word	0x200027c4
 800b45c:	200027cc 	.word	0x200027cc
 800b460:	200027c8 	.word	0x200027c8
 800b464:	200027d8 	.word	0x200027d8

0800b468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b470:	4b28      	ldr	r3, [pc, #160]	; (800b514 <prvInsertBlockIntoFreeList+0xac>)
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	e002      	b.n	800b47c <prvInsertBlockIntoFreeList+0x14>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	429a      	cmp	r2, r3
 800b484:	d8f7      	bhi.n	800b476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	4413      	add	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	429a      	cmp	r2, r3
 800b496:	d108      	bne.n	800b4aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	441a      	add	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	441a      	add	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d118      	bne.n	800b4f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	4b15      	ldr	r3, [pc, #84]	; (800b518 <prvInsertBlockIntoFreeList+0xb0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d00d      	beq.n	800b4e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	441a      	add	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e008      	b.n	800b4f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4e6:	4b0c      	ldr	r3, [pc, #48]	; (800b518 <prvInsertBlockIntoFreeList+0xb0>)
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	e003      	b.n	800b4f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d002      	beq.n	800b506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b506:	bf00      	nop
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	200027bc 	.word	0x200027bc
 800b518:	200027c4 	.word	0x200027c4

0800b51c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b520:	2200      	movs	r2, #0
 800b522:	4912      	ldr	r1, [pc, #72]	; (800b56c <MX_USB_Device_Init+0x50>)
 800b524:	4812      	ldr	r0, [pc, #72]	; (800b570 <MX_USB_Device_Init+0x54>)
 800b526:	f7fc f917 	bl	8007758 <USBD_Init>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b530:	f7f5 f95c 	bl	80007ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b534:	490f      	ldr	r1, [pc, #60]	; (800b574 <MX_USB_Device_Init+0x58>)
 800b536:	480e      	ldr	r0, [pc, #56]	; (800b570 <MX_USB_Device_Init+0x54>)
 800b538:	f7fc f93e 	bl	80077b8 <USBD_RegisterClass>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b542:	f7f5 f953 	bl	80007ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b546:	490c      	ldr	r1, [pc, #48]	; (800b578 <MX_USB_Device_Init+0x5c>)
 800b548:	4809      	ldr	r0, [pc, #36]	; (800b570 <MX_USB_Device_Init+0x54>)
 800b54a:	f7fc f85f 	bl	800760c <USBD_CDC_RegisterInterface>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b554:	f7f5 f94a 	bl	80007ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b558:	4805      	ldr	r0, [pc, #20]	; (800b570 <MX_USB_Device_Init+0x54>)
 800b55a:	f7fc f954 	bl	8007806 <USBD_Start>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b564:	f7f5 f942 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b568:	bf00      	nop
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	20000134 	.word	0x20000134
 800b570:	20002b24 	.word	0x20002b24
 800b574:	20000018 	.word	0x20000018
 800b578:	20000120 	.word	0x20000120

0800b57c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b580:	2200      	movs	r2, #0
 800b582:	4905      	ldr	r1, [pc, #20]	; (800b598 <CDC_Init_FS+0x1c>)
 800b584:	4805      	ldr	r0, [pc, #20]	; (800b59c <CDC_Init_FS+0x20>)
 800b586:	f7fc f856 	bl	8007636 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b58a:	4905      	ldr	r1, [pc, #20]	; (800b5a0 <CDC_Init_FS+0x24>)
 800b58c:	4803      	ldr	r0, [pc, #12]	; (800b59c <CDC_Init_FS+0x20>)
 800b58e:	f7fc f870 	bl	8007672 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b592:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd80      	pop	{r7, pc}
 800b598:	200035f4 	.word	0x200035f4
 800b59c:	20002b24 	.word	0x20002b24
 800b5a0:	20002df4 	.word	0x20002df4

0800b5a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	6039      	str	r1, [r7, #0]
 800b5be:	71fb      	strb	r3, [r7, #7]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	2b23      	cmp	r3, #35	; 0x23
 800b5c8:	d84a      	bhi.n	800b660 <CDC_Control_FS+0xac>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <CDC_Control_FS+0x1c>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b661 	.word	0x0800b661
 800b5d4:	0800b661 	.word	0x0800b661
 800b5d8:	0800b661 	.word	0x0800b661
 800b5dc:	0800b661 	.word	0x0800b661
 800b5e0:	0800b661 	.word	0x0800b661
 800b5e4:	0800b661 	.word	0x0800b661
 800b5e8:	0800b661 	.word	0x0800b661
 800b5ec:	0800b661 	.word	0x0800b661
 800b5f0:	0800b661 	.word	0x0800b661
 800b5f4:	0800b661 	.word	0x0800b661
 800b5f8:	0800b661 	.word	0x0800b661
 800b5fc:	0800b661 	.word	0x0800b661
 800b600:	0800b661 	.word	0x0800b661
 800b604:	0800b661 	.word	0x0800b661
 800b608:	0800b661 	.word	0x0800b661
 800b60c:	0800b661 	.word	0x0800b661
 800b610:	0800b661 	.word	0x0800b661
 800b614:	0800b661 	.word	0x0800b661
 800b618:	0800b661 	.word	0x0800b661
 800b61c:	0800b661 	.word	0x0800b661
 800b620:	0800b661 	.word	0x0800b661
 800b624:	0800b661 	.word	0x0800b661
 800b628:	0800b661 	.word	0x0800b661
 800b62c:	0800b661 	.word	0x0800b661
 800b630:	0800b661 	.word	0x0800b661
 800b634:	0800b661 	.word	0x0800b661
 800b638:	0800b661 	.word	0x0800b661
 800b63c:	0800b661 	.word	0x0800b661
 800b640:	0800b661 	.word	0x0800b661
 800b644:	0800b661 	.word	0x0800b661
 800b648:	0800b661 	.word	0x0800b661
 800b64c:	0800b661 	.word	0x0800b661
 800b650:	0800b661 	.word	0x0800b661
 800b654:	0800b661 	.word	0x0800b661
 800b658:	0800b661 	.word	0x0800b661
 800b65c:	0800b661 	.word	0x0800b661
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b660:	bf00      	nop
  }

  return (USBD_OK);
 800b662:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4805      	ldr	r0, [pc, #20]	; (800b694 <CDC_Receive_FS+0x24>)
 800b67e:	f7fb fff8 	bl	8007672 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b682:	4804      	ldr	r0, [pc, #16]	; (800b694 <CDC_Receive_FS+0x24>)
 800b684:	f7fc f83e 	bl	8007704 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b688:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20002b24 	.word	0x20002b24

0800b698 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b6a8:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <CDC_Transmit_FS+0x48>)
 800b6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e00b      	b.n	800b6d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b6be:	887b      	ldrh	r3, [r7, #2]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	4806      	ldr	r0, [pc, #24]	; (800b6e0 <CDC_Transmit_FS+0x48>)
 800b6c6:	f7fb ffb6 	bl	8007636 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b6ca:	4805      	ldr	r0, [pc, #20]	; (800b6e0 <CDC_Transmit_FS+0x48>)
 800b6cc:	f7fb ffea 	bl	80076a4 <USBD_CDC_TransmitPacket>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20002b24 	.word	0x20002b24

0800b6e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
	...

0800b708 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2212      	movs	r2, #18
 800b718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b71a:	4b03      	ldr	r3, [pc, #12]	; (800b728 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	20000154 	.word	0x20000154

0800b72c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2204      	movs	r2, #4
 800b73c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b73e:	4b03      	ldr	r3, [pc, #12]	; (800b74c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	20000168 	.word	0x20000168

0800b750 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d105      	bne.n	800b76e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	4907      	ldr	r1, [pc, #28]	; (800b784 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b766:	4808      	ldr	r0, [pc, #32]	; (800b788 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b768:	f7fd f835 	bl	80087d6 <USBD_GetString>
 800b76c:	e004      	b.n	800b778 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	4904      	ldr	r1, [pc, #16]	; (800b784 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b772:	4805      	ldr	r0, [pc, #20]	; (800b788 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b774:	f7fd f82f 	bl	80087d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20003df4 	.word	0x20003df4
 800b788:	0800c160 	.word	0x0800c160

0800b78c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	4904      	ldr	r1, [pc, #16]	; (800b7ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b79c:	4804      	ldr	r0, [pc, #16]	; (800b7b0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b79e:	f7fd f81a 	bl	80087d6 <USBD_GetString>
  return USBD_StrDesc;
 800b7a2:	4b02      	ldr	r3, [pc, #8]	; (800b7ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20003df4 	.word	0x20003df4
 800b7b0:	0800c178 	.word	0x0800c178

0800b7b4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	6039      	str	r1, [r7, #0]
 800b7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	221a      	movs	r2, #26
 800b7c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7c6:	f000 f843 	bl	800b850 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b7ca:	4b02      	ldr	r3, [pc, #8]	; (800b7d4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	2000016c 	.word	0x2000016c

0800b7d8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	4603      	mov	r3, r0
 800b7e0:	6039      	str	r1, [r7, #0]
 800b7e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7e4:	79fb      	ldrb	r3, [r7, #7]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d105      	bne.n	800b7f6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	4907      	ldr	r1, [pc, #28]	; (800b80c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b7ee:	4808      	ldr	r0, [pc, #32]	; (800b810 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b7f0:	f7fc fff1 	bl	80087d6 <USBD_GetString>
 800b7f4:	e004      	b.n	800b800 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	4904      	ldr	r1, [pc, #16]	; (800b80c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b7fa:	4805      	ldr	r0, [pc, #20]	; (800b810 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b7fc:	f7fc ffeb 	bl	80087d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b800:	4b02      	ldr	r3, [pc, #8]	; (800b80c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20003df4 	.word	0x20003df4
 800b810:	0800c18c 	.word	0x0800c18c

0800b814 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	6039      	str	r1, [r7, #0]
 800b81e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d105      	bne.n	800b832 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	4907      	ldr	r1, [pc, #28]	; (800b848 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b82a:	4808      	ldr	r0, [pc, #32]	; (800b84c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b82c:	f7fc ffd3 	bl	80087d6 <USBD_GetString>
 800b830:	e004      	b.n	800b83c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	4904      	ldr	r1, [pc, #16]	; (800b848 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b836:	4805      	ldr	r0, [pc, #20]	; (800b84c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b838:	f7fc ffcd 	bl	80087d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b83c:	4b02      	ldr	r3, [pc, #8]	; (800b848 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20003df4 	.word	0x20003df4
 800b84c:	0800c198 	.word	0x0800c198

0800b850 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b856:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <Get_SerialNum+0x44>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b85c:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <Get_SerialNum+0x48>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b862:	4b0e      	ldr	r3, [pc, #56]	; (800b89c <Get_SerialNum+0x4c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4413      	add	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d009      	beq.n	800b88a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b876:	2208      	movs	r2, #8
 800b878:	4909      	ldr	r1, [pc, #36]	; (800b8a0 <Get_SerialNum+0x50>)
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f814 	bl	800b8a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b880:	2204      	movs	r2, #4
 800b882:	4908      	ldr	r1, [pc, #32]	; (800b8a4 <Get_SerialNum+0x54>)
 800b884:	68b8      	ldr	r0, [r7, #8]
 800b886:	f000 f80f 	bl	800b8a8 <IntToUnicode>
  }
}
 800b88a:	bf00      	nop
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	1fff7590 	.word	0x1fff7590
 800b898:	1fff7594 	.word	0x1fff7594
 800b89c:	1fff7598 	.word	0x1fff7598
 800b8a0:	2000016e 	.word	0x2000016e
 800b8a4:	2000017e 	.word	0x2000017e

0800b8a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]
 800b8be:	e027      	b.n	800b910 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	0f1b      	lsrs	r3, r3, #28
 800b8c4:	2b09      	cmp	r3, #9
 800b8c6:	d80b      	bhi.n	800b8e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	0f1b      	lsrs	r3, r3, #28
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	440b      	add	r3, r1
 800b8d8:	3230      	adds	r2, #48	; 0x30
 800b8da:	b2d2      	uxtb	r2, r2
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	e00a      	b.n	800b8f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	0f1b      	lsrs	r3, r3, #28
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3237      	adds	r2, #55	; 0x37
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	3301      	adds	r3, #1
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	4413      	add	r3, r2
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	3301      	adds	r3, #1
 800b90e:	75fb      	strb	r3, [r7, #23]
 800b910:	7dfa      	ldrb	r2, [r7, #23]
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	429a      	cmp	r2, r3
 800b916:	d3d3      	bcc.n	800b8c0 <IntToUnicode+0x18>
  }
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
	...

0800b928 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a11      	ldr	r2, [pc, #68]	; (800b97c <HAL_PCD_MspInit+0x54>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d11b      	bne.n	800b972 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b93a:	4b11      	ldr	r3, [pc, #68]	; (800b980 <HAL_PCD_MspInit+0x58>)
 800b93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93e:	4a10      	ldr	r2, [pc, #64]	; (800b980 <HAL_PCD_MspInit+0x58>)
 800b940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b944:	6593      	str	r3, [r2, #88]	; 0x58
 800b946:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <HAL_PCD_MspInit+0x58>)
 800b948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b94a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 800b952:	2200      	movs	r2, #0
 800b954:	2105      	movs	r1, #5
 800b956:	2013      	movs	r0, #19
 800b958:	f7f5 f990 	bl	8000c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800b95c:	2013      	movs	r0, #19
 800b95e:	f7f5 f9a7 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800b962:	2200      	movs	r2, #0
 800b964:	2105      	movs	r1, #5
 800b966:	2014      	movs	r0, #20
 800b968:	f7f5 f988 	bl	8000c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b96c:	2014      	movs	r0, #20
 800b96e:	f7f5 f99f 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b972:	bf00      	nop
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	40005c00 	.word	0x40005c00
 800b980:	40021000 	.word	0x40021000

0800b984 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f7fb ff7e 	bl	800789c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b9ba:	78fa      	ldrb	r2, [r7, #3]
 800b9bc:	6879      	ldr	r1, [r7, #4]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	00db      	lsls	r3, r3, #3
 800b9c6:	440b      	add	r3, r1
 800b9c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f7fb ffb8 	bl	8007946 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	6879      	ldr	r1, [r7, #4]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	00db      	lsls	r3, r3, #3
 800b9fc:	440b      	add	r3, r1
 800b9fe:	333c      	adds	r3, #60	; 0x3c
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	78fb      	ldrb	r3, [r7, #3]
 800ba04:	4619      	mov	r1, r3
 800ba06:	f7fc f801 	bl	8007a0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fc f915 	bl	8007c50 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba36:	2301      	movs	r3, #1
 800ba38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d001      	beq.n	800ba46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba42:	f7f4 fed3 	bl	80007ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba4c:	7bfa      	ldrb	r2, [r7, #15]
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fc f8bf 	bl	8007bd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fc f86b 	bl	8007b38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ba62:	bf00      	nop
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
	...

0800ba6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fc f8ba 	bl	8007bf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <HAL_PCD_SuspendCallback+0x30>)
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	4a03      	ldr	r2, [pc, #12]	; (800ba9c <HAL_PCD_SuspendCallback+0x30>)
 800ba8e:	f043 0306 	orr.w	r3, r3, #6
 800ba92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ba94:	bf00      	nop
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	e000ed00 	.word	0xe000ed00

0800baa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d007      	beq.n	800bac0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bab0:	4b08      	ldr	r3, [pc, #32]	; (800bad4 <HAL_PCD_ResumeCallback+0x34>)
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	4a07      	ldr	r2, [pc, #28]	; (800bad4 <HAL_PCD_ResumeCallback+0x34>)
 800bab6:	f023 0306 	bic.w	r3, r3, #6
 800baba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800babc:	f000 f9fa 	bl	800beb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fc f8aa 	bl	8007c20 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	e000ed00 	.word	0xe000ed00

0800bad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bae0:	4a2b      	ldr	r2, [pc, #172]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a29      	ldr	r2, [pc, #164]	; (800bb90 <USBD_LL_Init+0xb8>)
 800baec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800baf0:	4b27      	ldr	r3, [pc, #156]	; (800bb90 <USBD_LL_Init+0xb8>)
 800baf2:	4a28      	ldr	r2, [pc, #160]	; (800bb94 <USBD_LL_Init+0xbc>)
 800baf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800baf6:	4b26      	ldr	r3, [pc, #152]	; (800bb90 <USBD_LL_Init+0xb8>)
 800baf8:	2208      	movs	r2, #8
 800bafa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bafc:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bafe:	2202      	movs	r2, #2
 800bb00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb02:	4b23      	ldr	r3, [pc, #140]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bb04:	2202      	movs	r2, #2
 800bb06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bb08:	4b21      	ldr	r3, [pc, #132]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb0e:	4b20      	ldr	r3, [pc, #128]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb14:	4b1e      	ldr	r3, [pc, #120]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb1a:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb20:	481b      	ldr	r0, [pc, #108]	; (800bb90 <USBD_LL_Init+0xb8>)
 800bb22:	f7f5 fa90 	bl	8001046 <HAL_PCD_Init>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bb2c:	f7f4 fe5e 	bl	80007ec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb36:	2318      	movs	r3, #24
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	f7f6 feaa 	bl	8002894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb46:	2358      	movs	r3, #88	; 0x58
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2180      	movs	r1, #128	; 0x80
 800bb4c:	f7f6 fea2 	bl	8002894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb56:	23c0      	movs	r3, #192	; 0xc0
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2181      	movs	r1, #129	; 0x81
 800bb5c:	f7f6 fe9a 	bl	8002894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb66:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	f7f6 fe91 	bl	8002894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2182      	movs	r1, #130	; 0x82
 800bb80:	f7f6 fe88 	bl	8002894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20003ff4 	.word	0x20003ff4
 800bb94:	40005c00 	.word	0x40005c00

0800bb98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7f5 fb2e 	bl	8001210 <HAL_PCD_Start>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 f980 	bl	800bec0 <USBD_Get_USB_Status>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	4608      	mov	r0, r1
 800bbd8:	4611      	mov	r1, r2
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4603      	mov	r3, r0
 800bbde:	70fb      	strb	r3, [r7, #3]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70bb      	strb	r3, [r7, #2]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbf6:	78bb      	ldrb	r3, [r7, #2]
 800bbf8:	883a      	ldrh	r2, [r7, #0]
 800bbfa:	78f9      	ldrb	r1, [r7, #3]
 800bbfc:	f7f5 fc9d 	bl	800153a <HAL_PCD_EP_Open>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f95a 	bl	800bec0 <USBD_Get_USB_Status>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc34:	78fa      	ldrb	r2, [r7, #3]
 800bc36:	4611      	mov	r1, r2
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7f5 fce4 	bl	8001606 <HAL_PCD_EP_Close>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 f93b 	bl	800bec0 <USBD_Get_USB_Status>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7f5 fda5 	bl	80017c6 <HAL_PCD_EP_SetStall>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f91c 	bl	800bec0 <USBD_Get_USB_Status>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f5 fdd8 	bl	800186a <HAL_PCD_EP_ClrStall>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 f8fd 	bl	800bec0 <USBD_Get_USB_Status>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da0c      	bge.n	800bd0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf6:	68f9      	ldr	r1, [r7, #12]
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	440b      	add	r3, r1
 800bd04:	3302      	adds	r3, #2
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	e00b      	b.n	800bd22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd0a:	78fb      	ldrb	r3, [r7, #3]
 800bd0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd10:	68f9      	ldr	r1, [r7, #12]
 800bd12:	4613      	mov	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	00db      	lsls	r3, r3, #3
 800bd1a:	440b      	add	r3, r1
 800bd1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bd20:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd48:	78fa      	ldrb	r2, [r7, #3]
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7f5 fbcf 	bl	80014f0 <HAL_PCD_SetAddress>
 800bd52:	4603      	mov	r3, r0
 800bd54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 f8b1 	bl	800bec0 <USBD_Get_USB_Status>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd8a:	7af9      	ldrb	r1, [r7, #11]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	f7f5 fcd6 	bl	8001740 <HAL_PCD_EP_Transmit>
 800bd94:	4603      	mov	r3, r0
 800bd96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 f890 	bl	800bec0 <USBD_Get_USB_Status>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bda4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b086      	sub	sp, #24
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	60f8      	str	r0, [r7, #12]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bdcc:	7af9      	ldrb	r1, [r7, #11]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	f7f5 fc60 	bl	8001696 <HAL_PCD_EP_Receive>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 f86f 	bl	800bec0 <USBD_Get_USB_Status>
 800bde2:	4603      	mov	r3, r0
 800bde4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bde6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be02:	78fa      	ldrb	r2, [r7, #3]
 800be04:	4611      	mov	r1, r2
 800be06:	4618      	mov	r0, r3
 800be08:	f7f5 fc82 	bl	8001710 <HAL_PCD_EP_GetRxCount>
 800be0c:	4603      	mov	r3, r0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <HAL_PCDEx_LPM_Callback+0x18>
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d013      	beq.n	800be56 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800be2e:	e023      	b.n	800be78 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d007      	beq.n	800be48 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800be38:	f000 f83c 	bl	800beb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be3c:	4b10      	ldr	r3, [pc, #64]	; (800be80 <HAL_PCDEx_LPM_Callback+0x68>)
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	4a0f      	ldr	r2, [pc, #60]	; (800be80 <HAL_PCDEx_LPM_Callback+0x68>)
 800be42:	f023 0306 	bic.w	r3, r3, #6
 800be46:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fb fee6 	bl	8007c20 <USBD_LL_Resume>
    break;
 800be54:	e010      	b.n	800be78 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fb fec9 	bl	8007bf4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <HAL_PCDEx_LPM_Callback+0x68>)
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	4a04      	ldr	r2, [pc, #16]	; (800be80 <HAL_PCDEx_LPM_Callback+0x68>)
 800be70:	f043 0306 	orr.w	r3, r3, #6
 800be74:	6113      	str	r3, [r2, #16]
    break;
 800be76:	bf00      	nop
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	e000ed00 	.word	0xe000ed00

0800be84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be8c:	4b03      	ldr	r3, [pc, #12]	; (800be9c <USBD_static_malloc+0x18>)
}
 800be8e:	4618      	mov	r0, r3
 800be90:	370c      	adds	r7, #12
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	200027dc 	.word	0x200027dc

0800bea0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]

}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800beb8:	f7f4 fb4e 	bl	8000558 <SystemClock_Config>
}
 800bebc:	bf00      	nop
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d817      	bhi.n	800bf04 <USBD_Get_USB_Status+0x44>
 800bed4:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <USBD_Get_USB_Status+0x1c>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800beed 	.word	0x0800beed
 800bee0:	0800bef3 	.word	0x0800bef3
 800bee4:	0800bef9 	.word	0x0800bef9
 800bee8:	0800beff 	.word	0x0800beff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
    break;
 800bef0:	e00b      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bef2:	2303      	movs	r3, #3
 800bef4:	73fb      	strb	r3, [r7, #15]
    break;
 800bef6:	e008      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bef8:	2301      	movs	r3, #1
 800befa:	73fb      	strb	r3, [r7, #15]
    break;
 800befc:	e005      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800befe:	2303      	movs	r3, #3
 800bf00:	73fb      	strb	r3, [r7, #15]
    break;
 800bf02:	e002      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf04:	2303      	movs	r3, #3
 800bf06:	73fb      	strb	r3, [r7, #15]
    break;
 800bf08:	bf00      	nop
  }
  return usb_status;
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <__libc_init_array>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	4d0d      	ldr	r5, [pc, #52]	; (800bf50 <__libc_init_array+0x38>)
 800bf1c:	4c0d      	ldr	r4, [pc, #52]	; (800bf54 <__libc_init_array+0x3c>)
 800bf1e:	1b64      	subs	r4, r4, r5
 800bf20:	10a4      	asrs	r4, r4, #2
 800bf22:	2600      	movs	r6, #0
 800bf24:	42a6      	cmp	r6, r4
 800bf26:	d109      	bne.n	800bf3c <__libc_init_array+0x24>
 800bf28:	4d0b      	ldr	r5, [pc, #44]	; (800bf58 <__libc_init_array+0x40>)
 800bf2a:	4c0c      	ldr	r4, [pc, #48]	; (800bf5c <__libc_init_array+0x44>)
 800bf2c:	f000 f8f6 	bl	800c11c <_init>
 800bf30:	1b64      	subs	r4, r4, r5
 800bf32:	10a4      	asrs	r4, r4, #2
 800bf34:	2600      	movs	r6, #0
 800bf36:	42a6      	cmp	r6, r4
 800bf38:	d105      	bne.n	800bf46 <__libc_init_array+0x2e>
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf40:	4798      	blx	r3
 800bf42:	3601      	adds	r6, #1
 800bf44:	e7ee      	b.n	800bf24 <__libc_init_array+0xc>
 800bf46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf4a:	4798      	blx	r3
 800bf4c:	3601      	adds	r6, #1
 800bf4e:	e7f2      	b.n	800bf36 <__libc_init_array+0x1e>
 800bf50:	0800c274 	.word	0x0800c274
 800bf54:	0800c274 	.word	0x0800c274
 800bf58:	0800c274 	.word	0x0800c274
 800bf5c:	0800c278 	.word	0x0800c278

0800bf60 <__retarget_lock_acquire_recursive>:
 800bf60:	4770      	bx	lr

0800bf62 <__retarget_lock_release_recursive>:
 800bf62:	4770      	bx	lr

0800bf64 <memcpy>:
 800bf64:	440a      	add	r2, r1
 800bf66:	4291      	cmp	r1, r2
 800bf68:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf6c:	d100      	bne.n	800bf70 <memcpy+0xc>
 800bf6e:	4770      	bx	lr
 800bf70:	b510      	push	{r4, lr}
 800bf72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf7a:	4291      	cmp	r1, r2
 800bf7c:	d1f9      	bne.n	800bf72 <memcpy+0xe>
 800bf7e:	bd10      	pop	{r4, pc}

0800bf80 <memset>:
 800bf80:	4402      	add	r2, r0
 800bf82:	4603      	mov	r3, r0
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d100      	bne.n	800bf8a <memset+0xa>
 800bf88:	4770      	bx	lr
 800bf8a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf8e:	e7f9      	b.n	800bf84 <memset+0x4>

0800bf90 <cleanup_glue>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	460c      	mov	r4, r1
 800bf94:	6809      	ldr	r1, [r1, #0]
 800bf96:	4605      	mov	r5, r0
 800bf98:	b109      	cbz	r1, 800bf9e <cleanup_glue+0xe>
 800bf9a:	f7ff fff9 	bl	800bf90 <cleanup_glue>
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa6:	f000 b869 	b.w	800c07c <_free_r>
	...

0800bfac <_reclaim_reent>:
 800bfac:	4b2c      	ldr	r3, [pc, #176]	; (800c060 <_reclaim_reent+0xb4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4283      	cmp	r3, r0
 800bfb2:	b570      	push	{r4, r5, r6, lr}
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	d051      	beq.n	800c05c <_reclaim_reent+0xb0>
 800bfb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfba:	b143      	cbz	r3, 800bfce <_reclaim_reent+0x22>
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d14a      	bne.n	800c058 <_reclaim_reent+0xac>
 800bfc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc4:	6819      	ldr	r1, [r3, #0]
 800bfc6:	b111      	cbz	r1, 800bfce <_reclaim_reent+0x22>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f000 f857 	bl	800c07c <_free_r>
 800bfce:	6961      	ldr	r1, [r4, #20]
 800bfd0:	b111      	cbz	r1, 800bfd8 <_reclaim_reent+0x2c>
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f000 f852 	bl	800c07c <_free_r>
 800bfd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfda:	b111      	cbz	r1, 800bfe2 <_reclaim_reent+0x36>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 f84d 	bl	800c07c <_free_r>
 800bfe2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bfe4:	b111      	cbz	r1, 800bfec <_reclaim_reent+0x40>
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 f848 	bl	800c07c <_free_r>
 800bfec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bfee:	b111      	cbz	r1, 800bff6 <_reclaim_reent+0x4a>
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 f843 	bl	800c07c <_free_r>
 800bff6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bff8:	b111      	cbz	r1, 800c000 <_reclaim_reent+0x54>
 800bffa:	4620      	mov	r0, r4
 800bffc:	f000 f83e 	bl	800c07c <_free_r>
 800c000:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c002:	b111      	cbz	r1, 800c00a <_reclaim_reent+0x5e>
 800c004:	4620      	mov	r0, r4
 800c006:	f000 f839 	bl	800c07c <_free_r>
 800c00a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c00c:	b111      	cbz	r1, 800c014 <_reclaim_reent+0x68>
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 f834 	bl	800c07c <_free_r>
 800c014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c016:	b111      	cbz	r1, 800c01e <_reclaim_reent+0x72>
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 f82f 	bl	800c07c <_free_r>
 800c01e:	69a3      	ldr	r3, [r4, #24]
 800c020:	b1e3      	cbz	r3, 800c05c <_reclaim_reent+0xb0>
 800c022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c024:	4620      	mov	r0, r4
 800c026:	4798      	blx	r3
 800c028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c02a:	b1b9      	cbz	r1, 800c05c <_reclaim_reent+0xb0>
 800c02c:	4620      	mov	r0, r4
 800c02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c032:	f7ff bfad 	b.w	800bf90 <cleanup_glue>
 800c036:	5949      	ldr	r1, [r1, r5]
 800c038:	b941      	cbnz	r1, 800c04c <_reclaim_reent+0xa0>
 800c03a:	3504      	adds	r5, #4
 800c03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c03e:	2d80      	cmp	r5, #128	; 0x80
 800c040:	68d9      	ldr	r1, [r3, #12]
 800c042:	d1f8      	bne.n	800c036 <_reclaim_reent+0x8a>
 800c044:	4620      	mov	r0, r4
 800c046:	f000 f819 	bl	800c07c <_free_r>
 800c04a:	e7ba      	b.n	800bfc2 <_reclaim_reent+0x16>
 800c04c:	680e      	ldr	r6, [r1, #0]
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f814 	bl	800c07c <_free_r>
 800c054:	4631      	mov	r1, r6
 800c056:	e7ef      	b.n	800c038 <_reclaim_reent+0x8c>
 800c058:	2500      	movs	r5, #0
 800c05a:	e7ef      	b.n	800c03c <_reclaim_reent+0x90>
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	bf00      	nop
 800c060:	20000188 	.word	0x20000188

0800c064 <__malloc_lock>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__malloc_lock+0x8>)
 800c066:	f7ff bf7b 	b.w	800bf60 <__retarget_lock_acquire_recursive>
 800c06a:	bf00      	nop
 800c06c:	200042ec 	.word	0x200042ec

0800c070 <__malloc_unlock>:
 800c070:	4801      	ldr	r0, [pc, #4]	; (800c078 <__malloc_unlock+0x8>)
 800c072:	f7ff bf76 	b.w	800bf62 <__retarget_lock_release_recursive>
 800c076:	bf00      	nop
 800c078:	200042ec 	.word	0x200042ec

0800c07c <_free_r>:
 800c07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c07e:	2900      	cmp	r1, #0
 800c080:	d048      	beq.n	800c114 <_free_r+0x98>
 800c082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c086:	9001      	str	r0, [sp, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f1a1 0404 	sub.w	r4, r1, #4
 800c08e:	bfb8      	it	lt
 800c090:	18e4      	addlt	r4, r4, r3
 800c092:	f7ff ffe7 	bl	800c064 <__malloc_lock>
 800c096:	4a20      	ldr	r2, [pc, #128]	; (800c118 <_free_r+0x9c>)
 800c098:	9801      	ldr	r0, [sp, #4]
 800c09a:	6813      	ldr	r3, [r2, #0]
 800c09c:	4615      	mov	r5, r2
 800c09e:	b933      	cbnz	r3, 800c0ae <_free_r+0x32>
 800c0a0:	6063      	str	r3, [r4, #4]
 800c0a2:	6014      	str	r4, [r2, #0]
 800c0a4:	b003      	add	sp, #12
 800c0a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0aa:	f7ff bfe1 	b.w	800c070 <__malloc_unlock>
 800c0ae:	42a3      	cmp	r3, r4
 800c0b0:	d90b      	bls.n	800c0ca <_free_r+0x4e>
 800c0b2:	6821      	ldr	r1, [r4, #0]
 800c0b4:	1862      	adds	r2, r4, r1
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	bf04      	itt	eq
 800c0ba:	681a      	ldreq	r2, [r3, #0]
 800c0bc:	685b      	ldreq	r3, [r3, #4]
 800c0be:	6063      	str	r3, [r4, #4]
 800c0c0:	bf04      	itt	eq
 800c0c2:	1852      	addeq	r2, r2, r1
 800c0c4:	6022      	streq	r2, [r4, #0]
 800c0c6:	602c      	str	r4, [r5, #0]
 800c0c8:	e7ec      	b.n	800c0a4 <_free_r+0x28>
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	b10b      	cbz	r3, 800c0d4 <_free_r+0x58>
 800c0d0:	42a3      	cmp	r3, r4
 800c0d2:	d9fa      	bls.n	800c0ca <_free_r+0x4e>
 800c0d4:	6811      	ldr	r1, [r2, #0]
 800c0d6:	1855      	adds	r5, r2, r1
 800c0d8:	42a5      	cmp	r5, r4
 800c0da:	d10b      	bne.n	800c0f4 <_free_r+0x78>
 800c0dc:	6824      	ldr	r4, [r4, #0]
 800c0de:	4421      	add	r1, r4
 800c0e0:	1854      	adds	r4, r2, r1
 800c0e2:	42a3      	cmp	r3, r4
 800c0e4:	6011      	str	r1, [r2, #0]
 800c0e6:	d1dd      	bne.n	800c0a4 <_free_r+0x28>
 800c0e8:	681c      	ldr	r4, [r3, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	6053      	str	r3, [r2, #4]
 800c0ee:	4421      	add	r1, r4
 800c0f0:	6011      	str	r1, [r2, #0]
 800c0f2:	e7d7      	b.n	800c0a4 <_free_r+0x28>
 800c0f4:	d902      	bls.n	800c0fc <_free_r+0x80>
 800c0f6:	230c      	movs	r3, #12
 800c0f8:	6003      	str	r3, [r0, #0]
 800c0fa:	e7d3      	b.n	800c0a4 <_free_r+0x28>
 800c0fc:	6825      	ldr	r5, [r4, #0]
 800c0fe:	1961      	adds	r1, r4, r5
 800c100:	428b      	cmp	r3, r1
 800c102:	bf04      	itt	eq
 800c104:	6819      	ldreq	r1, [r3, #0]
 800c106:	685b      	ldreq	r3, [r3, #4]
 800c108:	6063      	str	r3, [r4, #4]
 800c10a:	bf04      	itt	eq
 800c10c:	1949      	addeq	r1, r1, r5
 800c10e:	6021      	streq	r1, [r4, #0]
 800c110:	6054      	str	r4, [r2, #4]
 800c112:	e7c7      	b.n	800c0a4 <_free_r+0x28>
 800c114:	b003      	add	sp, #12
 800c116:	bd30      	pop	{r4, r5, pc}
 800c118:	200029fc 	.word	0x200029fc

0800c11c <_init>:
 800c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11e:	bf00      	nop
 800c120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c122:	bc08      	pop	{r3}
 800c124:	469e      	mov	lr, r3
 800c126:	4770      	bx	lr

0800c128 <_fini>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	bf00      	nop
 800c12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12e:	bc08      	pop	{r3}
 800c130:	469e      	mov	lr, r3
 800c132:	4770      	bx	lr
