
MUXUS_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c23c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c534  0800c534  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c53c  0800c53c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c53c  0800c53c  0001c53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028bc  200001ec  0800c730  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002aa8  0800c730  00022aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f144  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059dc  00000000  00000000  0004f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  00054d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f58  00000000  00000000  00056eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ab0  00000000  00000000  00058e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026703  00000000  00000000  000608b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6cee  00000000  00000000  00086fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017dca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090cc  00000000  00000000  0017dcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c404 	.word	0x0800c404

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800c404 	.word	0x0800c404

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <__NVIC_GetPriorityGrouping+0x18>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	f003 0307 	and.w	r3, r3, #7
}
 8000526:	4618      	mov	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	db0b      	blt.n	800055e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f003 021f 	and.w	r2, r3, #31
 800054c:	4907      	ldr	r1, [pc, #28]	; (800056c <__NVIC_EnableIRQ+0x38>)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	095b      	lsrs	r3, r3, #5
 8000554:	2001      	movs	r0, #1
 8000556:	fa00 f202 	lsl.w	r2, r0, r2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e100 	.word	0xe000e100

08000570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db0a      	blt.n	800059a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	490c      	ldr	r1, [pc, #48]	; (80005bc <__NVIC_SetPriority+0x4c>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	0112      	lsls	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	440b      	add	r3, r1
 8000594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000598:	e00a      	b.n	80005b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <__NVIC_SetPriority+0x50>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	3b04      	subs	r3, #4
 80005a8:	0112      	lsls	r2, r2, #4
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	761a      	strb	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	f1c3 0307 	rsb	r3, r3, #7
 80005de:	2b04      	cmp	r3, #4
 80005e0:	bf28      	it	cs
 80005e2:	2304      	movcs	r3, #4
 80005e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3304      	adds	r3, #4
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	d902      	bls.n	80005f4 <NVIC_EncodePriority+0x30>
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3b03      	subs	r3, #3
 80005f2:	e000      	b.n	80005f6 <NVIC_EncodePriority+0x32>
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	43da      	mvns	r2, r3
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	401a      	ands	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060c:	f04f 31ff 	mov.w	r1, #4294967295
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43d9      	mvns	r1, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	4313      	orrs	r3, r2
         );
}
 800061e:	4618      	mov	r0, r3
 8000620:	3724      	adds	r7, #36	; 0x24
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000

0800065c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000668:	4907      	ldr	r1, [pc, #28]	; (8000688 <LL_APB1_GRP2_EnableClock+0x2c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000672:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40021000 	.word	0x40021000

0800068c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <LL_DMA_SetDataTransferDirection+0x4c>)
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <LL_DMA_SetDataTransferDirection+0x4c>)
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	440a      	add	r2, r1
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	440a      	add	r2, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80006ca:	bf00      	nop
 80006cc:	371c      	adds	r7, #28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	0800c48c 	.word	0x0800c48c

080006dc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LL_DMA_SetMode+0x48>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	4413      	add	r3, r2
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f023 0220 	bic.w	r2, r3, #32
 8000700:	4908      	ldr	r1, [pc, #32]	; (8000724 <LL_DMA_SetMode+0x48>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	440b      	add	r3, r1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	440b      	add	r3, r1
 800070e:	4619      	mov	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4313      	orrs	r3, r2
 8000714:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000716:	bf00      	nop
 8000718:	371c      	adds	r7, #28
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	0800c48c 	.word	0x0800c48c

08000728 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LL_DMA_SetPeriphIncMode+0x48>)
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	4413      	add	r3, r2
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <LL_DMA_SetPeriphIncMode+0x48>)
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	440b      	add	r3, r1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	440b      	add	r3, r1
 800075a:	4619      	mov	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4313      	orrs	r3, r2
 8000760:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	0800c48c 	.word	0x0800c48c

08000774 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LL_DMA_SetMemoryIncMode+0x48>)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	4413      	add	r3, r2
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000798:	4908      	ldr	r1, [pc, #32]	; (80007bc <LL_DMA_SetMemoryIncMode+0x48>)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	440b      	add	r3, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	440b      	add	r3, r1
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80007ae:	bf00      	nop
 80007b0:	371c      	adds	r7, #28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	0800c48c 	.word	0x0800c48c

080007c0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LL_DMA_SetPeriphSize+0x48>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80007e4:	4908      	ldr	r1, [pc, #32]	; (8000808 <LL_DMA_SetPeriphSize+0x48>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	440b      	add	r3, r1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	440b      	add	r3, r1
 80007f2:	4619      	mov	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80007fa:	bf00      	nop
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	0800c48c 	.word	0x0800c48c

0800080c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800080c:	b480      	push	{r7}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <LL_DMA_SetMemorySize+0x48>)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	4413      	add	r3, r2
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000830:	4908      	ldr	r1, [pc, #32]	; (8000854 <LL_DMA_SetMemorySize+0x48>)
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	440b      	add	r3, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	440b      	add	r3, r1
 800083e:	4619      	mov	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4313      	orrs	r3, r2
 8000844:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000846:	bf00      	nop
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	0800c48c 	.word	0x0800c48c

08000858 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4413      	add	r3, r2
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800087c:	4908      	ldr	r1, [pc, #32]	; (80008a0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	440b      	add	r3, r1
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	440b      	add	r3, r1
 800088a:	4619      	mov	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4313      	orrs	r3, r2
 8000890:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000892:	bf00      	nop
 8000894:	371c      	adds	r7, #28
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	0800c48c 	.word	0x0800c48c

080008a4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	0a9b      	lsrs	r3, r3, #10
 80008b4:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008b8:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	4413      	add	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008e2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	bf00      	nop
 80008ee:	371c      	adds	r7, #28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b5b0      	push	{r4, r5, r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fd3e 	bl	800137e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f825 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 fa35 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 800090a:	f000 f9e9 	bl	8000ce0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800090e:	f000 f90b 	bl	8000b28 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 8000912:	f000 f953 	bl	8000bbc <MX_UCPD1_Init>
  MX_USB_Device_Init();
 8000916:	f00a ffa9 	bl	800b86c <MX_USB_Device_Init>
  MX_ADC2_Init();
 800091a:	f000 f887 	bl	8000a2c <MX_ADC2_Init>
  MX_I2C1_Init();
 800091e:	f000 f8c3 	bl	8000aa8 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <main+0x50>)
 8000924:	1d3c      	adds	r4, r7, #4
 8000926:	461d      	mov	r5, r3
 8000928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f009 fdfb 	bl	800a530 <osThreadCreate>
 800093a:	4603      	mov	r3, r0
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <main+0x54>)
 800093e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000940:	f009 fdef 	bl	800a522 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0x4c>
 8000946:	bf00      	nop
 8000948:	0800c428 	.word	0x0800c428
 800094c:	2000190c 	.word	0x2000190c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a4      	sub	sp, #144	; 0x90
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800095a:	2238      	movs	r2, #56	; 0x38
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f00b fc82 	bl	800c268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f00b fc74 	bl	800c268 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000980:	2000      	movs	r0, #0
 8000982:	f003 fa05 	bl	8003d90 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000986:	2322      	movs	r3, #34	; 0x22
 8000988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009a4:	2355      	movs	r3, #85	; 0x55
 80009a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 fa89 	bl	8003ed8 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009cc:	f000 fa88 	bl	8000ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2303      	movs	r3, #3
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e8:	2104      	movs	r1, #4
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 fd8c 	bl	8004508 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009f6:	f000 fa73 	bl	8000ee0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80009fa:	f24a 0360 	movw	r3, #41056	; 0xa060
 80009fe:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 ffc5 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a20:	f000 fa5e 	bl	8000ee0 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3790      	adds	r7, #144	; 0x90
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_ADC2_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_ADC2_Init+0x74>)
 8000a8e:	f000 fd47 	bl	8001520 <HAL_ADC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 fa22 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20001910 	.word	0x20001910
 8000aa4:	50000100 	.word	0x50000100

08000aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <MX_I2C1_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x7c>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000ae4:	f001 fb9a 	bl	800221c <HAL_I2C_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aee:	f000 f9f7 	bl	8000ee0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000af6:	f001 fc20 	bl	800233a <HAL_I2CEx_ConfigAnalogFilter>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f9ee 	bl	8000ee0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_I2C1_Init+0x74>)
 8000b08:	f001 fc62 	bl	80023d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b12:	f000 f9e5 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000197c 	.word	0x2000197c
 8000b20:	40005400 	.word	0x40005400
 8000b24:	30a0a7fb 	.word	0x30a0a7fb

08000b28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <MX_LPUART1_UART_Init+0x8c>)
 8000b30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b34:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <MX_LPUART1_UART_Init+0x90>)
 8000b36:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b6a:	f004 fc55 	bl	8005418 <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000b74:	f000 f9b4 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b7c:	f005 fbb4 	bl	80062e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000b86:	f000 f9ab 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b8e:	f005 fbe9 	bl	8006364 <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000b98:	f000 f9a2 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_LPUART1_UART_Init+0x88>)
 8000b9e:	f005 fb6a 	bl	8006276 <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000ba8:	f000 f99a 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200019c8 	.word	0x200019c8
 8000bb4:	40008000 	.word	0x40008000
 8000bb8:	00033324 	.word	0x00033324

08000bbc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000bd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bd6:	f7ff fd41 	bl	800065c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff fd26 	bl	800062c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000be0:	2310      	movs	r3, #16
 8000be2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000be4:	2303      	movs	r3, #3
 8000be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4839      	ldr	r0, [pc, #228]	; (8000cd8 <MX_UCPD1_Init+0x11c>)
 8000bf2:	f005 fd8e 	bl	8006712 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <MX_UCPD1_Init+0x11c>)
 8000c08:	f005 fd83 	bl	8006712 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_RX);
 8000c0c:	2272      	movs	r2, #114	; 0x72
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4832      	ldr	r0, [pc, #200]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c12:	f7ff fe47 	bl	80008a4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4830      	ldr	r0, [pc, #192]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c1c:	f7ff fd36 	bl	800068c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_MEDIUM);
 8000c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c24:	2101      	movs	r1, #1
 8000c26:	482d      	ldr	r0, [pc, #180]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c28:	f7ff fe16 	bl	8000858 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c32:	f7ff fd53 	bl	80006dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4828      	ldr	r0, [pc, #160]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c3c:	f7ff fd74 	bl	8000728 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	2101      	movs	r1, #1
 8000c44:	4825      	ldr	r0, [pc, #148]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c46:	f7ff fd95 	bl	8000774 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4823      	ldr	r0, [pc, #140]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c50:	f7ff fdb6 	bl	80007c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4820      	ldr	r0, [pc, #128]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c5a:	f7ff fdd7 	bl	800080c <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD1_TX);
 8000c5e:	2273      	movs	r2, #115	; 0x73
 8000c60:	2102      	movs	r1, #2
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c64:	f7ff fe1e 	bl	80008a4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000c68:	2210      	movs	r2, #16
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c6e:	f7ff fd0d 	bl	800068c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_MEDIUM);
 8000c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c76:	2102      	movs	r1, #2
 8000c78:	4818      	ldr	r0, [pc, #96]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c7a:	f7ff fded 	bl	8000858 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c84:	f7ff fd2a 	bl	80006dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c8e:	f7ff fd4b 	bl	8000728 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	2102      	movs	r1, #2
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000c98:	f7ff fd6c 	bl	8000774 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	480e      	ldr	r0, [pc, #56]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000ca2:	f7ff fd8d 	bl	80007c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_UCPD1_Init+0x120>)
 8000cac:	f7ff fdae 	bl	800080c <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cb0:	f7ff fc32 	bl	8000518 <__NVIC_GetPriorityGrouping>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2105      	movs	r1, #5
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc82 	bl	80005c4 <NVIC_EncodePriority>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	203f      	movs	r0, #63	; 0x3f
 8000cc6:	f7ff fc53 	bl	8000570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8000cca:	203f      	movs	r0, #63	; 0x3f
 8000ccc:	f7ff fc32 	bl	8000534 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_DMA_Init+0x90>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_DMA_Init+0x90>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6493      	str	r3, [r2, #72]	; 0x48
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_DMA_Init+0x90>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_DMA_Init+0x90>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <MX_DMA_Init+0x90>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6493      	str	r3, [r2, #72]	; 0x48
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_DMA_Init+0x90>)
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2105      	movs	r1, #5
 8000d1a:	200b      	movs	r0, #11
 8000d1c:	f000 fe42 	bl	80019a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d20:	200b      	movs	r0, #11
 8000d22:	f000 fe59 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000d26:	f7ff fbf7 	bl	8000518 <__NVIC_GetPriorityGrouping>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fc47 	bl	80005c4 <NVIC_EncodePriority>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	200c      	movs	r0, #12
 8000d3c:	f7ff fc18 	bl	8000570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d40:	200c      	movs	r0, #12
 8000d42:	f7ff fbf7 	bl	8000534 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000d46:	f7ff fbe7 	bl	8000518 <__NVIC_GetPriorityGrouping>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc37 	bl	80005c4 <NVIC_EncodePriority>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	200d      	movs	r0, #13
 8000d5c:	f7ff fc08 	bl	8000570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d60:	200d      	movs	r0, #13
 8000d62:	f7ff fbe7 	bl	8000534 <__NVIC_EnableIRQ>

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a43      	ldr	r2, [pc, #268]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b41      	ldr	r3, [pc, #260]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da2:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a31      	ldr	r2, [pc, #196]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, UI_LED1_Pin|UI_LED2_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2103      	movs	r1, #3
 8000dee:	482c      	ldr	r0, [pc, #176]	; (8000ea0 <MX_GPIO_Init+0x12c>)
 8000df0:	f001 f9fc 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UI_LED3_Pin|UI_LED4_Pin|IFP_VBUS_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2183      	movs	r1, #131	; 0x83
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 f9f6 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HUB_RESET_GPIO_Port, HUB_RESET_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4827      	ldr	r0, [pc, #156]	; (8000ea4 <MX_GPIO_Init+0x130>)
 8000e06:	f001 f9f1 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UI_LED1_Pin UI_LED2_Pin */
  GPIO_InitStruct.Pin = UI_LED1_Pin|UI_LED2_Pin;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <MX_GPIO_Init+0x12c>)
 8000e22:	f001 f861 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8000e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <MX_GPIO_Init+0x134>)
 8000e3c:	f001 f854 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_LED3_Pin UI_LED4_Pin IFP_VBUS_Pin */
  GPIO_InitStruct.Pin = UI_LED3_Pin|UI_LED4_Pin|IFP_VBUS_Pin;
 8000e40:	2383      	movs	r3, #131	; 0x83
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f001 f845 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HUB_RESET_Pin */
  GPIO_InitStruct.Pin = HUB_RESET_Pin;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HUB_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <MX_GPIO_Init+0x130>)
 8000e76:	f001 f837 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8000e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_GPIO_Init+0x130>)
 8000e90:	f001 f82a 	bl	8001ee8 <HAL_GPIO_Init>

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001400 	.word	0x48001400
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48001800 	.word	0x48001800

08000eac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f009 fb62 	bl	800a57e <osDelay>
 8000eba:	e7fb      	b.n	8000eb4 <StartDefaultTask+0x8>

08000ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ece:	f000 fa6f 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40001000 	.word	0x40001000

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_MspInit+0x4c>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_MspInit+0x4c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_MspInit+0x4c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_MspInit+0x4c>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	; 0x58
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_MspInit+0x4c>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	f06f 0001 	mvn.w	r0, #1
 8000f2a:	f000 fd3b 	bl	80019a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_ADC_MspInit+0x74>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d124      	bne.n	8000fa8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_ADC_MspInit+0x78>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_ADC_MspInit+0x78>)
 8000f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_ADC_MspInit+0x78>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_ADC_MspInit+0x78>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_ADC_MspInit+0x78>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_ADC_MspInit+0x78>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN17
    PA5     ------> ADC2_IN13
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f8e:	2370      	movs	r3, #112	; 0x70
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f000 ffa0 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	50000100 	.word	0x50000100
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_I2C_MspInit+0xb8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d145      	bne.n	8001066 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a25      	ldr	r2, [pc, #148]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB5     ------> I2C1_SMBA
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800100a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	2312      	movs	r3, #18
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101c:	2304      	movs	r3, #4
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f000 ff5d 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103e:	2304      	movs	r3, #4
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <HAL_I2C_MspInit+0xc0>)
 800104a:	f000 ff4d 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 8001054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_I2C_MspInit+0xbc>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40005400 	.word	0x40005400
 8001074:	40021000 	.word	0x40021000
 8001078:	48000400 	.word	0x48000400

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <HAL_UART_MspInit+0xe0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d159      	bne.n	8001152 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_UART_MspInit+0xe4>)
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <HAL_UART_MspInit+0xe4>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_UART_MspInit+0xe4>)
 80010ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_UART_MspInit+0xe4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_UART_MspInit+0xe4>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_UART_MspInit+0xe4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ce:	230c      	movs	r3, #12
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010de:	230c      	movs	r3, #12
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 fefc 	bl	8001ee8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_UART_MspInit+0xe8>)
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_UART_MspInit+0xec>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_UART_MspInit+0xe8>)
 80010f8:	2223      	movs	r2, #35	; 0x23
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_MspInit+0xe8>)
 80010fe:	2210      	movs	r2, #16
 8001100:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_UART_MspInit+0xe8>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_UART_MspInit+0xe8>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_UART_MspInit+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_UART_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_UART_MspInit+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_UART_MspInit+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <HAL_UART_MspInit+0xe8>)
 8001128:	f000 fc64 	bl	80019f4 <HAL_DMA_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001132:	f7ff fed5 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_UART_MspInit+0xe8>)
 800113a:	679a      	str	r2, [r3, #120]	; 0x78
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_UART_MspInit+0xe8>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	205b      	movs	r0, #91	; 0x5b
 8001148:	f000 fc2c 	bl	80019a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800114c:	205b      	movs	r0, #91	; 0x5b
 800114e:	f000 fc43 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40008000 	.word	0x40008000
 8001160:	40021000 	.word	0x40021000
 8001164:	20001a58 	.word	0x20001a58
 8001168:	40020008 	.word	0x40020008

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_InitTick+0xcc>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <HAL_InitTick+0xcc>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_InitTick+0xcc>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fb85 	bl	80048b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011aa:	f003 fb57 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 80011ae:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	4a22      	ldr	r2, [pc, #136]	; (800123c <HAL_InitTick+0xd0>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3b01      	subs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_InitTick+0xd4>)
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_InitTick+0xd8>)
 80011c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_InitTick+0xd4>)
 80011c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_InitTick+0xd4>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_InitTick+0xd4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_InitTick+0xd4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <HAL_InitTick+0xd4>)
 80011e0:	f003 fdd0 	bl	8004d84 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d11b      	bne.n	800122a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <HAL_InitTick+0xd4>)
 80011f4:	f003 fe28 	bl	8004e48 <HAL_TIM_Base_Start_IT>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001202:	2b00      	cmp	r3, #0
 8001204:	d111      	bne.n	800122a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001206:	2036      	movs	r0, #54	; 0x36
 8001208:	f000 fbe6 	bl	80019d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	d808      	bhi.n	8001224 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001212:	2200      	movs	r2, #0
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	2036      	movs	r0, #54	; 0x36
 8001218:	f000 fbc4 	bl	80019a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_InitTick+0xdc>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e002      	b.n	800122a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 800122a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800122e:	4618      	mov	r0, r3
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	431bde83 	.word	0x431bde83
 8001240:	20001ab8 	.word	0x20001ab8
 8001244:	40001000 	.word	0x40001000
 8001248:	20000004 	.word	0x20000004

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Channel1_IRQHandler+0x10>)
 800127e:	f000 fd21 	bl	8001cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20001a58 	.word	0x20001a58

0800128c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USB_HP_IRQHandler+0x10>)
 80012ae:	f001 f9e2 	bl	8002676 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200027a8 	.word	0x200027a8

080012bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USB_LP_IRQHandler+0x10>)
 80012c2:	f001 f9d8 	bl	8002676 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200027a8 	.word	0x200027a8

080012d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM6_DAC_IRQHandler+0x10>)
 80012d6:	f003 fe21 	bl	8004f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20001ab8 	.word	0x20001ab8

080012e4 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END UCPD1_IRQn 0 */
  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <LPUART1_IRQHandler+0x10>)
 80012fa:	f004 f8dd 	bl	80054b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200019c8 	.word	0x200019c8

08001308 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopForever+0x6>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopForever+0xe>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopForever+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff ffd7 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f00a ff5f 	bl	800c21c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135e:	f7ff facb 	bl	80008f8 <main>

08001362 <LoopForever>:

LoopForever:
    b LoopForever
 8001362:	e7fe      	b.n	8001362 <LoopForever>
  ldr   r0, =_estack
 8001364:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001370:	0800c544 	.word	0x0800c544
  ldr r2, =_sbss
 8001374:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001378:	20002aa8 	.word	0x20002aa8

0800137c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>

0800137e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 fb00 	bl	800198e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	200f      	movs	r0, #15
 8001390:	f7ff feec 	bl	800116c <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e001      	b.n	80013a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a0:	f7ff fda4 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a4:	79fb      	ldrb	r3, [r7, #7]

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x1c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_IncTick+0x1c>)
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20001b04 	.word	0x20001b04
 80013d0:	20000008 	.word	0x20000008

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20001b04 	.word	0x20001b04

080013ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001422:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6093      	str	r3, [r2, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800146e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001472:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800149a:	d101      	bne.n	80014a0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <LL_ADC_IsEnabled+0x18>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <LL_ADC_IsEnabled+0x1a>
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d101      	bne.n	80014ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b08      	cmp	r3, #8
 800150c:	d101      	bne.n	8001512 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e16d      	b.n	8001816 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fcf7 	bl	8000f3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff68 	bl	8001436 <LL_ADC_IsDeepPowerDownEnabled>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff4e 	bl	8001412 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff83 	bl	8001486 <LL_ADC_IsInternalRegulatorEnabled>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d115      	bne.n	80015b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff67 	bl	800145e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001590:	4ba3      	ldr	r3, [pc, #652]	; (8001820 <HAL_ADC_Init+0x300>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	4aa3      	ldr	r2, [pc, #652]	; (8001824 <HAL_ADC_Init+0x304>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	3301      	adds	r3, #1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015a4:	e002      	b.n	80015ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff65 	bl	8001486 <LL_ADC_IsInternalRegulatorEnabled>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff76 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80015e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 8106 	bne.w	8001804 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8102 	bne.w	8001804 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001608:	f043 0202 	orr.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff4a 	bl	80014ae <LL_ADC_IsEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001620:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001624:	f7ff ff43 	bl	80014ae <LL_ADC_IsEnabled>
 8001628:	4604      	mov	r4, r0
 800162a:	487f      	ldr	r0, [pc, #508]	; (8001828 <HAL_ADC_Init+0x308>)
 800162c:	f7ff ff3f 	bl	80014ae <LL_ADC_IsEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	4323      	orrs	r3, r4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4619      	mov	r1, r3
 800163e:	487b      	ldr	r0, [pc, #492]	; (800182c <HAL_ADC_Init+0x30c>)
 8001640:	f7ff fed4 	bl	80013ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7f5b      	ldrb	r3, [r3, #29]
 8001648:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001654:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800165a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001662:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800166e:	2b01      	cmp	r3, #1
 8001670:	d106      	bne.n	8001680 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	3b01      	subs	r3, #1
 8001678:	045b      	lsls	r3, r3, #17
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d009      	beq.n	800169c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_ADC_Init+0x310>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff02 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80016d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff0f 	bl	80014fa <LL_ADC_INJ_IsConversionOngoing>
 80016dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d16d      	bne.n	80017c0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d16a      	bne.n	80017c0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001706:	f023 0302 	bic.w	r3, r3, #2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	430b      	orrs	r3, r1
 8001712:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d017      	beq.n	800174c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800172a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001734:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6911      	ldr	r1, [r2, #16]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	430b      	orrs	r3, r1
 8001746:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800174a:	e013      	b.n	8001774 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800175a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800176c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001770:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800177a:	2b01      	cmp	r3, #1
 800177c:	d118      	bne.n	80017b0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001794:	4311      	orrs	r1, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800179a:	4311      	orrs	r1, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017a0:	430a      	orrs	r2, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	e007      	b.n	80017c0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10c      	bne.n	80017e2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f023 010f 	bic.w	r1, r3, #15
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
 80017e0:	e007      	b.n	80017f2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020f 	bic.w	r2, r2, #15
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	65da      	str	r2, [r3, #92]	; 0x5c
 8001802:	e007      	b.n	8001814 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	f043 0210 	orr.w	r2, r3, #16
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001814:	7ffb      	ldrb	r3, [r7, #31]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000
 8001824:	053e2d63 	.word	0x053e2d63
 8001828:	50000100 	.word	0x50000100
 800182c:	50000300 	.word	0x50000300
 8001830:	fff04007 	.word	0xfff04007

08001834 <__NVIC_SetPriorityGrouping>:
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff4c 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b2:	f7ff ff63 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7ff ffb3 	bl	8001928 <NVIC_EncodePriority>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff82 	bl	80018d4 <__NVIC_SetPriority>
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff56 	bl	8001898 <__NVIC_EnableIRQ>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e08d      	b.n	8001b22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_DMA_Init+0x138>)
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d80f      	bhi.n	8001a32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <HAL_DMA_Init+0x13c>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a45      	ldr	r2, [pc, #276]	; (8001b34 <HAL_DMA_Init+0x140>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	009a      	lsls	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_DMA_Init+0x144>)
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a30:	e00e      	b.n	8001a50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <HAL_DMA_Init+0x148>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a3d      	ldr	r2, [pc, #244]	; (8001b34 <HAL_DMA_Init+0x140>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	009a      	lsls	r2, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a3c      	ldr	r2, [pc, #240]	; (8001b40 <HAL_DMA_Init+0x14c>)
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f9be 	bl	8001e24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ab0:	d102      	bne.n	8001ab8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001acc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d010      	beq.n	8001af8 <HAL_DMA_Init+0x104>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d80c      	bhi.n	8001af8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f9de 	bl	8001ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	e008      	b.n	8001b0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020407 	.word	0x40020407
 8001b30:	bffdfff8 	.word	0xbffdfff8
 8001b34:	cccccccd 	.word	0xcccccccd
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	bffdfbf8 	.word	0xbffdfbf8
 8001b40:	40020400 	.word	0x40020400

08001b44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d005      	beq.n	8001b68 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e037      	b.n	8001bd8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020e 	bic.w	r2, r2, #14
 8001b76:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b86:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bb4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bcc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bd6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2204      	movs	r2, #4
 8001c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e047      	b.n	8001cba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 020e 	bic.w	r2, r2, #14
 8001c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00c      	beq.n	8001c9a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
    }
  }
  return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d026      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x7a>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d021      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0204 	bic.w	r2, r2, #4
 8001d16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2104      	movs	r1, #4
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d071      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d3c:	e06c      	b.n	8001e18 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2202      	movs	r2, #2
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02e      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d029      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 020a 	bic.w	r2, r2, #10
 8001d78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f003 021f 	and.w	r2, r3, #31
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2102      	movs	r1, #2
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d038      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001dae:	e033      	b.n	8001e18 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2208      	movs	r2, #8
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02a      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d025      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020e 	bic.w	r2, r2, #14
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
}
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d802      	bhi.n	8001e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e001      	b.n	8001e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e40:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	009a      	lsls	r2, r3, #2
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	2201      	movs	r2, #1
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40020407 	.word	0x40020407
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020820 	.word	0x40020820
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	40020880 	.word	0x40020880

08001ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2201      	movs	r2, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	1000823f 	.word	0x1000823f
 8001ee4:	40020940 	.word	0x40020940

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ef6:	e15a      	b.n	80021ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 814c 	beq.w	80021a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d00b      	beq.n	8001f30 <HAL_GPIO_Init+0x48>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f24:	2b11      	cmp	r3, #17
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d130      	bne.n	8001f92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f66:	2201      	movs	r2, #1
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	f003 0201 	and.w	r2, r3, #1
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0xea>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b12      	cmp	r3, #18
 8001fd0:	d123      	bne.n	800201a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	6939      	ldr	r1, [r7, #16]
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0203 	and.w	r2, r3, #3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80a6 	beq.w	80021a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205c:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <HAL_GPIO_Init+0x2e4>)
 800205e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002060:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <HAL_GPIO_Init+0x2e4>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6613      	str	r3, [r2, #96]	; 0x60
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_GPIO_Init+0x2e4>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002074:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_GPIO_Init+0x2e8>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800209e:	d01f      	beq.n	80020e0 <HAL_GPIO_Init+0x1f8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x2ec>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d019      	beq.n	80020dc <HAL_GPIO_Init+0x1f4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <HAL_GPIO_Init+0x1f0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x2f4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00d      	beq.n	80020d4 <HAL_GPIO_Init+0x1ec>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x2f8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <HAL_GPIO_Init+0x1e8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_GPIO_Init+0x2fc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_GPIO_Init+0x1e4>
 80020c8:	2305      	movs	r3, #5
 80020ca:	e00a      	b.n	80020e2 <HAL_GPIO_Init+0x1fa>
 80020cc:	2306      	movs	r3, #6
 80020ce:	e008      	b.n	80020e2 <HAL_GPIO_Init+0x1fa>
 80020d0:	2304      	movs	r3, #4
 80020d2:	e006      	b.n	80020e2 <HAL_GPIO_Init+0x1fa>
 80020d4:	2303      	movs	r3, #3
 80020d6:	e004      	b.n	80020e2 <HAL_GPIO_Init+0x1fa>
 80020d8:	2302      	movs	r3, #2
 80020da:	e002      	b.n	80020e2 <HAL_GPIO_Init+0x1fa>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_GPIO_Init+0x1fa>
 80020e0:	2300      	movs	r3, #0
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	f002 0203 	and.w	r2, r2, #3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4093      	lsls	r3, r2
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f2:	4937      	ldr	r1, [pc, #220]	; (80021d0 <HAL_GPIO_Init+0x2e8>)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002100:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_GPIO_Init+0x300>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002124:	4a30      	ldr	r2, [pc, #192]	; (80021e8 <HAL_GPIO_Init+0x300>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x300>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214e:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <HAL_GPIO_Init+0x300>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_GPIO_Init+0x300>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_GPIO_Init+0x300>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x300>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_GPIO_Init+0x300>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f ae9d 	bne.w	8001ef8 <HAL_GPIO_Init+0x10>
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000
 80021d4:	48000400 	.word	0x48000400
 80021d8:	48000800 	.word	0x48000800
 80021dc:	48000c00 	.word	0x48000c00
 80021e0:	48001000 	.word	0x48001000
 80021e4:	48001400 	.word	0x48001400
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002208:	e002      	b.n	8002210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e081      	b.n	8002332 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe feb8 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800226c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e006      	b.n	80022a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d104      	bne.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	ea42 0103 	orr.w	r1, r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	021a      	lsls	r2, r3, #8
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69d9      	ldr	r1, [r3, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	d138      	bne.n	80023c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800235a:	2302      	movs	r3, #2
 800235c:	e032      	b.n	80023c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2224      	movs	r2, #36	; 0x24
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800238c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
  }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d139      	bne.n	800245a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e033      	b.n	800245c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b08b      	sub	sp, #44	; 0x2c
 800246c:	af06      	add	r7, sp, #24
 800246e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0d7      	b.n	800262a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f009 fbcc 	bl	800bc2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 f9bb 	bl	800681c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e04c      	b.n	8002546 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	3301      	adds	r3, #1
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	b298      	uxth	r0, r3
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3336      	adds	r3, #54	; 0x36
 80024ea:	4602      	mov	r2, r0
 80024ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3303      	adds	r3, #3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	3338      	adds	r3, #56	; 0x38
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	3340      	adds	r3, #64	; 0x40
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	3301      	adds	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d3ad      	bcc.n	80024ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e044      	b.n	80025e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3301      	adds	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3b5      	bcc.n	8002556 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	687e      	ldr	r6, [r7, #4]
 80025f2:	466d      	mov	r5, sp
 80025f4:	f106 0410 	add.w	r4, r6, #16
 80025f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	602b      	str	r3, [r5, #0]
 8002600:	1d33      	adds	r3, r6, #4
 8002602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002604:	6838      	ldr	r0, [r7, #0]
 8002606:	f004 f924 	bl	8006852 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f001 fb8a 	bl	8003d3c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002632 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_PCD_Start+0x16>
 8002644:	2302      	movs	r3, #2
 8002646:	e012      	b.n	800266e <HAL_PCD_Start+0x3c>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f004 f8ca 	bl	80067ee <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f006 fa7d 	bl	8008b5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f006 fa82 	bl	8008b8c <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002692:	d102      	bne.n	800269a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fb4d 	bl	8002d34 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f006 fa74 	bl	8008b8c <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ae:	d112      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c2:	b292      	uxth	r2, r2
 80026c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f009 fb32 	bl	800bd32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026ce:	2100      	movs	r1, #0
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f91e 	bl	8002912 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 fa56 	bl	8008b8c <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ea:	d10b      	bne.n	8002704 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026fe:	b292      	uxth	r2, r2
 8002700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f006 fa3f 	bl	8008b8c <USB_ReadInterrupts>
 800270e:	4603      	mov	r3, r0
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002718:	d10b      	bne.n	8002732 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800272c:	b292      	uxth	r2, r2
 800272e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f006 fa28 	bl	8008b8c <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d133      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0204 	bic.w	r2, r2, #4
 800275a:	b292      	uxth	r2, r2
 800275c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0208 	bic.w	r2, r2, #8
 8002772:	b292      	uxth	r2, r2
 8002774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800278a:	2100      	movs	r1, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f009 fcc5 	bl	800c11c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f009 fb06 	bl	800bda4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027aa:	b292      	uxth	r2, r2
 80027ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f006 f9e9 	bl	8008b8c <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c4:	d126      	bne.n	8002814 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0208 	orr.w	r2, r2, #8
 80027d8:	b292      	uxth	r2, r2
 80027da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f0:	b292      	uxth	r2, r2
 80027f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0204 	orr.w	r2, r2, #4
 8002808:	b292      	uxth	r2, r2
 800280a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f009 faae 	bl	800bd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f006 f9b7 	bl	8008b8c <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d13f      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800283a:	b292      	uxth	r2, r2
 800283c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d12b      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0204 	orr.w	r2, r2, #4
 800285c:	b292      	uxth	r2, r2
 800285e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0208 	orr.w	r2, r2, #8
 8002874:	b292      	uxth	r2, r2
 8002876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800288a:	b29b      	uxth	r3, r3
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002898:	2101      	movs	r1, #1
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f009 fc3e 	bl	800c11c <HAL_PCDEx_LPM_Callback>
 80028a0:	e002      	b.n	80028a8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f009 fa64 	bl	800bd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f006 f96d 	bl	8008b8c <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d10e      	bne.n	80028dc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028d0:	b292      	uxth	r2, r2
 80028d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f009 fa1d 	bl	800bd16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 f953 	bl	8008b8c <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d10b      	bne.n	800290a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002904:	b292      	uxth	r2, r2
 8002906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_PCD_SetAddress+0x1a>
 8002928:	2302      	movs	r3, #2
 800292a:	e013      	b.n	8002954 <HAL_PCD_SetAddress+0x42>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f006 f8f6 	bl	8008b36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	70fb      	strb	r3, [r7, #3]
 800296e:	460b      	mov	r3, r1
 8002970:	803b      	strh	r3, [r7, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800297a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297e:	2b00      	cmp	r3, #0
 8002980:	da0e      	bge.n	80029a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	705a      	strb	r2, [r3, #1]
 800299e:	e00e      	b.n	80029be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 0207 	and.w	r2, r3, #7
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029ca:	883a      	ldrh	r2, [r7, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	78ba      	ldrb	r2, [r7, #2]
 80029d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029e8:	78bb      	ldrb	r3, [r7, #2]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d102      	bne.n	80029f4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_PCD_EP_Open+0xa6>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e00e      	b.n	8002a20 <HAL_PCD_EP_Open+0xc4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 ff3f 	bl	8006894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da0e      	bge.n	8002a5a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	705a      	strb	r2, [r3, #1]
 8002a58:	e00e      	b.n	8002a78 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 0207 	and.w	r2, r3, #7
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_EP_Close+0x6a>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e00e      	b.n	8002ab0 <HAL_PCD_EP_Close+0x88>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 fa65 	bl	8006f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	f003 0207 	and.w	r2, r3, #7
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af8:	7afb      	ldrb	r3, [r7, #11]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b04:	7afb      	ldrb	r3, [r7, #11]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 fc18 	bl	800734a <USB_EPStartXfer>
 8002b1a:	e005      	b.n	8002b28 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6979      	ldr	r1, [r7, #20]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fc11 	bl	800734a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0207 	and.w	r2, r3, #7
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002b54:	681b      	ldr	r3, [r3, #0]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2201      	movs	r2, #1
 8002bac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fbbd 	bl	800734a <USB_EPStartXfer>
 8002bd0:	e005      	b.n	8002bde <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fbb6 	bl	800734a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 0207 	and.w	r2, r3, #7
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d901      	bls.n	8002c06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e03e      	b.n	8002c84 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0e      	bge.n	8002c2c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	705a      	strb	r2, [r3, #1]
 8002c2a:	e00c      	b.n	8002c46 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_PCD_EP_SetStall+0x7e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e00e      	b.n	8002c84 <HAL_PCD_EP_SetStall+0x9c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68f9      	ldr	r1, [r7, #12]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 fe5f 	bl	8008938 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e040      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da0e      	bge.n	8002cd0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00e      	b.n	8002cee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 0207 	and.w	r2, r3, #7
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_EP_ClrStall+0x82>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e00e      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0xa0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fe5c 	bl	80089da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d3c:	e2d6      	b.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d46:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 815b 	bne.w	8003014 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d150      	bne.n	8002e0a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d78:	81fb      	strh	r3, [r7, #14]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3328      	adds	r3, #40	; 0x28
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	441a      	add	r2, r3
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f008 ff89 	bl	800bce2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8287 	beq.w	80032ec <PCD_EP_ISR_Handler+0x5b8>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 8282 	bne.w	80032ec <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e08:	e270      	b.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d032      	beq.n	8002e8a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f005 fee6 	bl	8008c30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e70:	4013      	ands	r3, r2
 8002e72:	823b      	strh	r3, [r7, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	8a3a      	ldrh	r2, [r7, #16]
 8002e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f008 ff00 	bl	800bc88 <HAL_PCD_SetupStageCallback>
 8002e88:	e230      	b.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f280 822c 	bge.w	80032ec <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	83bb      	strh	r3, [r7, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	8bba      	ldrh	r2, [r7, #28]
 8002eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x1e2>
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	6959      	ldr	r1, [r3, #20]
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f005 fe98 	bl	8008c30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	441a      	add	r2, r3
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f008 fecb 	bl	800bcac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 81e2 	bne.w	80032ec <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d112      	bne.n	8002f76 <PCD_EP_ISR_Handler+0x242>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	e02f      	b.n	8002fd6 <PCD_EP_ISR_Handler+0x2a2>
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f7c:	d813      	bhi.n	8002fa6 <PCD_EP_ISR_Handler+0x272>
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <PCD_EP_ISR_Handler+0x264>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	3301      	adds	r3, #1
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	029b      	lsls	r3, r3, #10
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	801a      	strh	r2, [r3, #0]
 8002fa4:	e017      	b.n	8002fd6 <PCD_EP_ISR_Handler+0x2a2>
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <PCD_EP_ISR_Handler+0x28c>
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	029b      	lsls	r3, r3, #10
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	827b      	strh	r3, [r7, #18]
 8002fe8:	8a7b      	ldrh	r3, [r7, #18]
 8002fea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fee:	827b      	strh	r3, [r7, #18]
 8002ff0:	8a7b      	ldrh	r3, [r7, #18]
 8002ff2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ff6:	827b      	strh	r3, [r7, #18]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	8a7b      	ldrh	r3, [r7, #18]
 8002ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
 8003012:	e16b      	b.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003026:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800302a:	2b00      	cmp	r3, #0
 800302c:	f280 80e4 	bge.w	80031f8 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29a      	uxth	r2, r3
 8003042:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003046:	4013      	ands	r3, r2
 8003048:	853b      	strh	r3, [r7, #40]	; 0x28
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800305a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800305e:	b292      	uxth	r2, r2
 8003060:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003062:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	7b1b      	ldrb	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d120      	bne.n	80030c2 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	4413      	add	r3, r2
 800309a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8083 	beq.w	80031b4 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	6959      	ldr	r1, [r3, #20]
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	88da      	ldrh	r2, [r3, #6]
 80030ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030bc:	f005 fdb8 	bl	8008c30 <USB_ReadPMA>
 80030c0:	e078      	b.n	80031b4 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d108      	bne.n	80030dc <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80030ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030cc:	461a      	mov	r2, r3
 80030ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f919 	bl	8003308 <HAL_PCD_EP_DB_Receive>
 80030d6:	4603      	mov	r3, r0
 80030d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030da:	e06b      	b.n	80031b4 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01f      	beq.n	8003176 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4413      	add	r3, r2
 8003150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800315c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800315e:	2b00      	cmp	r3, #0
 8003160:	d028      	beq.n	80031b4 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	6959      	ldr	r1, [r3, #20]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	891a      	ldrh	r2, [r3, #8]
 800316e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003170:	f005 fd5e 	bl	8008c30 <USB_ReadPMA>
 8003174:	e01e      	b.n	80031b4 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	4413      	add	r3, r2
 8003190:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800319c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	6959      	ldr	r1, [r3, #20]
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	895a      	ldrh	r2, [r3, #10]
 80031ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b0:	f005 fd3e 	bl	8008c30 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031ba:	441a      	add	r2, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031c6:	441a      	add	r2, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <PCD_EP_ISR_Handler+0x4aa>
 80031d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d206      	bcs.n	80031ec <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f008 fd61 	bl	800bcac <HAL_PCD_DataOutStageCallback>
 80031ea:	e005      	b.n	80031f8 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 f8a9 	bl	800734a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d074      	beq.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8003202:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	843b      	strh	r3, [r7, #32]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	8c3b      	ldrh	r3, [r7, #32]
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29b      	uxth	r3, r3
 800324c:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d144      	bne.n	80032e0 <PCD_EP_ISR_Handler+0x5ac>
 8003256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13f      	bne.n	80032e0 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	4413      	add	r3, r2
 800327a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003284:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	8bfb      	ldrh	r3, [r7, #30]
 800328c:	429a      	cmp	r2, r3
 800328e:	d906      	bls.n	800329e <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	619a      	str	r2, [r3, #24]
 800329c:	e002      	b.n	80032a4 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f008 fd15 	bl	800bce2 <HAL_PCD_DataInStageCallback>
 80032b8:	e018      	b.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	8bfb      	ldrh	r3, [r7, #30]
 80032c0:	441a      	add	r2, r3
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	8bfb      	ldrh	r3, [r7, #30]
 80032cc:	441a      	add	r2, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d8:	4618      	mov	r0, r3
 80032da:	f004 f836 	bl	800734a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80032de:	e005      	b.n	80032ec <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032e2:	461a      	mov	r2, r3
 80032e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f917 	bl	800351a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f6ff ad20 	blt.w	8002d3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3738      	adds	r7, #56	; 0x38
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d07c      	beq.n	800341a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	4413      	add	r3, r2
 800333a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003344:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	8b7b      	ldrh	r3, [r7, #26]
 800334c:	429a      	cmp	r2, r3
 800334e:	d306      	bcc.n	800335e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	8b7b      	ldrh	r3, [r7, #26]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	619a      	str	r2, [r3, #24]
 800335c:	e002      	b.n	8003364 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d123      	bne.n	80033b4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	833b      	strh	r3, [r7, #24]
 8003388:	8b3b      	ldrh	r3, [r7, #24]
 800338a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800338e:	833b      	strh	r3, [r7, #24]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	8b3b      	ldrh	r3, [r7, #24]
 80033a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01f      	beq.n	80033fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d8:	82fb      	strh	r3, [r7, #22]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	8afb      	ldrh	r3, [r7, #22]
 80033ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033fe:	8b7b      	ldrh	r3, [r7, #26]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8085 	beq.w	8003510 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6959      	ldr	r1, [r3, #20]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	891a      	ldrh	r2, [r3, #8]
 8003412:	8b7b      	ldrh	r3, [r7, #26]
 8003414:	f005 fc0c 	bl	8008c30 <USB_ReadPMA>
 8003418:	e07a      	b.n	8003510 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4413      	add	r3, r2
 8003434:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	8b7b      	ldrh	r3, [r7, #26]
 8003446:	429a      	cmp	r2, r3
 8003448:	d306      	bcc.n	8003458 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	8b7b      	ldrh	r3, [r7, #26]
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	e002      	b.n	800345e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d123      	bne.n	80034ae <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	83fb      	strh	r3, [r7, #30]
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003488:	83fb      	strh	r3, [r7, #30]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	441a      	add	r2, r3
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11f      	bne.n	80034f8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	83bb      	strh	r3, [r7, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8bbb      	ldrh	r3, [r7, #28]
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034f8:	8b7b      	ldrh	r3, [r7, #26]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6959      	ldr	r1, [r3, #20]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	895a      	ldrh	r2, [r3, #10]
 800350a:	8b7b      	ldrh	r3, [r7, #26]
 800350c:	f005 fb90 	bl	8008c30 <USB_ReadPMA>
    }
  }

  return count;
 8003510:	8b7b      	ldrh	r3, [r7, #26]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b0a2      	sub	sp, #136	; 0x88
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 81c5 	beq.w	80038be <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353c:	b29b      	uxth	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	4413      	add	r3, r2
 800354e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003558:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003564:	429a      	cmp	r2, r3
 8003566:	d907      	bls.n	8003578 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003570:	1ad2      	subs	r2, r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	619a      	str	r2, [r3, #24]
 8003576:	e002      	b.n	800357e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2200      	movs	r2, #0
 800357c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 80b9 	bne.w	80036fa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	785b      	ldrb	r3, [r3, #1]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d126      	bne.n	80035de <HAL_PCD_EP_DB_Transmit+0xc4>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	4413      	add	r3, r2
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	00da      	lsls	r2, r3, #3
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	4413      	add	r3, r2
 80035b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	e01a      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0xfa>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d116      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0xfa>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	4413      	add	r3, r2
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	00da      	lsls	r2, r3, #3
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	4413      	add	r3, r2
 8003608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2200      	movs	r2, #0
 8003612:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d126      	bne.n	8003670 <HAL_PCD_EP_DB_Transmit+0x156>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003630:	b29b      	uxth	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	4413      	add	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	00da      	lsls	r2, r3, #3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4413      	add	r3, r2
 8003644:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003654:	b29a      	uxth	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003668:	b29a      	uxth	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	e017      	b.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x186>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d113      	bne.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x186>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003680:	b29b      	uxth	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	4413      	add	r3, r2
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	00da      	lsls	r2, r3, #3
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	4413      	add	r3, r2
 8003694:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2200      	movs	r2, #0
 800369e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f008 fb1b 	bl	800bce2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 82d2 	beq.w	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	827b      	strh	r3, [r7, #18]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	8a7b      	ldrh	r3, [r7, #18]
 80036e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	8013      	strh	r3, [r2, #0]
 80036f8:	e2b0      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d021      	beq.n	8003748 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	441a      	add	r2, r3
 8003730:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	b29b      	uxth	r3, r3
 8003746:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800374e:	2b01      	cmp	r3, #1
 8003750:	f040 8284 	bne.w	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800375c:	441a      	add	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	69da      	ldr	r2, [r3, #28]
 8003766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800376a:	441a      	add	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	429a      	cmp	r2, r3
 800377a:	d309      	bcc.n	8003790 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003788:	1ad2      	subs	r2, r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	621a      	str	r2, [r3, #32]
 800378e:	e015      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8003798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037a6:	e009      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d155      	bne.n	8003870 <HAL_PCD_EP_DB_Transmit+0x356>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	4413      	add	r3, r2
 80037da:	63bb      	str	r3, [r7, #56]	; 0x38
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	00da      	lsls	r2, r3, #3
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	4413      	add	r3, r2
 80037e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
 80037ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d112      	bne.n	8003818 <HAL_PCD_EP_DB_Transmit+0x2fe>
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003810:	b29a      	uxth	r2, r3
 8003812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	e047      	b.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	2b3e      	cmp	r3, #62	; 0x3e
 800381c:	d811      	bhi.n	8003842 <HAL_PCD_EP_DB_Transmit+0x328>
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
 8003824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_PCD_EP_DB_Transmit+0x31a>
 800382e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003830:	3301      	adds	r3, #1
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
 8003834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003836:	b29b      	uxth	r3, r3
 8003838:	029b      	lsls	r3, r3, #10
 800383a:	b29a      	uxth	r2, r3
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e032      	b.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	64bb      	str	r3, [r7, #72]	; 0x48
 8003848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <HAL_PCD_EP_DB_Transmit+0x33e>
 8003852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003854:	3b01      	subs	r3, #1
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	b29b      	uxth	r3, r3
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	b29b      	uxth	r3, r3
 8003860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003868:	b29a      	uxth	r2, r3
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	e01b      	b.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	785b      	ldrb	r3, [r3, #1]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d117      	bne.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	4413      	add	r3, r2
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	00da      	lsls	r2, r3, #3
 8003896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003898:	4413      	add	r3, r2
 800389a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	6959      	ldr	r1, [r3, #20]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	891a      	ldrh	r2, [r3, #8]
 80038b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f005 f978 	bl	8008bac <USB_WritePMA>
 80038bc:	e1ce      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	4413      	add	r3, r2
 80038d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d307      	bcc.n	8003902 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038fa:	1ad2      	subs	r2, r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	619a      	str	r2, [r3, #24]
 8003900:	e002      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 80c4 	bne.w	8003a9a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d126      	bne.n	8003968 <HAL_PCD_EP_DB_Transmit+0x44e>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	4413      	add	r3, r2
 8003930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	00da      	lsls	r2, r3, #3
 8003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393a:	4413      	add	r3, r2
 800393c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003940:	66bb      	str	r3, [r7, #104]	; 0x68
 8003942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800394c:	b29a      	uxth	r2, r3
 800394e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003960:	b29a      	uxth	r2, r3
 8003962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	e01a      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x484>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d116      	bne.n	800399e <HAL_PCD_EP_DB_Transmit+0x484>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	677b      	str	r3, [r7, #116]	; 0x74
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003984:	4413      	add	r3, r2
 8003986:	677b      	str	r3, [r7, #116]	; 0x74
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	00da      	lsls	r2, r3, #3
 800398e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003990:	4413      	add	r3, r2
 8003992:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003996:	673b      	str	r3, [r7, #112]	; 0x70
 8003998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800399a:	2200      	movs	r2, #0
 800399c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d12f      	bne.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x4f2>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c4:	4413      	add	r3, r2
 80039c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	00da      	lsls	r2, r3, #3
 80039d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039d4:	4413      	add	r3, r2
 80039d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	e017      	b.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x522>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d113      	bne.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x522>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a22:	4413      	add	r3, r2
 8003a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	00da      	lsls	r2, r3, #3
 8003a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a2e:	4413      	add	r3, r2
 8003a30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a38:	2200      	movs	r2, #0
 8003a3a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f008 f94d 	bl	800bce2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 8104 	bne.w	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	441a      	add	r2, r3
 8003a80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]
 8003a98:	e0e0      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d121      	bne.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	f040 80b4 	bne.w	8003c5c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003afc:	441a      	add	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b0a:	441a      	add	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d309      	bcc.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	621a      	str	r2, [r3, #32]
 8003b2e:	e015      	b.n	8003b5c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b46:	e009      	b.n	8003b5c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2200      	movs	r2, #0
 8003b52:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	667b      	str	r3, [r7, #100]	; 0x64
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d155      	bne.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7e:	4413      	add	r3, r2
 8003b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	00da      	lsls	r2, r3, #3
 8003b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d112      	bne.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	e044      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8003bc2:	d811      	bhi.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8003bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_PCD_EP_DB_Transmit+0x6c0>
 8003bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8003bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	e02f      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	657b      	str	r3, [r7, #84]	; 0x54
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	e018      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d114      	bne.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c2c:	4413      	add	r3, r2
 8003c2e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	00da      	lsls	r2, r3, #3
 8003c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c38:	4413      	add	r3, r2
 8003c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c46:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6959      	ldr	r1, [r3, #20]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	895a      	ldrh	r2, [r3, #10]
 8003c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f004 ffa8 	bl	8008bac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c76:	823b      	strh	r3, [r7, #16]
 8003c78:	8a3b      	ldrh	r3, [r7, #16]
 8003c7a:	f083 0310 	eor.w	r3, r3, #16
 8003c7e:	823b      	strh	r3, [r7, #16]
 8003c80:	8a3b      	ldrh	r3, [r7, #16]
 8003c82:	f083 0320 	eor.w	r3, r3, #32
 8003c86:	823b      	strh	r3, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	8a3b      	ldrh	r3, [r7, #16]
 8003c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3788      	adds	r7, #136	; 0x88
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cc8:	897b      	ldrh	r3, [r7, #10]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd4:	897b      	ldrh	r3, [r7, #10]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e009      	b.n	8003d00 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cec:	897a      	ldrh	r2, [r7, #10]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d00:	893b      	ldrh	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	80da      	strh	r2, [r3, #6]
 8003d14:	e00b      	b.n	8003d2e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d141      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d131      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dac:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db2:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dc4:	4a41      	ldr	r2, [pc, #260]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dcc:	4b40      	ldr	r3, [pc, #256]	; (8003ed0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2232      	movs	r2, #50	; 0x32
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	0c9b      	lsrs	r3, r3, #18
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de2:	e002      	b.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d102      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f2      	bne.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dfe:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d158      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e057      	b.n	8003ec0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e10:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e16:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e20:	e04d      	b.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d141      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d131      	bne.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e38:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3e:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e50:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2232      	movs	r2, #50	; 0x32
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	0c9b      	lsrs	r3, r3, #18
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6e:	e002      	b.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d102      	bne.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f2      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e96:	d112      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e011      	b.n	8003ec0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003eac:	e007      	b.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ebc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	431bde83 	.word	0x431bde83

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e308      	b.n	80044fc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d075      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef6:	4ba3      	ldr	r3, [pc, #652]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f00:	4ba0      	ldr	r3, [pc, #640]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d102      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3e>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d002      	beq.n	8003f1c <HAL_RCC_OscConfig+0x44>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	4b99      	ldr	r3, [pc, #612]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05b      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x108>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d157      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e2e3      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x74>
 8003f3e:	4b91      	ldr	r3, [pc, #580]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a90      	ldr	r2, [pc, #576]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e01d      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a8a      	ldr	r2, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a87      	ldr	r2, [pc, #540]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f70:	4b84      	ldr	r3, [pc, #528]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a83      	ldr	r2, [pc, #524]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b81      	ldr	r3, [pc, #516]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a80      	ldr	r2, [pc, #512]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd fa20 	bl	80013d4 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fd fa1c 	bl	80013d4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e2a8      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003faa:	4b76      	ldr	r3, [pc, #472]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0xc0>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fa0c 	bl	80013d4 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fd fa08 	bl	80013d4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e294      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xe8>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d075      	beq.n	80040da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fee:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff8:	4b62      	ldr	r3, [pc, #392]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d102      	bne.n	800400e <HAL_RCC_OscConfig+0x136>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d002      	beq.n	8004014 <HAL_RCC_OscConfig+0x13c>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d11f      	bne.n	8004054 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004014:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_OscConfig+0x154>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e267      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402c:	4b55      	ldr	r3, [pc, #340]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	4952      	ldr	r1, [pc, #328]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004040:	4b51      	ldr	r3, [pc, #324]	; (8004188 <HAL_RCC_OscConfig+0x2b0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd f891 	bl	800116c <HAL_InitTick>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d043      	beq.n	80040d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e253      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d023      	beq.n	80040a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405c:	4b49      	ldr	r3, [pc, #292]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a48      	ldr	r2, [pc, #288]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd f9b4 	bl	80013d4 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004070:	f7fd f9b0 	bl	80013d4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e23c      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004082:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	4939      	ldr	r1, [pc, #228]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
 80040a2:	e01a      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a4:	4b37      	ldr	r3, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a36      	ldr	r2, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd f990 	bl	80013d4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b8:	f7fd f98c 	bl	80013d4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e218      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x1e0>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03c      	beq.n	8004160 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01c      	beq.n	8004128 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b25      	ldr	r3, [pc, #148]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f4:	4a23      	ldr	r2, [pc, #140]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd f969 	bl	80013d4 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004106:	f7fd f965 	bl	80013d4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e1f1      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ef      	beq.n	8004106 <HAL_RCC_OscConfig+0x22e>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	4a15      	ldr	r2, [pc, #84]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fd f94c 	bl	80013d4 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fd f948 	bl	80013d4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1d4      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ef      	bne.n	8004140 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80ab 	beq.w	80042c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x2b4>
 800417e:	2301      	movs	r3, #1
 8004180:	e005      	b.n	800418e <HAL_RCC_OscConfig+0x2b6>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	20000004 	.word	0x20000004
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004192:	4baf      	ldr	r3, [pc, #700]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	4aae      	ldr	r2, [pc, #696]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6593      	str	r3, [r2, #88]	; 0x58
 800419e:	4bac      	ldr	r3, [pc, #688]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041aa:	2301      	movs	r3, #1
 80041ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ae:	4ba9      	ldr	r3, [pc, #676]	; (8004454 <HAL_RCC_OscConfig+0x57c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d118      	bne.n	80041ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ba:	4ba6      	ldr	r3, [pc, #664]	; (8004454 <HAL_RCC_OscConfig+0x57c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4aa5      	ldr	r2, [pc, #660]	; (8004454 <HAL_RCC_OscConfig+0x57c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c6:	f7fd f905 	bl	80013d4 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fd f901 	bl	80013d4 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e18d      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e0:	4b9c      	ldr	r3, [pc, #624]	; (8004454 <HAL_RCC_OscConfig+0x57c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d108      	bne.n	8004206 <HAL_RCC_OscConfig+0x32e>
 80041f4:	4b96      	ldr	r3, [pc, #600]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a95      	ldr	r2, [pc, #596]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004204:	e024      	b.n	8004250 <HAL_RCC_OscConfig+0x378>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d110      	bne.n	8004230 <HAL_RCC_OscConfig+0x358>
 800420e:	4b90      	ldr	r3, [pc, #576]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	4a8e      	ldr	r2, [pc, #568]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800421e:	4b8c      	ldr	r3, [pc, #560]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a8a      	ldr	r2, [pc, #552]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422e:	e00f      	b.n	8004250 <HAL_RCC_OscConfig+0x378>
 8004230:	4b87      	ldr	r3, [pc, #540]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	4a86      	ldr	r2, [pc, #536]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004240:	4b83      	ldr	r3, [pc, #524]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a82      	ldr	r2, [pc, #520]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d016      	beq.n	8004286 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fd f8bc 	bl	80013d4 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fd f8b8 	bl	80013d4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e142      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004276:	4b76      	ldr	r3, [pc, #472]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ed      	beq.n	8004260 <HAL_RCC_OscConfig+0x388>
 8004284:	e015      	b.n	80042b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd f8a5 	bl	80013d4 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fd f8a1 	bl	80013d4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e12b      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a4:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ed      	bne.n	800428e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b8:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	4a64      	ldr	r2, [pc, #400]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d03c      	beq.n	800434a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01c      	beq.n	8004312 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042d8:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80042da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042de:	4a5c      	ldr	r2, [pc, #368]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd f874 	bl	80013d4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f0:	f7fd f870 	bl	80013d4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0fc      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004302:	4b53      	ldr	r3, [pc, #332]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ef      	beq.n	80042f0 <HAL_RCC_OscConfig+0x418>
 8004310:	e01b      	b.n	800434a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004312:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004318:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fd f857 	bl	80013d4 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432a:	f7fd f853 	bl	80013d4 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e0df      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800433c:	4b44      	ldr	r3, [pc, #272]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800433e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ef      	bne.n	800432a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80d3 	beq.w	80044fa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004354:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b0c      	cmp	r3, #12
 800435e:	f000 808d 	beq.w	800447c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d15a      	bne.n	8004420 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a38      	ldr	r2, [pc, #224]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd f82d 	bl	80013d4 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd f829 	bl	80013d4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0b5      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439c:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_OscConfig+0x580>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6a11      	ldr	r1, [r2, #32]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ac:	3a01      	subs	r2, #1
 80043ae:	0112      	lsls	r2, r2, #4
 80043b0:	4311      	orrs	r1, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043b6:	0212      	lsls	r2, r2, #8
 80043b8:	4311      	orrs	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043be:	0852      	lsrs	r2, r2, #1
 80043c0:	3a01      	subs	r2, #1
 80043c2:	0552      	lsls	r2, r2, #21
 80043c4:	4311      	orrs	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ca:	0852      	lsrs	r2, r2, #1
 80043cc:	3a01      	subs	r2, #1
 80043ce:	0652      	lsls	r2, r2, #25
 80043d0:	4311      	orrs	r1, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043d6:	06d2      	lsls	r2, r2, #27
 80043d8:	430a      	orrs	r2, r1
 80043da:	491d      	ldr	r1, [pc, #116]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80043e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a17      	ldr	r2, [pc, #92]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 80043f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fc ffec 	bl	80013d4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fc ffe8 	bl	80013d4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e074      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x528>
 800441e:	e06c      	b.n	80044fa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_RCC_OscConfig+0x578>)
 800443e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fc ffc4 	bl	80013d4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800444e:	e00e      	b.n	800446e <HAL_RCC_OscConfig+0x596>
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fc ffba 	bl	80013d4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e046      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446e:	4b25      	ldr	r3, [pc, #148]	; (8004504 <HAL_RCC_OscConfig+0x62c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x584>
 800447a:	e03e      	b.n	80044fa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e039      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCC_OscConfig+0x62c>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0203 	and.w	r2, r3, #3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	429a      	cmp	r2, r3
 800449a:	d12c      	bne.n	80044f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	3b01      	subs	r3, #1
 80044a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d123      	bne.n	80044f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d11b      	bne.n	80044f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d113      	bne.n	80044f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	3b01      	subs	r3, #1
 80044dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	3b01      	subs	r3, #1
 80044f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000

08004508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e11e      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b91      	ldr	r3, [pc, #580]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d910      	bls.n	8004550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b8e      	ldr	r3, [pc, #568]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	498c      	ldr	r1, [pc, #560]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e106      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d073      	beq.n	8004644 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d129      	bne.n	80045b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0f4      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004574:	f000 f9d0 	bl	8004918 <RCC_GetSysClockFreqFromPLLSource>
 8004578:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_ClockConfig+0x268>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d93f      	bls.n	8004602 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004582:	4b7a      	ldr	r3, [pc, #488]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004596:	2b00      	cmp	r3, #0
 8004598:	d033      	beq.n	8004602 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d12f      	bne.n	8004602 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045a2:	4b72      	ldr	r3, [pc, #456]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045aa:	4a70      	ldr	r2, [pc, #448]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e024      	b.n	8004602 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c0:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0c6      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d0:	4b66      	ldr	r3, [pc, #408]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0be      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045e0:	f000 f8ce 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4a61      	ldr	r2, [pc, #388]	; (8004770 <HAL_RCC_ClockConfig+0x268>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d909      	bls.n	8004602 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ee:	4b5f      	ldr	r3, [pc, #380]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f6:	4a5d      	ldr	r2, [pc, #372]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80045f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b5a      	ldr	r3, [pc, #360]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4957      	ldr	r1, [pc, #348]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004614:	f7fc fede 	bl	80013d4 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fc feda 	bl	80013d4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e095      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b4e      	ldr	r3, [pc, #312]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d023      	beq.n	8004698 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a42      	ldr	r2, [pc, #264]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004666:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004674:	4b3d      	ldr	r3, [pc, #244]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800467c:	4a3b      	ldr	r2, [pc, #236]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 800467e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004682:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b39      	ldr	r3, [pc, #228]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4936      	ldr	r1, [pc, #216]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
 8004696:	e008      	b.n	80046aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d105      	bne.n	80046aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800469e:	4b33      	ldr	r3, [pc, #204]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4a32      	ldr	r2, [pc, #200]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 80046a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d21d      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 020f 	bic.w	r2, r3, #15
 80046c0:	4929      	ldr	r1, [pc, #164]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046c8:	f7fc fe84 	bl	80013d4 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fc fe80 	bl	80013d4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e03b      	b.n	800475e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1ed      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4917      	ldr	r1, [pc, #92]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	490f      	ldr	r1, [pc, #60]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004732:	f000 f825 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8004736:	4602      	mov	r2, r0
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <HAL_RCC_ClockConfig+0x264>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	490c      	ldr	r1, [pc, #48]	; (8004774 <HAL_RCC_ClockConfig+0x26c>)
 8004744:	5ccb      	ldrb	r3, [r1, r3]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc fd08 	bl	800116c <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000
 800476c:	40021000 	.word	0x40021000
 8004770:	04c4b400 	.word	0x04c4b400
 8004774:	0800c494 	.word	0x0800c494
 8004778:	20000000 	.word	0x20000000
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004786:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b04      	cmp	r3, #4
 8004790:	d102      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004792:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e047      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d102      	bne.n	80047aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e03e      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d136      	bne.n	8004824 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3301      	adds	r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d10c      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	4a16      	ldr	r2, [pc, #88]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	68d2      	ldr	r2, [r2, #12]
 80047e0:	0a12      	lsrs	r2, r2, #8
 80047e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	0a12      	lsrs	r2, r2, #8
 80047fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
      break;
 8004806:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	0e5b      	lsrs	r3, r3, #25
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e001      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004828:	693b      	ldr	r3, [r7, #16]
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	00f42400 	.word	0x00f42400
 8004840:	007a1200 	.word	0x007a1200

08004844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	; (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000000 	.word	0x20000000

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004860:	f7ff fff0 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	0800c4a4 	.word	0x0800c4a4

08004888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800488c:	f7ff ffda 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0adb      	lsrs	r3, r3, #11
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4904      	ldr	r1, [pc, #16]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	0800c4a4 	.word	0x0800c4a4

080048b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	220f      	movs	r2, #15
 80048c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048c4:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0203 	and.w	r2, r3, #3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <HAL_RCC_GetClockConfig+0x5c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_RCC_GetClockConfig+0x5c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCC_GetClockConfig+0x5c>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_RCC_GetClockConfig+0x60>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	601a      	str	r2, [r3, #0]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000
 8004914:	40022000 	.word	0x40022000

08004918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10c      	bne.n	8004956 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004946:	68d2      	ldr	r2, [r2, #12]
 8004948:	0a12      	lsrs	r2, r2, #8
 800494a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	617b      	str	r3, [r7, #20]
    break;
 8004954:	e00c      	b.n	8004970 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0a12      	lsrs	r2, r2, #8
 8004964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
    break;
 800496e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800498a:	687b      	ldr	r3, [r7, #4]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40021000 	.word	0x40021000
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	00f42400 	.word	0x00f42400

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b0:	2300      	movs	r3, #0
 80049b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8098 	beq.w	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c2:	2300      	movs	r3, #0
 80049c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c6:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d2:	4b40      	ldr	r3, [pc, #256]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	4a3f      	ldr	r2, [pc, #252]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ee:	4b3a      	ldr	r3, [pc, #232]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049fa:	f7fc fceb 	bl	80013d4 <HAL_GetTick>
 80049fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a00:	e009      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a02:	f7fc fce7 	bl	80013d4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d902      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	74fb      	strb	r3, [r7, #19]
        break;
 8004a14:	e005      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ef      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d159      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01e      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d019      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a44:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a50:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a60:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fc fca7 	bl	80013d4 <HAL_GetTick>
 8004a86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a88:	e00b      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fc fca3 	bl	80013d4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d902      	bls.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004aa0:	e006      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ec      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004acc:	e008      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	74bb      	strb	r3, [r7, #18]
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae0:	7c7b      	ldrb	r3, [r7, #17]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4ba6      	ldr	r3, [pc, #664]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4aa5      	ldr	r2, [pc, #660]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004afe:	4ba0      	ldr	r3, [pc, #640]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f023 0203 	bic.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	499c      	ldr	r1, [pc, #624]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b20:	4b97      	ldr	r3, [pc, #604]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f023 020c 	bic.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4994      	ldr	r1, [pc, #592]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b42:	4b8f      	ldr	r3, [pc, #572]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	498b      	ldr	r1, [pc, #556]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b64:	4b86      	ldr	r3, [pc, #536]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	4983      	ldr	r1, [pc, #524]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b86:	4b7e      	ldr	r3, [pc, #504]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	497a      	ldr	r1, [pc, #488]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba8:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4972      	ldr	r1, [pc, #456]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bca:	4b6d      	ldr	r3, [pc, #436]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	4969      	ldr	r1, [pc, #420]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bec:	4b64      	ldr	r3, [pc, #400]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	4961      	ldr	r1, [pc, #388]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0e:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4958      	ldr	r1, [pc, #352]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c30:	4b53      	ldr	r3, [pc, #332]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	4950      	ldr	r1, [pc, #320]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c50:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a4a      	ldr	r2, [pc, #296]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c68:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4942      	ldr	r1, [pc, #264]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c86:	d105      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c88:	4b3d      	ldr	r3, [pc, #244]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4a3c      	ldr	r2, [pc, #240]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c92:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ca0:	4b37      	ldr	r3, [pc, #220]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	4934      	ldr	r1, [pc, #208]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	4b2f      	ldr	r3, [pc, #188]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a2e      	ldr	r2, [pc, #184]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd8:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	4926      	ldr	r1, [pc, #152]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	4918      	ldr	r1, [pc, #96]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d30:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d015      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	490a      	ldr	r1, [pc, #40]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d66:	d105      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e049      	b.n	8004e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f841 	bl	8004e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fa52 	bl	800526c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e04a      	b.n	8004ef6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <HAL_TIM_Base_Start_IT+0xc4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_TIM_Base_Start_IT+0xcc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d115      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xaa>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d011      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	00010007 	.word	0x00010007

08004f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0202 	mvn.w	r2, #2
 8004f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f965 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f957 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f968 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0204 	mvn.w	r2, #4
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f93b 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f92d 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f93e 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d122      	bne.n	8005020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d11b      	bne.n	8005020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0208 	mvn.w	r2, #8
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f911 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f903 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f914 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b10      	cmp	r3, #16
 800502c:	d122      	bne.n	8005074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b10      	cmp	r3, #16
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0210 	mvn.w	r2, #16
 8005044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2208      	movs	r2, #8
 800504a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8e7 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8d9 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8ea 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10e      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d107      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0201 	mvn.w	r2, #1
 8005098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fb ff0e 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d10e      	bne.n	80050cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b80      	cmp	r3, #128	; 0x80
 80050ba:	d107      	bne.n	80050cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f96a 	bl	80053a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050da:	d10e      	bne.n	80050fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b80      	cmp	r3, #128	; 0x80
 80050e8:	d107      	bne.n	80050fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f95d 	bl	80053b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d10e      	bne.n	8005126 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d107      	bne.n	8005126 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f898 	bl	8005256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b20      	cmp	r3, #32
 8005132:	d10e      	bne.n	8005152 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f06f 0220 	mvn.w	r2, #32
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f91d 	bl	800538c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005160:	d10f      	bne.n	8005182 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800516c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005170:	d107      	bne.n	8005182 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800517a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f923 	bl	80053c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800518c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005190:	d10f      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a0:	d107      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f915 	bl	80053dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c0:	d10f      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d0:	d107      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80051da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f907 	bl	80053f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051f0:	d10f      	bne.n	8005212 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8f9 	bl	8005404 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3c      	ldr	r2, [pc, #240]	; (8005370 <TIM_Base_SetConfig+0x104>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d00b      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a39      	ldr	r2, [pc, #228]	; (8005374 <TIM_Base_SetConfig+0x108>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a38      	ldr	r2, [pc, #224]	; (8005378 <TIM_Base_SetConfig+0x10c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a37      	ldr	r2, [pc, #220]	; (800537c <TIM_Base_SetConfig+0x110>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2d      	ldr	r2, [pc, #180]	; (8005370 <TIM_Base_SetConfig+0x104>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d017      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2a      	ldr	r2, [pc, #168]	; (8005374 <TIM_Base_SetConfig+0x108>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a29      	ldr	r2, [pc, #164]	; (8005378 <TIM_Base_SetConfig+0x10c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a28      	ldr	r2, [pc, #160]	; (800537c <TIM_Base_SetConfig+0x110>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a27      	ldr	r2, [pc, #156]	; (8005380 <TIM_Base_SetConfig+0x114>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a26      	ldr	r2, [pc, #152]	; (8005384 <TIM_Base_SetConfig+0x118>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a25      	ldr	r2, [pc, #148]	; (8005388 <TIM_Base_SetConfig+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d108      	bne.n	8005308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <TIM_Base_SetConfig+0x104>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <TIM_Base_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a10      	ldr	r2, [pc, #64]	; (8005380 <TIM_Base_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a0f      	ldr	r2, [pc, #60]	; (8005384 <TIM_Base_SetConfig+0x118>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0xe8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <TIM_Base_SetConfig+0x11c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d103      	bne.n	800535c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	615a      	str	r2, [r3, #20]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e042      	b.n	80054b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fb fe1d 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2224      	movs	r2, #36	; 0x24
 8005446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa80 	bl	8005960 <UART_SetConfig>
 8005460:	4603      	mov	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e022      	b.n	80054b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fd12 	bl	8005e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fd99 	bl	8005fe0 <UART_CheckIdleState>
 80054ae:	4603      	mov	r3, r0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	f640 030f 	movw	r3, #2063	; 0x80f
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d118      	bne.n	800551a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d013      	beq.n	800551a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 81fb 	beq.w	8005906 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
      }
      return;
 8005518:	e1f5      	b.n	8005906 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80ef 	beq.w	8005700 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <HAL_UART_IRQHandler+0x23c>)
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4b72      	ldr	r3, [pc, #456]	; (80056f8 <HAL_UART_IRQHandler+0x240>)
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80e4 	beq.w	8005700 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_UART_IRQHandler+0xac>
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2201      	movs	r2, #1
 8005552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_UART_IRQHandler+0xd8>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2202      	movs	r2, #2
 800557e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005586:	f043 0204 	orr.w	r2, r3, #4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d010      	beq.n	80055bc <HAL_UART_IRQHandler+0x104>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2204      	movs	r2, #4
 80055aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	f043 0202 	orr.w	r2, r3, #2
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d015      	beq.n	80055f2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4b48      	ldr	r3, [pc, #288]	; (80056f4 <HAL_UART_IRQHandler+0x23c>)
 80055d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2208      	movs	r2, #8
 80055e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e8:	f043 0208 	orr.w	r2, r3, #8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d011      	beq.n	8005620 <HAL_UART_IRQHandler+0x168>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800560e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 816f 	beq.w	800590a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d011      	beq.n	800565a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005660:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d004      	beq.n	800567a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005676:	2b00      	cmp	r3, #0
 8005678:	d031      	beq.n	80056de <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fd7b 	bl	8006176 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d123      	bne.n	80056d6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d013      	beq.n	80056ce <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056aa:	4a14      	ldr	r2, [pc, #80]	; (80056fc <HAL_UART_IRQHandler+0x244>)
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc fa9f 	bl	8001bf6 <HAL_DMA_Abort_IT>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80056c8:	4610      	mov	r0, r2
 80056ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	e00f      	b.n	80056ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f930 	bl	8005934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	e00b      	b.n	80056ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f92c 	bl	8005934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e007      	b.n	80056ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f928 	bl	8005934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80056ec:	e10d      	b.n	800590a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ee:	bf00      	nop
    return;
 80056f0:	e10b      	b.n	800590a <HAL_UART_IRQHandler+0x452>
 80056f2:	bf00      	nop
 80056f4:	10000001 	.word	0x10000001
 80056f8:	04000120 	.word	0x04000120
 80056fc:	080061db 	.word	0x080061db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005704:	2b01      	cmp	r3, #1
 8005706:	f040 80ab 	bne.w	8005860 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80a5 	beq.w	8005860 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 809f 	beq.w	8005860 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2210      	movs	r2, #16
 8005728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d155      	bne.n	80057e4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005742:	893b      	ldrh	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80e2 	beq.w	800590e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005750:	893a      	ldrh	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	f080 80db 	bcs.w	800590e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	893a      	ldrh	r2, [r7, #8]
 800575c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d12b      	bne.n	80057c8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0210 	bic.w	r2, r2, #16
 80057bc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc f9be 	bl	8001b44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	b29b      	uxth	r3, r3
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8b3 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e2:	e094      	b.n	800590e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8087 	beq.w	8005912 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8005804:	897b      	ldrh	r3, [r7, #10]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8083 	beq.w	8005912 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800581a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0210 	bic.w	r2, r2, #16
 8005852:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005854:	897b      	ldrh	r3, [r7, #10]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f875 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800585e:	e058      	b.n	8005912 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <HAL_UART_IRQHandler+0x3ce>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800587c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fcdb 	bl	800623a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005884:	e048      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588c:	2b00      	cmp	r3, #0
 800588e:	d012      	beq.n	80058b6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d034      	beq.n	8005916 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	4798      	blx	r3
    }
    return;
 80058b4:	e02f      	b.n	8005916 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_UART_IRQHandler+0x41a>
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fc9b 	bl	8006206 <UART_EndTransmit_IT>
    return;
 80058d0:	e022      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_UART_IRQHandler+0x436>
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fcbb 	bl	8006262 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ec:	e014      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00f      	beq.n	8005918 <HAL_UART_IRQHandler+0x460>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da0c      	bge.n	8005918 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fca5 	bl	800624e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005904:	e008      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
      return;
 8005906:	bf00      	nop
 8005908:	e006      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
    return;
 800590a:	bf00      	nop
 800590c:	e004      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
      return;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
      return;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <HAL_UART_IRQHandler+0x460>
    return;
 8005916:	bf00      	nop
  }
}
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop

08005920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005960:	b5b0      	push	{r4, r5, r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4313      	orrs	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4baf      	ldr	r3, [pc, #700]	; (8005c48 <UART_SetConfig+0x2e8>)
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	69f9      	ldr	r1, [r7, #28]
 8005994:	430b      	orrs	r3, r1
 8005996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4aa4      	ldr	r2, [pc, #656]	; (8005c4c <UART_SetConfig+0x2ec>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	69f9      	ldr	r1, [r7, #28]
 80059dc:	430b      	orrs	r3, r1
 80059de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	f023 010f 	bic.w	r1, r3, #15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a95      	ldr	r2, [pc, #596]	; (8005c50 <UART_SetConfig+0x2f0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d120      	bne.n	8005a42 <UART_SetConfig+0xe2>
 8005a00:	4b94      	ldr	r3, [pc, #592]	; (8005c54 <UART_SetConfig+0x2f4>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d816      	bhi.n	8005a3c <UART_SetConfig+0xdc>
 8005a0e:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <UART_SetConfig+0xb4>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a31 	.word	0x08005a31
 8005a1c:	08005a2b 	.word	0x08005a2b
 8005a20:	08005a37 	.word	0x08005a37
 8005a24:	2301      	movs	r3, #1
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e0bc      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	76fb      	strb	r3, [r7, #27]
 8005a2e:	e0b9      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005a30:	2304      	movs	r3, #4
 8005a32:	76fb      	strb	r3, [r7, #27]
 8005a34:	e0b6      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005a36:	2308      	movs	r3, #8
 8005a38:	76fb      	strb	r3, [r7, #27]
 8005a3a:	e0b3      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	e0b0      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a84      	ldr	r2, [pc, #528]	; (8005c58 <UART_SetConfig+0x2f8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d132      	bne.n	8005ab2 <UART_SetConfig+0x152>
 8005a4c:	4b81      	ldr	r3, [pc, #516]	; (8005c54 <UART_SetConfig+0x2f4>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d828      	bhi.n	8005aac <UART_SetConfig+0x14c>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x100>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a95 	.word	0x08005a95
 8005a64:	08005aad 	.word	0x08005aad
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	08005aad 	.word	0x08005aad
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aad 	.word	0x08005aad
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005aad 	.word	0x08005aad
 8005a80:	08005a9b 	.word	0x08005a9b
 8005a84:	08005aad 	.word	0x08005aad
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005aad 	.word	0x08005aad
 8005a90:	08005aa7 	.word	0x08005aa7
 8005a94:	2300      	movs	r3, #0
 8005a96:	76fb      	strb	r3, [r7, #27]
 8005a98:	e084      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	76fb      	strb	r3, [r7, #27]
 8005a9e:	e081      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	76fb      	strb	r3, [r7, #27]
 8005aa4:	e07e      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	76fb      	strb	r3, [r7, #27]
 8005aaa:	e07b      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005aac:	2310      	movs	r3, #16
 8005aae:	76fb      	strb	r3, [r7, #27]
 8005ab0:	e078      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <UART_SetConfig+0x2fc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d120      	bne.n	8005afe <UART_SetConfig+0x19e>
 8005abc:	4b65      	ldr	r3, [pc, #404]	; (8005c54 <UART_SetConfig+0x2f4>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ac6:	2b30      	cmp	r3, #48	; 0x30
 8005ac8:	d013      	beq.n	8005af2 <UART_SetConfig+0x192>
 8005aca:	2b30      	cmp	r3, #48	; 0x30
 8005acc:	d814      	bhi.n	8005af8 <UART_SetConfig+0x198>
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d009      	beq.n	8005ae6 <UART_SetConfig+0x186>
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d810      	bhi.n	8005af8 <UART_SetConfig+0x198>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <UART_SetConfig+0x180>
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	d006      	beq.n	8005aec <UART_SetConfig+0x18c>
 8005ade:	e00b      	b.n	8005af8 <UART_SetConfig+0x198>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	76fb      	strb	r3, [r7, #27]
 8005ae4:	e05e      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	76fb      	strb	r3, [r7, #27]
 8005aea:	e05b      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005aec:	2304      	movs	r3, #4
 8005aee:	76fb      	strb	r3, [r7, #27]
 8005af0:	e058      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005af2:	2308      	movs	r3, #8
 8005af4:	76fb      	strb	r3, [r7, #27]
 8005af6:	e055      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005af8:	2310      	movs	r3, #16
 8005afa:	76fb      	strb	r3, [r7, #27]
 8005afc:	e052      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a57      	ldr	r2, [pc, #348]	; (8005c60 <UART_SetConfig+0x300>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d120      	bne.n	8005b4a <UART_SetConfig+0x1ea>
 8005b08:	4b52      	ldr	r3, [pc, #328]	; (8005c54 <UART_SetConfig+0x2f4>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b12:	2bc0      	cmp	r3, #192	; 0xc0
 8005b14:	d013      	beq.n	8005b3e <UART_SetConfig+0x1de>
 8005b16:	2bc0      	cmp	r3, #192	; 0xc0
 8005b18:	d814      	bhi.n	8005b44 <UART_SetConfig+0x1e4>
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d009      	beq.n	8005b32 <UART_SetConfig+0x1d2>
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d810      	bhi.n	8005b44 <UART_SetConfig+0x1e4>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <UART_SetConfig+0x1cc>
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d006      	beq.n	8005b38 <UART_SetConfig+0x1d8>
 8005b2a:	e00b      	b.n	8005b44 <UART_SetConfig+0x1e4>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	76fb      	strb	r3, [r7, #27]
 8005b30:	e038      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b32:	2302      	movs	r3, #2
 8005b34:	76fb      	strb	r3, [r7, #27]
 8005b36:	e035      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	76fb      	strb	r3, [r7, #27]
 8005b3c:	e032      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b3e:	2308      	movs	r3, #8
 8005b40:	76fb      	strb	r3, [r7, #27]
 8005b42:	e02f      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b44:	2310      	movs	r3, #16
 8005b46:	76fb      	strb	r3, [r7, #27]
 8005b48:	e02c      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3f      	ldr	r2, [pc, #252]	; (8005c4c <UART_SetConfig+0x2ec>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d125      	bne.n	8005ba0 <UART_SetConfig+0x240>
 8005b54:	4b3f      	ldr	r3, [pc, #252]	; (8005c54 <UART_SetConfig+0x2f4>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b62:	d017      	beq.n	8005b94 <UART_SetConfig+0x234>
 8005b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b68:	d817      	bhi.n	8005b9a <UART_SetConfig+0x23a>
 8005b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6e:	d00b      	beq.n	8005b88 <UART_SetConfig+0x228>
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d811      	bhi.n	8005b9a <UART_SetConfig+0x23a>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <UART_SetConfig+0x222>
 8005b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7e:	d006      	beq.n	8005b8e <UART_SetConfig+0x22e>
 8005b80:	e00b      	b.n	8005b9a <UART_SetConfig+0x23a>
 8005b82:	2300      	movs	r3, #0
 8005b84:	76fb      	strb	r3, [r7, #27]
 8005b86:	e00d      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	76fb      	strb	r3, [r7, #27]
 8005b8c:	e00a      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b8e:	2304      	movs	r3, #4
 8005b90:	76fb      	strb	r3, [r7, #27]
 8005b92:	e007      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b94:	2308      	movs	r3, #8
 8005b96:	76fb      	strb	r3, [r7, #27]
 8005b98:	e004      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	76fb      	strb	r3, [r7, #27]
 8005b9e:	e001      	b.n	8005ba4 <UART_SetConfig+0x244>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <UART_SetConfig+0x2ec>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	f040 809e 	bne.w	8005cec <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bb0:	7efb      	ldrb	r3, [r7, #27]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d823      	bhi.n	8005bfe <UART_SetConfig+0x29e>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x25c>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005bff 	.word	0x08005bff
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bff 	.word	0x08005bff
 8005bcc:	08005bef 	.word	0x08005bef
 8005bd0:	08005bff 	.word	0x08005bff
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005bff 	.word	0x08005bff
 8005bdc:	08005bf7 	.word	0x08005bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fe fe3c 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8005be4:	6178      	str	r0, [r7, #20]
        break;
 8005be6:	e00f      	b.n	8005c08 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be8:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <UART_SetConfig+0x304>)
 8005bea:	617b      	str	r3, [r7, #20]
        break;
 8005bec:	e00c      	b.n	8005c08 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bee:	f7fe fdc7 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8005bf2:	6178      	str	r0, [r7, #20]
        break;
 8005bf4:	e008      	b.n	8005c08 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfa:	617b      	str	r3, [r7, #20]
        break;
 8005bfc:	e004      	b.n	8005c08 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	76bb      	strb	r3, [r7, #26]
        break;
 8005c06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 812e 	beq.w	8005e6c <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <UART_SetConfig+0x308>)
 8005c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d305      	bcc.n	8005c40 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d915      	bls.n	8005c6c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	76bb      	strb	r3, [r7, #26]
 8005c44:	e112      	b.n	8005e6c <UART_SetConfig+0x50c>
 8005c46:	bf00      	nop
 8005c48:	cfff69f3 	.word	0xcfff69f3
 8005c4c:	40008000 	.word	0x40008000
 8005c50:	40013800 	.word	0x40013800
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40004400 	.word	0x40004400
 8005c5c:	40004800 	.word	0x40004800
 8005c60:	40004c00 	.word	0x40004c00
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	0800c4ac 	.word	0x0800c4ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f04f 0100 	mov.w	r1, #0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	4a86      	ldr	r2, [pc, #536]	; (8005e94 <UART_SetConfig+0x534>)
 8005c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	f7fa facc 	bl	8000220 <__aeabi_uldivmod>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	020b      	lsls	r3, r1, #8
 8005c9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c9e:	0202      	lsls	r2, r0, #8
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	6849      	ldr	r1, [r1, #4]
 8005ca4:	0849      	lsrs	r1, r1, #1
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	f04f 0100 	mov.w	r1, #0
 8005cac:	1814      	adds	r4, r2, r0
 8005cae:	eb43 0501 	adc.w	r5, r3, r1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	f7fa faae 	bl	8000220 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4613      	mov	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd2:	d308      	bcc.n	8005ce6 <UART_SetConfig+0x386>
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cda:	d204      	bcs.n	8005ce6 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	e0c2      	b.n	8005e6c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	76bb      	strb	r3, [r7, #26]
 8005cea:	e0bf      	b.n	8005e6c <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf4:	d165      	bne.n	8005dc2 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8005cf6:	7efb      	ldrb	r3, [r7, #27]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d828      	bhi.n	8005d4e <UART_SetConfig+0x3ee>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x3a4>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	08005d4f 	.word	0x08005d4f
 8005d14:	08005d3f 	.word	0x08005d3f
 8005d18:	08005d4f 	.word	0x08005d4f
 8005d1c:	08005d4f 	.word	0x08005d4f
 8005d20:	08005d4f 	.word	0x08005d4f
 8005d24:	08005d47 	.word	0x08005d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7fe fd98 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8005d2c:	6178      	str	r0, [r7, #20]
        break;
 8005d2e:	e013      	b.n	8005d58 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7fe fdaa 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8005d34:	6178      	str	r0, [r7, #20]
        break;
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b57      	ldr	r3, [pc, #348]	; (8005e98 <UART_SetConfig+0x538>)
 8005d3a:	617b      	str	r3, [r7, #20]
        break;
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3e:	f7fe fd1f 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8005d42:	6178      	str	r0, [r7, #20]
        break;
 8005d44:	e008      	b.n	8005d58 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	617b      	str	r3, [r7, #20]
        break;
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	76bb      	strb	r3, [r7, #26]
        break;
 8005d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8086 	beq.w	8005e6c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	4a4b      	ldr	r2, [pc, #300]	; (8005e94 <UART_SetConfig+0x534>)
 8005d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d72:	005a      	lsls	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	441a      	add	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d916      	bls.n	8005dbc <UART_SetConfig+0x45c>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d212      	bcs.n	8005dbc <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f023 030f 	bic.w	r3, r3, #15
 8005d9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	89fb      	ldrh	r3, [r7, #14]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	89fa      	ldrh	r2, [r7, #14]
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	e057      	b.n	8005e6c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	76bb      	strb	r3, [r7, #26]
 8005dc0:	e054      	b.n	8005e6c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dc2:	7efb      	ldrb	r3, [r7, #27]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d828      	bhi.n	8005e1a <UART_SetConfig+0x4ba>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x470>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	08005e1b 	.word	0x08005e1b
 8005de0:	08005e0b 	.word	0x08005e0b
 8005de4:	08005e1b 	.word	0x08005e1b
 8005de8:	08005e1b 	.word	0x08005e1b
 8005dec:	08005e1b 	.word	0x08005e1b
 8005df0:	08005e13 	.word	0x08005e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fe fd32 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8005df8:	6178      	str	r0, [r7, #20]
        break;
 8005dfa:	e013      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfc:	f7fe fd44 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8005e00:	6178      	str	r0, [r7, #20]
        break;
 8005e02:	e00f      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <UART_SetConfig+0x538>)
 8005e06:	617b      	str	r3, [r7, #20]
        break;
 8005e08:	e00c      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0a:	f7fe fcb9 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8005e0e:	6178      	str	r0, [r7, #20]
        break;
 8005e10:	e008      	b.n	8005e24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	617b      	str	r3, [r7, #20]
        break;
 8005e18:	e004      	b.n	8005e24 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	76bb      	strb	r3, [r7, #26]
        break;
 8005e22:	bf00      	nop
    }

    if (pclk != 0U)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d020      	beq.n	8005e6c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <UART_SetConfig+0x534>)
 8005e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e34:	461a      	mov	r2, r3
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	441a      	add	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d908      	bls.n	8005e68 <UART_SetConfig+0x508>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d204      	bcs.n	8005e68 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e001      	b.n	8005e6c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e88:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bdb0      	pop	{r4, r5, r7, pc}
 8005e92:	bf00      	nop
 8005e94:	0800c4ac 	.word	0x0800c4ac
 8005e98:	00f42400 	.word	0x00f42400

08005e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9a:	d10a      	bne.n	8005fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff0:	f7fb f9f0 	bl	80013d4 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d10e      	bne.n	8006022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f82f 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e025      	b.n	800606e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d10e      	bne.n	800604e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f819 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e00f      	b.n	800606e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006086:	e062      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d05e      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006090:	f7fb f9a0 	bl	80013d4 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11d      	bne.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e045      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02e      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fe:	d126      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006108:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006118:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d08d      	beq.n	8006088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800618c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d107      	bne.n	80061ba <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0210 	bic.w	r2, r2, #16
 80061b8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7ff fb9b 	bl	8005934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fb77 	bl	8005920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_UARTEx_DisableFifoMode+0x16>
 8006288:	2302      	movs	r3, #2
 800628a:	e027      	b.n	80062dc <HAL_UARTEx_DisableFifoMode+0x66>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	; 0x24
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e02d      	b.n	800635c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f84f 	bl	80063e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006378:	2302      	movs	r3, #2
 800637a:	e02d      	b.n	80063d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2224      	movs	r2, #36	; 0x24
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f811 	bl	80063e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d108      	bne.n	8006402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006400:	e031      	b.n	8006466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006402:	2308      	movs	r3, #8
 8006404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006406:	2308      	movs	r3, #8
 8006408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	0e5b      	lsrs	r3, r3, #25
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	0f5b      	lsrs	r3, r3, #29
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	7b3a      	ldrb	r2, [r7, #12]
 800642e:	4911      	ldr	r1, [pc, #68]	; (8006474 <UARTEx_SetNbDataToProcess+0x94>)
 8006430:	5c8a      	ldrb	r2, [r1, r2]
 8006432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006436:	7b3a      	ldrb	r2, [r7, #12]
 8006438:	490f      	ldr	r1, [pc, #60]	; (8006478 <UARTEx_SetNbDataToProcess+0x98>)
 800643a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800643c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	7b7a      	ldrb	r2, [r7, #13]
 800644c:	4909      	ldr	r1, [pc, #36]	; (8006474 <UARTEx_SetNbDataToProcess+0x94>)
 800644e:	5c8a      	ldrb	r2, [r1, r2]
 8006450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006454:	7b7a      	ldrb	r2, [r7, #13]
 8006456:	4908      	ldr	r1, [pc, #32]	; (8006478 <UARTEx_SetNbDataToProcess+0x98>)
 8006458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800645a:	fb93 f3f2 	sdiv	r3, r3, r2
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	0800c4c4 	.word	0x0800c4c4
 8006478:	0800c4cc 	.word	0x0800c4cc

0800647c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800647c:	b480      	push	{r7}
 800647e:	b08b      	sub	sp, #44	; 0x2c
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80064a2:	2320      	movs	r3, #32
 80064a4:	e003      	b.n	80064ae <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	fab3 f383 	clz	r3, r3
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	2103      	movs	r1, #3
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	43db      	mvns	r3, r3
 80064b8:	401a      	ands	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	fa93 f3a3 	rbit	r3, r3
 80064c4:	61fb      	str	r3, [r7, #28]
  return result;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80064d0:	2320      	movs	r3, #32
 80064d2:	e003      	b.n	80064dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	fa01 f303 	lsl.w	r3, r1, r3
 80064e4:	431a      	orrs	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	601a      	str	r2, [r3, #0]
}
 80064ea:	bf00      	nop
 80064ec:	372c      	adds	r7, #44	; 0x2c
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	43db      	mvns	r3, r3
 800650a:	401a      	ands	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	605a      	str	r2, [r3, #4]
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006526:	b480      	push	{r7}
 8006528:	b08b      	sub	sp, #44	; 0x2c
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	fa93 f3a3 	rbit	r3, r3
 8006540:	613b      	str	r3, [r7, #16]
  return result;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800654c:	2320      	movs	r3, #32
 800654e:	e003      	b.n	8006558 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	fab3 f383 	clz	r3, r3
 8006556:	b2db      	uxtb	r3, r3
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	2103      	movs	r1, #3
 800655c:	fa01 f303 	lsl.w	r3, r1, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	401a      	ands	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	fa93 f3a3 	rbit	r3, r3
 800656e:	61fb      	str	r3, [r7, #28]
  return result;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800657a:	2320      	movs	r3, #32
 800657c:	e003      	b.n	8006586 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	fab3 f383 	clz	r3, r3
 8006584:	b2db      	uxtb	r3, r3
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	431a      	orrs	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006594:	bf00      	nop
 8006596:	372c      	adds	r7, #44	; 0x2c
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b08b      	sub	sp, #44	; 0x2c
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	fa93 f3a3 	rbit	r3, r3
 80065ba:	613b      	str	r3, [r7, #16]
  return result;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80065c6:	2320      	movs	r3, #32
 80065c8:	e003      	b.n	80065d2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	fab3 f383 	clz	r3, r3
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	2103      	movs	r1, #3
 80065d6:	fa01 f303 	lsl.w	r3, r1, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	401a      	ands	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	fa93 f3a3 	rbit	r3, r3
 80065e8:	61fb      	str	r3, [r7, #28]
  return result;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80065f4:	2320      	movs	r3, #32
 80065f6:	e003      	b.n	8006600 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	fab3 f383 	clz	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	60da      	str	r2, [r3, #12]
}
 800660e:	bf00      	nop
 8006610:	372c      	adds	r7, #44	; 0x2c
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800661a:	b480      	push	{r7}
 800661c:	b08b      	sub	sp, #44	; 0x2c
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1a      	ldr	r2, [r3, #32]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	fa93 f3a3 	rbit	r3, r3
 8006634:	613b      	str	r3, [r7, #16]
  return result;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006640:	2320      	movs	r3, #32
 8006642:	e003      	b.n	800664c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	fab3 f383 	clz	r3, r3
 800664a:	b2db      	uxtb	r3, r3
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	210f      	movs	r1, #15
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	fa93 f3a3 	rbit	r3, r3
 8006662:	61fb      	str	r3, [r7, #28]
  return result;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800666e:	2320      	movs	r3, #32
 8006670:	e003      	b.n	800667a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	fab3 f383 	clz	r3, r3
 8006678:	b2db      	uxtb	r3, r3
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	fa01 f303 	lsl.w	r3, r1, r3
 8006682:	431a      	orrs	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006688:	bf00      	nop
 800668a:	372c      	adds	r7, #44	; 0x2c
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006694:	b480      	push	{r7}
 8006696:	b08b      	sub	sp, #44	; 0x2c
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	fa93 f3a3 	rbit	r3, r3
 80066b0:	613b      	str	r3, [r7, #16]
  return result;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80066bc:	2320      	movs	r3, #32
 80066be:	e003      	b.n	80066c8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	fab3 f383 	clz	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	210f      	movs	r1, #15
 80066cc:	fa01 f303 	lsl.w	r3, r1, r3
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	fa93 f3a3 	rbit	r3, r3
 80066e0:	61fb      	str	r3, [r7, #28]
  return result;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80066ec:	2320      	movs	r3, #32
 80066ee:	e003      	b.n	80066f8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	fab3 f383 	clz	r3, r3
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	431a      	orrs	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006706:	bf00      	nop
 8006708:	372c      	adds	r7, #44	; 0x2c
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	fa93 f3a3 	rbit	r3, r3
 8006728:	60fb      	str	r3, [r7, #12]
  return result;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <LL_GPIO_Init+0x26>
    return 32U;
 8006734:	2320      	movs	r3, #32
 8006736:	e003      	b.n	8006740 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	fab3 f383 	clz	r3, r3
 800673e:	b2db      	uxtb	r3, r3
 8006740:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006742:	e048      	b.n	80067d6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	2101      	movs	r1, #1
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	4013      	ands	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d03a      	beq.n	80067d0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d003      	beq.n	800676a <LL_GPIO_Init+0x58>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d10e      	bne.n	8006788 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	461a      	mov	r2, r3
 8006770:	69b9      	ldr	r1, [r7, #24]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fed7 	bl	8006526 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	461a      	mov	r2, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff feb7 	bl	80064f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	461a      	mov	r2, r3
 800678e:	69b9      	ldr	r1, [r7, #24]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff05 	bl	80065a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d111      	bne.n	80067c2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2bff      	cmp	r3, #255	; 0xff
 80067a2:	d807      	bhi.n	80067b4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	461a      	mov	r2, r3
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff34 	bl	800661a <LL_GPIO_SetAFPin_0_7>
 80067b2:	e006      	b.n	80067c2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	461a      	mov	r2, r3
 80067ba:	69b9      	ldr	r1, [r7, #24]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff69 	bl	8006694 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	461a      	mov	r2, r3
 80067c8:	69b9      	ldr	r1, [r7, #24]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fe56 	bl	800647c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1af      	bne.n	8006744 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067fe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006802:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006824:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006828:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	b29b      	uxth	r3, r3
 8006836:	43db      	mvns	r3, r3
 8006838:	b29b      	uxth	r3, r3
 800683a:	4013      	ands	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006852:	b084      	sub	sp, #16
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	f107 0014 	add.w	r0, r7, #20
 8006860:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	b004      	add	sp, #16
 8006892:	4770      	bx	lr

08006894 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b09b      	sub	sp, #108	; 0x6c
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	78db      	ldrb	r3, [r3, #3]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d81f      	bhi.n	8006906 <USB_ActivateEndpoint+0x72>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <USB_ActivateEndpoint+0x38>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	0800690f 	.word	0x0800690f
 80068d8:	080068eb 	.word	0x080068eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80068e8:	e012      	b.n	8006910 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80068f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80068f6:	e00b      	b.n	8006910 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006900:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006904:	e004      	b.n	8006910 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800690c:	e000      	b.n	8006910 <USB_ActivateEndpoint+0x7c>
      break;
 800690e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	b21b      	sxth	r3, r3
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	b21a      	sxth	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b21b      	sxth	r3, r3
 8006952:	4313      	orrs	r3, r2
 8006954:	b21b      	sxth	r3, r3
 8006956:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	441a      	add	r2, r3
 8006964:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	7b1b      	ldrb	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 8149 	bne.w	8006c18 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8084 	beq.w	8006a98 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699a:	b29b      	uxth	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	00da      	lsls	r2, r3, #3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	88db      	ldrh	r3, [r3, #6]
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	81fb      	strh	r3, [r7, #14]
 80069d2:	89fb      	ldrh	r3, [r7, #14]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01b      	beq.n	8006a14 <USB_ActivateEndpoint+0x180>
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	81bb      	strh	r3, [r7, #12]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	89bb      	ldrh	r3, [r7, #12]
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	78db      	ldrb	r3, [r3, #3]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d020      	beq.n	8006a5e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a32:	813b      	strh	r3, [r7, #8]
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	f083 0320 	eor.w	r3, r3, #32
 8006a3a:	813b      	strh	r3, [r7, #8]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]
 8006a5c:	e27f      	b.n	8006f5e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	897b      	ldrh	r3, [r7, #10]
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
 8006a96:	e262      	b.n	8006f5e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	4413      	add	r3, r2
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	00da      	lsls	r2, r3, #3
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	88db      	ldrh	r3, [r3, #6]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	4413      	add	r3, r2
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d112      	bne.n	8006b1e <USB_ActivateEndpoint+0x28a>
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	801a      	strh	r2, [r3, #0]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e02f      	b.n	8006b7e <USB_ActivateEndpoint+0x2ea>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b3e      	cmp	r3, #62	; 0x3e
 8006b24:	d813      	bhi.n	8006b4e <USB_ActivateEndpoint+0x2ba>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <USB_ActivateEndpoint+0x2ac>
 8006b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8006b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	e017      	b.n	8006b7e <USB_ActivateEndpoint+0x2ea>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	663b      	str	r3, [r7, #96]	; 0x60
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <USB_ActivateEndpoint+0x2d4>
 8006b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b64:	3b01      	subs	r3, #1
 8006b66:	663b      	str	r3, [r7, #96]	; 0x60
 8006b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	83fb      	strh	r3, [r7, #30]
 8006b8c:	8bfb      	ldrh	r3, [r7, #30]
 8006b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01b      	beq.n	8006bce <USB_ActivateEndpoint+0x33a>
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bac:	83bb      	strh	r3, [r7, #28]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	8bbb      	ldrh	r3, [r7, #28]
 8006bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	837b      	strh	r3, [r7, #26]
 8006be6:	8b7b      	ldrh	r3, [r7, #26]
 8006be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bec:	837b      	strh	r3, [r7, #26]
 8006bee:	8b7b      	ldrh	r3, [r7, #26]
 8006bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bf4:	837b      	strh	r3, [r7, #26]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8b7b      	ldrh	r3, [r7, #26]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
 8006c16:	e1a2      	b.n	8006f5e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c64:	4413      	add	r3, r2
 8006c66:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	00da      	lsls	r2, r3, #3
 8006c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c76:	657b      	str	r3, [r7, #84]	; 0x54
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	891b      	ldrh	r3, [r3, #8]
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c98:	4413      	add	r3, r2
 8006c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00da      	lsls	r2, r3, #3
 8006ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	895b      	ldrh	r3, [r3, #10]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f040 8091 	bne.w	8006de8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006cd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01b      	beq.n	8006d16 <USB_ActivateEndpoint+0x482>
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01b      	beq.n	8006d66 <USB_ActivateEndpoint+0x4d2>
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d44:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	441a      	add	r2, r3
 8006d98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc4:	867b      	strh	r3, [r7, #50]	; 0x32
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	8013      	strh	r3, [r2, #0]
 8006de6:	e0ba      	b.n	8006f5e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006df8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01d      	beq.n	8006e40 <USB_ActivateEndpoint+0x5ac>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01d      	beq.n	8006e98 <USB_ActivateEndpoint+0x604>
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	78db      	ldrb	r3, [r3, #3]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d024      	beq.n	8006eea <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ebe:	f083 0320 	eor.w	r3, r3, #32
 8006ec2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]
 8006ee8:	e01d      	b.n	8006f26 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006f5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	376c      	adds	r7, #108	; 0x6c
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b08d      	sub	sp, #52	; 0x34
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	7b1b      	ldrb	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f040 808e 	bne.w	80070a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d044      	beq.n	8007016 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	81bb      	strh	r3, [r7, #12]
 8006f9a:	89bb      	ldrh	r3, [r7, #12]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01b      	beq.n	8006fdc <USB_DeactivateEndpoint+0x6c>
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	817b      	strh	r3, [r7, #10]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	441a      	add	r2, r3
 8006fc6:	897b      	ldrh	r3, [r7, #10]
 8006fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff2:	813b      	strh	r3, [r7, #8]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	893b      	ldrh	r3, [r7, #8]
 8007000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007010:	b29b      	uxth	r3, r3
 8007012:	8013      	strh	r3, [r2, #0]
 8007014:	e192      	b.n	800733c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	827b      	strh	r3, [r7, #18]
 8007024:	8a7b      	ldrh	r3, [r7, #18]
 8007026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01b      	beq.n	8007066 <USB_DeactivateEndpoint+0xf6>
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007044:	823b      	strh	r3, [r7, #16]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	8a3b      	ldrh	r3, [r7, #16]
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707c:	81fb      	strh	r3, [r7, #14]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	441a      	add	r2, r3
 8007088:	89fb      	ldrh	r3, [r7, #14]
 800708a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709a:	b29b      	uxth	r3, r3
 800709c:	8013      	strh	r3, [r2, #0]
 800709e:	e14d      	b.n	800733c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 80a5 	bne.w	80071f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	843b      	strh	r3, [r7, #32]
 80070b8:	8c3b      	ldrh	r3, [r7, #32]
 80070ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01b      	beq.n	80070fa <USB_DeactivateEndpoint+0x18a>
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	83fb      	strh	r3, [r7, #30]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	8bfb      	ldrh	r3, [r7, #30]
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	83bb      	strh	r3, [r7, #28]
 8007108:	8bbb      	ldrh	r3, [r7, #28]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01b      	beq.n	800714a <USB_DeactivateEndpoint+0x1da>
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007128:	837b      	strh	r3, [r7, #26]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	8b7b      	ldrh	r3, [r7, #26]
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	833b      	strh	r3, [r7, #24]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	8b3b      	ldrh	r3, [r7, #24]
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007198:	82fb      	strh	r3, [r7, #22]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	441a      	add	r2, r3
 80071a4:	8afb      	ldrh	r3, [r7, #22]
 80071a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d0:	82bb      	strh	r3, [r7, #20]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	441a      	add	r2, r3
 80071dc:	8abb      	ldrh	r3, [r7, #20]
 80071de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	8013      	strh	r3, [r2, #0]
 80071f2:	e0a3      	b.n	800733c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01b      	beq.n	8007244 <USB_DeactivateEndpoint+0x2d4>
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	b29b      	uxth	r3, r3
 8007242:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01b      	beq.n	8007294 <USB_DeactivateEndpoint+0x324>
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	853b      	strh	r3, [r7, #40]	; 0x28
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007290:	b29b      	uxth	r3, r3
 8007292:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	441a      	add	r2, r3
 80072b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	441a      	add	r2, r3
 80072ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007300:	b29b      	uxth	r3, r3
 8007302:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	847b      	strh	r3, [r7, #34]	; 0x22
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	441a      	add	r2, r3
 8007326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3734      	adds	r7, #52	; 0x34
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b0cc      	sub	sp, #304	; 0x130
 800734e:	af00      	add	r7, sp, #0
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	6018      	str	r0, [r3, #0]
 8007354:	463b      	mov	r3, r7
 8007356:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007358:	463b      	mov	r3, r7
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b01      	cmp	r3, #1
 8007360:	f040 872e 	bne.w	80081c0 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	d905      	bls.n	8007380 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007374:	463b      	mov	r3, r7
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800737e:	e004      	b.n	800738a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800738a:	463b      	mov	r3, r7
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	7b1b      	ldrb	r3, [r3, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d134      	bne.n	80073fe <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007394:	463b      	mov	r3, r7
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6959      	ldr	r1, [r3, #20]
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	88da      	ldrh	r2, [r3, #6]
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	1d38      	adds	r0, r7, #4
 80073a8:	6800      	ldr	r0, [r0, #0]
 80073aa:	f001 fbff 	bl	8008bac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073ae:	f107 0310 	add.w	r3, r7, #16
 80073b2:	1d3a      	adds	r2, r7, #4
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	1d3b      	adds	r3, r7, #4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	4619      	mov	r1, r3
 80073c4:	f107 0310 	add.w	r3, r7, #16
 80073c8:	f107 0210 	add.w	r2, r7, #16
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	440a      	add	r2, r1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	463b      	mov	r3, r7
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	00da      	lsls	r2, r3, #3
 80073da:	f107 0310 	add.w	r3, r7, #16
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4413      	add	r3, r2
 80073e2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80073e6:	f107 030c 	add.w	r3, r7, #12
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	f000 beac 	b.w	8008156 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80073fe:	463b      	mov	r3, r7
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	2b02      	cmp	r3, #2
 8007406:	f040 838c 	bne.w	8007b22 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800740a:	463b      	mov	r3, r7
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	429a      	cmp	r2, r3
 8007418:	f240 8330 	bls.w	8007a7c <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800741c:	1d3b      	adds	r3, r7, #4
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	463b      	mov	r3, r7
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	463b      	mov	r3, r7
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	441a      	add	r2, r3
 8007448:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800744c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007454:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745c:	b29b      	uxth	r3, r3
 800745e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6a1a      	ldr	r2, [r3, #32]
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	463b      	mov	r3, r7
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 819e 	beq.w	80077ca <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800748e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007492:	1d3a      	adds	r2, r7, #4
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	463b      	mov	r3, r7
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d17a      	bne.n	8007598 <USB_EPStartXfer+0x24e>
 80074a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074a6:	1d3a      	adds	r2, r7, #4
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	1d3b      	adds	r3, r7, #4
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	440a      	add	r2, r1
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	463b      	mov	r3, r7
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	00da      	lsls	r2, r3, #3
 80074ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80074da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d11a      	bne.n	800751e <USB_EPStartXfer+0x1d4>
 80074e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800750e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007512:	b29a      	uxth	r2, r3
 8007514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e062      	b.n	80075e4 <USB_EPStartXfer+0x29a>
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	2b3e      	cmp	r3, #62	; 0x3e
 8007524:	d819      	bhi.n	800755a <USB_EPStartXfer+0x210>
 8007526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <USB_EPStartXfer+0x1fc>
 800753c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007540:	3301      	adds	r3, #1
 8007542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800754a:	b29b      	uxth	r3, r3
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	b29a      	uxth	r2, r3
 8007550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e044      	b.n	80075e4 <USB_EPStartXfer+0x29a>
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <USB_EPStartXfer+0x230>
 8007570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007574:	3b01      	subs	r3, #1
 8007576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800757a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29b      	uxth	r3, r3
 8007584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758c:	b29a      	uxth	r2, r3
 800758e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	e025      	b.n	80075e4 <USB_EPStartXfer+0x29a>
 8007598:	463b      	mov	r3, r7
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d120      	bne.n	80075e4 <USB_EPStartXfer+0x29a>
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	440a      	add	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	463b      	mov	r3, r7
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	00da      	lsls	r2, r3, #3
 80075c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80075d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075e4:	463b      	mov	r3, r7
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	895b      	ldrh	r3, [r3, #10]
 80075ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ee:	463b      	mov	r3, r7
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6959      	ldr	r1, [r3, #20]
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075fe:	1d38      	adds	r0, r7, #4
 8007600:	6800      	ldr	r0, [r0, #0]
 8007602:	f001 fad3 	bl	8008bac <USB_WritePMA>
            ep->xfer_buff += len;
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007610:	441a      	add	r2, r3
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007618:	463b      	mov	r3, r7
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a1a      	ldr	r2, [r3, #32]
 800761e:	463b      	mov	r3, r7
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d909      	bls.n	800763c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	463b      	mov	r3, r7
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	621a      	str	r2, [r3, #32]
 800763a:	e008      	b.n	800764e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007646:	463b      	mov	r3, r7
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800764e:	463b      	mov	r3, r7
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d17a      	bne.n	800774e <USB_EPStartXfer+0x404>
 8007658:	f107 0318 	add.w	r3, r7, #24
 800765c:	1d3a      	adds	r2, r7, #4
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	1d3b      	adds	r3, r7, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766a:	b29b      	uxth	r3, r3
 800766c:	4619      	mov	r1, r3
 800766e:	f107 0318 	add.w	r3, r7, #24
 8007672:	f107 0218 	add.w	r2, r7, #24
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	440a      	add	r2, r1
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	463b      	mov	r3, r7
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	00da      	lsls	r2, r3, #3
 8007684:	f107 0318 	add.w	r3, r7, #24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4413      	add	r3, r2
 800768c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d11a      	bne.n	80076d4 <USB_EPStartXfer+0x38a>
 800769e:	f107 0314 	add.w	r3, r7, #20
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f107 0314 	add.w	r3, r7, #20
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	f107 0314 	add.w	r3, r7, #20
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	f107 0314 	add.w	r3, r7, #20
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	e067      	b.n	80077a4 <USB_EPStartXfer+0x45a>
 80076d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d8:	2b3e      	cmp	r3, #62	; 0x3e
 80076da:	d819      	bhi.n	8007710 <USB_EPStartXfer+0x3c6>
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <USB_EPStartXfer+0x3b2>
 80076f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076f6:	3301      	adds	r3, #1
 80076f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007700:	b29b      	uxth	r3, r3
 8007702:	029b      	lsls	r3, r3, #10
 8007704:	b29a      	uxth	r2, r3
 8007706:	f107 0314 	add.w	r3, r7, #20
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e049      	b.n	80077a4 <USB_EPStartXfer+0x45a>
 8007710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800771a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771e:	f003 031f 	and.w	r3, r3, #31
 8007722:	2b00      	cmp	r3, #0
 8007724:	d104      	bne.n	8007730 <USB_EPStartXfer+0x3e6>
 8007726:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800772a:	3b01      	subs	r3, #1
 800772c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007730:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007734:	b29b      	uxth	r3, r3
 8007736:	029b      	lsls	r3, r3, #10
 8007738:	b29b      	uxth	r3, r3
 800773a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007742:	b29a      	uxth	r2, r3
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	e02a      	b.n	80077a4 <USB_EPStartXfer+0x45a>
 800774e:	463b      	mov	r3, r7
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d125      	bne.n	80077a4 <USB_EPStartXfer+0x45a>
 8007758:	f107 0320 	add.w	r3, r7, #32
 800775c:	1d3a      	adds	r2, r7, #4
 800775e:	6812      	ldr	r2, [r2, #0]
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	1d3b      	adds	r3, r7, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776a:	b29b      	uxth	r3, r3
 800776c:	4619      	mov	r1, r3
 800776e:	f107 0320 	add.w	r3, r7, #32
 8007772:	f107 0220 	add.w	r2, r7, #32
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	440a      	add	r2, r1
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	00da      	lsls	r2, r3, #3
 8007784:	f107 0320 	add.w	r3, r7, #32
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4413      	add	r3, r2
 800778c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007790:	f107 031c 	add.w	r3, r7, #28
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779a:	b29a      	uxth	r2, r3
 800779c:	f107 031c 	add.w	r3, r7, #28
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	891b      	ldrh	r3, [r3, #8]
 80077aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ae:	463b      	mov	r3, r7
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6959      	ldr	r1, [r3, #20]
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077be:	1d38      	adds	r0, r7, #4
 80077c0:	6800      	ldr	r0, [r0, #0]
 80077c2:	f001 f9f3 	bl	8008bac <USB_WritePMA>
 80077c6:	f000 bcc6 	b.w	8008156 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077ca:	463b      	mov	r3, r7
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d164      	bne.n	800789e <USB_EPStartXfer+0x554>
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077da:	1d3b      	adds	r3, r7, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e8:	4413      	add	r3, r2
 80077ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ec:	463b      	mov	r3, r7
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	00da      	lsls	r2, r3, #3
 80077f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f6:	4413      	add	r3, r2
 80077f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077fc:	647b      	str	r3, [r7, #68]	; 0x44
 80077fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d112      	bne.n	800782c <USB_EPStartXfer+0x4e2>
 8007806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007810:	b29a      	uxth	r2, r3
 8007812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007824:	b29a      	uxth	r2, r3
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	e057      	b.n	80078dc <USB_EPStartXfer+0x592>
 800782c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007830:	2b3e      	cmp	r3, #62	; 0x3e
 8007832:	d817      	bhi.n	8007864 <USB_EPStartXfer+0x51a>
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800783e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <USB_EPStartXfer+0x50a>
 800784a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800784e:	3301      	adds	r3, #1
 8007850:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007854:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007858:	b29b      	uxth	r3, r3
 800785a:	029b      	lsls	r3, r3, #10
 800785c:	b29a      	uxth	r2, r3
 800785e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	e03b      	b.n	80078dc <USB_EPStartXfer+0x592>
 8007864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007868:	095b      	lsrs	r3, r3, #5
 800786a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800786e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007872:	f003 031f 	and.w	r3, r3, #31
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <USB_EPStartXfer+0x53a>
 800787a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800787e:	3b01      	subs	r3, #1
 8007880:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007884:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007888:	b29b      	uxth	r3, r3
 800788a:	029b      	lsls	r3, r3, #10
 800788c:	b29b      	uxth	r3, r3
 800788e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007896:	b29a      	uxth	r2, r3
 8007898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	e01e      	b.n	80078dc <USB_EPStartXfer+0x592>
 800789e:	463b      	mov	r3, r7
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d119      	bne.n	80078dc <USB_EPStartXfer+0x592>
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	653b      	str	r3, [r7, #80]	; 0x50
 80078ae:	1d3b      	adds	r3, r7, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078bc:	4413      	add	r3, r2
 80078be:	653b      	str	r3, [r7, #80]	; 0x50
 80078c0:	463b      	mov	r3, r7
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	00da      	lsls	r2, r3, #3
 80078c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ca:	4413      	add	r3, r2
 80078cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078dc:	463b      	mov	r3, r7
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	891b      	ldrh	r3, [r3, #8]
 80078e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078e6:	463b      	mov	r3, r7
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6959      	ldr	r1, [r3, #20]
 80078ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078f6:	1d38      	adds	r0, r7, #4
 80078f8:	6800      	ldr	r0, [r0, #0]
 80078fa:	f001 f957 	bl	8008bac <USB_WritePMA>
            ep->xfer_buff += len;
 80078fe:	463b      	mov	r3, r7
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007908:	441a      	add	r2, r3
 800790a:	463b      	mov	r3, r7
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007910:	463b      	mov	r3, r7
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6a1a      	ldr	r2, [r3, #32]
 8007916:	463b      	mov	r3, r7
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	429a      	cmp	r2, r3
 800791e:	d909      	bls.n	8007934 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007920:	463b      	mov	r3, r7
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	621a      	str	r2, [r3, #32]
 8007932:	e008      	b.n	8007946 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800793e:	463b      	mov	r3, r7
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007946:	1d3b      	adds	r3, r7, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	643b      	str	r3, [r7, #64]	; 0x40
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d164      	bne.n	8007a20 <USB_EPStartXfer+0x6d6>
 8007956:	1d3b      	adds	r3, r7, #4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	63bb      	str	r3, [r7, #56]	; 0x38
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007964:	b29b      	uxth	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	4413      	add	r3, r2
 800796c:	63bb      	str	r3, [r7, #56]	; 0x38
 800796e:	463b      	mov	r3, r7
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	00da      	lsls	r2, r3, #3
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	4413      	add	r3, r2
 800797a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
 8007980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d112      	bne.n	80079ae <USB_EPStartXfer+0x664>
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007992:	b29a      	uxth	r2, r3
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e054      	b.n	8007a58 <USB_EPStartXfer+0x70e>
 80079ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b2:	2b3e      	cmp	r3, #62	; 0x3e
 80079b4:	d817      	bhi.n	80079e6 <USB_EPStartXfer+0x69c>
 80079b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <USB_EPStartXfer+0x68c>
 80079cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079d0:	3301      	adds	r3, #1
 80079d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079da:	b29b      	uxth	r3, r3
 80079dc:	029b      	lsls	r3, r3, #10
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e038      	b.n	8007a58 <USB_EPStartXfer+0x70e>
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <USB_EPStartXfer+0x6bc>
 80079fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e01b      	b.n	8007a58 <USB_EPStartXfer+0x70e>
 8007a20:	463b      	mov	r3, r7
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d116      	bne.n	8007a58 <USB_EPStartXfer+0x70e>
 8007a2a:	1d3b      	adds	r3, r7, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a38:	4413      	add	r3, r2
 8007a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	00da      	lsls	r2, r3, #3
 8007a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a58:	463b      	mov	r3, r7
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	895b      	ldrh	r3, [r3, #10]
 8007a5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a62:	463b      	mov	r3, r7
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6959      	ldr	r1, [r3, #20]
 8007a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a72:	1d38      	adds	r0, r7, #4
 8007a74:	6800      	ldr	r0, [r0, #0]
 8007a76:	f001 f899 	bl	8008bac <USB_WritePMA>
 8007a7a:	e36c      	b.n	8008156 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a86:	1d3b      	adds	r3, r7, #4
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007aca:	1d3b      	adds	r3, r7, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad0:	1d3b      	adds	r3, r7, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ade:	4413      	add	r3, r2
 8007ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	00da      	lsls	r2, r3, #3
 8007aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aec:	4413      	add	r3, r2
 8007aee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007afc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007afe:	463b      	mov	r3, r7
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	891b      	ldrh	r3, [r3, #8]
 8007b04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b08:	463b      	mov	r3, r7
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6959      	ldr	r1, [r3, #20]
 8007b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b18:	1d38      	adds	r0, r7, #4
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	f001 f846 	bl	8008bac <USB_WritePMA>
 8007b20:	e319      	b.n	8008156 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007b22:	1d3b      	adds	r3, r7, #4
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	463b      	mov	r3, r7
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007b40:	1d3b      	adds	r3, r7, #4
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	463b      	mov	r3, r7
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b5a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a1a      	ldr	r2, [r3, #32]
 8007b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b78:	1d3b      	adds	r3, r7, #4
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8162 	beq.w	8007e58 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b94:	1d3b      	adds	r3, r7, #4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d164      	bne.n	8007c70 <USB_EPStartXfer+0x926>
 8007ba6:	1d3b      	adds	r3, r7, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bac:	1d3b      	adds	r3, r7, #4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bba:	4413      	add	r3, r2
 8007bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	00da      	lsls	r2, r3, #3
 8007bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc8:	4413      	add	r3, r2
 8007bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bce:	677b      	str	r3, [r7, #116]	; 0x74
 8007bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d112      	bne.n	8007bfe <USB_EPStartXfer+0x8b4>
 8007bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be6:	801a      	strh	r2, [r3, #0]
 8007be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e057      	b.n	8007cae <USB_EPStartXfer+0x964>
 8007bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c02:	2b3e      	cmp	r3, #62	; 0x3e
 8007c04:	d817      	bhi.n	8007c36 <USB_EPStartXfer+0x8ec>
 8007c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <USB_EPStartXfer+0x8dc>
 8007c1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c20:	3301      	adds	r3, #1
 8007c22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	e03b      	b.n	8007cae <USB_EPStartXfer+0x964>
 8007c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <USB_EPStartXfer+0x90c>
 8007c4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	029b      	lsls	r3, r3, #10
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	e01e      	b.n	8007cae <USB_EPStartXfer+0x964>
 8007c70:	463b      	mov	r3, r7
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	785b      	ldrb	r3, [r3, #1]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d119      	bne.n	8007cae <USB_EPStartXfer+0x964>
 8007c7a:	1d3b      	adds	r3, r7, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c90:	463b      	mov	r3, r7
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	00da      	lsls	r2, r3, #3
 8007c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007cae:	463b      	mov	r3, r7
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	895b      	ldrh	r3, [r3, #10]
 8007cb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6959      	ldr	r1, [r3, #20]
 8007cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cc8:	1d38      	adds	r0, r7, #4
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	f000 ff6e 	bl	8008bac <USB_WritePMA>
          ep->xfer_buff += len;
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695a      	ldr	r2, [r3, #20]
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	441a      	add	r2, r3
 8007cdc:	463b      	mov	r3, r7
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	463b      	mov	r3, r7
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d909      	bls.n	8007d06 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6a1a      	ldr	r2, [r3, #32]
 8007cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	621a      	str	r2, [r3, #32]
 8007d04:	e008      	b.n	8007d18 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d06:	463b      	mov	r3, r7
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d10:	463b      	mov	r3, r7
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2200      	movs	r2, #0
 8007d16:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 821a 	beq.w	8008156 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d22:	463b      	mov	r3, r7
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d164      	bne.n	8007df6 <USB_EPStartXfer+0xaac>
 8007d2c:	1d3b      	adds	r3, r7, #4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d32:	1d3b      	adds	r3, r7, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d40:	4413      	add	r3, r2
 8007d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	00da      	lsls	r2, r3, #3
 8007d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d4e:	4413      	add	r3, r2
 8007d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d54:	667b      	str	r3, [r7, #100]	; 0x64
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d112      	bne.n	8007d84 <USB_EPStartXfer+0xa3a>
 8007d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6c:	801a      	strh	r2, [r3, #0]
 8007d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e057      	b.n	8007e34 <USB_EPStartXfer+0xaea>
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	2b3e      	cmp	r3, #62	; 0x3e
 8007d8a:	d817      	bhi.n	8007dbc <USB_EPStartXfer+0xa72>
 8007d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <USB_EPStartXfer+0xa62>
 8007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da6:	3301      	adds	r3, #1
 8007da8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	029b      	lsls	r3, r3, #10
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e03b      	b.n	8007e34 <USB_EPStartXfer+0xaea>
 8007dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dca:	f003 031f 	and.w	r3, r3, #31
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <USB_EPStartXfer+0xa92>
 8007dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	e01e      	b.n	8007e34 <USB_EPStartXfer+0xaea>
 8007df6:	463b      	mov	r3, r7
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d119      	bne.n	8007e34 <USB_EPStartXfer+0xaea>
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	673b      	str	r3, [r7, #112]	; 0x70
 8007e06:	1d3b      	adds	r3, r7, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e14:	4413      	add	r3, r2
 8007e16:	673b      	str	r3, [r7, #112]	; 0x70
 8007e18:	463b      	mov	r3, r7
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	00da      	lsls	r2, r3, #3
 8007e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e22:	4413      	add	r3, r2
 8007e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e34:	463b      	mov	r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	891b      	ldrh	r3, [r3, #8]
 8007e3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e3e:	463b      	mov	r3, r7
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6959      	ldr	r1, [r3, #20]
 8007e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e4e:	1d38      	adds	r0, r7, #4
 8007e50:	6800      	ldr	r0, [r0, #0]
 8007e52:	f000 feab 	bl	8008bac <USB_WritePMA>
 8007e56:	e17e      	b.n	8008156 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e58:	463b      	mov	r3, r7
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d16f      	bne.n	8007f42 <USB_EPStartXfer+0xbf8>
 8007e62:	1d3b      	adds	r3, r7, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e80:	463b      	mov	r3, r7
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	00da      	lsls	r2, r3, #3
 8007e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d116      	bne.n	8007ecc <USB_EPStartXfer+0xb82>
 8007e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	e05f      	b.n	8007f8c <USB_EPStartXfer+0xc42>
 8007ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed2:	d818      	bhi.n	8007f06 <USB_EPStartXfer+0xbbc>
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <USB_EPStartXfer+0xbaa>
 8007eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ef4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	029b      	lsls	r3, r3, #10
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	e042      	b.n	8007f8c <USB_EPStartXfer+0xc42>
 8007f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f14:	f003 031f 	and.w	r3, r3, #31
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <USB_EPStartXfer+0xbdc>
 8007f1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f20:	3b01      	subs	r3, #1
 8007f22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	029b      	lsls	r3, r3, #10
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e024      	b.n	8007f8c <USB_EPStartXfer+0xc42>
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d11f      	bne.n	8007f8c <USB_EPStartXfer+0xc42>
 8007f4c:	1d3b      	adds	r3, r7, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f54:	1d3b      	adds	r3, r7, #4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f64:	4413      	add	r3, r2
 8007f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	00da      	lsls	r2, r3, #3
 8007f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f76:	4413      	add	r3, r2
 8007f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	891b      	ldrh	r3, [r3, #8]
 8007f92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f96:	463b      	mov	r3, r7
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6959      	ldr	r1, [r3, #20]
 8007f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007fa6:	1d38      	adds	r0, r7, #4
 8007fa8:	6800      	ldr	r0, [r0, #0]
 8007faa:	f000 fdff 	bl	8008bac <USB_WritePMA>
          ep->xfer_buff += len;
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb8:	441a      	add	r2, r3
 8007fba:	463b      	mov	r3, r7
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6a1a      	ldr	r2, [r3, #32]
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d909      	bls.n	8007fe4 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	463b      	mov	r3, r7
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	621a      	str	r2, [r3, #32]
 8007fe2:	e008      	b.n	8007ff6 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007fee:	463b      	mov	r3, r7
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80ab 	beq.w	8008156 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008000:	1d3b      	adds	r3, r7, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008008:	463b      	mov	r3, r7
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d16f      	bne.n	80080f2 <USB_EPStartXfer+0xda8>
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800802a:	4413      	add	r3, r2
 800802c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	00da      	lsls	r2, r3, #3
 8008038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800803c:	4413      	add	r3, r2
 800803e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d116      	bne.n	800807c <USB_EPStartXfer+0xd32>
 800804e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008072:	b29a      	uxth	r2, r3
 8008074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e05b      	b.n	8008134 <USB_EPStartXfer+0xdea>
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	2b3e      	cmp	r3, #62	; 0x3e
 8008082:	d818      	bhi.n	80080b6 <USB_EPStartXfer+0xd6c>
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <USB_EPStartXfer+0xd5a>
 800809a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800809e:	3301      	adds	r3, #1
 80080a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	029b      	lsls	r3, r3, #10
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080b2:	801a      	strh	r2, [r3, #0]
 80080b4:	e03e      	b.n	8008134 <USB_EPStartXfer+0xdea>
 80080b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c4:	f003 031f 	and.w	r3, r3, #31
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <USB_EPStartXfer+0xd8c>
 80080cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080d0:	3b01      	subs	r3, #1
 80080d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080da:	b29b      	uxth	r3, r3
 80080dc:	029b      	lsls	r3, r3, #10
 80080de:	b29b      	uxth	r3, r3
 80080e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	e020      	b.n	8008134 <USB_EPStartXfer+0xdea>
 80080f2:	463b      	mov	r3, r7
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d11b      	bne.n	8008134 <USB_EPStartXfer+0xdea>
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008104:	b29b      	uxth	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800810c:	4413      	add	r3, r2
 800810e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008112:	463b      	mov	r3, r7
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	00da      	lsls	r2, r3, #3
 800811a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800811e:	4413      	add	r3, r2
 8008120:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812c:	b29a      	uxth	r2, r3
 800812e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008132:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	895b      	ldrh	r3, [r3, #10]
 800813a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6959      	ldr	r1, [r3, #20]
 8008144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008148:	b29b      	uxth	r3, r3
 800814a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800814e:	1d38      	adds	r0, r7, #4
 8008150:	6800      	ldr	r0, [r0, #0]
 8008152:	f000 fd2b 	bl	8008bac <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008156:	1d3b      	adds	r3, r7, #4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f107 020a 	add.w	r2, r7, #10
 800816c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008174:	8013      	strh	r3, [r2, #0]
 8008176:	f107 030a 	add.w	r3, r7, #10
 800817a:	f107 020a 	add.w	r2, r7, #10
 800817e:	8812      	ldrh	r2, [r2, #0]
 8008180:	f082 0210 	eor.w	r2, r2, #16
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	f107 030a 	add.w	r3, r7, #10
 800818a:	f107 020a 	add.w	r2, r7, #10
 800818e:	8812      	ldrh	r2, [r2, #0]
 8008190:	f082 0220 	eor.w	r2, r2, #32
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	463b      	mov	r3, r7
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	f107 030a 	add.w	r3, r7, #10
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]
 80081be:	e3b5      	b.n	800892c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081c0:	463b      	mov	r3, r7
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	7b1b      	ldrb	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 8090 	bne.w	80082ec <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081cc:	463b      	mov	r3, r7
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d90e      	bls.n	80081fa <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80081dc:	463b      	mov	r3, r7
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081e6:	463b      	mov	r3, r7
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f0:	1ad2      	subs	r2, r2, r3
 80081f2:	463b      	mov	r3, r7
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	619a      	str	r2, [r3, #24]
 80081f8:	e008      	b.n	800820c <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80081fa:	463b      	mov	r3, r7
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008204:	463b      	mov	r3, r7
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2200      	movs	r2, #0
 800820a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800820c:	1d3b      	adds	r3, r7, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008214:	1d3b      	adds	r3, r7, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821c:	b29b      	uxth	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008224:	4413      	add	r3, r2
 8008226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800822a:	463b      	mov	r3, r7
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	00da      	lsls	r2, r3, #3
 8008232:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008236:	4413      	add	r3, r2
 8008238:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800823c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d116      	bne.n	8008276 <USB_EPStartXfer+0xf2c>
 8008248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e32c      	b.n	80088d0 <USB_EPStartXfer+0x1586>
 8008276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827a:	2b3e      	cmp	r3, #62	; 0x3e
 800827c:	d818      	bhi.n	80082b0 <USB_EPStartXfer+0xf66>
 800827e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <USB_EPStartXfer+0xf54>
 8008294:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008298:	3301      	adds	r3, #1
 800829a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800829e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	029b      	lsls	r3, r3, #10
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	e30f      	b.n	80088d0 <USB_EPStartXfer+0x1586>
 80082b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082be:	f003 031f 	and.w	r3, r3, #31
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d104      	bne.n	80082d0 <USB_EPStartXfer+0xf86>
 80082c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ca:	3b01      	subs	r3, #1
 80082cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	029b      	lsls	r3, r3, #10
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e8:	801a      	strh	r2, [r3, #0]
 80082ea:	e2f1      	b.n	80088d0 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082ec:	463b      	mov	r3, r7
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	78db      	ldrb	r3, [r3, #3]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	f040 818f 	bne.w	8008616 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082f8:	463b      	mov	r3, r7
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d175      	bne.n	80083ee <USB_EPStartXfer+0x10a4>
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800830a:	1d3b      	adds	r3, r7, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008312:	b29b      	uxth	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800831a:	4413      	add	r3, r2
 800831c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008320:	463b      	mov	r3, r7
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	00da      	lsls	r2, r3, #3
 8008328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800832c:	4413      	add	r3, r2
 800832e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008336:	463b      	mov	r3, r7
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d116      	bne.n	800836e <USB_EPStartXfer+0x1024>
 8008340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800834c:	b29a      	uxth	r2, r3
 800834e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	e065      	b.n	800843a <USB_EPStartXfer+0x10f0>
 800836e:	463b      	mov	r3, r7
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b3e      	cmp	r3, #62	; 0x3e
 8008376:	d81a      	bhi.n	80083ae <USB_EPStartXfer+0x1064>
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008384:	463b      	mov	r3, r7
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d004      	beq.n	800839c <USB_EPStartXfer+0x1052>
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	3301      	adds	r3, #1
 8008398:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800839c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	029b      	lsls	r3, r3, #10
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e045      	b.n	800843a <USB_EPStartXfer+0x10f0>
 80083ae:	463b      	mov	r3, r7
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083ba:	463b      	mov	r3, r7
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USB_EPStartXfer+0x1088>
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083cc:	3b01      	subs	r3, #1
 80083ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	029b      	lsls	r3, r3, #10
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	e025      	b.n	800843a <USB_EPStartXfer+0x10f0>
 80083ee:	463b      	mov	r3, r7
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d120      	bne.n	800843a <USB_EPStartXfer+0x10f0>
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008400:	1d3b      	adds	r3, r7, #4
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008408:	b29b      	uxth	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008410:	4413      	add	r3, r2
 8008412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008416:	463b      	mov	r3, r7
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	00da      	lsls	r2, r3, #3
 800841e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008422:	4413      	add	r3, r2
 8008424:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800842c:	463b      	mov	r3, r7
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	b29a      	uxth	r2, r3
 8008434:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008442:	463b      	mov	r3, r7
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d175      	bne.n	8008538 <USB_EPStartXfer+0x11ee>
 800844c:	1d3b      	adds	r3, r7, #4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008454:	1d3b      	adds	r3, r7, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845c:	b29b      	uxth	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008464:	4413      	add	r3, r2
 8008466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800846a:	463b      	mov	r3, r7
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	00da      	lsls	r2, r3, #3
 8008472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008476:	4413      	add	r3, r2
 8008478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800847c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008480:	463b      	mov	r3, r7
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d116      	bne.n	80084b8 <USB_EPStartXfer+0x116e>
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008496:	b29a      	uxth	r2, r3
 8008498:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e061      	b.n	800857c <USB_EPStartXfer+0x1232>
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b3e      	cmp	r3, #62	; 0x3e
 80084c0:	d81a      	bhi.n	80084f8 <USB_EPStartXfer+0x11ae>
 80084c2:	463b      	mov	r3, r7
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	085b      	lsrs	r3, r3, #1
 80084ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084ce:	463b      	mov	r3, r7
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <USB_EPStartXfer+0x119c>
 80084dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084e0:	3301      	adds	r3, #1
 80084e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	029b      	lsls	r3, r3, #10
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e041      	b.n	800857c <USB_EPStartXfer+0x1232>
 80084f8:	463b      	mov	r3, r7
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008504:	463b      	mov	r3, r7
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <USB_EPStartXfer+0x11d2>
 8008512:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008516:	3b01      	subs	r3, #1
 8008518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800851c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008520:	b29b      	uxth	r3, r3
 8008522:	029b      	lsls	r3, r3, #10
 8008524:	b29b      	uxth	r3, r3
 8008526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852e:	b29a      	uxth	r2, r3
 8008530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	e021      	b.n	800857c <USB_EPStartXfer+0x1232>
 8008538:	463b      	mov	r3, r7
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d11c      	bne.n	800857c <USB_EPStartXfer+0x1232>
 8008542:	1d3b      	adds	r3, r7, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008552:	4413      	add	r3, r2
 8008554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008558:	463b      	mov	r3, r7
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	00da      	lsls	r2, r3, #3
 8008560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008564:	4413      	add	r3, r2
 8008566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800856a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800856e:	463b      	mov	r3, r7
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	b29a      	uxth	r2, r3
 8008576:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800857a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800857c:	463b      	mov	r3, r7
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 81a4 	beq.w	80088d0 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	463b      	mov	r3, r7
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800859c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <USB_EPStartXfer+0x126a>
 80085a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8187 	bne.w	80088d0 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085c2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 8180 	bne.w	80088d0 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	463b      	mov	r3, r7
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80085ee:	1d3b      	adds	r3, r7, #4
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	463b      	mov	r3, r7
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	441a      	add	r2, r3
 80085fc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800860c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008610:	b29b      	uxth	r3, r3
 8008612:	8013      	strh	r3, [r2, #0]
 8008614:	e15c      	b.n	80088d0 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008616:	463b      	mov	r3, r7
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	78db      	ldrb	r3, [r3, #3]
 800861c:	2b01      	cmp	r3, #1
 800861e:	f040 8155 	bne.w	80088cc <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008622:	463b      	mov	r3, r7
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	429a      	cmp	r2, r3
 8008630:	d90e      	bls.n	8008650 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008632:	463b      	mov	r3, r7
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800863c:	463b      	mov	r3, r7
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	619a      	str	r2, [r3, #24]
 800864e:	e008      	b.n	8008662 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008650:	463b      	mov	r3, r7
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800865a:	463b      	mov	r3, r7
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2200      	movs	r2, #0
 8008660:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008662:	463b      	mov	r3, r7
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d16f      	bne.n	800874c <USB_EPStartXfer+0x1402>
 800866c:	1d3b      	adds	r3, r7, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867c:	b29b      	uxth	r3, r3
 800867e:	461a      	mov	r2, r3
 8008680:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008684:	4413      	add	r3, r2
 8008686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800868a:	463b      	mov	r3, r7
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	00da      	lsls	r2, r3, #3
 8008692:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008696:	4413      	add	r3, r2
 8008698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800869c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d116      	bne.n	80086d6 <USB_EPStartXfer+0x138c>
 80086a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e05f      	b.n	8008796 <USB_EPStartXfer+0x144c>
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	2b3e      	cmp	r3, #62	; 0x3e
 80086dc:	d818      	bhi.n	8008710 <USB_EPStartXfer+0x13c6>
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <USB_EPStartXfer+0x13b4>
 80086f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f8:	3301      	adds	r3, #1
 80086fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29a      	uxth	r2, r3
 8008708:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e042      	b.n	8008796 <USB_EPStartXfer+0x144c>
 8008710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800871a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <USB_EPStartXfer+0x13e6>
 8008726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800872a:	3b01      	subs	r3, #1
 800872c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008734:	b29b      	uxth	r3, r3
 8008736:	029b      	lsls	r3, r3, #10
 8008738:	b29b      	uxth	r3, r3
 800873a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008742:	b29a      	uxth	r2, r3
 8008744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e024      	b.n	8008796 <USB_EPStartXfer+0x144c>
 800874c:	463b      	mov	r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d11f      	bne.n	8008796 <USB_EPStartXfer+0x144c>
 8008756:	1d3b      	adds	r3, r7, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008766:	b29b      	uxth	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876e:	4413      	add	r3, r2
 8008770:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008774:	463b      	mov	r3, r7
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	00da      	lsls	r2, r3, #3
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	4413      	add	r3, r2
 8008782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800878a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878e:	b29a      	uxth	r2, r3
 8008790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800879e:	463b      	mov	r3, r7
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d16f      	bne.n	8008888 <USB_EPStartXfer+0x153e>
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c0:	4413      	add	r3, r2
 80087c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	00da      	lsls	r2, r3, #3
 80087ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d2:	4413      	add	r3, r2
 80087d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d116      	bne.n	8008812 <USB_EPStartXfer+0x14c8>
 80087e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087f6:	801a      	strh	r2, [r3, #0]
 80087f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e05e      	b.n	80088d0 <USB_EPStartXfer+0x1586>
 8008812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008816:	2b3e      	cmp	r3, #62	; 0x3e
 8008818:	d818      	bhi.n	800884c <USB_EPStartXfer+0x1502>
 800881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <USB_EPStartXfer+0x14f0>
 8008830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008834:	3301      	adds	r3, #1
 8008836:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800883a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800883e:	b29b      	uxth	r3, r3
 8008840:	029b      	lsls	r3, r3, #10
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	e041      	b.n	80088d0 <USB_EPStartXfer+0x1586>
 800884c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	2b00      	cmp	r3, #0
 8008860:	d104      	bne.n	800886c <USB_EPStartXfer+0x1522>
 8008862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008866:	3b01      	subs	r3, #1
 8008868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800886c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008870:	b29b      	uxth	r3, r3
 8008872:	029b      	lsls	r3, r3, #10
 8008874:	b29b      	uxth	r3, r3
 8008876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800887a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800887e:	b29a      	uxth	r2, r3
 8008880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008884:	801a      	strh	r2, [r3, #0]
 8008886:	e023      	b.n	80088d0 <USB_EPStartXfer+0x1586>
 8008888:	463b      	mov	r3, r7
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d11e      	bne.n	80088d0 <USB_EPStartXfer+0x1586>
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889a:	b29b      	uxth	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a2:	4413      	add	r3, r2
 80088a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088a8:	463b      	mov	r3, r7
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	00da      	lsls	r2, r3, #3
 80088b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b4:	4413      	add	r3, r2
 80088b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c8:	801a      	strh	r2, [r3, #0]
 80088ca:	e001      	b.n	80088d0 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e02e      	b.n	800892e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088d0:	1d3b      	adds	r3, r7, #4
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	463b      	mov	r3, r7
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088ee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008902:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	463b      	mov	r3, r7
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800891c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008928:	b29b      	uxth	r3, r3
 800892a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d020      	beq.n	800898c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800895c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008960:	81bb      	strh	r3, [r7, #12]
 8008962:	89bb      	ldrh	r3, [r7, #12]
 8008964:	f083 0310 	eor.w	r3, r3, #16
 8008968:	81bb      	strh	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	441a      	add	r2, r3
 8008974:	89bb      	ldrh	r3, [r7, #12]
 8008976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]
 800898a:	e01f      	b.n	80089cc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	81fb      	strh	r3, [r7, #14]
 80089a4:	89fb      	ldrh	r3, [r7, #14]
 80089a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089aa:	81fb      	strh	r3, [r7, #14]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	441a      	add	r2, r3
 80089b6:	89fb      	ldrh	r3, [r7, #14]
 80089b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	7b1b      	ldrb	r3, [r3, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 809d 	bne.w	8008b28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d04c      	beq.n	8008a90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	823b      	strh	r3, [r7, #16]
 8008a04:	8a3b      	ldrh	r3, [r7, #16]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01b      	beq.n	8008a46 <USB_EPClearStall+0x6c>
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a24:	81fb      	strh	r3, [r7, #14]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	441a      	add	r2, r3
 8008a30:	89fb      	ldrh	r3, [r7, #14]
 8008a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	78db      	ldrb	r3, [r3, #3]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d06c      	beq.n	8008b28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a64:	81bb      	strh	r3, [r7, #12]
 8008a66:	89bb      	ldrh	r3, [r7, #12]
 8008a68:	f083 0320 	eor.w	r3, r3, #32
 8008a6c:	81bb      	strh	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	89bb      	ldrh	r3, [r7, #12]
 8008a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]
 8008a8e:	e04b      	b.n	8008b28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	82fb      	strh	r3, [r7, #22]
 8008a9e:	8afb      	ldrh	r3, [r7, #22]
 8008aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01b      	beq.n	8008ae0 <USB_EPClearStall+0x106>
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	82bb      	strh	r3, [r7, #20]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	441a      	add	r2, r3
 8008aca:	8abb      	ldrh	r3, [r7, #20]
 8008acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af6:	827b      	strh	r3, [r7, #18]
 8008af8:	8a7b      	ldrh	r3, [r7, #18]
 8008afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008afe:	827b      	strh	r3, [r7, #18]
 8008b00:	8a7b      	ldrh	r3, [r7, #18]
 8008b02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b06:	827b      	strh	r3, [r7, #18]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	441a      	add	r2, r3
 8008b12:	8a7b      	ldrh	r3, [r7, #18]
 8008b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b08d      	sub	sp, #52	; 0x34
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	461a      	mov	r2, r3
 8008bba:	460b      	mov	r3, r1
 8008bbc:	80fb      	strh	r3, [r7, #6]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bc2:	88bb      	ldrh	r3, [r7, #4]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bdc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be2:	e01b      	b.n	8008c1c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	3301      	adds	r3, #1
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	3301      	adds	r3, #1
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e0      	bne.n	8008be4 <USB_WritePMA+0x38>
  }
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	3734      	adds	r7, #52	; 0x34
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b08b      	sub	sp, #44	; 0x2c
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	460b      	mov	r3, r1
 8008c40:	80fb      	strh	r3, [r7, #6]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c46:	88bb      	ldrh	r3, [r7, #4]
 8008c48:	085b      	lsrs	r3, r3, #1
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c60:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
 8008c66:	e018      	b.n	8008c9a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	3302      	adds	r3, #2
 8008c74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	3301      	adds	r3, #1
 8008c82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	0a1b      	lsrs	r3, r3, #8
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3301      	adds	r3, #1
 8008c92:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	3b01      	subs	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e3      	bne.n	8008c68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ca0:	88bb      	ldrh	r3, [r7, #4]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	701a      	strb	r2, [r3, #0]
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	372c      	adds	r7, #44	; 0x2c
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cd8:	f003 fa56 	bl	800c188 <USBD_static_malloc>
 8008cdc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008cec:	2302      	movs	r3, #2
 8008cee:	e066      	b.n	8008dbe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	7c1b      	ldrb	r3, [r3, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d119      	bne.n	8008d34 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d04:	2202      	movs	r2, #2
 8008d06:	2181      	movs	r1, #129	; 0x81
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f003 f8e2 	bl	800bed2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d18:	2202      	movs	r2, #2
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f003 f8d8 	bl	800bed2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2210      	movs	r2, #16
 8008d2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008d32:	e016      	b.n	8008d62 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d34:	2340      	movs	r3, #64	; 0x40
 8008d36:	2202      	movs	r2, #2
 8008d38:	2181      	movs	r1, #129	; 0x81
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f003 f8c9 	bl	800bed2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d46:	2340      	movs	r3, #64	; 0x40
 8008d48:	2202      	movs	r2, #2
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f003 f8c0 	bl	800bed2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2210      	movs	r2, #16
 8008d5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d62:	2308      	movs	r3, #8
 8008d64:	2203      	movs	r2, #3
 8008d66:	2182      	movs	r1, #130	; 0x82
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f003 f8b2 	bl	800bed2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	7c1b      	ldrb	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d109      	bne.n	8008dac <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008da2:	2101      	movs	r1, #1
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f003 f984 	bl	800c0b2 <USBD_LL_PrepareReceive>
 8008daa:	e007      	b.n	8008dbc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	2101      	movs	r1, #1
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f003 f97b 	bl	800c0b2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dd2:	2181      	movs	r1, #129	; 0x81
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f003 f8a2 	bl	800bf1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008de0:	2101      	movs	r1, #1
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f003 f89b 	bl	800bf1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008df0:	2182      	movs	r1, #130	; 0x82
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f003 f893 	bl	800bf1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00e      	beq.n	8008e30 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e22:	4618      	mov	r0, r3
 8008e24:	f003 f9be 	bl	800c1a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e0af      	b.n	8008fc4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03f      	beq.n	8008ef0 <USBD_CDC_Setup+0xb4>
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	f040 809f 	bne.w	8008fb4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d02e      	beq.n	8008edc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	da16      	bge.n	8008eb6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008e94:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	88d2      	ldrh	r2, [r2, #6]
 8008e9a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	bf28      	it	cs
 8008ea4:	2307      	movcs	r3, #7
 8008ea6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	89fa      	ldrh	r2, [r7, #14]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fa9f 	bl	800a3f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008eb4:	e085      	b.n	8008fc2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	785a      	ldrb	r2, [r3, #1]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008ecc:	6939      	ldr	r1, [r7, #16]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88db      	ldrh	r3, [r3, #6]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fab8 	bl	800a44a <USBD_CtlPrepareRx>
      break;
 8008eda:	e072      	b.n	8008fc2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	7850      	ldrb	r0, [r2, #1]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	4798      	blx	r3
      break;
 8008eee:	e068      	b.n	8008fc2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b0b      	cmp	r3, #11
 8008ef6:	d852      	bhi.n	8008f9e <USBD_CDC_Setup+0x162>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBD_CDC_Setup+0xc4>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f31 	.word	0x08008f31
 8008f04:	08008fad 	.word	0x08008fad
 8008f08:	08008f9f 	.word	0x08008f9f
 8008f0c:	08008f9f 	.word	0x08008f9f
 8008f10:	08008f9f 	.word	0x08008f9f
 8008f14:	08008f9f 	.word	0x08008f9f
 8008f18:	08008f9f 	.word	0x08008f9f
 8008f1c:	08008f9f 	.word	0x08008f9f
 8008f20:	08008f9f 	.word	0x08008f9f
 8008f24:	08008f9f 	.word	0x08008f9f
 8008f28:	08008f5b 	.word	0x08008f5b
 8008f2c:	08008f85 	.word	0x08008f85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d107      	bne.n	8008f4c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f3c:	f107 030a 	add.w	r3, r7, #10
 8008f40:	2202      	movs	r2, #2
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 fa54 	bl	800a3f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f4a:	e032      	b.n	8008fb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 f9de 	bl	800a310 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	75fb      	strb	r3, [r7, #23]
          break;
 8008f58:	e02b      	b.n	8008fb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d107      	bne.n	8008f76 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f66:	f107 030d 	add.w	r3, r7, #13
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 fa3f 	bl	800a3f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f74:	e01d      	b.n	8008fb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f9c9 	bl	800a310 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	75fb      	strb	r3, [r7, #23]
          break;
 8008f82:	e016      	b.n	8008fb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d00f      	beq.n	8008fb0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 f9bc 	bl	800a310 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f9c:	e008      	b.n	8008fb0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 f9b5 	bl	800a310 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8008faa:	e002      	b.n	8008fb2 <USBD_CDC_Setup+0x176>
          break;
 8008fac:	bf00      	nop
 8008fae:	e008      	b.n	8008fc2 <USBD_CDC_Setup+0x186>
          break;
 8008fb0:	bf00      	nop
      }
      break;
 8008fb2:	e006      	b.n	8008fc2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f9aa 	bl	800a310 <USBD_CtlError>
      ret = USBD_FAIL;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e04f      	b.n	800908e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	3318      	adds	r3, #24
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d029      	beq.n	8009060 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800900c:	78fa      	ldrb	r2, [r7, #3]
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	440b      	add	r3, r1
 800901a:	3318      	adds	r3, #24
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	78f9      	ldrb	r1, [r7, #3]
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	460b      	mov	r3, r1
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	4403      	add	r3, r0
 800902c:	3338      	adds	r3, #56	; 0x38
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	fbb2 f1f3 	udiv	r1, r2, r3
 8009034:	fb03 f301 	mul.w	r3, r3, r1
 8009038:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800903a:	2b00      	cmp	r3, #0
 800903c:	d110      	bne.n	8009060 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800903e:	78fa      	ldrb	r2, [r7, #3]
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	3318      	adds	r3, #24
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009052:	78f9      	ldrb	r1, [r7, #3]
 8009054:	2300      	movs	r3, #0
 8009056:	2200      	movs	r2, #0
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f003 f809 	bl	800c070 <USBD_LL_Transmit>
 800905e:	e015      	b.n	800908c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e015      	b.n	80090e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f003 f819 	bl	800c0f4 <USBD_LL_GetRxDataSize>
 80090c2:	4602      	mov	r2, r0
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80090de:	4611      	mov	r1, r2
 80090e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	e01b      	b.n	800913e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d015      	beq.n	800913c <USBD_CDC_EP0_RxReady+0x50>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009116:	2bff      	cmp	r3, #255	; 0xff
 8009118:	d010      	beq.n	800913c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009128:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009130:	b292      	uxth	r2, r2
 8009132:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	22ff      	movs	r2, #255	; 0xff
 8009138:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2243      	movs	r2, #67	; 0x43
 8009154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009156:	4b03      	ldr	r3, [pc, #12]	; (8009164 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	20000094 	.word	0x20000094

08009168 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2243      	movs	r2, #67	; 0x43
 8009174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009176:	4b03      	ldr	r3, [pc, #12]	; (8009184 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	20000050 	.word	0x20000050

08009188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2243      	movs	r2, #67	; 0x43
 8009194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009196:	4b03      	ldr	r3, [pc, #12]	; (80091a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	200000d8 	.word	0x200000d8

080091a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	220a      	movs	r2, #10
 80091b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80091b6:	4b03      	ldr	r3, [pc, #12]	; (80091c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	2000000c 	.word	0x2000000c

080091c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091d8:	2303      	movs	r3, #3
 80091da:	e004      	b.n	80091e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b087      	sub	sp, #28
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	60f8      	str	r0, [r7, #12]
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009204:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800920c:	2303      	movs	r3, #3
 800920e:	e008      	b.n	8009222 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800922e:	b480      	push	{r7}
 8009230:	b085      	sub	sp, #20
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800923e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009246:	2303      	movs	r3, #3
 8009248:	e004      	b.n	8009254 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800926e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800927a:	2303      	movs	r3, #3
 800927c:	e016      	b.n	80092ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7c1b      	ldrb	r3, [r3, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d109      	bne.n	800929a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800928c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009290:	2101      	movs	r1, #1
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f002 ff0d 	bl	800c0b2 <USBD_LL_PrepareReceive>
 8009298:	e007      	b.n	80092aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092a0:	2340      	movs	r3, #64	; 0x40
 80092a2:	2101      	movs	r1, #1
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f002 ff04 	bl	800c0b2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e01f      	b.n	800930c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	79fa      	ldrb	r2, [r7, #7]
 80092fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f002 fd6b 	bl	800bddc <USBD_LL_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]

  return ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009328:	2303      	movs	r3, #3
 800932a:	e016      	b.n	800935a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	f107 020e 	add.w	r2, r7, #14
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	4602      	mov	r2, r0
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f002 fd96 	bl	800be9c <USBD_LL_Start>
 8009370:	4603      	mov	r3, r0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800939c:	2303      	movs	r3, #3
 800939e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d009      	beq.n	80093be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	4798      	blx	r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
  }

  return USBD_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 ff46 	bl	800a29c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800942c:	f003 031f 	and.w	r3, r3, #31
 8009430:	2b02      	cmp	r3, #2
 8009432:	d01a      	beq.n	800946a <USBD_LL_SetupStage+0x72>
 8009434:	2b02      	cmp	r3, #2
 8009436:	d822      	bhi.n	800947e <USBD_LL_SetupStage+0x86>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <USBD_LL_SetupStage+0x4a>
 800943c:	2b01      	cmp	r3, #1
 800943e:	d00a      	beq.n	8009456 <USBD_LL_SetupStage+0x5e>
 8009440:	e01d      	b.n	800947e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9ee 	bl	800982c <USBD_StdDevReq>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
      break;
 8009454:	e020      	b.n	8009498 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa52 	bl	8009908 <USBD_StdItfReq>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
      break;
 8009468:	e016      	b.n	8009498 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa91 	bl	800999a <USBD_StdEPReq>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
      break;
 800947c:	e00c      	b.n	8009498 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009488:	b2db      	uxtb	r3, r3
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f002 fd65 	bl	800bf5c <USBD_LL_StallEP>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
      break;
 8009496:	bf00      	nop
  }

  return ret;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b086      	sub	sp, #24
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	460b      	mov	r3, r1
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d138      	bne.n	8009528 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d14a      	bne.n	800955e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d913      	bls.n	80094fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	1ad2      	subs	r2, r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	4293      	cmp	r3, r2
 80094ec:	bf28      	it	cs
 80094ee:	4613      	movcs	r3, r2
 80094f0:	461a      	mov	r2, r3
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 ffc5 	bl	800a484 <USBD_CtlContinueRx>
 80094fa:	e030      	b.n	800955e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b03      	cmp	r3, #3
 8009506:	d10b      	bne.n	8009520 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d005      	beq.n	8009520 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 ffc0 	bl	800a4a6 <USBD_CtlSendStatus>
 8009526:	e01a      	b.n	800955e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b03      	cmp	r3, #3
 8009532:	d114      	bne.n	800955e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00e      	beq.n	800955e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	7afa      	ldrb	r2, [r7, #11]
 800954a:	4611      	mov	r1, r2
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	4798      	blx	r3
 8009550:	4603      	mov	r3, r0
 8009552:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	e000      	b.n	8009560 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	460b      	mov	r3, r1
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d16b      	bne.n	8009654 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3314      	adds	r3, #20
 8009580:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009588:	2b02      	cmp	r3, #2
 800958a:	d156      	bne.n	800963a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	429a      	cmp	r2, r3
 8009596:	d914      	bls.n	80095c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	1ad2      	subs	r2, r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 ff3a 	bl	800a428 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095b4:	2300      	movs	r3, #0
 80095b6:	2200      	movs	r2, #0
 80095b8:	2100      	movs	r1, #0
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f002 fd79 	bl	800c0b2 <USBD_LL_PrepareReceive>
 80095c0:	e03b      	b.n	800963a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d11c      	bne.n	8009608 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d316      	bcc.n	8009608 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d20f      	bcs.n	8009608 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095e8:	2200      	movs	r2, #0
 80095ea:	2100      	movs	r1, #0
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 ff1b 	bl	800a428 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fa:	2300      	movs	r3, #0
 80095fc:	2200      	movs	r2, #0
 80095fe:	2100      	movs	r1, #0
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f002 fd56 	bl	800c0b2 <USBD_LL_PrepareReceive>
 8009606:	e018      	b.n	800963a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b03      	cmp	r3, #3
 8009612:	d10b      	bne.n	800962c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800962c:	2180      	movs	r1, #128	; 0x80
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f002 fc94 	bl	800bf5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 ff49 	bl	800a4cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009640:	2b01      	cmp	r3, #1
 8009642:	d122      	bne.n	800968a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fe98 	bl	800937a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009652:	e01a      	b.n	800968a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b03      	cmp	r3, #3
 800965e:	d114      	bne.n	800968a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00e      	beq.n	800968a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	7afa      	ldrb	r2, [r7, #11]
 8009676:	4611      	mov	r1, r2
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	4798      	blx	r3
 800967c:	4603      	mov	r3, r0
 800967e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	e000      	b.n	800968c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e02f      	b.n	8009728 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6852      	ldr	r2, [r2, #4]
 80096ea:	b2d2      	uxtb	r2, r2
 80096ec:	4611      	mov	r1, r2
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096f2:	2340      	movs	r3, #64	; 0x40
 80096f4:	2200      	movs	r2, #0
 80096f6:	2100      	movs	r1, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f002 fbea 	bl	800bed2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2240      	movs	r2, #64	; 0x40
 800970a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	2200      	movs	r2, #0
 8009712:	2180      	movs	r1, #128	; 0x80
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 fbdc 	bl	800bed2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2240      	movs	r2, #64	; 0x40
 8009724:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800975e:	b2da      	uxtb	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2204      	movs	r2, #4
 800976a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b04      	cmp	r3, #4
 800978e:	d106      	bne.n	800979e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009796:	b2da      	uxtb	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80097be:	2303      	movs	r3, #3
 80097c0:	e012      	b.n	80097e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d10b      	bne.n	80097e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	3301      	adds	r3, #1
 8009806:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800980e:	8a3b      	ldrh	r3, [r7, #16]
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	b21a      	sxth	r2, r3
 8009814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009818:	4313      	orrs	r3, r2
 800981a:	b21b      	sxth	r3, r3
 800981c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800981e:	89fb      	ldrh	r3, [r7, #14]
}
 8009820:	4618      	mov	r0, r3
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009842:	2b40      	cmp	r3, #64	; 0x40
 8009844:	d005      	beq.n	8009852 <USBD_StdDevReq+0x26>
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d853      	bhi.n	80098f2 <USBD_StdDevReq+0xc6>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00b      	beq.n	8009866 <USBD_StdDevReq+0x3a>
 800984e:	2b20      	cmp	r3, #32
 8009850:	d14f      	bne.n	80098f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
      break;
 8009864:	e04a      	b.n	80098fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	2b09      	cmp	r3, #9
 800986c:	d83b      	bhi.n	80098e6 <USBD_StdDevReq+0xba>
 800986e:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <USBD_StdDevReq+0x48>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	080098c9 	.word	0x080098c9
 8009878:	080098dd 	.word	0x080098dd
 800987c:	080098e7 	.word	0x080098e7
 8009880:	080098d3 	.word	0x080098d3
 8009884:	080098e7 	.word	0x080098e7
 8009888:	080098a7 	.word	0x080098a7
 800988c:	0800989d 	.word	0x0800989d
 8009890:	080098e7 	.word	0x080098e7
 8009894:	080098bf 	.word	0x080098bf
 8009898:	080098b1 	.word	0x080098b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f9de 	bl	8009c60 <USBD_GetDescriptor>
          break;
 80098a4:	e024      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fb6d 	bl	8009f88 <USBD_SetAddress>
          break;
 80098ae:	e01f      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fbac 	bl	800a010 <USBD_SetConfig>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
          break;
 80098bc:	e018      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fc4b 	bl	800a15c <USBD_GetConfig>
          break;
 80098c6:	e013      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fc7c 	bl	800a1c8 <USBD_GetStatus>
          break;
 80098d0:	e00e      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fcab 	bl	800a230 <USBD_SetFeature>
          break;
 80098da:	e009      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fcba 	bl	800a258 <USBD_ClrFeature>
          break;
 80098e4:	e004      	b.n	80098f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fd11 	bl	800a310 <USBD_CtlError>
          break;
 80098ee:	bf00      	nop
      }
      break;
 80098f0:	e004      	b.n	80098fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fd0b 	bl	800a310 <USBD_CtlError>
      break;
 80098fa:	bf00      	nop
  }

  return ret;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop

08009908 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	d005      	beq.n	800992e <USBD_StdItfReq+0x26>
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d82f      	bhi.n	8009986 <USBD_StdItfReq+0x7e>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <USBD_StdItfReq+0x26>
 800992a:	2b20      	cmp	r3, #32
 800992c:	d12b      	bne.n	8009986 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009934:	b2db      	uxtb	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	2b02      	cmp	r3, #2
 800993a:	d81d      	bhi.n	8009978 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	889b      	ldrh	r3, [r3, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b01      	cmp	r3, #1
 8009944:	d813      	bhi.n	800996e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	4798      	blx	r3
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	88db      	ldrh	r3, [r3, #6]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d110      	bne.n	8009982 <USBD_StdItfReq+0x7a>
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10d      	bne.n	8009982 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fd9d 	bl	800a4a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800996c:	e009      	b.n	8009982 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fccd 	bl	800a310 <USBD_CtlError>
          break;
 8009976:	e004      	b.n	8009982 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fcc8 	bl	800a310 <USBD_CtlError>
          break;
 8009980:	e000      	b.n	8009984 <USBD_StdItfReq+0x7c>
          break;
 8009982:	bf00      	nop
      }
      break;
 8009984:	e004      	b.n	8009990 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fcc1 	bl	800a310 <USBD_CtlError>
      break;
 800998e:	bf00      	nop
  }

  return ret;
 8009990:	7bfb      	ldrb	r3, [r7, #15]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	889b      	ldrh	r3, [r3, #4]
 80099ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d007      	beq.n	80099ca <USBD_StdEPReq+0x30>
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	f200 8145 	bhi.w	8009c4a <USBD_StdEPReq+0x2b0>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00c      	beq.n	80099de <USBD_StdEPReq+0x44>
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	f040 8140 	bne.w	8009c4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	4798      	blx	r3
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]
      break;
 80099dc:	e13a      	b.n	8009c54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d007      	beq.n	80099f6 <USBD_StdEPReq+0x5c>
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	f300 8129 	bgt.w	8009c3e <USBD_StdEPReq+0x2a4>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d07f      	beq.n	8009af0 <USBD_StdEPReq+0x156>
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d03c      	beq.n	8009a6e <USBD_StdEPReq+0xd4>
 80099f4:	e123      	b.n	8009c3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d002      	beq.n	8009a08 <USBD_StdEPReq+0x6e>
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d016      	beq.n	8009a34 <USBD_StdEPReq+0x9a>
 8009a06:	e02c      	b.n	8009a62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00d      	beq.n	8009a2a <USBD_StdEPReq+0x90>
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b80      	cmp	r3, #128	; 0x80
 8009a12:	d00a      	beq.n	8009a2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f002 fa9f 	bl	800bf5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a1e:	2180      	movs	r1, #128	; 0x80
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f002 fa9b 	bl	800bf5c <USBD_LL_StallEP>
 8009a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a28:	e020      	b.n	8009a6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fc6f 	bl	800a310 <USBD_CtlError>
              break;
 8009a32:	e01b      	b.n	8009a6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	885b      	ldrh	r3, [r3, #2]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10e      	bne.n	8009a5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <USBD_StdEPReq+0xc0>
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	2b80      	cmp	r3, #128	; 0x80
 8009a46:	d008      	beq.n	8009a5a <USBD_StdEPReq+0xc0>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	88db      	ldrh	r3, [r3, #6]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f002 fa81 	bl	800bf5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fd23 	bl	800a4a6 <USBD_CtlSendStatus>

              break;
 8009a60:	e004      	b.n	8009a6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fc53 	bl	800a310 <USBD_CtlError>
              break;
 8009a6a:	bf00      	nop
          }
          break;
 8009a6c:	e0ec      	b.n	8009c48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d002      	beq.n	8009a80 <USBD_StdEPReq+0xe6>
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d016      	beq.n	8009aac <USBD_StdEPReq+0x112>
 8009a7e:	e030      	b.n	8009ae2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00d      	beq.n	8009aa2 <USBD_StdEPReq+0x108>
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b80      	cmp	r3, #128	; 0x80
 8009a8a:	d00a      	beq.n	8009aa2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f002 fa63 	bl	800bf5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a96:	2180      	movs	r1, #128	; 0x80
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f002 fa5f 	bl	800bf5c <USBD_LL_StallEP>
 8009a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa0:	e025      	b.n	8009aee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc33 	bl	800a310 <USBD_CtlError>
              break;
 8009aaa:	e020      	b.n	8009aee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11b      	bne.n	8009aec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f002 fa69 	bl	800bf9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fcec 	bl	800a4a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	4798      	blx	r3
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ae0:	e004      	b.n	8009aec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc13 	bl	800a310 <USBD_CtlError>
              break;
 8009aea:	e000      	b.n	8009aee <USBD_StdEPReq+0x154>
              break;
 8009aec:	bf00      	nop
          }
          break;
 8009aee:	e0ab      	b.n	8009c48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d002      	beq.n	8009b02 <USBD_StdEPReq+0x168>
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d032      	beq.n	8009b66 <USBD_StdEPReq+0x1cc>
 8009b00:	e097      	b.n	8009c32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d007      	beq.n	8009b18 <USBD_StdEPReq+0x17e>
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2b80      	cmp	r3, #128	; 0x80
 8009b0c:	d004      	beq.n	8009b18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fbfd 	bl	800a310 <USBD_CtlError>
                break;
 8009b16:	e091      	b.n	8009c3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	da0b      	bge.n	8009b38 <USBD_StdEPReq+0x19e>
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	3310      	adds	r3, #16
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	3304      	adds	r3, #4
 8009b36:	e00b      	b.n	8009b50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	3304      	adds	r3, #4
 8009b50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fc47 	bl	800a3f2 <USBD_CtlSendData>
              break;
 8009b64:	e06a      	b.n	8009c3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	da11      	bge.n	8009b92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	f003 020f 	and.w	r2, r3, #15
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	3324      	adds	r3, #36	; 0x24
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d117      	bne.n	8009bb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fbc0 	bl	800a310 <USBD_CtlError>
                  break;
 8009b90:	e054      	b.n	8009c3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d104      	bne.n	8009bb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fbad 	bl	800a310 <USBD_CtlError>
                  break;
 8009bb6:	e041      	b.n	8009c3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da0b      	bge.n	8009bd8 <USBD_StdEPReq+0x23e>
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	3310      	adds	r3, #16
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	e00b      	b.n	8009bf0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	3304      	adds	r3, #4
 8009bf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <USBD_StdEPReq+0x264>
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	2b80      	cmp	r3, #128	; 0x80
 8009bfc:	d103      	bne.n	8009c06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e00e      	b.n	8009c24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f002 f9e4 	bl	800bfd8 <USBD_LL_IsStallEP>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e002      	b.n	8009c24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2202      	movs	r2, #2
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fbe1 	bl	800a3f2 <USBD_CtlSendData>
              break;
 8009c30:	e004      	b.n	8009c3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fb6b 	bl	800a310 <USBD_CtlError>
              break;
 8009c3a:	bf00      	nop
          }
          break;
 8009c3c:	e004      	b.n	8009c48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fb65 	bl	800a310 <USBD_CtlError>
          break;
 8009c46:	bf00      	nop
      }
      break;
 8009c48:	e004      	b.n	8009c54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fb5f 	bl	800a310 <USBD_CtlError>
      break;
 8009c52:	bf00      	nop
  }

  return ret;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	2b0e      	cmp	r3, #14
 8009c82:	f200 8152 	bhi.w	8009f2a <USBD_GetDescriptor+0x2ca>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <USBD_GetDescriptor+0x2c>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cfd 	.word	0x08009cfd
 8009c90:	08009d15 	.word	0x08009d15
 8009c94:	08009d55 	.word	0x08009d55
 8009c98:	08009f2b 	.word	0x08009f2b
 8009c9c:	08009f2b 	.word	0x08009f2b
 8009ca0:	08009ecb 	.word	0x08009ecb
 8009ca4:	08009ef7 	.word	0x08009ef7
 8009ca8:	08009f2b 	.word	0x08009f2b
 8009cac:	08009f2b 	.word	0x08009f2b
 8009cb0:	08009f2b 	.word	0x08009f2b
 8009cb4:	08009f2b 	.word	0x08009f2b
 8009cb8:	08009f2b 	.word	0x08009f2b
 8009cbc:	08009f2b 	.word	0x08009f2b
 8009cc0:	08009f2b 	.word	0x08009f2b
 8009cc4:	08009cc9 	.word	0x08009cc9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	7c12      	ldrb	r2, [r2, #16]
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
 8009ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cea:	e126      	b.n	8009f3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fb0e 	bl	800a310 <USBD_CtlError>
        err++;
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8009cfa:	e11e      	b.n	8009f3a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
      break;
 8009d12:	e112      	b.n	8009f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7c1b      	ldrb	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10d      	bne.n	8009d38 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	f107 0208 	add.w	r2, r7, #8
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
 8009d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3301      	adds	r3, #1
 8009d32:	2202      	movs	r2, #2
 8009d34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d36:	e100      	b.n	8009f3a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	f107 0208 	add.w	r2, r7, #8
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	2202      	movs	r2, #2
 8009d50:	701a      	strb	r2, [r3, #0]
      break;
 8009d52:	e0f2      	b.n	8009f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b05      	cmp	r3, #5
 8009d5c:	f200 80ac 	bhi.w	8009eb8 <USBD_GetDescriptor+0x258>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBD_GetDescriptor+0x108>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009d81 	.word	0x08009d81
 8009d6c:	08009db5 	.word	0x08009db5
 8009d70:	08009de9 	.word	0x08009de9
 8009d74:	08009e1d 	.word	0x08009e1d
 8009d78:	08009e51 	.word	0x08009e51
 8009d7c:	08009e85 	.word	0x08009e85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da2:	e091      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fab2 	bl	800a310 <USBD_CtlError>
            err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
          break;
 8009db2:	e089      	b.n	8009ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd6:	e077      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa98 	bl	800a310 <USBD_CtlError>
            err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
          break;
 8009de6:	e06f      	b.n	8009ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0a:	e05d      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa7e 	bl	800a310 <USBD_CtlError>
            err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1a:	e055      	b.n	8009ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3e:	e043      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa64 	bl	800a310 <USBD_CtlError>
            err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4e:	e03b      	b.n	8009ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	7c12      	ldrb	r2, [r2, #16]
 8009e68:	f107 0108 	add.w	r1, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e72:	e029      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa4a 	bl	800a310 <USBD_CtlError>
            err++;
 8009e7c:	7afb      	ldrb	r3, [r7, #11]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	72fb      	strb	r3, [r7, #11]
          break;
 8009e82:	e021      	b.n	8009ec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7c12      	ldrb	r2, [r2, #16]
 8009e9c:	f107 0108 	add.w	r1, r7, #8
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea6:	e00f      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa30 	bl	800a310 <USBD_CtlError>
            err++;
 8009eb0:	7afb      	ldrb	r3, [r7, #11]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb6:	e007      	b.n	8009ec8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa28 	bl	800a310 <USBD_CtlError>
          err++;
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009ec6:	bf00      	nop
      }
      break;
 8009ec8:	e037      	b.n	8009f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7c1b      	ldrb	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eda:	f107 0208 	add.w	r2, r7, #8
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4798      	blx	r3
 8009ee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ee4:	e029      	b.n	8009f3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa11 	bl	800a310 <USBD_CtlError>
        err++;
 8009eee:	7afb      	ldrb	r3, [r7, #11]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ef4:	e021      	b.n	8009f3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	7c1b      	ldrb	r3, [r3, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10d      	bne.n	8009f1a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	f107 0208 	add.w	r2, r7, #8
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	2207      	movs	r2, #7
 8009f16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f18:	e00f      	b.n	8009f3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9f7 	bl	800a310 <USBD_CtlError>
        err++;
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	3301      	adds	r3, #1
 8009f26:	72fb      	strb	r3, [r7, #11]
      break;
 8009f28:	e007      	b.n	8009f3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9ef 	bl	800a310 <USBD_CtlError>
      err++;
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	3301      	adds	r3, #1
 8009f36:	72fb      	strb	r3, [r7, #11]
      break;
 8009f38:	bf00      	nop
  }

  if (err != 0U)
 8009f3a:	7afb      	ldrb	r3, [r7, #11]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d11e      	bne.n	8009f7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	88db      	ldrh	r3, [r3, #6]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d016      	beq.n	8009f76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f48:	893b      	ldrh	r3, [r7, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00e      	beq.n	8009f6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	88da      	ldrh	r2, [r3, #6]
 8009f52:	893b      	ldrh	r3, [r7, #8]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bf28      	it	cs
 8009f58:	4613      	movcs	r3, r2
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f5e:	893b      	ldrh	r3, [r7, #8]
 8009f60:	461a      	mov	r2, r3
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa44 	bl	800a3f2 <USBD_CtlSendData>
 8009f6a:	e009      	b.n	8009f80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f9ce 	bl	800a310 <USBD_CtlError>
 8009f74:	e004      	b.n	8009f80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa95 	bl	800a4a6 <USBD_CtlSendStatus>
 8009f7c:	e000      	b.n	8009f80 <USBD_GetDescriptor+0x320>
    return;
 8009f7e:	bf00      	nop
  }
}
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop

08009f88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	889b      	ldrh	r3, [r3, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d131      	bne.n	8009ffe <USBD_SetAddress+0x76>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	88db      	ldrh	r3, [r3, #6]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d12d      	bne.n	8009ffe <USBD_SetAddress+0x76>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	885b      	ldrh	r3, [r3, #2]
 8009fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8009fa8:	d829      	bhi.n	8009ffe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d104      	bne.n	8009fcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f9a3 	bl	800a310 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fca:	e01d      	b.n	800a008 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7bfa      	ldrb	r2, [r7, #15]
 8009fd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f002 f82a 	bl	800c032 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fa61 	bl	800a4a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d004      	beq.n	8009ff4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2202      	movs	r2, #2
 8009fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff2:	e009      	b.n	800a008 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffc:	e004      	b.n	800a008 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f985 	bl	800a310 <USBD_CtlError>
  }
}
 800a006:	bf00      	nop
 800a008:	bf00      	nop
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	4b4c      	ldr	r3, [pc, #304]	; (800a158 <USBD_SetConfig+0x148>)
 800a026:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a028:	4b4b      	ldr	r3, [pc, #300]	; (800a158 <USBD_SetConfig+0x148>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d905      	bls.n	800a03c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f96c 	bl	800a310 <USBD_CtlError>
    return USBD_FAIL;
 800a038:	2303      	movs	r3, #3
 800a03a:	e088      	b.n	800a14e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b02      	cmp	r3, #2
 800a046:	d002      	beq.n	800a04e <USBD_SetConfig+0x3e>
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d025      	beq.n	800a098 <USBD_SetConfig+0x88>
 800a04c:	e071      	b.n	800a132 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a04e:	4b42      	ldr	r3, [pc, #264]	; (800a158 <USBD_SetConfig+0x148>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01c      	beq.n	800a090 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a056:	4b40      	ldr	r3, [pc, #256]	; (800a158 <USBD_SetConfig+0x148>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a060:	4b3d      	ldr	r3, [pc, #244]	; (800a158 <USBD_SetConfig+0x148>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff f992 	bl	8009390 <USBD_SetClassConfig>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d004      	beq.n	800a080 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f949 	bl	800a310 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a07e:	e065      	b.n	800a14c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fa10 	bl	800a4a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2203      	movs	r2, #3
 800a08a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a08e:	e05d      	b.n	800a14c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fa08 	bl	800a4a6 <USBD_CtlSendStatus>
      break;
 800a096:	e059      	b.n	800a14c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a098:	4b2f      	ldr	r3, [pc, #188]	; (800a158 <USBD_SetConfig+0x148>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d112      	bne.n	800a0c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a0a8:	4b2b      	ldr	r3, [pc, #172]	; (800a158 <USBD_SetConfig+0x148>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0b2:	4b29      	ldr	r3, [pc, #164]	; (800a158 <USBD_SetConfig+0x148>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff f985 	bl	80093c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f9f1 	bl	800a4a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0c4:	e042      	b.n	800a14c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a0c6:	4b24      	ldr	r3, [pc, #144]	; (800a158 <USBD_SetConfig+0x148>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d02a      	beq.n	800a12a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff f973 	bl	80093c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0e2:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <USBD_SetConfig+0x148>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0ec:	4b1a      	ldr	r3, [pc, #104]	; (800a158 <USBD_SetConfig+0x148>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff f94c 	bl	8009390 <USBD_SetClassConfig>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00f      	beq.n	800a122 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f903 	bl	800a310 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff f958 	bl	80093c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a120:	e014      	b.n	800a14c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f9bf 	bl	800a4a6 <USBD_CtlSendStatus>
      break;
 800a128:	e010      	b.n	800a14c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f9bb 	bl	800a4a6 <USBD_CtlSendStatus>
      break;
 800a130:	e00c      	b.n	800a14c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f8eb 	bl	800a310 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a13a:	4b07      	ldr	r3, [pc, #28]	; (800a158 <USBD_SetConfig+0x148>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff f941 	bl	80093c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	73fb      	strb	r3, [r7, #15]
      break;
 800a14a:	bf00      	nop
  }

  return ret;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000208 	.word	0x20000208

0800a15c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	88db      	ldrh	r3, [r3, #6]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d004      	beq.n	800a178 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f8cd 	bl	800a310 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a176:	e023      	b.n	800a1c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b02      	cmp	r3, #2
 800a182:	dc02      	bgt.n	800a18a <USBD_GetConfig+0x2e>
 800a184:	2b00      	cmp	r3, #0
 800a186:	dc03      	bgt.n	800a190 <USBD_GetConfig+0x34>
 800a188:	e015      	b.n	800a1b6 <USBD_GetConfig+0x5a>
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d00b      	beq.n	800a1a6 <USBD_GetConfig+0x4a>
 800a18e:	e012      	b.n	800a1b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3308      	adds	r3, #8
 800a19a:	2201      	movs	r2, #1
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f927 	bl	800a3f2 <USBD_CtlSendData>
        break;
 800a1a4:	e00c      	b.n	800a1c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f91f 	bl	800a3f2 <USBD_CtlSendData>
        break;
 800a1b4:	e004      	b.n	800a1c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f8a9 	bl	800a310 <USBD_CtlError>
        break;
 800a1be:	bf00      	nop
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d81e      	bhi.n	800a21e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	88db      	ldrh	r3, [r3, #6]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d004      	beq.n	800a1f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f890 	bl	800a310 <USBD_CtlError>
        break;
 800a1f0:	e01a      	b.n	800a228 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d005      	beq.n	800a20e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f043 0202 	orr.w	r2, r3, #2
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	330c      	adds	r3, #12
 800a212:	2202      	movs	r2, #2
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f8eb 	bl	800a3f2 <USBD_CtlSendData>
      break;
 800a21c:	e004      	b.n	800a228 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f875 	bl	800a310 <USBD_CtlError>
      break;
 800a226:	bf00      	nop
  }
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	885b      	ldrh	r3, [r3, #2]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d106      	bne.n	800a250 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f92b 	bl	800a4a6 <USBD_CtlSendStatus>
  }
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d80b      	bhi.n	800a288 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	885b      	ldrh	r3, [r3, #2]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d10c      	bne.n	800a292 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f910 	bl	800a4a6 <USBD_CtlSendStatus>
      }
      break;
 800a286:	e004      	b.n	800a292 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f840 	bl	800a310 <USBD_CtlError>
      break;
 800a290:	e000      	b.n	800a294 <USBD_ClrFeature+0x3c>
      break;
 800a292:	bf00      	nop
  }
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	781a      	ldrb	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fa92 	bl	80097f0 <SWAPBYTE>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7ff fa85 	bl	80097f0 <SWAPBYTE>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff fa78 	bl	80097f0 <SWAPBYTE>
 800a300:	4603      	mov	r3, r0
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	80da      	strh	r2, [r3, #6]
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a31a:	2180      	movs	r1, #128	; 0x80
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 fe1d 	bl	800bf5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a322:	2100      	movs	r1, #0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 fe19 	bl	800bf5c <USBD_LL_StallEP>
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b086      	sub	sp, #24
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d036      	beq.n	800a3b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a34c:	6938      	ldr	r0, [r7, #16]
 800a34e:	f000 f836 	bl	800a3be <USBD_GetLen>
 800a352:	4603      	mov	r3, r0
 800a354:	3301      	adds	r3, #1
 800a356:	b29b      	uxth	r3, r3
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	4413      	add	r3, r2
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	3301      	adds	r3, #1
 800a370:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	4413      	add	r3, r2
 800a378:	2203      	movs	r2, #3
 800a37a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	3301      	adds	r3, #1
 800a380:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a382:	e013      	b.n	800a3ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	3301      	adds	r3, #1
 800a394:	613b      	str	r3, [r7, #16]
    idx++;
 800a396:	7dfb      	ldrb	r3, [r7, #23]
 800a398:	3301      	adds	r3, #1
 800a39a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3a6:	7dfb      	ldrb	r3, [r7, #23]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e7      	bne.n	800a384 <USBD_GetString+0x52>
 800a3b4:	e000      	b.n	800a3b8 <USBD_GetString+0x86>
    return;
 800a3b6:	bf00      	nop
  }
}
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b085      	sub	sp, #20
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3ce:	e005      	b.n	800a3dc <USBD_GetLen+0x1e>
  {
    len++;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1f5      	bne.n	800a3d0 <USBD_GetLen+0x12>
  }

  return len;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2202      	movs	r2, #2
 800a402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	2100      	movs	r1, #0
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f001 fe29 	bl	800c070 <USBD_LL_Transmit>

  return USBD_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	2100      	movs	r1, #0
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f001 fe18 	bl	800c070 <USBD_LL_Transmit>

  return USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2203      	movs	r2, #3
 800a45a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	2100      	movs	r1, #0
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f001 fe1c 	bl	800c0b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	2100      	movs	r1, #0
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f001 fe0b 	bl	800c0b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f001 fdd7 	bl	800c070 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2205      	movs	r2, #5
 800a4d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4dc:	2300      	movs	r3, #0
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f001 fde5 	bl	800c0b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a504:	2b84      	cmp	r3, #132	; 0x84
 800a506:	d005      	beq.n	800a514 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	3303      	adds	r3, #3
 800a512:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a514:	68fb      	ldr	r3, [r7, #12]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a526:	f000 fa6f 	bl	800aa08 <vTaskStartScheduler>
  
  return osOK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a532:	b087      	sub	sp, #28
 800a534:	af02      	add	r7, sp, #8
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685c      	ldr	r4, [r3, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a546:	b29e      	uxth	r6, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff ffcf 	bl	800a4f2 <makeFreeRtosPriority>
 800a554:	4602      	mov	r2, r0
 800a556:	f107 030c 	add.w	r3, r7, #12
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	9200      	str	r2, [sp, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	4632      	mov	r2, r6
 800a562:	4629      	mov	r1, r5
 800a564:	4620      	mov	r0, r4
 800a566:	f000 f8d2 	bl	800a70e <xTaskCreate>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d001      	beq.n	800a574 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	e000      	b.n	800a576 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a574:	68fb      	ldr	r3, [r7, #12]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a57e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <osDelay+0x16>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	e000      	b.n	800a596 <osDelay+0x18>
 800a594:	2301      	movs	r3, #1
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fa02 	bl	800a9a0 <vTaskDelay>
  
  return osOK;
 800a59c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f103 0208 	add.w	r2, r3, #8
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a5be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0208 	add.w	r2, r3, #8
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f103 0208 	add.w	r2, r3, #8
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689a      	ldr	r2, [r3, #8]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	601a      	str	r2, [r3, #0]
}
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d103      	bne.n	800a668 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e00c      	b.n	800a682 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3308      	adds	r3, #8
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	e002      	b.n	800a676 <vListInsert+0x2e>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d2f6      	bcs.n	800a670 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
}
 800a6ae:	bf00      	nop
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b085      	sub	sp, #20
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6892      	ldr	r2, [r2, #8]
 800a6d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6852      	ldr	r2, [r2, #4]
 800a6da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d103      	bne.n	800a6ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	1e5a      	subs	r2, r3, #1
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b08c      	sub	sp, #48	; 0x30
 800a712:	af04      	add	r7, sp, #16
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	603b      	str	r3, [r7, #0]
 800a71a:	4613      	mov	r3, r2
 800a71c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4618      	mov	r0, r3
 800a724:	f000 feb8 	bl	800b498 <pvPortMalloc>
 800a728:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00e      	beq.n	800a74e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a730:	20b4      	movs	r0, #180	; 0xb4
 800a732:	f000 feb1 	bl	800b498 <pvPortMalloc>
 800a736:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	631a      	str	r2, [r3, #48]	; 0x30
 800a744:	e005      	b.n	800a752 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a746:	6978      	ldr	r0, [r7, #20]
 800a748:	f000 ff72 	bl	800b630 <vPortFree>
 800a74c:	e001      	b.n	800a752 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d013      	beq.n	800a780 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a758:	88fa      	ldrh	r2, [r7, #6]
 800a75a:	2300      	movs	r3, #0
 800a75c:	9303      	str	r3, [sp, #12]
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	9302      	str	r3, [sp, #8]
 800a762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 f80e 	bl	800a790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a774:	69f8      	ldr	r0, [r7, #28]
 800a776:	f000 f8a9 	bl	800a8cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a77a:	2301      	movs	r3, #1
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	e002      	b.n	800a786 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a780:	f04f 33ff 	mov.w	r3, #4294967295
 800a784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a786:	69bb      	ldr	r3, [r7, #24]
	}
 800a788:	4618      	mov	r0, r3
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f023 0307 	bic.w	r3, r3, #7
 800a7b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d01f      	beq.n	800a81e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61fb      	str	r3, [r7, #28]
 800a7e2:	e012      	b.n	800a80a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	7819      	ldrb	r1, [r3, #0]
 800a7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	3334      	adds	r3, #52	; 0x34
 800a7f4:	460a      	mov	r2, r1
 800a7f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	3301      	adds	r3, #1
 800a808:	61fb      	str	r3, [r7, #28]
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	2b0f      	cmp	r3, #15
 800a80e:	d9e9      	bls.n	800a7e4 <prvInitialiseNewTask+0x54>
 800a810:	e000      	b.n	800a814 <prvInitialiseNewTask+0x84>
			{
				break;
 800a812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a81c:	e003      	b.n	800a826 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	2b06      	cmp	r3, #6
 800a82a:	d901      	bls.n	800a830 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a82c:	2306      	movs	r3, #6
 800a82e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	2200      	movs	r2, #0
 800a840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	3304      	adds	r3, #4
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fecd 	bl	800a5e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	3318      	adds	r3, #24
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fec8 	bl	800a5e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a85a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	f1c3 0207 	rsb	r2, r3, #7
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a86a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	2200      	movs	r2, #0
 800a878:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	334c      	adds	r3, #76	; 0x4c
 800a880:	2260      	movs	r2, #96	; 0x60
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f001 fcef 	bl	800c268 <memset>
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <prvInitialiseNewTask+0x130>)
 800a88e:	651a      	str	r2, [r3, #80]	; 0x50
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	4a0c      	ldr	r2, [pc, #48]	; (800a8c4 <prvInitialiseNewTask+0x134>)
 800a894:	655a      	str	r2, [r3, #84]	; 0x54
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	4a0b      	ldr	r2, [pc, #44]	; (800a8c8 <prvInitialiseNewTask+0x138>)
 800a89a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	68f9      	ldr	r1, [r7, #12]
 800a8a0:	69b8      	ldr	r0, [r7, #24]
 800a8a2:	f000 fbe7 	bl	800b074 <pxPortInitialiseStack>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8b8:	bf00      	nop
 800a8ba:	3720      	adds	r7, #32
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	0800c4f4 	.word	0x0800c4f4
 800a8c4:	0800c514 	.word	0x0800c514
 800a8c8:	0800c4d4 	.word	0x0800c4d4

0800a8cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8d4:	f000 fcfe 	bl	800b2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8d8:	4b2a      	ldr	r3, [pc, #168]	; (800a984 <prvAddNewTaskToReadyList+0xb8>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	4a29      	ldr	r2, [pc, #164]	; (800a984 <prvAddNewTaskToReadyList+0xb8>)
 800a8e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8e2:	4b29      	ldr	r3, [pc, #164]	; (800a988 <prvAddNewTaskToReadyList+0xbc>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8ea:	4a27      	ldr	r2, [pc, #156]	; (800a988 <prvAddNewTaskToReadyList+0xbc>)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8f0:	4b24      	ldr	r3, [pc, #144]	; (800a984 <prvAddNewTaskToReadyList+0xb8>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d110      	bne.n	800a91a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8f8:	f000 fab2 	bl	800ae60 <prvInitialiseTaskLists>
 800a8fc:	e00d      	b.n	800a91a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8fe:	4b23      	ldr	r3, [pc, #140]	; (800a98c <prvAddNewTaskToReadyList+0xc0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d109      	bne.n	800a91a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a906:	4b20      	ldr	r3, [pc, #128]	; (800a988 <prvAddNewTaskToReadyList+0xbc>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a910:	429a      	cmp	r2, r3
 800a912:	d802      	bhi.n	800a91a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a914:	4a1c      	ldr	r2, [pc, #112]	; (800a988 <prvAddNewTaskToReadyList+0xbc>)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a91a:	4b1d      	ldr	r3, [pc, #116]	; (800a990 <prvAddNewTaskToReadyList+0xc4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3301      	adds	r3, #1
 800a920:	4a1b      	ldr	r2, [pc, #108]	; (800a990 <prvAddNewTaskToReadyList+0xc4>)
 800a922:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	2201      	movs	r2, #1
 800a92a:	409a      	lsls	r2, r3
 800a92c:	4b19      	ldr	r3, [pc, #100]	; (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4313      	orrs	r3, r2
 800a932:	4a18      	ldr	r2, [pc, #96]	; (800a994 <prvAddNewTaskToReadyList+0xc8>)
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4a15      	ldr	r2, [pc, #84]	; (800a998 <prvAddNewTaskToReadyList+0xcc>)
 800a944:	441a      	add	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3304      	adds	r3, #4
 800a94a:	4619      	mov	r1, r3
 800a94c:	4610      	mov	r0, r2
 800a94e:	f7ff fe57 	bl	800a600 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a952:	f000 fcef 	bl	800b334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a956:	4b0d      	ldr	r3, [pc, #52]	; (800a98c <prvAddNewTaskToReadyList+0xc0>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00e      	beq.n	800a97c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a95e:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <prvAddNewTaskToReadyList+0xbc>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	429a      	cmp	r2, r3
 800a96a:	d207      	bcs.n	800a97c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a96c:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <prvAddNewTaskToReadyList+0xd0>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a97c:	bf00      	nop
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	2000030c 	.word	0x2000030c
 800a988:	2000020c 	.word	0x2000020c
 800a98c:	20000318 	.word	0x20000318
 800a990:	20000328 	.word	0x20000328
 800a994:	20000314 	.word	0x20000314
 800a998:	20000210 	.word	0x20000210
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d017      	beq.n	800a9e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <vTaskDelay+0x60>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <vTaskDelay+0x30>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	60bb      	str	r3, [r7, #8]
}
 800a9cc:	bf00      	nop
 800a9ce:	e7fe      	b.n	800a9ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9d0:	f000 f86a 	bl	800aaa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fae6 	bl	800afa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9dc:	f000 f872 	bl	800aac4 <xTaskResumeAll>
 800a9e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d107      	bne.n	800a9f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <vTaskDelay+0x64>)
 800a9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9f8:	bf00      	nop
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	20000334 	.word	0x20000334
 800aa04:	e000ed04 	.word	0xe000ed04

0800aa08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800aa0e:	4b1e      	ldr	r3, [pc, #120]	; (800aa88 <vTaskStartScheduler+0x80>)
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	2300      	movs	r3, #0
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	2300      	movs	r3, #0
 800aa18:	2280      	movs	r2, #128	; 0x80
 800aa1a:	491c      	ldr	r1, [pc, #112]	; (800aa8c <vTaskStartScheduler+0x84>)
 800aa1c:	481c      	ldr	r0, [pc, #112]	; (800aa90 <vTaskStartScheduler+0x88>)
 800aa1e:	f7ff fe76 	bl	800a70e <xTaskCreate>
 800aa22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d11b      	bne.n	800aa62 <vTaskStartScheduler+0x5a>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	60bb      	str	r3, [r7, #8]
}
 800aa3c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa3e:	4b15      	ldr	r3, [pc, #84]	; (800aa94 <vTaskStartScheduler+0x8c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	334c      	adds	r3, #76	; 0x4c
 800aa44:	4a14      	ldr	r2, [pc, #80]	; (800aa98 <vTaskStartScheduler+0x90>)
 800aa46:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa48:	4b14      	ldr	r3, [pc, #80]	; (800aa9c <vTaskStartScheduler+0x94>)
 800aa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa50:	4b13      	ldr	r3, [pc, #76]	; (800aaa0 <vTaskStartScheduler+0x98>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa56:	4b13      	ldr	r3, [pc, #76]	; (800aaa4 <vTaskStartScheduler+0x9c>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa5c:	f000 fb98 	bl	800b190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa60:	e00e      	b.n	800aa80 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa68:	d10a      	bne.n	800aa80 <vTaskStartScheduler+0x78>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	607b      	str	r3, [r7, #4]
}
 800aa7c:	bf00      	nop
 800aa7e:	e7fe      	b.n	800aa7e <vTaskStartScheduler+0x76>
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	20000330 	.word	0x20000330
 800aa8c:	0800c43c 	.word	0x0800c43c
 800aa90:	0800ae31 	.word	0x0800ae31
 800aa94:	2000020c 	.word	0x2000020c
 800aa98:	20000188 	.word	0x20000188
 800aa9c:	2000032c 	.word	0x2000032c
 800aaa0:	20000318 	.word	0x20000318
 800aaa4:	20000310 	.word	0x20000310

0800aaa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aaac:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <vTaskSuspendAll+0x18>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	4a03      	ldr	r2, [pc, #12]	; (800aac0 <vTaskSuspendAll+0x18>)
 800aab4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aab6:	bf00      	nop
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	20000334 	.word	0x20000334

0800aac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aace:	2300      	movs	r3, #0
 800aad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aad2:	4b41      	ldr	r3, [pc, #260]	; (800abd8 <xTaskResumeAll+0x114>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10a      	bne.n	800aaf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	603b      	str	r3, [r7, #0]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaf0:	f000 fbf0 	bl	800b2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaf4:	4b38      	ldr	r3, [pc, #224]	; (800abd8 <xTaskResumeAll+0x114>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	4a37      	ldr	r2, [pc, #220]	; (800abd8 <xTaskResumeAll+0x114>)
 800aafc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aafe:	4b36      	ldr	r3, [pc, #216]	; (800abd8 <xTaskResumeAll+0x114>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d161      	bne.n	800abca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab06:	4b35      	ldr	r3, [pc, #212]	; (800abdc <xTaskResumeAll+0x118>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d05d      	beq.n	800abca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab0e:	e02e      	b.n	800ab6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab10:	4b33      	ldr	r3, [pc, #204]	; (800abe0 <xTaskResumeAll+0x11c>)
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3318      	adds	r3, #24
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff fdcc 	bl	800a6ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3304      	adds	r3, #4
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fdc7 	bl	800a6ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	2201      	movs	r2, #1
 800ab32:	409a      	lsls	r2, r3
 800ab34:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <xTaskResumeAll+0x120>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <xTaskResumeAll+0x120>)
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4a27      	ldr	r2, [pc, #156]	; (800abe8 <xTaskResumeAll+0x124>)
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7ff fd53 	bl	800a600 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5e:	4b23      	ldr	r3, [pc, #140]	; (800abec <xTaskResumeAll+0x128>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d302      	bcc.n	800ab6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ab68:	4b21      	ldr	r3, [pc, #132]	; (800abf0 <xTaskResumeAll+0x12c>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab6e:	4b1c      	ldr	r3, [pc, #112]	; (800abe0 <xTaskResumeAll+0x11c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1cc      	bne.n	800ab10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab7c:	f000 f9f4 	bl	800af68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab80:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <xTaskResumeAll+0x130>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d010      	beq.n	800abae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab8c:	f000 f836 	bl	800abfc <xTaskIncrementTick>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ab96:	4b16      	ldr	r3, [pc, #88]	; (800abf0 <xTaskResumeAll+0x12c>)
 800ab98:	2201      	movs	r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1f1      	bne.n	800ab8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800aba8:	4b12      	ldr	r3, [pc, #72]	; (800abf4 <xTaskResumeAll+0x130>)
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abae:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <xTaskResumeAll+0x12c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <xTaskResumeAll+0x134>)
 800abbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abca:	f000 fbb3 	bl	800b334 <vPortExitCritical>

	return xAlreadyYielded;
 800abce:	68bb      	ldr	r3, [r7, #8]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20000334 	.word	0x20000334
 800abdc:	2000030c 	.word	0x2000030c
 800abe0:	200002cc 	.word	0x200002cc
 800abe4:	20000314 	.word	0x20000314
 800abe8:	20000210 	.word	0x20000210
 800abec:	2000020c 	.word	0x2000020c
 800abf0:	20000320 	.word	0x20000320
 800abf4:	2000031c 	.word	0x2000031c
 800abf8:	e000ed04 	.word	0xe000ed04

0800abfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac06:	4b4e      	ldr	r3, [pc, #312]	; (800ad40 <xTaskIncrementTick+0x144>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f040 808e 	bne.w	800ad2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac10:	4b4c      	ldr	r3, [pc, #304]	; (800ad44 <xTaskIncrementTick+0x148>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac18:	4a4a      	ldr	r2, [pc, #296]	; (800ad44 <xTaskIncrementTick+0x148>)
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d120      	bne.n	800ac66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac24:	4b48      	ldr	r3, [pc, #288]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	603b      	str	r3, [r7, #0]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xTaskIncrementTick+0x46>
 800ac44:	4b40      	ldr	r3, [pc, #256]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	4b40      	ldr	r3, [pc, #256]	; (800ad4c <xTaskIncrementTick+0x150>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a3e      	ldr	r2, [pc, #248]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	4a3e      	ldr	r2, [pc, #248]	; (800ad4c <xTaskIncrementTick+0x150>)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	4b3d      	ldr	r3, [pc, #244]	; (800ad50 <xTaskIncrementTick+0x154>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	4a3c      	ldr	r2, [pc, #240]	; (800ad50 <xTaskIncrementTick+0x154>)
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	f000 f981 	bl	800af68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac66:	4b3b      	ldr	r3, [pc, #236]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d348      	bcc.n	800ad02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac70:	4b35      	ldr	r3, [pc, #212]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d104      	bne.n	800ac84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7a:	4b36      	ldr	r3, [pc, #216]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac80:	601a      	str	r2, [r3, #0]
					break;
 800ac82:	e03e      	b.n	800ad02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac84:	4b30      	ldr	r3, [pc, #192]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d203      	bcs.n	800aca4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac9c:	4a2d      	ldr	r2, [pc, #180]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aca2:	e02e      	b.n	800ad02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7ff fd06 	bl	800a6ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	3318      	adds	r3, #24
 800acba:	4618      	mov	r0, r3
 800acbc:	f7ff fcfd 	bl	800a6ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	2201      	movs	r2, #1
 800acc6:	409a      	lsls	r2, r3
 800acc8:	4b23      	ldr	r3, [pc, #140]	; (800ad58 <xTaskIncrementTick+0x15c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4313      	orrs	r3, r2
 800acce:	4a22      	ldr	r2, [pc, #136]	; (800ad58 <xTaskIncrementTick+0x15c>)
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a1f      	ldr	r2, [pc, #124]	; (800ad5c <xTaskIncrementTick+0x160>)
 800ace0:	441a      	add	r2, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7ff fc89 	bl	800a600 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf2:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <xTaskIncrementTick+0x164>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d3b9      	bcc.n	800ac70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad00:	e7b6      	b.n	800ac70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad02:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <xTaskIncrementTick+0x164>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	4914      	ldr	r1, [pc, #80]	; (800ad5c <xTaskIncrementTick+0x160>)
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d901      	bls.n	800ad1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad1e:	4b11      	ldr	r3, [pc, #68]	; (800ad64 <xTaskIncrementTick+0x168>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ad26:	2301      	movs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
 800ad2a:	e004      	b.n	800ad36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad2c:	4b0e      	ldr	r3, [pc, #56]	; (800ad68 <xTaskIncrementTick+0x16c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3301      	adds	r3, #1
 800ad32:	4a0d      	ldr	r2, [pc, #52]	; (800ad68 <xTaskIncrementTick+0x16c>)
 800ad34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad36:	697b      	ldr	r3, [r7, #20]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	20000334 	.word	0x20000334
 800ad44:	20000310 	.word	0x20000310
 800ad48:	200002c4 	.word	0x200002c4
 800ad4c:	200002c8 	.word	0x200002c8
 800ad50:	20000324 	.word	0x20000324
 800ad54:	2000032c 	.word	0x2000032c
 800ad58:	20000314 	.word	0x20000314
 800ad5c:	20000210 	.word	0x20000210
 800ad60:	2000020c 	.word	0x2000020c
 800ad64:	20000320 	.word	0x20000320
 800ad68:	2000031c 	.word	0x2000031c

0800ad6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad72:	4b29      	ldr	r3, [pc, #164]	; (800ae18 <vTaskSwitchContext+0xac>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad7a:	4b28      	ldr	r3, [pc, #160]	; (800ae1c <vTaskSwitchContext+0xb0>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad80:	e044      	b.n	800ae0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ad82:	4b26      	ldr	r3, [pc, #152]	; (800ae1c <vTaskSwitchContext+0xb0>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad88:	4b25      	ldr	r3, [pc, #148]	; (800ae20 <vTaskSwitchContext+0xb4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	fab3 f383 	clz	r3, r3
 800ad94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ad96:	7afb      	ldrb	r3, [r7, #11]
 800ad98:	f1c3 031f 	rsb	r3, r3, #31
 800ad9c:	617b      	str	r3, [r7, #20]
 800ad9e:	4921      	ldr	r1, [pc, #132]	; (800ae24 <vTaskSwitchContext+0xb8>)
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	607b      	str	r3, [r7, #4]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <vTaskSwitchContext+0x5a>
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	4613      	mov	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4a14      	ldr	r2, [pc, #80]	; (800ae24 <vTaskSwitchContext+0xb8>)
 800add4:	4413      	add	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	605a      	str	r2, [r3, #4]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	3308      	adds	r3, #8
 800adea:	429a      	cmp	r2, r3
 800adec:	d104      	bne.n	800adf8 <vTaskSwitchContext+0x8c>
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	605a      	str	r2, [r3, #4]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	4a0a      	ldr	r2, [pc, #40]	; (800ae28 <vTaskSwitchContext+0xbc>)
 800ae00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae02:	4b09      	ldr	r3, [pc, #36]	; (800ae28 <vTaskSwitchContext+0xbc>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	334c      	adds	r3, #76	; 0x4c
 800ae08:	4a08      	ldr	r2, [pc, #32]	; (800ae2c <vTaskSwitchContext+0xc0>)
 800ae0a:	6013      	str	r3, [r2, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	20000334 	.word	0x20000334
 800ae1c:	20000320 	.word	0x20000320
 800ae20:	20000314 	.word	0x20000314
 800ae24:	20000210 	.word	0x20000210
 800ae28:	2000020c 	.word	0x2000020c
 800ae2c:	20000188 	.word	0x20000188

0800ae30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae38:	f000 f852 	bl	800aee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae3c:	4b06      	ldr	r3, [pc, #24]	; (800ae58 <prvIdleTask+0x28>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d9f9      	bls.n	800ae38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae44:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <prvIdleTask+0x2c>)
 800ae46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae54:	e7f0      	b.n	800ae38 <prvIdleTask+0x8>
 800ae56:	bf00      	nop
 800ae58:	20000210 	.word	0x20000210
 800ae5c:	e000ed04 	.word	0xe000ed04

0800ae60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae66:	2300      	movs	r3, #0
 800ae68:	607b      	str	r3, [r7, #4]
 800ae6a:	e00c      	b.n	800ae86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4a12      	ldr	r2, [pc, #72]	; (800aec0 <prvInitialiseTaskLists+0x60>)
 800ae78:	4413      	add	r3, r2
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff fb93 	bl	800a5a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3301      	adds	r3, #1
 800ae84:	607b      	str	r3, [r7, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b06      	cmp	r3, #6
 800ae8a:	d9ef      	bls.n	800ae6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae8c:	480d      	ldr	r0, [pc, #52]	; (800aec4 <prvInitialiseTaskLists+0x64>)
 800ae8e:	f7ff fb8a 	bl	800a5a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae92:	480d      	ldr	r0, [pc, #52]	; (800aec8 <prvInitialiseTaskLists+0x68>)
 800ae94:	f7ff fb87 	bl	800a5a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae98:	480c      	ldr	r0, [pc, #48]	; (800aecc <prvInitialiseTaskLists+0x6c>)
 800ae9a:	f7ff fb84 	bl	800a5a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae9e:	480c      	ldr	r0, [pc, #48]	; (800aed0 <prvInitialiseTaskLists+0x70>)
 800aea0:	f7ff fb81 	bl	800a5a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aea4:	480b      	ldr	r0, [pc, #44]	; (800aed4 <prvInitialiseTaskLists+0x74>)
 800aea6:	f7ff fb7e 	bl	800a5a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aeaa:	4b0b      	ldr	r3, [pc, #44]	; (800aed8 <prvInitialiseTaskLists+0x78>)
 800aeac:	4a05      	ldr	r2, [pc, #20]	; (800aec4 <prvInitialiseTaskLists+0x64>)
 800aeae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <prvInitialiseTaskLists+0x7c>)
 800aeb2:	4a05      	ldr	r2, [pc, #20]	; (800aec8 <prvInitialiseTaskLists+0x68>)
 800aeb4:	601a      	str	r2, [r3, #0]
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20000210 	.word	0x20000210
 800aec4:	2000029c 	.word	0x2000029c
 800aec8:	200002b0 	.word	0x200002b0
 800aecc:	200002cc 	.word	0x200002cc
 800aed0:	200002e0 	.word	0x200002e0
 800aed4:	200002f8 	.word	0x200002f8
 800aed8:	200002c4 	.word	0x200002c4
 800aedc:	200002c8 	.word	0x200002c8

0800aee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aee6:	e019      	b.n	800af1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aee8:	f000 f9f4 	bl	800b2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeec:	4b10      	ldr	r3, [pc, #64]	; (800af30 <prvCheckTasksWaitingTermination+0x50>)
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fbde 	bl	800a6ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aefe:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <prvCheckTasksWaitingTermination+0x54>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3b01      	subs	r3, #1
 800af04:	4a0b      	ldr	r2, [pc, #44]	; (800af34 <prvCheckTasksWaitingTermination+0x54>)
 800af06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af08:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <prvCheckTasksWaitingTermination+0x58>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	4a0a      	ldr	r2, [pc, #40]	; (800af38 <prvCheckTasksWaitingTermination+0x58>)
 800af10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af12:	f000 fa0f 	bl	800b334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f810 	bl	800af3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af1c:	4b06      	ldr	r3, [pc, #24]	; (800af38 <prvCheckTasksWaitingTermination+0x58>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1e1      	bne.n	800aee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200002e0 	.word	0x200002e0
 800af34:	2000030c 	.word	0x2000030c
 800af38:	200002f4 	.word	0x200002f4

0800af3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	334c      	adds	r3, #76	; 0x4c
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 f9a3 	bl	800c294 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fb6c 	bl	800b630 <vPortFree>
			vPortFree( pxTCB );
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fb69 	bl	800b630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <prvResetNextTaskUnblockTime+0x38>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d104      	bne.n	800af82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <prvResetNextTaskUnblockTime+0x3c>)
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295
 800af7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af80:	e008      	b.n	800af94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af82:	4b07      	ldr	r3, [pc, #28]	; (800afa0 <prvResetNextTaskUnblockTime+0x38>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <prvResetNextTaskUnblockTime+0x3c>)
 800af92:	6013      	str	r3, [r2, #0]
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	200002c4 	.word	0x200002c4
 800afa4:	2000032c 	.word	0x2000032c

0800afa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800afb2:	4b29      	ldr	r3, [pc, #164]	; (800b058 <prvAddCurrentTaskToDelayedList+0xb0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afb8:	4b28      	ldr	r3, [pc, #160]	; (800b05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3304      	adds	r3, #4
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fb7b 	bl	800a6ba <uxListRemove>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10b      	bne.n	800afe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800afca:	4b24      	ldr	r3, [pc, #144]	; (800b05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	2201      	movs	r2, #1
 800afd2:	fa02 f303 	lsl.w	r3, r2, r3
 800afd6:	43da      	mvns	r2, r3
 800afd8:	4b21      	ldr	r3, [pc, #132]	; (800b060 <prvAddCurrentTaskToDelayedList+0xb8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4013      	ands	r3, r2
 800afde:	4a20      	ldr	r2, [pc, #128]	; (800b060 <prvAddCurrentTaskToDelayedList+0xb8>)
 800afe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe8:	d10a      	bne.n	800b000 <prvAddCurrentTaskToDelayedList+0x58>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d007      	beq.n	800b000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aff0:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	481a      	ldr	r0, [pc, #104]	; (800b064 <prvAddCurrentTaskToDelayedList+0xbc>)
 800affa:	f7ff fb01 	bl	800a600 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800affe:	e026      	b.n	800b04e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4413      	add	r3, r2
 800b006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b008:	4b14      	ldr	r3, [pc, #80]	; (800b05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	429a      	cmp	r2, r3
 800b016:	d209      	bcs.n	800b02c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b018:	4b13      	ldr	r3, [pc, #76]	; (800b068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3304      	adds	r3, #4
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f7ff fb0f 	bl	800a648 <vListInsert>
}
 800b02a:	e010      	b.n	800b04e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b02c:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3304      	adds	r3, #4
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7ff fb05 	bl	800a648 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b03e:	4b0c      	ldr	r3, [pc, #48]	; (800b070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	429a      	cmp	r2, r3
 800b046:	d202      	bcs.n	800b04e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b048:	4a09      	ldr	r2, [pc, #36]	; (800b070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6013      	str	r3, [r2, #0]
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20000310 	.word	0x20000310
 800b05c:	2000020c 	.word	0x2000020c
 800b060:	20000314 	.word	0x20000314
 800b064:	200002f8 	.word	0x200002f8
 800b068:	200002c8 	.word	0x200002c8
 800b06c:	200002c4 	.word	0x200002c4
 800b070:	2000032c 	.word	0x2000032c

0800b074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3b04      	subs	r3, #4
 800b084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3b04      	subs	r3, #4
 800b092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f023 0201 	bic.w	r2, r3, #1
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3b04      	subs	r3, #4
 800b0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0a4:	4a0c      	ldr	r2, [pc, #48]	; (800b0d8 <pxPortInitialiseStack+0x64>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3b14      	subs	r3, #20
 800b0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3b04      	subs	r3, #4
 800b0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f06f 0202 	mvn.w	r2, #2
 800b0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3b20      	subs	r3, #32
 800b0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	0800b0dd 	.word	0x0800b0dd

0800b0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0e6:	4b12      	ldr	r3, [pc, #72]	; (800b130 <prvTaskExitError+0x54>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ee:	d00a      	beq.n	800b106 <prvTaskExitError+0x2a>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60fb      	str	r3, [r7, #12]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <prvTaskExitError+0x28>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	60bb      	str	r3, [r7, #8]
}
 800b118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b11a:	bf00      	nop
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0fc      	beq.n	800b11c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	2000011c 	.word	0x2000011c
	...

0800b140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <pxCurrentTCBConst2>)
 800b142:	6819      	ldr	r1, [r3, #0]
 800b144:	6808      	ldr	r0, [r1, #0]
 800b146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	f380 8809 	msr	PSP, r0
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f04f 0000 	mov.w	r0, #0
 800b156:	f380 8811 	msr	BASEPRI, r0
 800b15a:	4770      	bx	lr
 800b15c:	f3af 8000 	nop.w

0800b160 <pxCurrentTCBConst2>:
 800b160:	2000020c 	.word	0x2000020c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop

0800b168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b168:	4808      	ldr	r0, [pc, #32]	; (800b18c <prvPortStartFirstTask+0x24>)
 800b16a:	6800      	ldr	r0, [r0, #0]
 800b16c:	6800      	ldr	r0, [r0, #0]
 800b16e:	f380 8808 	msr	MSP, r0
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f380 8814 	msr	CONTROL, r0
 800b17a:	b662      	cpsie	i
 800b17c:	b661      	cpsie	f
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	df00      	svc	0
 800b188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b18a:	bf00      	nop
 800b18c:	e000ed08 	.word	0xe000ed08

0800b190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b196:	4b46      	ldr	r3, [pc, #280]	; (800b2b0 <xPortStartScheduler+0x120>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a46      	ldr	r2, [pc, #280]	; (800b2b4 <xPortStartScheduler+0x124>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d10a      	bne.n	800b1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	613b      	str	r3, [r7, #16]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1b6:	4b3e      	ldr	r3, [pc, #248]	; (800b2b0 <xPortStartScheduler+0x120>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a3f      	ldr	r2, [pc, #252]	; (800b2b8 <xPortStartScheduler+0x128>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d10a      	bne.n	800b1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	60fb      	str	r3, [r7, #12]
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1d6:	4b39      	ldr	r3, [pc, #228]	; (800b2bc <xPortStartScheduler+0x12c>)
 800b1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	22ff      	movs	r2, #255	; 0xff
 800b1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	4b31      	ldr	r3, [pc, #196]	; (800b2c0 <xPortStartScheduler+0x130>)
 800b1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1fe:	4b31      	ldr	r3, [pc, #196]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b200:	2207      	movs	r2, #7
 800b202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b204:	e009      	b.n	800b21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b206:	4b2f      	ldr	r3, [pc, #188]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	4a2d      	ldr	r2, [pc, #180]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	b2db      	uxtb	r3, r3
 800b218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b21a:	78fb      	ldrb	r3, [r7, #3]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b222:	2b80      	cmp	r3, #128	; 0x80
 800b224:	d0ef      	beq.n	800b206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b226:	4b27      	ldr	r3, [pc, #156]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f1c3 0307 	rsb	r3, r3, #7
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d00a      	beq.n	800b248 <xPortStartScheduler+0xb8>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	60bb      	str	r3, [r7, #8]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b248:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	021b      	lsls	r3, r3, #8
 800b24e:	4a1d      	ldr	r2, [pc, #116]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b252:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b25a:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	b2da      	uxtb	r2, r3
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b266:	4b18      	ldr	r3, [pc, #96]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a17      	ldr	r2, [pc, #92]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b272:	4b15      	ldr	r3, [pc, #84]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a14      	ldr	r2, [pc, #80]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b27e:	f000 f8dd 	bl	800b43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b282:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <xPortStartScheduler+0x13c>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b288:	f000 f8fc 	bl	800b484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b28c:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <xPortStartScheduler+0x140>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a0f      	ldr	r2, [pc, #60]	; (800b2d0 <xPortStartScheduler+0x140>)
 800b292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b298:	f7ff ff66 	bl	800b168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b29c:	f7ff fd66 	bl	800ad6c <vTaskSwitchContext>
	prvTaskExitError();
 800b2a0:	f7ff ff1c 	bl	800b0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	e000ed00 	.word	0xe000ed00
 800b2b4:	410fc271 	.word	0x410fc271
 800b2b8:	410fc270 	.word	0x410fc270
 800b2bc:	e000e400 	.word	0xe000e400
 800b2c0:	20000338 	.word	0x20000338
 800b2c4:	2000033c 	.word	0x2000033c
 800b2c8:	e000ed20 	.word	0xe000ed20
 800b2cc:	2000011c 	.word	0x2000011c
 800b2d0:	e000ef34 	.word	0xe000ef34

0800b2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	607b      	str	r3, [r7, #4]
}
 800b2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <vPortEnterCritical+0x58>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <vPortEnterCritical+0x58>)
 800b2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2f8:	4b0c      	ldr	r3, [pc, #48]	; (800b32c <vPortEnterCritical+0x58>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d10f      	bne.n	800b320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <vPortEnterCritical+0x5c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <vPortEnterCritical+0x4c>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	603b      	str	r3, [r7, #0]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <vPortEnterCritical+0x4a>
	}
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	2000011c 	.word	0x2000011c
 800b330:	e000ed04 	.word	0xe000ed04

0800b334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b33a:	4b12      	ldr	r3, [pc, #72]	; (800b384 <vPortExitCritical+0x50>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <vPortExitCritical+0x24>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	607b      	str	r3, [r7, #4]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b358:	4b0a      	ldr	r3, [pc, #40]	; (800b384 <vPortExitCritical+0x50>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <vPortExitCritical+0x50>)
 800b360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b362:	4b08      	ldr	r3, [pc, #32]	; (800b384 <vPortExitCritical+0x50>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <vPortExitCritical+0x42>
 800b36a:	2300      	movs	r3, #0
 800b36c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	2000011c 	.word	0x2000011c
	...

0800b390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b390:	f3ef 8009 	mrs	r0, PSP
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <pxCurrentTCBConst>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	f01e 0f10 	tst.w	lr, #16
 800b3a0:	bf08      	it	eq
 800b3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3aa:	6010      	str	r0, [r2, #0]
 800b3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3b4:	f380 8811 	msr	BASEPRI, r0
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f7ff fcd4 	bl	800ad6c <vTaskSwitchContext>
 800b3c4:	f04f 0000 	mov.w	r0, #0
 800b3c8:	f380 8811 	msr	BASEPRI, r0
 800b3cc:	bc09      	pop	{r0, r3}
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	6808      	ldr	r0, [r1, #0]
 800b3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d6:	f01e 0f10 	tst.w	lr, #16
 800b3da:	bf08      	it	eq
 800b3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3e0:	f380 8809 	msr	PSP, r0
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w

0800b3f0 <pxCurrentTCBConst>:
 800b3f0:	2000020c 	.word	0x2000020c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop

0800b3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	607b      	str	r3, [r7, #4]
}
 800b410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b412:	f7ff fbf3 	bl	800abfc <xTaskIncrementTick>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b41c:	4b06      	ldr	r3, [pc, #24]	; (800b438 <SysTick_Handler+0x40>)
 800b41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	f383 8811 	msr	BASEPRI, r3
}
 800b42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <vPortSetupTimerInterrupt+0x34>)
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <vPortSetupTimerInterrupt+0x38>)
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <vPortSetupTimerInterrupt+0x3c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <vPortSetupTimerInterrupt+0x40>)
 800b452:	fba2 2303 	umull	r2, r3, r2, r3
 800b456:	099b      	lsrs	r3, r3, #6
 800b458:	4a09      	ldr	r2, [pc, #36]	; (800b480 <vPortSetupTimerInterrupt+0x44>)
 800b45a:	3b01      	subs	r3, #1
 800b45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b45e:	4b04      	ldr	r3, [pc, #16]	; (800b470 <vPortSetupTimerInterrupt+0x34>)
 800b460:	2207      	movs	r2, #7
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	e000e010 	.word	0xe000e010
 800b474:	e000e018 	.word	0xe000e018
 800b478:	20000000 	.word	0x20000000
 800b47c:	10624dd3 	.word	0x10624dd3
 800b480:	e000e014 	.word	0xe000e014

0800b484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b494 <vPortEnableVFP+0x10>
 800b488:	6801      	ldr	r1, [r0, #0]
 800b48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b48e:	6001      	str	r1, [r0, #0]
 800b490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b492:	bf00      	nop
 800b494:	e000ed88 	.word	0xe000ed88

0800b498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4a4:	f7ff fb00 	bl	800aaa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4a8:	4b5b      	ldr	r3, [pc, #364]	; (800b618 <pvPortMalloc+0x180>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4b0:	f000 f920 	bl	800b6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4b4:	4b59      	ldr	r3, [pc, #356]	; (800b61c <pvPortMalloc+0x184>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f040 8093 	bne.w	800b5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d01d      	beq.n	800b504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b4c8:	2208      	movs	r2, #8
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d014      	beq.n	800b504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f023 0307 	bic.w	r3, r3, #7
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <pvPortMalloc+0x6c>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	617b      	str	r3, [r7, #20]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d06e      	beq.n	800b5e8 <pvPortMalloc+0x150>
 800b50a:	4b45      	ldr	r3, [pc, #276]	; (800b620 <pvPortMalloc+0x188>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d869      	bhi.n	800b5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b514:	4b43      	ldr	r3, [pc, #268]	; (800b624 <pvPortMalloc+0x18c>)
 800b516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <pvPortMalloc+0x18c>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b51e:	e004      	b.n	800b52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	429a      	cmp	r2, r3
 800b532:	d903      	bls.n	800b53c <pvPortMalloc+0xa4>
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1f1      	bne.n	800b520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b53c:	4b36      	ldr	r3, [pc, #216]	; (800b618 <pvPortMalloc+0x180>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b542:	429a      	cmp	r2, r3
 800b544:	d050      	beq.n	800b5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2208      	movs	r2, #8
 800b54c:	4413      	add	r3, r2
 800b54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	2308      	movs	r3, #8
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	429a      	cmp	r2, r3
 800b566:	d91f      	bls.n	800b5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4413      	add	r3, r2
 800b56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <pvPortMalloc+0xf8>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	613b      	str	r3, [r7, #16]
}
 800b58c:	bf00      	nop
 800b58e:	e7fe      	b.n	800b58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	1ad2      	subs	r2, r2, r3
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5a2:	69b8      	ldr	r0, [r7, #24]
 800b5a4:	f000 f908 	bl	800b7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5a8:	4b1d      	ldr	r3, [pc, #116]	; (800b620 <pvPortMalloc+0x188>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	4a1b      	ldr	r2, [pc, #108]	; (800b620 <pvPortMalloc+0x188>)
 800b5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5b6:	4b1a      	ldr	r3, [pc, #104]	; (800b620 <pvPortMalloc+0x188>)
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <pvPortMalloc+0x190>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d203      	bcs.n	800b5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5c2:	4b17      	ldr	r3, [pc, #92]	; (800b620 <pvPortMalloc+0x188>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a18      	ldr	r2, [pc, #96]	; (800b628 <pvPortMalloc+0x190>)
 800b5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4b13      	ldr	r3, [pc, #76]	; (800b61c <pvPortMalloc+0x184>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	2200      	movs	r2, #0
 800b5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5de:	4b13      	ldr	r3, [pc, #76]	; (800b62c <pvPortMalloc+0x194>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a11      	ldr	r2, [pc, #68]	; (800b62c <pvPortMalloc+0x194>)
 800b5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5e8:	f7ff fa6c 	bl	800aac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	f003 0307 	and.w	r3, r3, #7
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <pvPortMalloc+0x174>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	60fb      	str	r3, [r7, #12]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <pvPortMalloc+0x172>
	return pvReturn;
 800b60c:	69fb      	ldr	r3, [r7, #28]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200016d0 	.word	0x200016d0
 800b61c:	200016e4 	.word	0x200016e4
 800b620:	200016d4 	.word	0x200016d4
 800b624:	200016c8 	.word	0x200016c8
 800b628:	200016d8 	.word	0x200016d8
 800b62c:	200016dc 	.word	0x200016dc

0800b630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d04d      	beq.n	800b6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b642:	2308      	movs	r3, #8
 800b644:	425b      	negs	r3, r3
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	4413      	add	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	4b24      	ldr	r3, [pc, #144]	; (800b6e8 <vPortFree+0xb8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4013      	ands	r3, r2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10a      	bne.n	800b674 <vPortFree+0x44>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	60fb      	str	r3, [r7, #12]
}
 800b670:	bf00      	nop
 800b672:	e7fe      	b.n	800b672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00a      	beq.n	800b692 <vPortFree+0x62>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	60bb      	str	r3, [r7, #8]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <vPortFree+0xb8>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01e      	beq.n	800b6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d11a      	bne.n	800b6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <vPortFree+0xb8>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	401a      	ands	r2, r3
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6b8:	f7ff f9f6 	bl	800aaa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <vPortFree+0xbc>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	4a09      	ldr	r2, [pc, #36]	; (800b6ec <vPortFree+0xbc>)
 800b6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6ca:	6938      	ldr	r0, [r7, #16]
 800b6cc:	f000 f874 	bl	800b7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <vPortFree+0xc0>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a06      	ldr	r2, [pc, #24]	; (800b6f0 <vPortFree+0xc0>)
 800b6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6da:	f7ff f9f3 	bl	800aac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6de:	bf00      	nop
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200016e4 	.word	0x200016e4
 800b6ec:	200016d4 	.word	0x200016d4
 800b6f0:	200016e0 	.word	0x200016e0

0800b6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b700:	4b27      	ldr	r3, [pc, #156]	; (800b7a0 <prvHeapInit+0xac>)
 800b702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00c      	beq.n	800b728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3307      	adds	r3, #7
 800b712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f023 0307 	bic.w	r3, r3, #7
 800b71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <prvHeapInit+0xac>)
 800b724:	4413      	add	r3, r2
 800b726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b72c:	4a1d      	ldr	r2, [pc, #116]	; (800b7a4 <prvHeapInit+0xb0>)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b732:	4b1c      	ldr	r3, [pc, #112]	; (800b7a4 <prvHeapInit+0xb0>)
 800b734:	2200      	movs	r2, #0
 800b736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b740:	2208      	movs	r2, #8
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	1a9b      	subs	r3, r3, r2
 800b746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0307 	bic.w	r3, r3, #7
 800b74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4a15      	ldr	r2, [pc, #84]	; (800b7a8 <prvHeapInit+0xb4>)
 800b754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <prvHeapInit+0xb4>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2200      	movs	r2, #0
 800b75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b75e:	4b12      	ldr	r3, [pc, #72]	; (800b7a8 <prvHeapInit+0xb4>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	1ad2      	subs	r2, r2, r3
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b774:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <prvHeapInit+0xb4>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <prvHeapInit+0xb8>)
 800b782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	4a09      	ldr	r2, [pc, #36]	; (800b7b0 <prvHeapInit+0xbc>)
 800b78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b78c:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <prvHeapInit+0xc0>)
 800b78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b792:	601a      	str	r2, [r3, #0]
}
 800b794:	bf00      	nop
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	20000340 	.word	0x20000340
 800b7a4:	200016c8 	.word	0x200016c8
 800b7a8:	200016d0 	.word	0x200016d0
 800b7ac:	200016d8 	.word	0x200016d8
 800b7b0:	200016d4 	.word	0x200016d4
 800b7b4:	200016e4 	.word	0x200016e4

0800b7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7c0:	4b28      	ldr	r3, [pc, #160]	; (800b864 <prvInsertBlockIntoFreeList+0xac>)
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e002      	b.n	800b7cc <prvInsertBlockIntoFreeList+0x14>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d8f7      	bhi.n	800b7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d108      	bne.n	800b7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	441a      	add	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	441a      	add	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d118      	bne.n	800b840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4b15      	ldr	r3, [pc, #84]	; (800b868 <prvInsertBlockIntoFreeList+0xb0>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d00d      	beq.n	800b836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	441a      	add	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e008      	b.n	800b848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b836:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <prvInsertBlockIntoFreeList+0xb0>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e003      	b.n	800b848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d002      	beq.n	800b856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	200016c8 	.word	0x200016c8
 800b868:	200016d0 	.word	0x200016d0

0800b86c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b870:	2200      	movs	r2, #0
 800b872:	4912      	ldr	r1, [pc, #72]	; (800b8bc <MX_USB_Device_Init+0x50>)
 800b874:	4812      	ldr	r0, [pc, #72]	; (800b8c0 <MX_USB_Device_Init+0x54>)
 800b876:	f7fd fd1d 	bl	80092b4 <USBD_Init>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b880:	f7f5 fb2e 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b884:	490f      	ldr	r1, [pc, #60]	; (800b8c4 <MX_USB_Device_Init+0x58>)
 800b886:	480e      	ldr	r0, [pc, #56]	; (800b8c0 <MX_USB_Device_Init+0x54>)
 800b888:	f7fd fd44 	bl	8009314 <USBD_RegisterClass>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b892:	f7f5 fb25 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b896:	490c      	ldr	r1, [pc, #48]	; (800b8c8 <MX_USB_Device_Init+0x5c>)
 800b898:	4809      	ldr	r0, [pc, #36]	; (800b8c0 <MX_USB_Device_Init+0x54>)
 800b89a:	f7fd fc95 	bl	80091c8 <USBD_CDC_RegisterInterface>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b8a4:	f7f5 fb1c 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b8a8:	4805      	ldr	r0, [pc, #20]	; (800b8c0 <MX_USB_Device_Init+0x54>)
 800b8aa:	f7fd fd5a 	bl	8009362 <USBD_Start>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b8b4:	f7f5 fb14 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b8b8:	bf00      	nop
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20000134 	.word	0x20000134
 800b8c0:	20001b08 	.word	0x20001b08
 800b8c4:	20000018 	.word	0x20000018
 800b8c8:	20000120 	.word	0x20000120

0800b8cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4905      	ldr	r1, [pc, #20]	; (800b8e8 <CDC_Init_FS+0x1c>)
 800b8d4:	4805      	ldr	r0, [pc, #20]	; (800b8ec <CDC_Init_FS+0x20>)
 800b8d6:	f7fd fc8c 	bl	80091f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b8da:	4905      	ldr	r1, [pc, #20]	; (800b8f0 <CDC_Init_FS+0x24>)
 800b8dc:	4803      	ldr	r0, [pc, #12]	; (800b8ec <CDC_Init_FS+0x20>)
 800b8de:	f7fd fca6 	bl	800922e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b8e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	200021c0 	.word	0x200021c0
 800b8ec:	20001b08 	.word	0x20001b08
 800b8f0:	20001dd8 	.word	0x20001dd8

0800b8f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b8f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	71fb      	strb	r3, [r7, #7]
 800b910:	4613      	mov	r3, r2
 800b912:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	2b23      	cmp	r3, #35	; 0x23
 800b918:	d84a      	bhi.n	800b9b0 <CDC_Control_FS+0xac>
 800b91a:	a201      	add	r2, pc, #4	; (adr r2, 800b920 <CDC_Control_FS+0x1c>)
 800b91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b920:	0800b9b1 	.word	0x0800b9b1
 800b924:	0800b9b1 	.word	0x0800b9b1
 800b928:	0800b9b1 	.word	0x0800b9b1
 800b92c:	0800b9b1 	.word	0x0800b9b1
 800b930:	0800b9b1 	.word	0x0800b9b1
 800b934:	0800b9b1 	.word	0x0800b9b1
 800b938:	0800b9b1 	.word	0x0800b9b1
 800b93c:	0800b9b1 	.word	0x0800b9b1
 800b940:	0800b9b1 	.word	0x0800b9b1
 800b944:	0800b9b1 	.word	0x0800b9b1
 800b948:	0800b9b1 	.word	0x0800b9b1
 800b94c:	0800b9b1 	.word	0x0800b9b1
 800b950:	0800b9b1 	.word	0x0800b9b1
 800b954:	0800b9b1 	.word	0x0800b9b1
 800b958:	0800b9b1 	.word	0x0800b9b1
 800b95c:	0800b9b1 	.word	0x0800b9b1
 800b960:	0800b9b1 	.word	0x0800b9b1
 800b964:	0800b9b1 	.word	0x0800b9b1
 800b968:	0800b9b1 	.word	0x0800b9b1
 800b96c:	0800b9b1 	.word	0x0800b9b1
 800b970:	0800b9b1 	.word	0x0800b9b1
 800b974:	0800b9b1 	.word	0x0800b9b1
 800b978:	0800b9b1 	.word	0x0800b9b1
 800b97c:	0800b9b1 	.word	0x0800b9b1
 800b980:	0800b9b1 	.word	0x0800b9b1
 800b984:	0800b9b1 	.word	0x0800b9b1
 800b988:	0800b9b1 	.word	0x0800b9b1
 800b98c:	0800b9b1 	.word	0x0800b9b1
 800b990:	0800b9b1 	.word	0x0800b9b1
 800b994:	0800b9b1 	.word	0x0800b9b1
 800b998:	0800b9b1 	.word	0x0800b9b1
 800b99c:	0800b9b1 	.word	0x0800b9b1
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800b9b1 	.word	0x0800b9b1
 800b9a8:	0800b9b1 	.word	0x0800b9b1
 800b9ac:	0800b9b1 	.word	0x0800b9b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b9b0:	bf00      	nop
  }

  return (USBD_OK);
 800b9b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	4805      	ldr	r0, [pc, #20]	; (800b9e4 <CDC_Receive_FS+0x24>)
 800b9ce:	f7fd fc2e 	bl	800922e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b9d2:	4804      	ldr	r0, [pc, #16]	; (800b9e4 <CDC_Receive_FS+0x24>)
 800b9d4:	f7fd fc44 	bl	8009260 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b9d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20001b08 	.word	0x20001b08

0800b9e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
	...

0800ba0c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2212      	movs	r2, #18
 800ba1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ba1e:	4b03      	ldr	r3, [pc, #12]	; (800ba2c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	20000154 	.word	0x20000154

0800ba30 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2204      	movs	r2, #4
 800ba40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba42:	4b03      	ldr	r3, [pc, #12]	; (800ba50 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20000168 	.word	0x20000168

0800ba54 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	6039      	str	r1, [r7, #0]
 800ba5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4907      	ldr	r1, [pc, #28]	; (800ba88 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ba6a:	4808      	ldr	r0, [pc, #32]	; (800ba8c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ba6c:	f7fe fc61 	bl	800a332 <USBD_GetString>
 800ba70:	e004      	b.n	800ba7c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	4904      	ldr	r1, [pc, #16]	; (800ba88 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ba76:	4805      	ldr	r0, [pc, #20]	; (800ba8c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ba78:	f7fe fc5b 	bl	800a332 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba7c:	4b02      	ldr	r3, [pc, #8]	; (800ba88 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200025a8 	.word	0x200025a8
 800ba8c:	0800c444 	.word	0x0800c444

0800ba90 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	4904      	ldr	r1, [pc, #16]	; (800bab0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800baa0:	4804      	ldr	r0, [pc, #16]	; (800bab4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800baa2:	f7fe fc46 	bl	800a332 <USBD_GetString>
  return USBD_StrDesc;
 800baa6:	4b02      	ldr	r3, [pc, #8]	; (800bab0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	200025a8 	.word	0x200025a8
 800bab4:	0800c45c 	.word	0x0800c45c

0800bab8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	221a      	movs	r2, #26
 800bac8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800baca:	f000 f843 	bl	800bb54 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bace:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	2000016c 	.word	0x2000016c

0800badc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	6039      	str	r1, [r7, #0]
 800bae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bae8:	79fb      	ldrb	r3, [r7, #7]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d105      	bne.n	800bafa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	4907      	ldr	r1, [pc, #28]	; (800bb10 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800baf2:	4808      	ldr	r0, [pc, #32]	; (800bb14 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800baf4:	f7fe fc1d 	bl	800a332 <USBD_GetString>
 800baf8:	e004      	b.n	800bb04 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	4904      	ldr	r1, [pc, #16]	; (800bb10 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bafe:	4805      	ldr	r0, [pc, #20]	; (800bb14 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bb00:	f7fe fc17 	bl	800a332 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb04:	4b02      	ldr	r3, [pc, #8]	; (800bb10 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	200025a8 	.word	0x200025a8
 800bb14:	0800c470 	.word	0x0800c470

0800bb18 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	6039      	str	r1, [r7, #0]
 800bb22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d105      	bne.n	800bb36 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	4907      	ldr	r1, [pc, #28]	; (800bb4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bb2e:	4808      	ldr	r0, [pc, #32]	; (800bb50 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bb30:	f7fe fbff 	bl	800a332 <USBD_GetString>
 800bb34:	e004      	b.n	800bb40 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	4904      	ldr	r1, [pc, #16]	; (800bb4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bb3a:	4805      	ldr	r0, [pc, #20]	; (800bb50 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bb3c:	f7fe fbf9 	bl	800a332 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb40:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	200025a8 	.word	0x200025a8
 800bb50:	0800c47c 	.word	0x0800c47c

0800bb54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <Get_SerialNum+0x44>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb60:	4b0e      	ldr	r3, [pc, #56]	; (800bb9c <Get_SerialNum+0x48>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb66:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <Get_SerialNum+0x4c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4413      	add	r3, r2
 800bb72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d009      	beq.n	800bb8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	4909      	ldr	r1, [pc, #36]	; (800bba4 <Get_SerialNum+0x50>)
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 f814 	bl	800bbac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb84:	2204      	movs	r2, #4
 800bb86:	4908      	ldr	r1, [pc, #32]	; (800bba8 <Get_SerialNum+0x54>)
 800bb88:	68b8      	ldr	r0, [r7, #8]
 800bb8a:	f000 f80f 	bl	800bbac <IntToUnicode>
  }
}
 800bb8e:	bf00      	nop
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	1fff7590 	.word	0x1fff7590
 800bb9c:	1fff7594 	.word	0x1fff7594
 800bba0:	1fff7598 	.word	0x1fff7598
 800bba4:	2000016e 	.word	0x2000016e
 800bba8:	2000017e 	.word	0x2000017e

0800bbac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	75fb      	strb	r3, [r7, #23]
 800bbc2:	e027      	b.n	800bc14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	0f1b      	lsrs	r3, r3, #28
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	d80b      	bhi.n	800bbe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	0f1b      	lsrs	r3, r3, #28
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	440b      	add	r3, r1
 800bbdc:	3230      	adds	r2, #48	; 0x30
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	e00a      	b.n	800bbfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	0f1b      	lsrs	r3, r3, #28
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	4619      	mov	r1, r3
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	440b      	add	r3, r1
 800bbf4:	3237      	adds	r2, #55	; 0x37
 800bbf6:	b2d2      	uxtb	r2, r2
 800bbf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	011b      	lsls	r3, r3, #4
 800bbfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	3301      	adds	r3, #1
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	4413      	add	r3, r2
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	3301      	adds	r3, #1
 800bc12:	75fb      	strb	r3, [r7, #23]
 800bc14:	7dfa      	ldrb	r2, [r7, #23]
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d3d3      	bcc.n	800bbc4 <IntToUnicode+0x18>
  }
}
 800bc1c:	bf00      	nop
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a11      	ldr	r2, [pc, #68]	; (800bc80 <HAL_PCD_MspInit+0x54>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d11b      	bne.n	800bc76 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bc3e:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <HAL_PCD_MspInit+0x58>)
 800bc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc42:	4a10      	ldr	r2, [pc, #64]	; (800bc84 <HAL_PCD_MspInit+0x58>)
 800bc44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc48:	6593      	str	r3, [r2, #88]	; 0x58
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <HAL_PCD_MspInit+0x58>)
 800bc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 800bc56:	2200      	movs	r2, #0
 800bc58:	2105      	movs	r1, #5
 800bc5a:	2013      	movs	r0, #19
 800bc5c:	f7f5 fea2 	bl	80019a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800bc60:	2013      	movs	r0, #19
 800bc62:	f7f5 feb9 	bl	80019d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800bc66:	2200      	movs	r2, #0
 800bc68:	2105      	movs	r1, #5
 800bc6a:	2014      	movs	r0, #20
 800bc6c:	f7f5 fe9a 	bl	80019a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bc70:	2014      	movs	r0, #20
 800bc72:	f7f5 feb1 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bc76:	bf00      	nop
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	40005c00 	.word	0x40005c00
 800bc84:	40021000 	.word	0x40021000

0800bc88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	f7fd fbaa 	bl	80093f8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bcbe:	78fa      	ldrb	r2, [r7, #3]
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	440b      	add	r3, r1
 800bccc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f7fd fbe4 	bl	80094a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bcda:	bf00      	nop
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	440b      	add	r3, r1
 800bd02:	333c      	adds	r3, #60	; 0x3c
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	78fb      	ldrb	r3, [r7, #3]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	f7fd fc2d 	bl	8009568 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bd0e:	bf00      	nop
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b082      	sub	sp, #8
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fd fd41 	bl	80097ac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bd2a:	bf00      	nop
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d001      	beq.n	800bd4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bd46:	f7f5 f8cb 	bl	8000ee0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd50:	7bfa      	ldrb	r2, [r7, #15]
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fd fceb 	bl	8009730 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fd fc97 	bl	8009694 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fd fce6 	bl	8009750 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d005      	beq.n	800bd98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <HAL_PCD_SuspendCallback+0x30>)
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	4a03      	ldr	r2, [pc, #12]	; (800bda0 <HAL_PCD_SuspendCallback+0x30>)
 800bd92:	f043 0306 	orr.w	r3, r3, #6
 800bd96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	e000ed00 	.word	0xe000ed00

0800bda4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdb4:	4b08      	ldr	r3, [pc, #32]	; (800bdd8 <HAL_PCD_ResumeCallback+0x34>)
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	4a07      	ldr	r2, [pc, #28]	; (800bdd8 <HAL_PCD_ResumeCallback+0x34>)
 800bdba:	f023 0306 	bic.w	r3, r3, #6
 800bdbe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bdc0:	f000 f9fa 	bl	800c1b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fcd6 	bl	800977c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed00 	.word	0xe000ed00

0800bddc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bde4:	4a2b      	ldr	r2, [pc, #172]	; (800be94 <USBD_LL_Init+0xb8>)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a29      	ldr	r2, [pc, #164]	; (800be94 <USBD_LL_Init+0xb8>)
 800bdf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bdf4:	4b27      	ldr	r3, [pc, #156]	; (800be94 <USBD_LL_Init+0xb8>)
 800bdf6:	4a28      	ldr	r2, [pc, #160]	; (800be98 <USBD_LL_Init+0xbc>)
 800bdf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bdfa:	4b26      	ldr	r3, [pc, #152]	; (800be94 <USBD_LL_Init+0xb8>)
 800bdfc:	2208      	movs	r2, #8
 800bdfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800be00:	4b24      	ldr	r3, [pc, #144]	; (800be94 <USBD_LL_Init+0xb8>)
 800be02:	2202      	movs	r2, #2
 800be04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be06:	4b23      	ldr	r3, [pc, #140]	; (800be94 <USBD_LL_Init+0xb8>)
 800be08:	2202      	movs	r2, #2
 800be0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800be0c:	4b21      	ldr	r3, [pc, #132]	; (800be94 <USBD_LL_Init+0xb8>)
 800be0e:	2200      	movs	r2, #0
 800be10:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800be12:	4b20      	ldr	r3, [pc, #128]	; (800be94 <USBD_LL_Init+0xb8>)
 800be14:	2200      	movs	r2, #0
 800be16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800be18:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <USBD_LL_Init+0xb8>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800be1e:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <USBD_LL_Init+0xb8>)
 800be20:	2200      	movs	r2, #0
 800be22:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800be24:	481b      	ldr	r0, [pc, #108]	; (800be94 <USBD_LL_Init+0xb8>)
 800be26:	f7f6 fb1f 	bl	8002468 <HAL_PCD_Init>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800be30:	f7f5 f856 	bl	8000ee0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be3a:	2318      	movs	r3, #24
 800be3c:	2200      	movs	r2, #0
 800be3e:	2100      	movs	r1, #0
 800be40:	f7f7 ff39 	bl	8003cb6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be4a:	2358      	movs	r3, #88	; 0x58
 800be4c:	2200      	movs	r2, #0
 800be4e:	2180      	movs	r1, #128	; 0x80
 800be50:	f7f7 ff31 	bl	8003cb6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be5a:	23c0      	movs	r3, #192	; 0xc0
 800be5c:	2200      	movs	r2, #0
 800be5e:	2181      	movs	r1, #129	; 0x81
 800be60:	f7f7 ff29 	bl	8003cb6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800be6e:	2200      	movs	r2, #0
 800be70:	2101      	movs	r1, #1
 800be72:	f7f7 ff20 	bl	8003cb6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be80:	2200      	movs	r2, #0
 800be82:	2182      	movs	r1, #130	; 0x82
 800be84:	f7f7 ff17 	bl	8003cb6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	200027a8 	.word	0x200027a8
 800be98:	40005c00 	.word	0x40005c00

0800be9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f6 fbbd 	bl	8002632 <HAL_PCD_Start>
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 f980 	bl	800c1c4 <USBD_Get_USB_Status>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	4608      	mov	r0, r1
 800bedc:	4611      	mov	r1, r2
 800bede:	461a      	mov	r2, r3
 800bee0:	4603      	mov	r3, r0
 800bee2:	70fb      	strb	r3, [r7, #3]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70bb      	strb	r3, [r7, #2]
 800bee8:	4613      	mov	r3, r2
 800beea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800befa:	78bb      	ldrb	r3, [r7, #2]
 800befc:	883a      	ldrh	r2, [r7, #0]
 800befe:	78f9      	ldrb	r1, [r7, #3]
 800bf00:	f7f6 fd2c 	bl	800295c <HAL_PCD_EP_Open>
 800bf04:	4603      	mov	r3, r0
 800bf06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f95a 	bl	800c1c4 <USBD_Get_USB_Status>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf38:	78fa      	ldrb	r2, [r7, #3]
 800bf3a:	4611      	mov	r1, r2
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7f6 fd73 	bl	8002a28 <HAL_PCD_EP_Close>
 800bf42:	4603      	mov	r3, r0
 800bf44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 f93b 	bl	800c1c4 <USBD_Get_USB_Status>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf76:	78fa      	ldrb	r2, [r7, #3]
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f6 fe34 	bl	8002be8 <HAL_PCD_EP_SetStall>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 f91c 	bl	800c1c4 <USBD_Get_USB_Status>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfb4:	78fa      	ldrb	r2, [r7, #3]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7f6 fe67 	bl	8002c8c <HAL_PCD_EP_ClrStall>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 f8fd 	bl	800c1c4 <USBD_Get_USB_Status>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	da0c      	bge.n	800c00e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	4613      	mov	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	440b      	add	r3, r1
 800c008:	3302      	adds	r3, #2
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	e00b      	b.n	800c026 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c00e:	78fb      	ldrb	r3, [r7, #3]
 800c010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c014:	68f9      	ldr	r1, [r7, #12]
 800c016:	4613      	mov	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	440b      	add	r3, r1
 800c020:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c024:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c04c:	78fa      	ldrb	r2, [r7, #3]
 800c04e:	4611      	mov	r1, r2
 800c050:	4618      	mov	r0, r3
 800c052:	f7f6 fc5e 	bl	8002912 <HAL_PCD_SetAddress>
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f8b1 	bl	800c1c4 <USBD_Get_USB_Status>
 800c062:	4603      	mov	r3, r0
 800c064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c066:	7bbb      	ldrb	r3, [r7, #14]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	607a      	str	r2, [r7, #4]
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	460b      	mov	r3, r1
 800c07e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c08e:	7af9      	ldrb	r1, [r7, #11]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	f7f6 fd65 	bl	8002b62 <HAL_PCD_EP_Transmit>
 800c098:	4603      	mov	r3, r0
 800c09a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 f890 	bl	800c1c4 <USBD_Get_USB_Status>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b086      	sub	sp, #24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	607a      	str	r2, [r7, #4]
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	460b      	mov	r3, r1
 800c0c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0d0:	7af9      	ldrb	r1, [r7, #11]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	f7f6 fcef 	bl	8002ab8 <HAL_PCD_EP_Receive>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0de:	7dfb      	ldrb	r3, [r7, #23]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f86f 	bl	800c1c4 <USBD_Get_USB_Status>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c106:	78fa      	ldrb	r2, [r7, #3]
 800c108:	4611      	mov	r1, r2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7f6 fd11 	bl	8002b32 <HAL_PCD_EP_GetRxCount>
 800c110:	4603      	mov	r3, r0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c128:	78fb      	ldrb	r3, [r7, #3]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <HAL_PCDEx_LPM_Callback+0x18>
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d013      	beq.n	800c15a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c132:	e023      	b.n	800c17c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d007      	beq.n	800c14c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c13c:	f000 f83c 	bl	800c1b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c140:	4b10      	ldr	r3, [pc, #64]	; (800c184 <HAL_PCDEx_LPM_Callback+0x68>)
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	4a0f      	ldr	r2, [pc, #60]	; (800c184 <HAL_PCDEx_LPM_Callback+0x68>)
 800c146:	f023 0306 	bic.w	r3, r3, #6
 800c14a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c152:	4618      	mov	r0, r3
 800c154:	f7fd fb12 	bl	800977c <USBD_LL_Resume>
    break;
 800c158:	e010      	b.n	800c17c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c160:	4618      	mov	r0, r3
 800c162:	f7fd faf5 	bl	8009750 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	699b      	ldr	r3, [r3, #24]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c16e:	4b05      	ldr	r3, [pc, #20]	; (800c184 <HAL_PCDEx_LPM_Callback+0x68>)
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	4a04      	ldr	r2, [pc, #16]	; (800c184 <HAL_PCDEx_LPM_Callback+0x68>)
 800c174:	f043 0306 	orr.w	r3, r3, #6
 800c178:	6113      	str	r3, [r2, #16]
    break;
 800c17a:	bf00      	nop
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	e000ed00 	.word	0xe000ed00

0800c188 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c190:	4b03      	ldr	r3, [pc, #12]	; (800c1a0 <USBD_static_malloc+0x18>)
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	200016e8 	.word	0x200016e8

0800c1a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]

}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c1bc:	f7f4 fbc8 	bl	8000950 <SystemClock_Config>
}
 800c1c0:	bf00      	nop
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d817      	bhi.n	800c208 <USBD_Get_USB_Status+0x44>
 800c1d8:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <USBD_Get_USB_Status+0x1c>)
 800c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c1f1 	.word	0x0800c1f1
 800c1e4:	0800c1f7 	.word	0x0800c1f7
 800c1e8:	0800c1fd 	.word	0x0800c1fd
 800c1ec:	0800c203 	.word	0x0800c203
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f4:	e00b      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1fa:	e008      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c200:	e005      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c202:	2303      	movs	r3, #3
 800c204:	73fb      	strb	r3, [r7, #15]
    break;
 800c206:	e002      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c208:	2303      	movs	r3, #3
 800c20a:	73fb      	strb	r3, [r7, #15]
    break;
 800c20c:	bf00      	nop
  }
  return usb_status;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <__libc_init_array>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4d0d      	ldr	r5, [pc, #52]	; (800c254 <__libc_init_array+0x38>)
 800c220:	4c0d      	ldr	r4, [pc, #52]	; (800c258 <__libc_init_array+0x3c>)
 800c222:	1b64      	subs	r4, r4, r5
 800c224:	10a4      	asrs	r4, r4, #2
 800c226:	2600      	movs	r6, #0
 800c228:	42a6      	cmp	r6, r4
 800c22a:	d109      	bne.n	800c240 <__libc_init_array+0x24>
 800c22c:	4d0b      	ldr	r5, [pc, #44]	; (800c25c <__libc_init_array+0x40>)
 800c22e:	4c0c      	ldr	r4, [pc, #48]	; (800c260 <__libc_init_array+0x44>)
 800c230:	f000 f8e8 	bl	800c404 <_init>
 800c234:	1b64      	subs	r4, r4, r5
 800c236:	10a4      	asrs	r4, r4, #2
 800c238:	2600      	movs	r6, #0
 800c23a:	42a6      	cmp	r6, r4
 800c23c:	d105      	bne.n	800c24a <__libc_init_array+0x2e>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	f855 3b04 	ldr.w	r3, [r5], #4
 800c244:	4798      	blx	r3
 800c246:	3601      	adds	r6, #1
 800c248:	e7ee      	b.n	800c228 <__libc_init_array+0xc>
 800c24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24e:	4798      	blx	r3
 800c250:	3601      	adds	r6, #1
 800c252:	e7f2      	b.n	800c23a <__libc_init_array+0x1e>
 800c254:	0800c53c 	.word	0x0800c53c
 800c258:	0800c53c 	.word	0x0800c53c
 800c25c:	0800c53c 	.word	0x0800c53c
 800c260:	0800c540 	.word	0x0800c540

0800c264 <__retarget_lock_acquire_recursive>:
 800c264:	4770      	bx	lr

0800c266 <__retarget_lock_release_recursive>:
 800c266:	4770      	bx	lr

0800c268 <memset>:
 800c268:	4402      	add	r2, r0
 800c26a:	4603      	mov	r3, r0
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d100      	bne.n	800c272 <memset+0xa>
 800c270:	4770      	bx	lr
 800c272:	f803 1b01 	strb.w	r1, [r3], #1
 800c276:	e7f9      	b.n	800c26c <memset+0x4>

0800c278 <cleanup_glue>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	460c      	mov	r4, r1
 800c27c:	6809      	ldr	r1, [r1, #0]
 800c27e:	4605      	mov	r5, r0
 800c280:	b109      	cbz	r1, 800c286 <cleanup_glue+0xe>
 800c282:	f7ff fff9 	bl	800c278 <cleanup_glue>
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c28e:	f000 b869 	b.w	800c364 <_free_r>
	...

0800c294 <_reclaim_reent>:
 800c294:	4b2c      	ldr	r3, [pc, #176]	; (800c348 <_reclaim_reent+0xb4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4283      	cmp	r3, r0
 800c29a:	b570      	push	{r4, r5, r6, lr}
 800c29c:	4604      	mov	r4, r0
 800c29e:	d051      	beq.n	800c344 <_reclaim_reent+0xb0>
 800c2a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c2a2:	b143      	cbz	r3, 800c2b6 <_reclaim_reent+0x22>
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d14a      	bne.n	800c340 <_reclaim_reent+0xac>
 800c2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ac:	6819      	ldr	r1, [r3, #0]
 800c2ae:	b111      	cbz	r1, 800c2b6 <_reclaim_reent+0x22>
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 f857 	bl	800c364 <_free_r>
 800c2b6:	6961      	ldr	r1, [r4, #20]
 800c2b8:	b111      	cbz	r1, 800c2c0 <_reclaim_reent+0x2c>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f000 f852 	bl	800c364 <_free_r>
 800c2c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c2c2:	b111      	cbz	r1, 800c2ca <_reclaim_reent+0x36>
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 f84d 	bl	800c364 <_free_r>
 800c2ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c2cc:	b111      	cbz	r1, 800c2d4 <_reclaim_reent+0x40>
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 f848 	bl	800c364 <_free_r>
 800c2d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c2d6:	b111      	cbz	r1, 800c2de <_reclaim_reent+0x4a>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 f843 	bl	800c364 <_free_r>
 800c2de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c2e0:	b111      	cbz	r1, 800c2e8 <_reclaim_reent+0x54>
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 f83e 	bl	800c364 <_free_r>
 800c2e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c2ea:	b111      	cbz	r1, 800c2f2 <_reclaim_reent+0x5e>
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f000 f839 	bl	800c364 <_free_r>
 800c2f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c2f4:	b111      	cbz	r1, 800c2fc <_reclaim_reent+0x68>
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 f834 	bl	800c364 <_free_r>
 800c2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2fe:	b111      	cbz	r1, 800c306 <_reclaim_reent+0x72>
 800c300:	4620      	mov	r0, r4
 800c302:	f000 f82f 	bl	800c364 <_free_r>
 800c306:	69a3      	ldr	r3, [r4, #24]
 800c308:	b1e3      	cbz	r3, 800c344 <_reclaim_reent+0xb0>
 800c30a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c30c:	4620      	mov	r0, r4
 800c30e:	4798      	blx	r3
 800c310:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c312:	b1b9      	cbz	r1, 800c344 <_reclaim_reent+0xb0>
 800c314:	4620      	mov	r0, r4
 800c316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c31a:	f7ff bfad 	b.w	800c278 <cleanup_glue>
 800c31e:	5949      	ldr	r1, [r1, r5]
 800c320:	b941      	cbnz	r1, 800c334 <_reclaim_reent+0xa0>
 800c322:	3504      	adds	r5, #4
 800c324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c326:	2d80      	cmp	r5, #128	; 0x80
 800c328:	68d9      	ldr	r1, [r3, #12]
 800c32a:	d1f8      	bne.n	800c31e <_reclaim_reent+0x8a>
 800c32c:	4620      	mov	r0, r4
 800c32e:	f000 f819 	bl	800c364 <_free_r>
 800c332:	e7ba      	b.n	800c2aa <_reclaim_reent+0x16>
 800c334:	680e      	ldr	r6, [r1, #0]
 800c336:	4620      	mov	r0, r4
 800c338:	f000 f814 	bl	800c364 <_free_r>
 800c33c:	4631      	mov	r1, r6
 800c33e:	e7ef      	b.n	800c320 <_reclaim_reent+0x8c>
 800c340:	2500      	movs	r5, #0
 800c342:	e7ef      	b.n	800c324 <_reclaim_reent+0x90>
 800c344:	bd70      	pop	{r4, r5, r6, pc}
 800c346:	bf00      	nop
 800c348:	20000188 	.word	0x20000188

0800c34c <__malloc_lock>:
 800c34c:	4801      	ldr	r0, [pc, #4]	; (800c354 <__malloc_lock+0x8>)
 800c34e:	f7ff bf89 	b.w	800c264 <__retarget_lock_acquire_recursive>
 800c352:	bf00      	nop
 800c354:	20002aa0 	.word	0x20002aa0

0800c358 <__malloc_unlock>:
 800c358:	4801      	ldr	r0, [pc, #4]	; (800c360 <__malloc_unlock+0x8>)
 800c35a:	f7ff bf84 	b.w	800c266 <__retarget_lock_release_recursive>
 800c35e:	bf00      	nop
 800c360:	20002aa0 	.word	0x20002aa0

0800c364 <_free_r>:
 800c364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c366:	2900      	cmp	r1, #0
 800c368:	d048      	beq.n	800c3fc <_free_r+0x98>
 800c36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c36e:	9001      	str	r0, [sp, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f1a1 0404 	sub.w	r4, r1, #4
 800c376:	bfb8      	it	lt
 800c378:	18e4      	addlt	r4, r4, r3
 800c37a:	f7ff ffe7 	bl	800c34c <__malloc_lock>
 800c37e:	4a20      	ldr	r2, [pc, #128]	; (800c400 <_free_r+0x9c>)
 800c380:	9801      	ldr	r0, [sp, #4]
 800c382:	6813      	ldr	r3, [r2, #0]
 800c384:	4615      	mov	r5, r2
 800c386:	b933      	cbnz	r3, 800c396 <_free_r+0x32>
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	6014      	str	r4, [r2, #0]
 800c38c:	b003      	add	sp, #12
 800c38e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c392:	f7ff bfe1 	b.w	800c358 <__malloc_unlock>
 800c396:	42a3      	cmp	r3, r4
 800c398:	d90b      	bls.n	800c3b2 <_free_r+0x4e>
 800c39a:	6821      	ldr	r1, [r4, #0]
 800c39c:	1862      	adds	r2, r4, r1
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	bf04      	itt	eq
 800c3a2:	681a      	ldreq	r2, [r3, #0]
 800c3a4:	685b      	ldreq	r3, [r3, #4]
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	bf04      	itt	eq
 800c3aa:	1852      	addeq	r2, r2, r1
 800c3ac:	6022      	streq	r2, [r4, #0]
 800c3ae:	602c      	str	r4, [r5, #0]
 800c3b0:	e7ec      	b.n	800c38c <_free_r+0x28>
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	b10b      	cbz	r3, 800c3bc <_free_r+0x58>
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	d9fa      	bls.n	800c3b2 <_free_r+0x4e>
 800c3bc:	6811      	ldr	r1, [r2, #0]
 800c3be:	1855      	adds	r5, r2, r1
 800c3c0:	42a5      	cmp	r5, r4
 800c3c2:	d10b      	bne.n	800c3dc <_free_r+0x78>
 800c3c4:	6824      	ldr	r4, [r4, #0]
 800c3c6:	4421      	add	r1, r4
 800c3c8:	1854      	adds	r4, r2, r1
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	6011      	str	r1, [r2, #0]
 800c3ce:	d1dd      	bne.n	800c38c <_free_r+0x28>
 800c3d0:	681c      	ldr	r4, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	6053      	str	r3, [r2, #4]
 800c3d6:	4421      	add	r1, r4
 800c3d8:	6011      	str	r1, [r2, #0]
 800c3da:	e7d7      	b.n	800c38c <_free_r+0x28>
 800c3dc:	d902      	bls.n	800c3e4 <_free_r+0x80>
 800c3de:	230c      	movs	r3, #12
 800c3e0:	6003      	str	r3, [r0, #0]
 800c3e2:	e7d3      	b.n	800c38c <_free_r+0x28>
 800c3e4:	6825      	ldr	r5, [r4, #0]
 800c3e6:	1961      	adds	r1, r4, r5
 800c3e8:	428b      	cmp	r3, r1
 800c3ea:	bf04      	itt	eq
 800c3ec:	6819      	ldreq	r1, [r3, #0]
 800c3ee:	685b      	ldreq	r3, [r3, #4]
 800c3f0:	6063      	str	r3, [r4, #4]
 800c3f2:	bf04      	itt	eq
 800c3f4:	1949      	addeq	r1, r1, r5
 800c3f6:	6021      	streq	r1, [r4, #0]
 800c3f8:	6054      	str	r4, [r2, #4]
 800c3fa:	e7c7      	b.n	800c38c <_free_r+0x28>
 800c3fc:	b003      	add	sp, #12
 800c3fe:	bd30      	pop	{r4, r5, pc}
 800c400:	20001908 	.word	0x20001908

0800c404 <_init>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	bf00      	nop
 800c408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c40a:	bc08      	pop	{r3}
 800c40c:	469e      	mov	lr, r3
 800c40e:	4770      	bx	lr

0800c410 <_fini>:
 800c410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c412:	bf00      	nop
 800c414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c416:	bc08      	pop	{r3}
 800c418:	469e      	mov	lr, r3
 800c41a:	4770      	bx	lr
